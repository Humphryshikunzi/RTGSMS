
rtgsms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abc8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000714  0800ac88  0800ac88  0001ac88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b39c  0800b39c  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b39c  0800b39c  0001b39c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b3a4  0800b3a4  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b3a4  0800b3a4  0001b3a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b3a8  0800b3a8  0001b3a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800b3ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006b0  200001e8  0800b594  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000898  0800b594  00020898  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002633d  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005236  00000000  00000000  0004654d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00017b62  00000000  00000000  0004b783  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010c8  00000000  00000000  000632e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000030b8  00000000  00000000  000643b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017f40  00000000  00000000  00067468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024e30  00000000  00000000  0007f3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084b0b  00000000  00000000  000a41d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00128ce3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004904  00000000  00000000  00128d38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e8 	.word	0x200001e8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800ac70 	.word	0x0800ac70

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001ec 	.word	0x200001ec
 8000104:	0800ac70 	.word	0x0800ac70

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	1c10      	adds	r0, r2, #0
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	1c19      	adds	r1, r3, #0
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f88f 	bl	8001560 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 ffd9 	bl	8001404 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f881 	bl	8001560 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f877 	bl	8001560 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 fffb 	bl	800147c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 fff1 	bl	800147c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	1c08      	adds	r0, r1, #0
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f876 	bl	80005c8 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_d2uiz>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	2200      	movs	r2, #0
 80004ec:	4b0c      	ldr	r3, [pc, #48]	; (8000520 <__aeabi_d2uiz+0x38>)
 80004ee:	0004      	movs	r4, r0
 80004f0:	000d      	movs	r5, r1
 80004f2:	f7ff ffcf 	bl	8000494 <__aeabi_dcmpge>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	d104      	bne.n	8000504 <__aeabi_d2uiz+0x1c>
 80004fa:	0020      	movs	r0, r4
 80004fc:	0029      	movs	r1, r5
 80004fe:	f001 febb 	bl	8002278 <__aeabi_d2iz>
 8000502:	bd70      	pop	{r4, r5, r6, pc}
 8000504:	4b06      	ldr	r3, [pc, #24]	; (8000520 <__aeabi_d2uiz+0x38>)
 8000506:	2200      	movs	r2, #0
 8000508:	0020      	movs	r0, r4
 800050a:	0029      	movs	r1, r5
 800050c:	f001 fb04 	bl	8001b18 <__aeabi_dsub>
 8000510:	f001 feb2 	bl	8002278 <__aeabi_d2iz>
 8000514:	2380      	movs	r3, #128	; 0x80
 8000516:	061b      	lsls	r3, r3, #24
 8000518:	469c      	mov	ip, r3
 800051a:	4460      	add	r0, ip
 800051c:	e7f1      	b.n	8000502 <__aeabi_d2uiz+0x1a>
 800051e:	46c0      	nop			; (mov r8, r8)
 8000520:	41e00000 	.word	0x41e00000

08000524 <__aeabi_d2lz>:
 8000524:	b570      	push	{r4, r5, r6, lr}
 8000526:	0005      	movs	r5, r0
 8000528:	000c      	movs	r4, r1
 800052a:	2200      	movs	r2, #0
 800052c:	2300      	movs	r3, #0
 800052e:	0028      	movs	r0, r5
 8000530:	0021      	movs	r1, r4
 8000532:	f7ff ff91 	bl	8000458 <__aeabi_dcmplt>
 8000536:	2800      	cmp	r0, #0
 8000538:	d108      	bne.n	800054c <__aeabi_d2lz+0x28>
 800053a:	0028      	movs	r0, r5
 800053c:	0021      	movs	r1, r4
 800053e:	f000 f80f 	bl	8000560 <__aeabi_d2ulz>
 8000542:	0002      	movs	r2, r0
 8000544:	000b      	movs	r3, r1
 8000546:	0010      	movs	r0, r2
 8000548:	0019      	movs	r1, r3
 800054a:	bd70      	pop	{r4, r5, r6, pc}
 800054c:	2380      	movs	r3, #128	; 0x80
 800054e:	061b      	lsls	r3, r3, #24
 8000550:	18e1      	adds	r1, r4, r3
 8000552:	0028      	movs	r0, r5
 8000554:	f000 f804 	bl	8000560 <__aeabi_d2ulz>
 8000558:	2300      	movs	r3, #0
 800055a:	4242      	negs	r2, r0
 800055c:	418b      	sbcs	r3, r1
 800055e:	e7f2      	b.n	8000546 <__aeabi_d2lz+0x22>

08000560 <__aeabi_d2ulz>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	2200      	movs	r2, #0
 8000564:	4b0b      	ldr	r3, [pc, #44]	; (8000594 <__aeabi_d2ulz+0x34>)
 8000566:	000d      	movs	r5, r1
 8000568:	0004      	movs	r4, r0
 800056a:	f001 f869 	bl	8001640 <__aeabi_dmul>
 800056e:	f7ff ffbb 	bl	80004e8 <__aeabi_d2uiz>
 8000572:	0006      	movs	r6, r0
 8000574:	f001 fee6 	bl	8002344 <__aeabi_ui2d>
 8000578:	2200      	movs	r2, #0
 800057a:	4b07      	ldr	r3, [pc, #28]	; (8000598 <__aeabi_d2ulz+0x38>)
 800057c:	f001 f860 	bl	8001640 <__aeabi_dmul>
 8000580:	0002      	movs	r2, r0
 8000582:	000b      	movs	r3, r1
 8000584:	0020      	movs	r0, r4
 8000586:	0029      	movs	r1, r5
 8000588:	f001 fac6 	bl	8001b18 <__aeabi_dsub>
 800058c:	f7ff ffac 	bl	80004e8 <__aeabi_d2uiz>
 8000590:	0031      	movs	r1, r6
 8000592:	bd70      	pop	{r4, r5, r6, pc}
 8000594:	3df00000 	.word	0x3df00000
 8000598:	41f00000 	.word	0x41f00000

0800059c <__aeabi_l2d>:
 800059c:	b570      	push	{r4, r5, r6, lr}
 800059e:	0006      	movs	r6, r0
 80005a0:	0008      	movs	r0, r1
 80005a2:	f001 fe9f 	bl	80022e4 <__aeabi_i2d>
 80005a6:	2200      	movs	r2, #0
 80005a8:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <__aeabi_l2d+0x28>)
 80005aa:	f001 f849 	bl	8001640 <__aeabi_dmul>
 80005ae:	000d      	movs	r5, r1
 80005b0:	0004      	movs	r4, r0
 80005b2:	0030      	movs	r0, r6
 80005b4:	f001 fec6 	bl	8002344 <__aeabi_ui2d>
 80005b8:	002b      	movs	r3, r5
 80005ba:	0022      	movs	r2, r4
 80005bc:	f000 f8d0 	bl	8000760 <__aeabi_dadd>
 80005c0:	bd70      	pop	{r4, r5, r6, pc}
 80005c2:	46c0      	nop			; (mov r8, r8)
 80005c4:	41f00000 	.word	0x41f00000

080005c8 <__udivmoddi4>:
 80005c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ca:	4657      	mov	r7, sl
 80005cc:	464e      	mov	r6, r9
 80005ce:	4645      	mov	r5, r8
 80005d0:	46de      	mov	lr, fp
 80005d2:	b5e0      	push	{r5, r6, r7, lr}
 80005d4:	0004      	movs	r4, r0
 80005d6:	000d      	movs	r5, r1
 80005d8:	4692      	mov	sl, r2
 80005da:	4699      	mov	r9, r3
 80005dc:	b083      	sub	sp, #12
 80005de:	428b      	cmp	r3, r1
 80005e0:	d830      	bhi.n	8000644 <__udivmoddi4+0x7c>
 80005e2:	d02d      	beq.n	8000640 <__udivmoddi4+0x78>
 80005e4:	4649      	mov	r1, r9
 80005e6:	4650      	mov	r0, sl
 80005e8:	f001 ff78 	bl	80024dc <__clzdi2>
 80005ec:	0029      	movs	r1, r5
 80005ee:	0006      	movs	r6, r0
 80005f0:	0020      	movs	r0, r4
 80005f2:	f001 ff73 	bl	80024dc <__clzdi2>
 80005f6:	1a33      	subs	r3, r6, r0
 80005f8:	4698      	mov	r8, r3
 80005fa:	3b20      	subs	r3, #32
 80005fc:	469b      	mov	fp, r3
 80005fe:	d433      	bmi.n	8000668 <__udivmoddi4+0xa0>
 8000600:	465a      	mov	r2, fp
 8000602:	4653      	mov	r3, sl
 8000604:	4093      	lsls	r3, r2
 8000606:	4642      	mov	r2, r8
 8000608:	001f      	movs	r7, r3
 800060a:	4653      	mov	r3, sl
 800060c:	4093      	lsls	r3, r2
 800060e:	001e      	movs	r6, r3
 8000610:	42af      	cmp	r7, r5
 8000612:	d83a      	bhi.n	800068a <__udivmoddi4+0xc2>
 8000614:	42af      	cmp	r7, r5
 8000616:	d100      	bne.n	800061a <__udivmoddi4+0x52>
 8000618:	e078      	b.n	800070c <__udivmoddi4+0x144>
 800061a:	465b      	mov	r3, fp
 800061c:	1ba4      	subs	r4, r4, r6
 800061e:	41bd      	sbcs	r5, r7
 8000620:	2b00      	cmp	r3, #0
 8000622:	da00      	bge.n	8000626 <__udivmoddi4+0x5e>
 8000624:	e075      	b.n	8000712 <__udivmoddi4+0x14a>
 8000626:	2200      	movs	r2, #0
 8000628:	2300      	movs	r3, #0
 800062a:	9200      	str	r2, [sp, #0]
 800062c:	9301      	str	r3, [sp, #4]
 800062e:	2301      	movs	r3, #1
 8000630:	465a      	mov	r2, fp
 8000632:	4093      	lsls	r3, r2
 8000634:	9301      	str	r3, [sp, #4]
 8000636:	2301      	movs	r3, #1
 8000638:	4642      	mov	r2, r8
 800063a:	4093      	lsls	r3, r2
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	e028      	b.n	8000692 <__udivmoddi4+0xca>
 8000640:	4282      	cmp	r2, r0
 8000642:	d9cf      	bls.n	80005e4 <__udivmoddi4+0x1c>
 8000644:	2200      	movs	r2, #0
 8000646:	2300      	movs	r3, #0
 8000648:	9200      	str	r2, [sp, #0]
 800064a:	9301      	str	r3, [sp, #4]
 800064c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <__udivmoddi4+0x8e>
 8000652:	601c      	str	r4, [r3, #0]
 8000654:	605d      	str	r5, [r3, #4]
 8000656:	9800      	ldr	r0, [sp, #0]
 8000658:	9901      	ldr	r1, [sp, #4]
 800065a:	b003      	add	sp, #12
 800065c:	bcf0      	pop	{r4, r5, r6, r7}
 800065e:	46bb      	mov	fp, r7
 8000660:	46b2      	mov	sl, r6
 8000662:	46a9      	mov	r9, r5
 8000664:	46a0      	mov	r8, r4
 8000666:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000668:	4642      	mov	r2, r8
 800066a:	2320      	movs	r3, #32
 800066c:	1a9b      	subs	r3, r3, r2
 800066e:	4652      	mov	r2, sl
 8000670:	40da      	lsrs	r2, r3
 8000672:	4641      	mov	r1, r8
 8000674:	0013      	movs	r3, r2
 8000676:	464a      	mov	r2, r9
 8000678:	408a      	lsls	r2, r1
 800067a:	0017      	movs	r7, r2
 800067c:	4642      	mov	r2, r8
 800067e:	431f      	orrs	r7, r3
 8000680:	4653      	mov	r3, sl
 8000682:	4093      	lsls	r3, r2
 8000684:	001e      	movs	r6, r3
 8000686:	42af      	cmp	r7, r5
 8000688:	d9c4      	bls.n	8000614 <__udivmoddi4+0x4c>
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	9200      	str	r2, [sp, #0]
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	4643      	mov	r3, r8
 8000694:	2b00      	cmp	r3, #0
 8000696:	d0d9      	beq.n	800064c <__udivmoddi4+0x84>
 8000698:	07fb      	lsls	r3, r7, #31
 800069a:	0872      	lsrs	r2, r6, #1
 800069c:	431a      	orrs	r2, r3
 800069e:	4646      	mov	r6, r8
 80006a0:	087b      	lsrs	r3, r7, #1
 80006a2:	e00e      	b.n	80006c2 <__udivmoddi4+0xfa>
 80006a4:	42ab      	cmp	r3, r5
 80006a6:	d101      	bne.n	80006ac <__udivmoddi4+0xe4>
 80006a8:	42a2      	cmp	r2, r4
 80006aa:	d80c      	bhi.n	80006c6 <__udivmoddi4+0xfe>
 80006ac:	1aa4      	subs	r4, r4, r2
 80006ae:	419d      	sbcs	r5, r3
 80006b0:	2001      	movs	r0, #1
 80006b2:	1924      	adds	r4, r4, r4
 80006b4:	416d      	adcs	r5, r5
 80006b6:	2100      	movs	r1, #0
 80006b8:	3e01      	subs	r6, #1
 80006ba:	1824      	adds	r4, r4, r0
 80006bc:	414d      	adcs	r5, r1
 80006be:	2e00      	cmp	r6, #0
 80006c0:	d006      	beq.n	80006d0 <__udivmoddi4+0x108>
 80006c2:	42ab      	cmp	r3, r5
 80006c4:	d9ee      	bls.n	80006a4 <__udivmoddi4+0xdc>
 80006c6:	3e01      	subs	r6, #1
 80006c8:	1924      	adds	r4, r4, r4
 80006ca:	416d      	adcs	r5, r5
 80006cc:	2e00      	cmp	r6, #0
 80006ce:	d1f8      	bne.n	80006c2 <__udivmoddi4+0xfa>
 80006d0:	9800      	ldr	r0, [sp, #0]
 80006d2:	9901      	ldr	r1, [sp, #4]
 80006d4:	465b      	mov	r3, fp
 80006d6:	1900      	adds	r0, r0, r4
 80006d8:	4169      	adcs	r1, r5
 80006da:	2b00      	cmp	r3, #0
 80006dc:	db24      	blt.n	8000728 <__udivmoddi4+0x160>
 80006de:	002b      	movs	r3, r5
 80006e0:	465a      	mov	r2, fp
 80006e2:	4644      	mov	r4, r8
 80006e4:	40d3      	lsrs	r3, r2
 80006e6:	002a      	movs	r2, r5
 80006e8:	40e2      	lsrs	r2, r4
 80006ea:	001c      	movs	r4, r3
 80006ec:	465b      	mov	r3, fp
 80006ee:	0015      	movs	r5, r2
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	db2a      	blt.n	800074a <__udivmoddi4+0x182>
 80006f4:	0026      	movs	r6, r4
 80006f6:	409e      	lsls	r6, r3
 80006f8:	0033      	movs	r3, r6
 80006fa:	0026      	movs	r6, r4
 80006fc:	4647      	mov	r7, r8
 80006fe:	40be      	lsls	r6, r7
 8000700:	0032      	movs	r2, r6
 8000702:	1a80      	subs	r0, r0, r2
 8000704:	4199      	sbcs	r1, r3
 8000706:	9000      	str	r0, [sp, #0]
 8000708:	9101      	str	r1, [sp, #4]
 800070a:	e79f      	b.n	800064c <__udivmoddi4+0x84>
 800070c:	42a3      	cmp	r3, r4
 800070e:	d8bc      	bhi.n	800068a <__udivmoddi4+0xc2>
 8000710:	e783      	b.n	800061a <__udivmoddi4+0x52>
 8000712:	4642      	mov	r2, r8
 8000714:	2320      	movs	r3, #32
 8000716:	2100      	movs	r1, #0
 8000718:	1a9b      	subs	r3, r3, r2
 800071a:	2200      	movs	r2, #0
 800071c:	9100      	str	r1, [sp, #0]
 800071e:	9201      	str	r2, [sp, #4]
 8000720:	2201      	movs	r2, #1
 8000722:	40da      	lsrs	r2, r3
 8000724:	9201      	str	r2, [sp, #4]
 8000726:	e786      	b.n	8000636 <__udivmoddi4+0x6e>
 8000728:	4642      	mov	r2, r8
 800072a:	2320      	movs	r3, #32
 800072c:	1a9b      	subs	r3, r3, r2
 800072e:	002a      	movs	r2, r5
 8000730:	4646      	mov	r6, r8
 8000732:	409a      	lsls	r2, r3
 8000734:	0023      	movs	r3, r4
 8000736:	40f3      	lsrs	r3, r6
 8000738:	4644      	mov	r4, r8
 800073a:	4313      	orrs	r3, r2
 800073c:	002a      	movs	r2, r5
 800073e:	40e2      	lsrs	r2, r4
 8000740:	001c      	movs	r4, r3
 8000742:	465b      	mov	r3, fp
 8000744:	0015      	movs	r5, r2
 8000746:	2b00      	cmp	r3, #0
 8000748:	dad4      	bge.n	80006f4 <__udivmoddi4+0x12c>
 800074a:	4642      	mov	r2, r8
 800074c:	002f      	movs	r7, r5
 800074e:	2320      	movs	r3, #32
 8000750:	0026      	movs	r6, r4
 8000752:	4097      	lsls	r7, r2
 8000754:	1a9b      	subs	r3, r3, r2
 8000756:	40de      	lsrs	r6, r3
 8000758:	003b      	movs	r3, r7
 800075a:	4333      	orrs	r3, r6
 800075c:	e7cd      	b.n	80006fa <__udivmoddi4+0x132>
 800075e:	46c0      	nop			; (mov r8, r8)

08000760 <__aeabi_dadd>:
 8000760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000762:	464f      	mov	r7, r9
 8000764:	46d6      	mov	lr, sl
 8000766:	4646      	mov	r6, r8
 8000768:	000d      	movs	r5, r1
 800076a:	0001      	movs	r1, r0
 800076c:	0018      	movs	r0, r3
 800076e:	b5c0      	push	{r6, r7, lr}
 8000770:	0017      	movs	r7, r2
 8000772:	032b      	lsls	r3, r5, #12
 8000774:	0a5a      	lsrs	r2, r3, #9
 8000776:	0f4b      	lsrs	r3, r1, #29
 8000778:	4313      	orrs	r3, r2
 800077a:	00ca      	lsls	r2, r1, #3
 800077c:	4691      	mov	r9, r2
 800077e:	0302      	lsls	r2, r0, #12
 8000780:	006e      	lsls	r6, r5, #1
 8000782:	0041      	lsls	r1, r0, #1
 8000784:	0a52      	lsrs	r2, r2, #9
 8000786:	0fec      	lsrs	r4, r5, #31
 8000788:	0f7d      	lsrs	r5, r7, #29
 800078a:	4315      	orrs	r5, r2
 800078c:	0d76      	lsrs	r6, r6, #21
 800078e:	0d49      	lsrs	r1, r1, #21
 8000790:	0fc0      	lsrs	r0, r0, #31
 8000792:	4682      	mov	sl, r0
 8000794:	46ac      	mov	ip, r5
 8000796:	00ff      	lsls	r7, r7, #3
 8000798:	1a72      	subs	r2, r6, r1
 800079a:	4284      	cmp	r4, r0
 800079c:	d100      	bne.n	80007a0 <__aeabi_dadd+0x40>
 800079e:	e098      	b.n	80008d2 <__aeabi_dadd+0x172>
 80007a0:	2a00      	cmp	r2, #0
 80007a2:	dc00      	bgt.n	80007a6 <__aeabi_dadd+0x46>
 80007a4:	e081      	b.n	80008aa <__aeabi_dadd+0x14a>
 80007a6:	2900      	cmp	r1, #0
 80007a8:	d100      	bne.n	80007ac <__aeabi_dadd+0x4c>
 80007aa:	e0b6      	b.n	800091a <__aeabi_dadd+0x1ba>
 80007ac:	49c9      	ldr	r1, [pc, #804]	; (8000ad4 <__aeabi_dadd+0x374>)
 80007ae:	428e      	cmp	r6, r1
 80007b0:	d100      	bne.n	80007b4 <__aeabi_dadd+0x54>
 80007b2:	e172      	b.n	8000a9a <__aeabi_dadd+0x33a>
 80007b4:	2180      	movs	r1, #128	; 0x80
 80007b6:	0028      	movs	r0, r5
 80007b8:	0409      	lsls	r1, r1, #16
 80007ba:	4308      	orrs	r0, r1
 80007bc:	4684      	mov	ip, r0
 80007be:	2a38      	cmp	r2, #56	; 0x38
 80007c0:	dd00      	ble.n	80007c4 <__aeabi_dadd+0x64>
 80007c2:	e15e      	b.n	8000a82 <__aeabi_dadd+0x322>
 80007c4:	2a1f      	cmp	r2, #31
 80007c6:	dd00      	ble.n	80007ca <__aeabi_dadd+0x6a>
 80007c8:	e1ee      	b.n	8000ba8 <__aeabi_dadd+0x448>
 80007ca:	2020      	movs	r0, #32
 80007cc:	0039      	movs	r1, r7
 80007ce:	4665      	mov	r5, ip
 80007d0:	1a80      	subs	r0, r0, r2
 80007d2:	4087      	lsls	r7, r0
 80007d4:	40d1      	lsrs	r1, r2
 80007d6:	4085      	lsls	r5, r0
 80007d8:	430d      	orrs	r5, r1
 80007da:	0039      	movs	r1, r7
 80007dc:	1e4f      	subs	r7, r1, #1
 80007de:	41b9      	sbcs	r1, r7
 80007e0:	4667      	mov	r7, ip
 80007e2:	40d7      	lsrs	r7, r2
 80007e4:	4329      	orrs	r1, r5
 80007e6:	1bdb      	subs	r3, r3, r7
 80007e8:	464a      	mov	r2, r9
 80007ea:	1a55      	subs	r5, r2, r1
 80007ec:	45a9      	cmp	r9, r5
 80007ee:	4189      	sbcs	r1, r1
 80007f0:	4249      	negs	r1, r1
 80007f2:	1a5b      	subs	r3, r3, r1
 80007f4:	4698      	mov	r8, r3
 80007f6:	4643      	mov	r3, r8
 80007f8:	021b      	lsls	r3, r3, #8
 80007fa:	d400      	bmi.n	80007fe <__aeabi_dadd+0x9e>
 80007fc:	e0cc      	b.n	8000998 <__aeabi_dadd+0x238>
 80007fe:	4643      	mov	r3, r8
 8000800:	025b      	lsls	r3, r3, #9
 8000802:	0a5b      	lsrs	r3, r3, #9
 8000804:	4698      	mov	r8, r3
 8000806:	4643      	mov	r3, r8
 8000808:	2b00      	cmp	r3, #0
 800080a:	d100      	bne.n	800080e <__aeabi_dadd+0xae>
 800080c:	e12c      	b.n	8000a68 <__aeabi_dadd+0x308>
 800080e:	4640      	mov	r0, r8
 8000810:	f001 fe46 	bl	80024a0 <__clzsi2>
 8000814:	0001      	movs	r1, r0
 8000816:	3908      	subs	r1, #8
 8000818:	2220      	movs	r2, #32
 800081a:	0028      	movs	r0, r5
 800081c:	4643      	mov	r3, r8
 800081e:	1a52      	subs	r2, r2, r1
 8000820:	408b      	lsls	r3, r1
 8000822:	40d0      	lsrs	r0, r2
 8000824:	408d      	lsls	r5, r1
 8000826:	4303      	orrs	r3, r0
 8000828:	428e      	cmp	r6, r1
 800082a:	dd00      	ble.n	800082e <__aeabi_dadd+0xce>
 800082c:	e117      	b.n	8000a5e <__aeabi_dadd+0x2fe>
 800082e:	1b8e      	subs	r6, r1, r6
 8000830:	1c72      	adds	r2, r6, #1
 8000832:	2a1f      	cmp	r2, #31
 8000834:	dd00      	ble.n	8000838 <__aeabi_dadd+0xd8>
 8000836:	e1a7      	b.n	8000b88 <__aeabi_dadd+0x428>
 8000838:	2120      	movs	r1, #32
 800083a:	0018      	movs	r0, r3
 800083c:	002e      	movs	r6, r5
 800083e:	1a89      	subs	r1, r1, r2
 8000840:	408d      	lsls	r5, r1
 8000842:	4088      	lsls	r0, r1
 8000844:	40d6      	lsrs	r6, r2
 8000846:	40d3      	lsrs	r3, r2
 8000848:	1e69      	subs	r1, r5, #1
 800084a:	418d      	sbcs	r5, r1
 800084c:	4330      	orrs	r0, r6
 800084e:	4698      	mov	r8, r3
 8000850:	2600      	movs	r6, #0
 8000852:	4305      	orrs	r5, r0
 8000854:	076b      	lsls	r3, r5, #29
 8000856:	d009      	beq.n	800086c <__aeabi_dadd+0x10c>
 8000858:	230f      	movs	r3, #15
 800085a:	402b      	ands	r3, r5
 800085c:	2b04      	cmp	r3, #4
 800085e:	d005      	beq.n	800086c <__aeabi_dadd+0x10c>
 8000860:	1d2b      	adds	r3, r5, #4
 8000862:	42ab      	cmp	r3, r5
 8000864:	41ad      	sbcs	r5, r5
 8000866:	426d      	negs	r5, r5
 8000868:	44a8      	add	r8, r5
 800086a:	001d      	movs	r5, r3
 800086c:	4643      	mov	r3, r8
 800086e:	021b      	lsls	r3, r3, #8
 8000870:	d400      	bmi.n	8000874 <__aeabi_dadd+0x114>
 8000872:	e094      	b.n	800099e <__aeabi_dadd+0x23e>
 8000874:	4b97      	ldr	r3, [pc, #604]	; (8000ad4 <__aeabi_dadd+0x374>)
 8000876:	1c72      	adds	r2, r6, #1
 8000878:	429a      	cmp	r2, r3
 800087a:	d100      	bne.n	800087e <__aeabi_dadd+0x11e>
 800087c:	e09d      	b.n	80009ba <__aeabi_dadd+0x25a>
 800087e:	4641      	mov	r1, r8
 8000880:	4b95      	ldr	r3, [pc, #596]	; (8000ad8 <__aeabi_dadd+0x378>)
 8000882:	08ed      	lsrs	r5, r5, #3
 8000884:	4019      	ands	r1, r3
 8000886:	000b      	movs	r3, r1
 8000888:	0552      	lsls	r2, r2, #21
 800088a:	0749      	lsls	r1, r1, #29
 800088c:	025b      	lsls	r3, r3, #9
 800088e:	4329      	orrs	r1, r5
 8000890:	0b1b      	lsrs	r3, r3, #12
 8000892:	0d52      	lsrs	r2, r2, #21
 8000894:	0512      	lsls	r2, r2, #20
 8000896:	4313      	orrs	r3, r2
 8000898:	07e4      	lsls	r4, r4, #31
 800089a:	4323      	orrs	r3, r4
 800089c:	0008      	movs	r0, r1
 800089e:	0019      	movs	r1, r3
 80008a0:	bce0      	pop	{r5, r6, r7}
 80008a2:	46ba      	mov	sl, r7
 80008a4:	46b1      	mov	r9, r6
 80008a6:	46a8      	mov	r8, r5
 80008a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008aa:	2a00      	cmp	r2, #0
 80008ac:	d043      	beq.n	8000936 <__aeabi_dadd+0x1d6>
 80008ae:	1b8a      	subs	r2, r1, r6
 80008b0:	2e00      	cmp	r6, #0
 80008b2:	d000      	beq.n	80008b6 <__aeabi_dadd+0x156>
 80008b4:	e12a      	b.n	8000b0c <__aeabi_dadd+0x3ac>
 80008b6:	464c      	mov	r4, r9
 80008b8:	431c      	orrs	r4, r3
 80008ba:	d100      	bne.n	80008be <__aeabi_dadd+0x15e>
 80008bc:	e1d1      	b.n	8000c62 <__aeabi_dadd+0x502>
 80008be:	1e54      	subs	r4, r2, #1
 80008c0:	2a01      	cmp	r2, #1
 80008c2:	d100      	bne.n	80008c6 <__aeabi_dadd+0x166>
 80008c4:	e21f      	b.n	8000d06 <__aeabi_dadd+0x5a6>
 80008c6:	4d83      	ldr	r5, [pc, #524]	; (8000ad4 <__aeabi_dadd+0x374>)
 80008c8:	42aa      	cmp	r2, r5
 80008ca:	d100      	bne.n	80008ce <__aeabi_dadd+0x16e>
 80008cc:	e272      	b.n	8000db4 <__aeabi_dadd+0x654>
 80008ce:	0022      	movs	r2, r4
 80008d0:	e123      	b.n	8000b1a <__aeabi_dadd+0x3ba>
 80008d2:	2a00      	cmp	r2, #0
 80008d4:	dc00      	bgt.n	80008d8 <__aeabi_dadd+0x178>
 80008d6:	e098      	b.n	8000a0a <__aeabi_dadd+0x2aa>
 80008d8:	2900      	cmp	r1, #0
 80008da:	d042      	beq.n	8000962 <__aeabi_dadd+0x202>
 80008dc:	497d      	ldr	r1, [pc, #500]	; (8000ad4 <__aeabi_dadd+0x374>)
 80008de:	428e      	cmp	r6, r1
 80008e0:	d100      	bne.n	80008e4 <__aeabi_dadd+0x184>
 80008e2:	e0da      	b.n	8000a9a <__aeabi_dadd+0x33a>
 80008e4:	2180      	movs	r1, #128	; 0x80
 80008e6:	0028      	movs	r0, r5
 80008e8:	0409      	lsls	r1, r1, #16
 80008ea:	4308      	orrs	r0, r1
 80008ec:	4684      	mov	ip, r0
 80008ee:	2a38      	cmp	r2, #56	; 0x38
 80008f0:	dd00      	ble.n	80008f4 <__aeabi_dadd+0x194>
 80008f2:	e129      	b.n	8000b48 <__aeabi_dadd+0x3e8>
 80008f4:	2a1f      	cmp	r2, #31
 80008f6:	dc00      	bgt.n	80008fa <__aeabi_dadd+0x19a>
 80008f8:	e187      	b.n	8000c0a <__aeabi_dadd+0x4aa>
 80008fa:	0011      	movs	r1, r2
 80008fc:	4665      	mov	r5, ip
 80008fe:	3920      	subs	r1, #32
 8000900:	40cd      	lsrs	r5, r1
 8000902:	2a20      	cmp	r2, #32
 8000904:	d004      	beq.n	8000910 <__aeabi_dadd+0x1b0>
 8000906:	2040      	movs	r0, #64	; 0x40
 8000908:	4661      	mov	r1, ip
 800090a:	1a82      	subs	r2, r0, r2
 800090c:	4091      	lsls	r1, r2
 800090e:	430f      	orrs	r7, r1
 8000910:	0039      	movs	r1, r7
 8000912:	1e4f      	subs	r7, r1, #1
 8000914:	41b9      	sbcs	r1, r7
 8000916:	430d      	orrs	r5, r1
 8000918:	e11b      	b.n	8000b52 <__aeabi_dadd+0x3f2>
 800091a:	0029      	movs	r1, r5
 800091c:	4339      	orrs	r1, r7
 800091e:	d100      	bne.n	8000922 <__aeabi_dadd+0x1c2>
 8000920:	e0b5      	b.n	8000a8e <__aeabi_dadd+0x32e>
 8000922:	1e51      	subs	r1, r2, #1
 8000924:	2a01      	cmp	r2, #1
 8000926:	d100      	bne.n	800092a <__aeabi_dadd+0x1ca>
 8000928:	e1ab      	b.n	8000c82 <__aeabi_dadd+0x522>
 800092a:	486a      	ldr	r0, [pc, #424]	; (8000ad4 <__aeabi_dadd+0x374>)
 800092c:	4282      	cmp	r2, r0
 800092e:	d100      	bne.n	8000932 <__aeabi_dadd+0x1d2>
 8000930:	e1b2      	b.n	8000c98 <__aeabi_dadd+0x538>
 8000932:	000a      	movs	r2, r1
 8000934:	e743      	b.n	80007be <__aeabi_dadd+0x5e>
 8000936:	4969      	ldr	r1, [pc, #420]	; (8000adc <__aeabi_dadd+0x37c>)
 8000938:	1c75      	adds	r5, r6, #1
 800093a:	420d      	tst	r5, r1
 800093c:	d000      	beq.n	8000940 <__aeabi_dadd+0x1e0>
 800093e:	e0cf      	b.n	8000ae0 <__aeabi_dadd+0x380>
 8000940:	2e00      	cmp	r6, #0
 8000942:	d000      	beq.n	8000946 <__aeabi_dadd+0x1e6>
 8000944:	e193      	b.n	8000c6e <__aeabi_dadd+0x50e>
 8000946:	4649      	mov	r1, r9
 8000948:	4319      	orrs	r1, r3
 800094a:	d100      	bne.n	800094e <__aeabi_dadd+0x1ee>
 800094c:	e1d1      	b.n	8000cf2 <__aeabi_dadd+0x592>
 800094e:	4661      	mov	r1, ip
 8000950:	4339      	orrs	r1, r7
 8000952:	d000      	beq.n	8000956 <__aeabi_dadd+0x1f6>
 8000954:	e1e3      	b.n	8000d1e <__aeabi_dadd+0x5be>
 8000956:	4649      	mov	r1, r9
 8000958:	0758      	lsls	r0, r3, #29
 800095a:	08c9      	lsrs	r1, r1, #3
 800095c:	4301      	orrs	r1, r0
 800095e:	08db      	lsrs	r3, r3, #3
 8000960:	e026      	b.n	80009b0 <__aeabi_dadd+0x250>
 8000962:	0029      	movs	r1, r5
 8000964:	4339      	orrs	r1, r7
 8000966:	d100      	bne.n	800096a <__aeabi_dadd+0x20a>
 8000968:	e091      	b.n	8000a8e <__aeabi_dadd+0x32e>
 800096a:	1e51      	subs	r1, r2, #1
 800096c:	2a01      	cmp	r2, #1
 800096e:	d005      	beq.n	800097c <__aeabi_dadd+0x21c>
 8000970:	4858      	ldr	r0, [pc, #352]	; (8000ad4 <__aeabi_dadd+0x374>)
 8000972:	4282      	cmp	r2, r0
 8000974:	d100      	bne.n	8000978 <__aeabi_dadd+0x218>
 8000976:	e18f      	b.n	8000c98 <__aeabi_dadd+0x538>
 8000978:	000a      	movs	r2, r1
 800097a:	e7b8      	b.n	80008ee <__aeabi_dadd+0x18e>
 800097c:	003d      	movs	r5, r7
 800097e:	444d      	add	r5, r9
 8000980:	454d      	cmp	r5, r9
 8000982:	4189      	sbcs	r1, r1
 8000984:	4463      	add	r3, ip
 8000986:	4698      	mov	r8, r3
 8000988:	4249      	negs	r1, r1
 800098a:	4488      	add	r8, r1
 800098c:	4643      	mov	r3, r8
 800098e:	2602      	movs	r6, #2
 8000990:	021b      	lsls	r3, r3, #8
 8000992:	d500      	bpl.n	8000996 <__aeabi_dadd+0x236>
 8000994:	e0eb      	b.n	8000b6e <__aeabi_dadd+0x40e>
 8000996:	3e01      	subs	r6, #1
 8000998:	076b      	lsls	r3, r5, #29
 800099a:	d000      	beq.n	800099e <__aeabi_dadd+0x23e>
 800099c:	e75c      	b.n	8000858 <__aeabi_dadd+0xf8>
 800099e:	4643      	mov	r3, r8
 80009a0:	08e9      	lsrs	r1, r5, #3
 80009a2:	075a      	lsls	r2, r3, #29
 80009a4:	4311      	orrs	r1, r2
 80009a6:	0032      	movs	r2, r6
 80009a8:	08db      	lsrs	r3, r3, #3
 80009aa:	484a      	ldr	r0, [pc, #296]	; (8000ad4 <__aeabi_dadd+0x374>)
 80009ac:	4282      	cmp	r2, r0
 80009ae:	d021      	beq.n	80009f4 <__aeabi_dadd+0x294>
 80009b0:	031b      	lsls	r3, r3, #12
 80009b2:	0552      	lsls	r2, r2, #21
 80009b4:	0b1b      	lsrs	r3, r3, #12
 80009b6:	0d52      	lsrs	r2, r2, #21
 80009b8:	e76c      	b.n	8000894 <__aeabi_dadd+0x134>
 80009ba:	2300      	movs	r3, #0
 80009bc:	2100      	movs	r1, #0
 80009be:	e769      	b.n	8000894 <__aeabi_dadd+0x134>
 80009c0:	002a      	movs	r2, r5
 80009c2:	433a      	orrs	r2, r7
 80009c4:	d069      	beq.n	8000a9a <__aeabi_dadd+0x33a>
 80009c6:	464a      	mov	r2, r9
 80009c8:	0758      	lsls	r0, r3, #29
 80009ca:	08d1      	lsrs	r1, r2, #3
 80009cc:	08da      	lsrs	r2, r3, #3
 80009ce:	2380      	movs	r3, #128	; 0x80
 80009d0:	031b      	lsls	r3, r3, #12
 80009d2:	4308      	orrs	r0, r1
 80009d4:	421a      	tst	r2, r3
 80009d6:	d007      	beq.n	80009e8 <__aeabi_dadd+0x288>
 80009d8:	0029      	movs	r1, r5
 80009da:	08ed      	lsrs	r5, r5, #3
 80009dc:	421d      	tst	r5, r3
 80009de:	d103      	bne.n	80009e8 <__aeabi_dadd+0x288>
 80009e0:	002a      	movs	r2, r5
 80009e2:	08ff      	lsrs	r7, r7, #3
 80009e4:	0748      	lsls	r0, r1, #29
 80009e6:	4338      	orrs	r0, r7
 80009e8:	0f43      	lsrs	r3, r0, #29
 80009ea:	00c1      	lsls	r1, r0, #3
 80009ec:	075b      	lsls	r3, r3, #29
 80009ee:	08c9      	lsrs	r1, r1, #3
 80009f0:	4319      	orrs	r1, r3
 80009f2:	0013      	movs	r3, r2
 80009f4:	000a      	movs	r2, r1
 80009f6:	431a      	orrs	r2, r3
 80009f8:	d100      	bne.n	80009fc <__aeabi_dadd+0x29c>
 80009fa:	e213      	b.n	8000e24 <__aeabi_dadd+0x6c4>
 80009fc:	2280      	movs	r2, #128	; 0x80
 80009fe:	0312      	lsls	r2, r2, #12
 8000a00:	4313      	orrs	r3, r2
 8000a02:	031b      	lsls	r3, r3, #12
 8000a04:	4a33      	ldr	r2, [pc, #204]	; (8000ad4 <__aeabi_dadd+0x374>)
 8000a06:	0b1b      	lsrs	r3, r3, #12
 8000a08:	e744      	b.n	8000894 <__aeabi_dadd+0x134>
 8000a0a:	2a00      	cmp	r2, #0
 8000a0c:	d04b      	beq.n	8000aa6 <__aeabi_dadd+0x346>
 8000a0e:	1b8a      	subs	r2, r1, r6
 8000a10:	2e00      	cmp	r6, #0
 8000a12:	d100      	bne.n	8000a16 <__aeabi_dadd+0x2b6>
 8000a14:	e0e7      	b.n	8000be6 <__aeabi_dadd+0x486>
 8000a16:	482f      	ldr	r0, [pc, #188]	; (8000ad4 <__aeabi_dadd+0x374>)
 8000a18:	4281      	cmp	r1, r0
 8000a1a:	d100      	bne.n	8000a1e <__aeabi_dadd+0x2be>
 8000a1c:	e195      	b.n	8000d4a <__aeabi_dadd+0x5ea>
 8000a1e:	2080      	movs	r0, #128	; 0x80
 8000a20:	0400      	lsls	r0, r0, #16
 8000a22:	4303      	orrs	r3, r0
 8000a24:	2a38      	cmp	r2, #56	; 0x38
 8000a26:	dd00      	ble.n	8000a2a <__aeabi_dadd+0x2ca>
 8000a28:	e143      	b.n	8000cb2 <__aeabi_dadd+0x552>
 8000a2a:	2a1f      	cmp	r2, #31
 8000a2c:	dd00      	ble.n	8000a30 <__aeabi_dadd+0x2d0>
 8000a2e:	e1db      	b.n	8000de8 <__aeabi_dadd+0x688>
 8000a30:	2020      	movs	r0, #32
 8000a32:	001d      	movs	r5, r3
 8000a34:	464e      	mov	r6, r9
 8000a36:	1a80      	subs	r0, r0, r2
 8000a38:	4085      	lsls	r5, r0
 8000a3a:	40d6      	lsrs	r6, r2
 8000a3c:	4335      	orrs	r5, r6
 8000a3e:	464e      	mov	r6, r9
 8000a40:	4086      	lsls	r6, r0
 8000a42:	0030      	movs	r0, r6
 8000a44:	40d3      	lsrs	r3, r2
 8000a46:	1e46      	subs	r6, r0, #1
 8000a48:	41b0      	sbcs	r0, r6
 8000a4a:	449c      	add	ip, r3
 8000a4c:	4305      	orrs	r5, r0
 8000a4e:	19ed      	adds	r5, r5, r7
 8000a50:	42bd      	cmp	r5, r7
 8000a52:	419b      	sbcs	r3, r3
 8000a54:	425b      	negs	r3, r3
 8000a56:	4463      	add	r3, ip
 8000a58:	4698      	mov	r8, r3
 8000a5a:	000e      	movs	r6, r1
 8000a5c:	e07f      	b.n	8000b5e <__aeabi_dadd+0x3fe>
 8000a5e:	4a1e      	ldr	r2, [pc, #120]	; (8000ad8 <__aeabi_dadd+0x378>)
 8000a60:	1a76      	subs	r6, r6, r1
 8000a62:	4013      	ands	r3, r2
 8000a64:	4698      	mov	r8, r3
 8000a66:	e6f5      	b.n	8000854 <__aeabi_dadd+0xf4>
 8000a68:	0028      	movs	r0, r5
 8000a6a:	f001 fd19 	bl	80024a0 <__clzsi2>
 8000a6e:	0001      	movs	r1, r0
 8000a70:	3118      	adds	r1, #24
 8000a72:	291f      	cmp	r1, #31
 8000a74:	dc00      	bgt.n	8000a78 <__aeabi_dadd+0x318>
 8000a76:	e6cf      	b.n	8000818 <__aeabi_dadd+0xb8>
 8000a78:	002b      	movs	r3, r5
 8000a7a:	3808      	subs	r0, #8
 8000a7c:	4083      	lsls	r3, r0
 8000a7e:	2500      	movs	r5, #0
 8000a80:	e6d2      	b.n	8000828 <__aeabi_dadd+0xc8>
 8000a82:	4662      	mov	r2, ip
 8000a84:	433a      	orrs	r2, r7
 8000a86:	0011      	movs	r1, r2
 8000a88:	1e4f      	subs	r7, r1, #1
 8000a8a:	41b9      	sbcs	r1, r7
 8000a8c:	e6ac      	b.n	80007e8 <__aeabi_dadd+0x88>
 8000a8e:	4649      	mov	r1, r9
 8000a90:	0758      	lsls	r0, r3, #29
 8000a92:	08c9      	lsrs	r1, r1, #3
 8000a94:	4301      	orrs	r1, r0
 8000a96:	08db      	lsrs	r3, r3, #3
 8000a98:	e787      	b.n	80009aa <__aeabi_dadd+0x24a>
 8000a9a:	4649      	mov	r1, r9
 8000a9c:	075a      	lsls	r2, r3, #29
 8000a9e:	08c9      	lsrs	r1, r1, #3
 8000aa0:	4311      	orrs	r1, r2
 8000aa2:	08db      	lsrs	r3, r3, #3
 8000aa4:	e7a6      	b.n	80009f4 <__aeabi_dadd+0x294>
 8000aa6:	490d      	ldr	r1, [pc, #52]	; (8000adc <__aeabi_dadd+0x37c>)
 8000aa8:	1c70      	adds	r0, r6, #1
 8000aaa:	4208      	tst	r0, r1
 8000aac:	d000      	beq.n	8000ab0 <__aeabi_dadd+0x350>
 8000aae:	e0bb      	b.n	8000c28 <__aeabi_dadd+0x4c8>
 8000ab0:	2e00      	cmp	r6, #0
 8000ab2:	d000      	beq.n	8000ab6 <__aeabi_dadd+0x356>
 8000ab4:	e114      	b.n	8000ce0 <__aeabi_dadd+0x580>
 8000ab6:	4649      	mov	r1, r9
 8000ab8:	4319      	orrs	r1, r3
 8000aba:	d100      	bne.n	8000abe <__aeabi_dadd+0x35e>
 8000abc:	e175      	b.n	8000daa <__aeabi_dadd+0x64a>
 8000abe:	0029      	movs	r1, r5
 8000ac0:	4339      	orrs	r1, r7
 8000ac2:	d000      	beq.n	8000ac6 <__aeabi_dadd+0x366>
 8000ac4:	e17e      	b.n	8000dc4 <__aeabi_dadd+0x664>
 8000ac6:	4649      	mov	r1, r9
 8000ac8:	0758      	lsls	r0, r3, #29
 8000aca:	08c9      	lsrs	r1, r1, #3
 8000acc:	4301      	orrs	r1, r0
 8000ace:	08db      	lsrs	r3, r3, #3
 8000ad0:	e76e      	b.n	80009b0 <__aeabi_dadd+0x250>
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	000007ff 	.word	0x000007ff
 8000ad8:	ff7fffff 	.word	0xff7fffff
 8000adc:	000007fe 	.word	0x000007fe
 8000ae0:	4649      	mov	r1, r9
 8000ae2:	1bcd      	subs	r5, r1, r7
 8000ae4:	4661      	mov	r1, ip
 8000ae6:	1a58      	subs	r0, r3, r1
 8000ae8:	45a9      	cmp	r9, r5
 8000aea:	4189      	sbcs	r1, r1
 8000aec:	4249      	negs	r1, r1
 8000aee:	4688      	mov	r8, r1
 8000af0:	0001      	movs	r1, r0
 8000af2:	4640      	mov	r0, r8
 8000af4:	1a09      	subs	r1, r1, r0
 8000af6:	4688      	mov	r8, r1
 8000af8:	0209      	lsls	r1, r1, #8
 8000afa:	d500      	bpl.n	8000afe <__aeabi_dadd+0x39e>
 8000afc:	e0a6      	b.n	8000c4c <__aeabi_dadd+0x4ec>
 8000afe:	4641      	mov	r1, r8
 8000b00:	4329      	orrs	r1, r5
 8000b02:	d000      	beq.n	8000b06 <__aeabi_dadd+0x3a6>
 8000b04:	e67f      	b.n	8000806 <__aeabi_dadd+0xa6>
 8000b06:	2300      	movs	r3, #0
 8000b08:	2400      	movs	r4, #0
 8000b0a:	e751      	b.n	80009b0 <__aeabi_dadd+0x250>
 8000b0c:	4cc7      	ldr	r4, [pc, #796]	; (8000e2c <__aeabi_dadd+0x6cc>)
 8000b0e:	42a1      	cmp	r1, r4
 8000b10:	d100      	bne.n	8000b14 <__aeabi_dadd+0x3b4>
 8000b12:	e0c7      	b.n	8000ca4 <__aeabi_dadd+0x544>
 8000b14:	2480      	movs	r4, #128	; 0x80
 8000b16:	0424      	lsls	r4, r4, #16
 8000b18:	4323      	orrs	r3, r4
 8000b1a:	2a38      	cmp	r2, #56	; 0x38
 8000b1c:	dc54      	bgt.n	8000bc8 <__aeabi_dadd+0x468>
 8000b1e:	2a1f      	cmp	r2, #31
 8000b20:	dd00      	ble.n	8000b24 <__aeabi_dadd+0x3c4>
 8000b22:	e0cc      	b.n	8000cbe <__aeabi_dadd+0x55e>
 8000b24:	2420      	movs	r4, #32
 8000b26:	4648      	mov	r0, r9
 8000b28:	1aa4      	subs	r4, r4, r2
 8000b2a:	001d      	movs	r5, r3
 8000b2c:	464e      	mov	r6, r9
 8000b2e:	40a0      	lsls	r0, r4
 8000b30:	40d6      	lsrs	r6, r2
 8000b32:	40a5      	lsls	r5, r4
 8000b34:	0004      	movs	r4, r0
 8000b36:	40d3      	lsrs	r3, r2
 8000b38:	4662      	mov	r2, ip
 8000b3a:	4335      	orrs	r5, r6
 8000b3c:	1e66      	subs	r6, r4, #1
 8000b3e:	41b4      	sbcs	r4, r6
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	469c      	mov	ip, r3
 8000b44:	4325      	orrs	r5, r4
 8000b46:	e044      	b.n	8000bd2 <__aeabi_dadd+0x472>
 8000b48:	4662      	mov	r2, ip
 8000b4a:	433a      	orrs	r2, r7
 8000b4c:	0015      	movs	r5, r2
 8000b4e:	1e6f      	subs	r7, r5, #1
 8000b50:	41bd      	sbcs	r5, r7
 8000b52:	444d      	add	r5, r9
 8000b54:	454d      	cmp	r5, r9
 8000b56:	4189      	sbcs	r1, r1
 8000b58:	4249      	negs	r1, r1
 8000b5a:	4688      	mov	r8, r1
 8000b5c:	4498      	add	r8, r3
 8000b5e:	4643      	mov	r3, r8
 8000b60:	021b      	lsls	r3, r3, #8
 8000b62:	d400      	bmi.n	8000b66 <__aeabi_dadd+0x406>
 8000b64:	e718      	b.n	8000998 <__aeabi_dadd+0x238>
 8000b66:	4bb1      	ldr	r3, [pc, #708]	; (8000e2c <__aeabi_dadd+0x6cc>)
 8000b68:	3601      	adds	r6, #1
 8000b6a:	429e      	cmp	r6, r3
 8000b6c:	d049      	beq.n	8000c02 <__aeabi_dadd+0x4a2>
 8000b6e:	4642      	mov	r2, r8
 8000b70:	4baf      	ldr	r3, [pc, #700]	; (8000e30 <__aeabi_dadd+0x6d0>)
 8000b72:	2101      	movs	r1, #1
 8000b74:	401a      	ands	r2, r3
 8000b76:	0013      	movs	r3, r2
 8000b78:	086a      	lsrs	r2, r5, #1
 8000b7a:	400d      	ands	r5, r1
 8000b7c:	4315      	orrs	r5, r2
 8000b7e:	07d9      	lsls	r1, r3, #31
 8000b80:	085b      	lsrs	r3, r3, #1
 8000b82:	4698      	mov	r8, r3
 8000b84:	430d      	orrs	r5, r1
 8000b86:	e665      	b.n	8000854 <__aeabi_dadd+0xf4>
 8000b88:	0018      	movs	r0, r3
 8000b8a:	3e1f      	subs	r6, #31
 8000b8c:	40f0      	lsrs	r0, r6
 8000b8e:	2a20      	cmp	r2, #32
 8000b90:	d003      	beq.n	8000b9a <__aeabi_dadd+0x43a>
 8000b92:	2140      	movs	r1, #64	; 0x40
 8000b94:	1a8a      	subs	r2, r1, r2
 8000b96:	4093      	lsls	r3, r2
 8000b98:	431d      	orrs	r5, r3
 8000b9a:	1e69      	subs	r1, r5, #1
 8000b9c:	418d      	sbcs	r5, r1
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	2600      	movs	r6, #0
 8000ba2:	4698      	mov	r8, r3
 8000ba4:	4305      	orrs	r5, r0
 8000ba6:	e6f7      	b.n	8000998 <__aeabi_dadd+0x238>
 8000ba8:	0011      	movs	r1, r2
 8000baa:	4665      	mov	r5, ip
 8000bac:	3920      	subs	r1, #32
 8000bae:	40cd      	lsrs	r5, r1
 8000bb0:	2a20      	cmp	r2, #32
 8000bb2:	d004      	beq.n	8000bbe <__aeabi_dadd+0x45e>
 8000bb4:	2040      	movs	r0, #64	; 0x40
 8000bb6:	4661      	mov	r1, ip
 8000bb8:	1a82      	subs	r2, r0, r2
 8000bba:	4091      	lsls	r1, r2
 8000bbc:	430f      	orrs	r7, r1
 8000bbe:	0039      	movs	r1, r7
 8000bc0:	1e4f      	subs	r7, r1, #1
 8000bc2:	41b9      	sbcs	r1, r7
 8000bc4:	4329      	orrs	r1, r5
 8000bc6:	e60f      	b.n	80007e8 <__aeabi_dadd+0x88>
 8000bc8:	464a      	mov	r2, r9
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	001d      	movs	r5, r3
 8000bce:	1e6b      	subs	r3, r5, #1
 8000bd0:	419d      	sbcs	r5, r3
 8000bd2:	1b7d      	subs	r5, r7, r5
 8000bd4:	42af      	cmp	r7, r5
 8000bd6:	419b      	sbcs	r3, r3
 8000bd8:	4662      	mov	r2, ip
 8000bda:	425b      	negs	r3, r3
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	4698      	mov	r8, r3
 8000be0:	4654      	mov	r4, sl
 8000be2:	000e      	movs	r6, r1
 8000be4:	e607      	b.n	80007f6 <__aeabi_dadd+0x96>
 8000be6:	4648      	mov	r0, r9
 8000be8:	4318      	orrs	r0, r3
 8000bea:	d100      	bne.n	8000bee <__aeabi_dadd+0x48e>
 8000bec:	e0b3      	b.n	8000d56 <__aeabi_dadd+0x5f6>
 8000bee:	1e50      	subs	r0, r2, #1
 8000bf0:	2a01      	cmp	r2, #1
 8000bf2:	d100      	bne.n	8000bf6 <__aeabi_dadd+0x496>
 8000bf4:	e10d      	b.n	8000e12 <__aeabi_dadd+0x6b2>
 8000bf6:	4d8d      	ldr	r5, [pc, #564]	; (8000e2c <__aeabi_dadd+0x6cc>)
 8000bf8:	42aa      	cmp	r2, r5
 8000bfa:	d100      	bne.n	8000bfe <__aeabi_dadd+0x49e>
 8000bfc:	e0a5      	b.n	8000d4a <__aeabi_dadd+0x5ea>
 8000bfe:	0002      	movs	r2, r0
 8000c00:	e710      	b.n	8000a24 <__aeabi_dadd+0x2c4>
 8000c02:	0032      	movs	r2, r6
 8000c04:	2300      	movs	r3, #0
 8000c06:	2100      	movs	r1, #0
 8000c08:	e644      	b.n	8000894 <__aeabi_dadd+0x134>
 8000c0a:	2120      	movs	r1, #32
 8000c0c:	0038      	movs	r0, r7
 8000c0e:	1a89      	subs	r1, r1, r2
 8000c10:	4665      	mov	r5, ip
 8000c12:	408f      	lsls	r7, r1
 8000c14:	408d      	lsls	r5, r1
 8000c16:	40d0      	lsrs	r0, r2
 8000c18:	1e79      	subs	r1, r7, #1
 8000c1a:	418f      	sbcs	r7, r1
 8000c1c:	4305      	orrs	r5, r0
 8000c1e:	433d      	orrs	r5, r7
 8000c20:	4667      	mov	r7, ip
 8000c22:	40d7      	lsrs	r7, r2
 8000c24:	19db      	adds	r3, r3, r7
 8000c26:	e794      	b.n	8000b52 <__aeabi_dadd+0x3f2>
 8000c28:	4a80      	ldr	r2, [pc, #512]	; (8000e2c <__aeabi_dadd+0x6cc>)
 8000c2a:	4290      	cmp	r0, r2
 8000c2c:	d100      	bne.n	8000c30 <__aeabi_dadd+0x4d0>
 8000c2e:	e0ec      	b.n	8000e0a <__aeabi_dadd+0x6aa>
 8000c30:	0039      	movs	r1, r7
 8000c32:	4449      	add	r1, r9
 8000c34:	4549      	cmp	r1, r9
 8000c36:	4192      	sbcs	r2, r2
 8000c38:	4463      	add	r3, ip
 8000c3a:	4252      	negs	r2, r2
 8000c3c:	189b      	adds	r3, r3, r2
 8000c3e:	07dd      	lsls	r5, r3, #31
 8000c40:	0849      	lsrs	r1, r1, #1
 8000c42:	085b      	lsrs	r3, r3, #1
 8000c44:	4698      	mov	r8, r3
 8000c46:	0006      	movs	r6, r0
 8000c48:	430d      	orrs	r5, r1
 8000c4a:	e6a5      	b.n	8000998 <__aeabi_dadd+0x238>
 8000c4c:	464a      	mov	r2, r9
 8000c4e:	1abd      	subs	r5, r7, r2
 8000c50:	42af      	cmp	r7, r5
 8000c52:	4189      	sbcs	r1, r1
 8000c54:	4662      	mov	r2, ip
 8000c56:	4249      	negs	r1, r1
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	1a5b      	subs	r3, r3, r1
 8000c5c:	4698      	mov	r8, r3
 8000c5e:	4654      	mov	r4, sl
 8000c60:	e5d1      	b.n	8000806 <__aeabi_dadd+0xa6>
 8000c62:	076c      	lsls	r4, r5, #29
 8000c64:	08f9      	lsrs	r1, r7, #3
 8000c66:	4321      	orrs	r1, r4
 8000c68:	08eb      	lsrs	r3, r5, #3
 8000c6a:	0004      	movs	r4, r0
 8000c6c:	e69d      	b.n	80009aa <__aeabi_dadd+0x24a>
 8000c6e:	464a      	mov	r2, r9
 8000c70:	431a      	orrs	r2, r3
 8000c72:	d175      	bne.n	8000d60 <__aeabi_dadd+0x600>
 8000c74:	4661      	mov	r1, ip
 8000c76:	4339      	orrs	r1, r7
 8000c78:	d114      	bne.n	8000ca4 <__aeabi_dadd+0x544>
 8000c7a:	2380      	movs	r3, #128	; 0x80
 8000c7c:	2400      	movs	r4, #0
 8000c7e:	031b      	lsls	r3, r3, #12
 8000c80:	e6bc      	b.n	80009fc <__aeabi_dadd+0x29c>
 8000c82:	464a      	mov	r2, r9
 8000c84:	1bd5      	subs	r5, r2, r7
 8000c86:	45a9      	cmp	r9, r5
 8000c88:	4189      	sbcs	r1, r1
 8000c8a:	4662      	mov	r2, ip
 8000c8c:	4249      	negs	r1, r1
 8000c8e:	1a9b      	subs	r3, r3, r2
 8000c90:	1a5b      	subs	r3, r3, r1
 8000c92:	4698      	mov	r8, r3
 8000c94:	2601      	movs	r6, #1
 8000c96:	e5ae      	b.n	80007f6 <__aeabi_dadd+0x96>
 8000c98:	464a      	mov	r2, r9
 8000c9a:	08d1      	lsrs	r1, r2, #3
 8000c9c:	075a      	lsls	r2, r3, #29
 8000c9e:	4311      	orrs	r1, r2
 8000ca0:	08db      	lsrs	r3, r3, #3
 8000ca2:	e6a7      	b.n	80009f4 <__aeabi_dadd+0x294>
 8000ca4:	4663      	mov	r3, ip
 8000ca6:	08f9      	lsrs	r1, r7, #3
 8000ca8:	075a      	lsls	r2, r3, #29
 8000caa:	4654      	mov	r4, sl
 8000cac:	4311      	orrs	r1, r2
 8000cae:	08db      	lsrs	r3, r3, #3
 8000cb0:	e6a0      	b.n	80009f4 <__aeabi_dadd+0x294>
 8000cb2:	464a      	mov	r2, r9
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	001d      	movs	r5, r3
 8000cb8:	1e6b      	subs	r3, r5, #1
 8000cba:	419d      	sbcs	r5, r3
 8000cbc:	e6c7      	b.n	8000a4e <__aeabi_dadd+0x2ee>
 8000cbe:	0014      	movs	r4, r2
 8000cc0:	001e      	movs	r6, r3
 8000cc2:	3c20      	subs	r4, #32
 8000cc4:	40e6      	lsrs	r6, r4
 8000cc6:	2a20      	cmp	r2, #32
 8000cc8:	d005      	beq.n	8000cd6 <__aeabi_dadd+0x576>
 8000cca:	2440      	movs	r4, #64	; 0x40
 8000ccc:	1aa2      	subs	r2, r4, r2
 8000cce:	4093      	lsls	r3, r2
 8000cd0:	464a      	mov	r2, r9
 8000cd2:	431a      	orrs	r2, r3
 8000cd4:	4691      	mov	r9, r2
 8000cd6:	464d      	mov	r5, r9
 8000cd8:	1e6b      	subs	r3, r5, #1
 8000cda:	419d      	sbcs	r5, r3
 8000cdc:	4335      	orrs	r5, r6
 8000cde:	e778      	b.n	8000bd2 <__aeabi_dadd+0x472>
 8000ce0:	464a      	mov	r2, r9
 8000ce2:	431a      	orrs	r2, r3
 8000ce4:	d000      	beq.n	8000ce8 <__aeabi_dadd+0x588>
 8000ce6:	e66b      	b.n	80009c0 <__aeabi_dadd+0x260>
 8000ce8:	076b      	lsls	r3, r5, #29
 8000cea:	08f9      	lsrs	r1, r7, #3
 8000cec:	4319      	orrs	r1, r3
 8000cee:	08eb      	lsrs	r3, r5, #3
 8000cf0:	e680      	b.n	80009f4 <__aeabi_dadd+0x294>
 8000cf2:	4661      	mov	r1, ip
 8000cf4:	4339      	orrs	r1, r7
 8000cf6:	d054      	beq.n	8000da2 <__aeabi_dadd+0x642>
 8000cf8:	4663      	mov	r3, ip
 8000cfa:	08f9      	lsrs	r1, r7, #3
 8000cfc:	075c      	lsls	r4, r3, #29
 8000cfe:	4321      	orrs	r1, r4
 8000d00:	08db      	lsrs	r3, r3, #3
 8000d02:	0004      	movs	r4, r0
 8000d04:	e654      	b.n	80009b0 <__aeabi_dadd+0x250>
 8000d06:	464a      	mov	r2, r9
 8000d08:	1abd      	subs	r5, r7, r2
 8000d0a:	42af      	cmp	r7, r5
 8000d0c:	4189      	sbcs	r1, r1
 8000d0e:	4662      	mov	r2, ip
 8000d10:	4249      	negs	r1, r1
 8000d12:	1ad3      	subs	r3, r2, r3
 8000d14:	1a5b      	subs	r3, r3, r1
 8000d16:	4698      	mov	r8, r3
 8000d18:	0004      	movs	r4, r0
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	e56b      	b.n	80007f6 <__aeabi_dadd+0x96>
 8000d1e:	464a      	mov	r2, r9
 8000d20:	1bd5      	subs	r5, r2, r7
 8000d22:	45a9      	cmp	r9, r5
 8000d24:	4189      	sbcs	r1, r1
 8000d26:	4662      	mov	r2, ip
 8000d28:	4249      	negs	r1, r1
 8000d2a:	1a9a      	subs	r2, r3, r2
 8000d2c:	1a52      	subs	r2, r2, r1
 8000d2e:	4690      	mov	r8, r2
 8000d30:	0212      	lsls	r2, r2, #8
 8000d32:	d532      	bpl.n	8000d9a <__aeabi_dadd+0x63a>
 8000d34:	464a      	mov	r2, r9
 8000d36:	1abd      	subs	r5, r7, r2
 8000d38:	42af      	cmp	r7, r5
 8000d3a:	4189      	sbcs	r1, r1
 8000d3c:	4662      	mov	r2, ip
 8000d3e:	4249      	negs	r1, r1
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	1a5b      	subs	r3, r3, r1
 8000d44:	4698      	mov	r8, r3
 8000d46:	0004      	movs	r4, r0
 8000d48:	e584      	b.n	8000854 <__aeabi_dadd+0xf4>
 8000d4a:	4663      	mov	r3, ip
 8000d4c:	08f9      	lsrs	r1, r7, #3
 8000d4e:	075a      	lsls	r2, r3, #29
 8000d50:	4311      	orrs	r1, r2
 8000d52:	08db      	lsrs	r3, r3, #3
 8000d54:	e64e      	b.n	80009f4 <__aeabi_dadd+0x294>
 8000d56:	08f9      	lsrs	r1, r7, #3
 8000d58:	0768      	lsls	r0, r5, #29
 8000d5a:	4301      	orrs	r1, r0
 8000d5c:	08eb      	lsrs	r3, r5, #3
 8000d5e:	e624      	b.n	80009aa <__aeabi_dadd+0x24a>
 8000d60:	4662      	mov	r2, ip
 8000d62:	433a      	orrs	r2, r7
 8000d64:	d100      	bne.n	8000d68 <__aeabi_dadd+0x608>
 8000d66:	e698      	b.n	8000a9a <__aeabi_dadd+0x33a>
 8000d68:	464a      	mov	r2, r9
 8000d6a:	08d1      	lsrs	r1, r2, #3
 8000d6c:	075a      	lsls	r2, r3, #29
 8000d6e:	4311      	orrs	r1, r2
 8000d70:	08da      	lsrs	r2, r3, #3
 8000d72:	2380      	movs	r3, #128	; 0x80
 8000d74:	031b      	lsls	r3, r3, #12
 8000d76:	421a      	tst	r2, r3
 8000d78:	d008      	beq.n	8000d8c <__aeabi_dadd+0x62c>
 8000d7a:	4660      	mov	r0, ip
 8000d7c:	08c5      	lsrs	r5, r0, #3
 8000d7e:	421d      	tst	r5, r3
 8000d80:	d104      	bne.n	8000d8c <__aeabi_dadd+0x62c>
 8000d82:	4654      	mov	r4, sl
 8000d84:	002a      	movs	r2, r5
 8000d86:	08f9      	lsrs	r1, r7, #3
 8000d88:	0743      	lsls	r3, r0, #29
 8000d8a:	4319      	orrs	r1, r3
 8000d8c:	0f4b      	lsrs	r3, r1, #29
 8000d8e:	00c9      	lsls	r1, r1, #3
 8000d90:	075b      	lsls	r3, r3, #29
 8000d92:	08c9      	lsrs	r1, r1, #3
 8000d94:	4319      	orrs	r1, r3
 8000d96:	0013      	movs	r3, r2
 8000d98:	e62c      	b.n	80009f4 <__aeabi_dadd+0x294>
 8000d9a:	4641      	mov	r1, r8
 8000d9c:	4329      	orrs	r1, r5
 8000d9e:	d000      	beq.n	8000da2 <__aeabi_dadd+0x642>
 8000da0:	e5fa      	b.n	8000998 <__aeabi_dadd+0x238>
 8000da2:	2300      	movs	r3, #0
 8000da4:	000a      	movs	r2, r1
 8000da6:	2400      	movs	r4, #0
 8000da8:	e602      	b.n	80009b0 <__aeabi_dadd+0x250>
 8000daa:	076b      	lsls	r3, r5, #29
 8000dac:	08f9      	lsrs	r1, r7, #3
 8000dae:	4319      	orrs	r1, r3
 8000db0:	08eb      	lsrs	r3, r5, #3
 8000db2:	e5fd      	b.n	80009b0 <__aeabi_dadd+0x250>
 8000db4:	4663      	mov	r3, ip
 8000db6:	08f9      	lsrs	r1, r7, #3
 8000db8:	075b      	lsls	r3, r3, #29
 8000dba:	4319      	orrs	r1, r3
 8000dbc:	4663      	mov	r3, ip
 8000dbe:	0004      	movs	r4, r0
 8000dc0:	08db      	lsrs	r3, r3, #3
 8000dc2:	e617      	b.n	80009f4 <__aeabi_dadd+0x294>
 8000dc4:	003d      	movs	r5, r7
 8000dc6:	444d      	add	r5, r9
 8000dc8:	4463      	add	r3, ip
 8000dca:	454d      	cmp	r5, r9
 8000dcc:	4189      	sbcs	r1, r1
 8000dce:	4698      	mov	r8, r3
 8000dd0:	4249      	negs	r1, r1
 8000dd2:	4488      	add	r8, r1
 8000dd4:	4643      	mov	r3, r8
 8000dd6:	021b      	lsls	r3, r3, #8
 8000dd8:	d400      	bmi.n	8000ddc <__aeabi_dadd+0x67c>
 8000dda:	e5dd      	b.n	8000998 <__aeabi_dadd+0x238>
 8000ddc:	4642      	mov	r2, r8
 8000dde:	4b14      	ldr	r3, [pc, #80]	; (8000e30 <__aeabi_dadd+0x6d0>)
 8000de0:	2601      	movs	r6, #1
 8000de2:	401a      	ands	r2, r3
 8000de4:	4690      	mov	r8, r2
 8000de6:	e5d7      	b.n	8000998 <__aeabi_dadd+0x238>
 8000de8:	0010      	movs	r0, r2
 8000dea:	001e      	movs	r6, r3
 8000dec:	3820      	subs	r0, #32
 8000dee:	40c6      	lsrs	r6, r0
 8000df0:	2a20      	cmp	r2, #32
 8000df2:	d005      	beq.n	8000e00 <__aeabi_dadd+0x6a0>
 8000df4:	2040      	movs	r0, #64	; 0x40
 8000df6:	1a82      	subs	r2, r0, r2
 8000df8:	4093      	lsls	r3, r2
 8000dfa:	464a      	mov	r2, r9
 8000dfc:	431a      	orrs	r2, r3
 8000dfe:	4691      	mov	r9, r2
 8000e00:	464d      	mov	r5, r9
 8000e02:	1e6b      	subs	r3, r5, #1
 8000e04:	419d      	sbcs	r5, r3
 8000e06:	4335      	orrs	r5, r6
 8000e08:	e621      	b.n	8000a4e <__aeabi_dadd+0x2ee>
 8000e0a:	0002      	movs	r2, r0
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	2100      	movs	r1, #0
 8000e10:	e540      	b.n	8000894 <__aeabi_dadd+0x134>
 8000e12:	464a      	mov	r2, r9
 8000e14:	19d5      	adds	r5, r2, r7
 8000e16:	42bd      	cmp	r5, r7
 8000e18:	4189      	sbcs	r1, r1
 8000e1a:	4463      	add	r3, ip
 8000e1c:	4698      	mov	r8, r3
 8000e1e:	4249      	negs	r1, r1
 8000e20:	4488      	add	r8, r1
 8000e22:	e5b3      	b.n	800098c <__aeabi_dadd+0x22c>
 8000e24:	2100      	movs	r1, #0
 8000e26:	4a01      	ldr	r2, [pc, #4]	; (8000e2c <__aeabi_dadd+0x6cc>)
 8000e28:	000b      	movs	r3, r1
 8000e2a:	e533      	b.n	8000894 <__aeabi_dadd+0x134>
 8000e2c:	000007ff 	.word	0x000007ff
 8000e30:	ff7fffff 	.word	0xff7fffff

08000e34 <__aeabi_ddiv>:
 8000e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e36:	4657      	mov	r7, sl
 8000e38:	464e      	mov	r6, r9
 8000e3a:	4645      	mov	r5, r8
 8000e3c:	46de      	mov	lr, fp
 8000e3e:	b5e0      	push	{r5, r6, r7, lr}
 8000e40:	4681      	mov	r9, r0
 8000e42:	0005      	movs	r5, r0
 8000e44:	030c      	lsls	r4, r1, #12
 8000e46:	0048      	lsls	r0, r1, #1
 8000e48:	4692      	mov	sl, r2
 8000e4a:	001f      	movs	r7, r3
 8000e4c:	b085      	sub	sp, #20
 8000e4e:	0b24      	lsrs	r4, r4, #12
 8000e50:	0d40      	lsrs	r0, r0, #21
 8000e52:	0fce      	lsrs	r6, r1, #31
 8000e54:	2800      	cmp	r0, #0
 8000e56:	d059      	beq.n	8000f0c <__aeabi_ddiv+0xd8>
 8000e58:	4b87      	ldr	r3, [pc, #540]	; (8001078 <__aeabi_ddiv+0x244>)
 8000e5a:	4298      	cmp	r0, r3
 8000e5c:	d100      	bne.n	8000e60 <__aeabi_ddiv+0x2c>
 8000e5e:	e098      	b.n	8000f92 <__aeabi_ddiv+0x15e>
 8000e60:	0f6b      	lsrs	r3, r5, #29
 8000e62:	00e4      	lsls	r4, r4, #3
 8000e64:	431c      	orrs	r4, r3
 8000e66:	2380      	movs	r3, #128	; 0x80
 8000e68:	041b      	lsls	r3, r3, #16
 8000e6a:	4323      	orrs	r3, r4
 8000e6c:	4698      	mov	r8, r3
 8000e6e:	4b83      	ldr	r3, [pc, #524]	; (800107c <__aeabi_ddiv+0x248>)
 8000e70:	00ed      	lsls	r5, r5, #3
 8000e72:	469b      	mov	fp, r3
 8000e74:	2300      	movs	r3, #0
 8000e76:	4699      	mov	r9, r3
 8000e78:	4483      	add	fp, r0
 8000e7a:	9300      	str	r3, [sp, #0]
 8000e7c:	033c      	lsls	r4, r7, #12
 8000e7e:	007b      	lsls	r3, r7, #1
 8000e80:	4650      	mov	r0, sl
 8000e82:	0b24      	lsrs	r4, r4, #12
 8000e84:	0d5b      	lsrs	r3, r3, #21
 8000e86:	0fff      	lsrs	r7, r7, #31
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d067      	beq.n	8000f5c <__aeabi_ddiv+0x128>
 8000e8c:	4a7a      	ldr	r2, [pc, #488]	; (8001078 <__aeabi_ddiv+0x244>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d018      	beq.n	8000ec4 <__aeabi_ddiv+0x90>
 8000e92:	497a      	ldr	r1, [pc, #488]	; (800107c <__aeabi_ddiv+0x248>)
 8000e94:	0f42      	lsrs	r2, r0, #29
 8000e96:	468c      	mov	ip, r1
 8000e98:	00e4      	lsls	r4, r4, #3
 8000e9a:	4659      	mov	r1, fp
 8000e9c:	4314      	orrs	r4, r2
 8000e9e:	2280      	movs	r2, #128	; 0x80
 8000ea0:	4463      	add	r3, ip
 8000ea2:	0412      	lsls	r2, r2, #16
 8000ea4:	1acb      	subs	r3, r1, r3
 8000ea6:	4314      	orrs	r4, r2
 8000ea8:	469b      	mov	fp, r3
 8000eaa:	00c2      	lsls	r2, r0, #3
 8000eac:	2000      	movs	r0, #0
 8000eae:	0033      	movs	r3, r6
 8000eb0:	407b      	eors	r3, r7
 8000eb2:	469a      	mov	sl, r3
 8000eb4:	464b      	mov	r3, r9
 8000eb6:	2b0f      	cmp	r3, #15
 8000eb8:	d900      	bls.n	8000ebc <__aeabi_ddiv+0x88>
 8000eba:	e0ef      	b.n	800109c <__aeabi_ddiv+0x268>
 8000ebc:	4970      	ldr	r1, [pc, #448]	; (8001080 <__aeabi_ddiv+0x24c>)
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	58cb      	ldr	r3, [r1, r3]
 8000ec2:	469f      	mov	pc, r3
 8000ec4:	4b6f      	ldr	r3, [pc, #444]	; (8001084 <__aeabi_ddiv+0x250>)
 8000ec6:	4652      	mov	r2, sl
 8000ec8:	469c      	mov	ip, r3
 8000eca:	4322      	orrs	r2, r4
 8000ecc:	44e3      	add	fp, ip
 8000ece:	2a00      	cmp	r2, #0
 8000ed0:	d000      	beq.n	8000ed4 <__aeabi_ddiv+0xa0>
 8000ed2:	e095      	b.n	8001000 <__aeabi_ddiv+0x1cc>
 8000ed4:	4649      	mov	r1, r9
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	4319      	orrs	r1, r3
 8000eda:	4689      	mov	r9, r1
 8000edc:	2400      	movs	r4, #0
 8000ede:	2002      	movs	r0, #2
 8000ee0:	e7e5      	b.n	8000eae <__aeabi_ddiv+0x7a>
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	2400      	movs	r4, #0
 8000ee6:	2500      	movs	r5, #0
 8000ee8:	4652      	mov	r2, sl
 8000eea:	051b      	lsls	r3, r3, #20
 8000eec:	4323      	orrs	r3, r4
 8000eee:	07d2      	lsls	r2, r2, #31
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	0028      	movs	r0, r5
 8000ef4:	0019      	movs	r1, r3
 8000ef6:	b005      	add	sp, #20
 8000ef8:	bcf0      	pop	{r4, r5, r6, r7}
 8000efa:	46bb      	mov	fp, r7
 8000efc:	46b2      	mov	sl, r6
 8000efe:	46a9      	mov	r9, r5
 8000f00:	46a0      	mov	r8, r4
 8000f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f04:	2400      	movs	r4, #0
 8000f06:	2500      	movs	r5, #0
 8000f08:	4b5b      	ldr	r3, [pc, #364]	; (8001078 <__aeabi_ddiv+0x244>)
 8000f0a:	e7ed      	b.n	8000ee8 <__aeabi_ddiv+0xb4>
 8000f0c:	464b      	mov	r3, r9
 8000f0e:	4323      	orrs	r3, r4
 8000f10:	4698      	mov	r8, r3
 8000f12:	d100      	bne.n	8000f16 <__aeabi_ddiv+0xe2>
 8000f14:	e089      	b.n	800102a <__aeabi_ddiv+0x1f6>
 8000f16:	2c00      	cmp	r4, #0
 8000f18:	d100      	bne.n	8000f1c <__aeabi_ddiv+0xe8>
 8000f1a:	e1e0      	b.n	80012de <__aeabi_ddiv+0x4aa>
 8000f1c:	0020      	movs	r0, r4
 8000f1e:	f001 fabf 	bl	80024a0 <__clzsi2>
 8000f22:	0001      	movs	r1, r0
 8000f24:	0002      	movs	r2, r0
 8000f26:	390b      	subs	r1, #11
 8000f28:	231d      	movs	r3, #29
 8000f2a:	1a5b      	subs	r3, r3, r1
 8000f2c:	4649      	mov	r1, r9
 8000f2e:	0010      	movs	r0, r2
 8000f30:	40d9      	lsrs	r1, r3
 8000f32:	3808      	subs	r0, #8
 8000f34:	4084      	lsls	r4, r0
 8000f36:	000b      	movs	r3, r1
 8000f38:	464d      	mov	r5, r9
 8000f3a:	4323      	orrs	r3, r4
 8000f3c:	4698      	mov	r8, r3
 8000f3e:	4085      	lsls	r5, r0
 8000f40:	4851      	ldr	r0, [pc, #324]	; (8001088 <__aeabi_ddiv+0x254>)
 8000f42:	033c      	lsls	r4, r7, #12
 8000f44:	1a83      	subs	r3, r0, r2
 8000f46:	469b      	mov	fp, r3
 8000f48:	2300      	movs	r3, #0
 8000f4a:	4699      	mov	r9, r3
 8000f4c:	9300      	str	r3, [sp, #0]
 8000f4e:	007b      	lsls	r3, r7, #1
 8000f50:	4650      	mov	r0, sl
 8000f52:	0b24      	lsrs	r4, r4, #12
 8000f54:	0d5b      	lsrs	r3, r3, #21
 8000f56:	0fff      	lsrs	r7, r7, #31
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d197      	bne.n	8000e8c <__aeabi_ddiv+0x58>
 8000f5c:	4652      	mov	r2, sl
 8000f5e:	4322      	orrs	r2, r4
 8000f60:	d055      	beq.n	800100e <__aeabi_ddiv+0x1da>
 8000f62:	2c00      	cmp	r4, #0
 8000f64:	d100      	bne.n	8000f68 <__aeabi_ddiv+0x134>
 8000f66:	e1ca      	b.n	80012fe <__aeabi_ddiv+0x4ca>
 8000f68:	0020      	movs	r0, r4
 8000f6a:	f001 fa99 	bl	80024a0 <__clzsi2>
 8000f6e:	0002      	movs	r2, r0
 8000f70:	3a0b      	subs	r2, #11
 8000f72:	231d      	movs	r3, #29
 8000f74:	0001      	movs	r1, r0
 8000f76:	1a9b      	subs	r3, r3, r2
 8000f78:	4652      	mov	r2, sl
 8000f7a:	3908      	subs	r1, #8
 8000f7c:	40da      	lsrs	r2, r3
 8000f7e:	408c      	lsls	r4, r1
 8000f80:	4314      	orrs	r4, r2
 8000f82:	4652      	mov	r2, sl
 8000f84:	408a      	lsls	r2, r1
 8000f86:	4b41      	ldr	r3, [pc, #260]	; (800108c <__aeabi_ddiv+0x258>)
 8000f88:	4458      	add	r0, fp
 8000f8a:	469b      	mov	fp, r3
 8000f8c:	4483      	add	fp, r0
 8000f8e:	2000      	movs	r0, #0
 8000f90:	e78d      	b.n	8000eae <__aeabi_ddiv+0x7a>
 8000f92:	464b      	mov	r3, r9
 8000f94:	4323      	orrs	r3, r4
 8000f96:	4698      	mov	r8, r3
 8000f98:	d140      	bne.n	800101c <__aeabi_ddiv+0x1e8>
 8000f9a:	2308      	movs	r3, #8
 8000f9c:	4699      	mov	r9, r3
 8000f9e:	3b06      	subs	r3, #6
 8000fa0:	2500      	movs	r5, #0
 8000fa2:	4683      	mov	fp, r0
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	e769      	b.n	8000e7c <__aeabi_ddiv+0x48>
 8000fa8:	46b2      	mov	sl, r6
 8000faa:	9b00      	ldr	r3, [sp, #0]
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d0a9      	beq.n	8000f04 <__aeabi_ddiv+0xd0>
 8000fb0:	2b03      	cmp	r3, #3
 8000fb2:	d100      	bne.n	8000fb6 <__aeabi_ddiv+0x182>
 8000fb4:	e211      	b.n	80013da <__aeabi_ddiv+0x5a6>
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d093      	beq.n	8000ee2 <__aeabi_ddiv+0xae>
 8000fba:	4a35      	ldr	r2, [pc, #212]	; (8001090 <__aeabi_ddiv+0x25c>)
 8000fbc:	445a      	add	r2, fp
 8000fbe:	2a00      	cmp	r2, #0
 8000fc0:	dc00      	bgt.n	8000fc4 <__aeabi_ddiv+0x190>
 8000fc2:	e13c      	b.n	800123e <__aeabi_ddiv+0x40a>
 8000fc4:	076b      	lsls	r3, r5, #29
 8000fc6:	d000      	beq.n	8000fca <__aeabi_ddiv+0x196>
 8000fc8:	e1a7      	b.n	800131a <__aeabi_ddiv+0x4e6>
 8000fca:	08ed      	lsrs	r5, r5, #3
 8000fcc:	4643      	mov	r3, r8
 8000fce:	01db      	lsls	r3, r3, #7
 8000fd0:	d506      	bpl.n	8000fe0 <__aeabi_ddiv+0x1ac>
 8000fd2:	4642      	mov	r2, r8
 8000fd4:	4b2f      	ldr	r3, [pc, #188]	; (8001094 <__aeabi_ddiv+0x260>)
 8000fd6:	401a      	ands	r2, r3
 8000fd8:	4690      	mov	r8, r2
 8000fda:	2280      	movs	r2, #128	; 0x80
 8000fdc:	00d2      	lsls	r2, r2, #3
 8000fde:	445a      	add	r2, fp
 8000fe0:	4b2d      	ldr	r3, [pc, #180]	; (8001098 <__aeabi_ddiv+0x264>)
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	dc8e      	bgt.n	8000f04 <__aeabi_ddiv+0xd0>
 8000fe6:	4643      	mov	r3, r8
 8000fe8:	0552      	lsls	r2, r2, #21
 8000fea:	0758      	lsls	r0, r3, #29
 8000fec:	025c      	lsls	r4, r3, #9
 8000fee:	4305      	orrs	r5, r0
 8000ff0:	0b24      	lsrs	r4, r4, #12
 8000ff2:	0d53      	lsrs	r3, r2, #21
 8000ff4:	e778      	b.n	8000ee8 <__aeabi_ddiv+0xb4>
 8000ff6:	46ba      	mov	sl, r7
 8000ff8:	46a0      	mov	r8, r4
 8000ffa:	0015      	movs	r5, r2
 8000ffc:	9000      	str	r0, [sp, #0]
 8000ffe:	e7d4      	b.n	8000faa <__aeabi_ddiv+0x176>
 8001000:	464a      	mov	r2, r9
 8001002:	2303      	movs	r3, #3
 8001004:	431a      	orrs	r2, r3
 8001006:	4691      	mov	r9, r2
 8001008:	2003      	movs	r0, #3
 800100a:	4652      	mov	r2, sl
 800100c:	e74f      	b.n	8000eae <__aeabi_ddiv+0x7a>
 800100e:	4649      	mov	r1, r9
 8001010:	2301      	movs	r3, #1
 8001012:	4319      	orrs	r1, r3
 8001014:	4689      	mov	r9, r1
 8001016:	2400      	movs	r4, #0
 8001018:	2001      	movs	r0, #1
 800101a:	e748      	b.n	8000eae <__aeabi_ddiv+0x7a>
 800101c:	230c      	movs	r3, #12
 800101e:	4699      	mov	r9, r3
 8001020:	3b09      	subs	r3, #9
 8001022:	46a0      	mov	r8, r4
 8001024:	4683      	mov	fp, r0
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	e728      	b.n	8000e7c <__aeabi_ddiv+0x48>
 800102a:	2304      	movs	r3, #4
 800102c:	4699      	mov	r9, r3
 800102e:	2300      	movs	r3, #0
 8001030:	469b      	mov	fp, r3
 8001032:	3301      	adds	r3, #1
 8001034:	2500      	movs	r5, #0
 8001036:	9300      	str	r3, [sp, #0]
 8001038:	e720      	b.n	8000e7c <__aeabi_ddiv+0x48>
 800103a:	2300      	movs	r3, #0
 800103c:	2480      	movs	r4, #128	; 0x80
 800103e:	469a      	mov	sl, r3
 8001040:	2500      	movs	r5, #0
 8001042:	4b0d      	ldr	r3, [pc, #52]	; (8001078 <__aeabi_ddiv+0x244>)
 8001044:	0324      	lsls	r4, r4, #12
 8001046:	e74f      	b.n	8000ee8 <__aeabi_ddiv+0xb4>
 8001048:	2380      	movs	r3, #128	; 0x80
 800104a:	4641      	mov	r1, r8
 800104c:	031b      	lsls	r3, r3, #12
 800104e:	4219      	tst	r1, r3
 8001050:	d008      	beq.n	8001064 <__aeabi_ddiv+0x230>
 8001052:	421c      	tst	r4, r3
 8001054:	d106      	bne.n	8001064 <__aeabi_ddiv+0x230>
 8001056:	431c      	orrs	r4, r3
 8001058:	0324      	lsls	r4, r4, #12
 800105a:	46ba      	mov	sl, r7
 800105c:	0015      	movs	r5, r2
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <__aeabi_ddiv+0x244>)
 8001060:	0b24      	lsrs	r4, r4, #12
 8001062:	e741      	b.n	8000ee8 <__aeabi_ddiv+0xb4>
 8001064:	2480      	movs	r4, #128	; 0x80
 8001066:	4643      	mov	r3, r8
 8001068:	0324      	lsls	r4, r4, #12
 800106a:	431c      	orrs	r4, r3
 800106c:	0324      	lsls	r4, r4, #12
 800106e:	46b2      	mov	sl, r6
 8001070:	4b01      	ldr	r3, [pc, #4]	; (8001078 <__aeabi_ddiv+0x244>)
 8001072:	0b24      	lsrs	r4, r4, #12
 8001074:	e738      	b.n	8000ee8 <__aeabi_ddiv+0xb4>
 8001076:	46c0      	nop			; (mov r8, r8)
 8001078:	000007ff 	.word	0x000007ff
 800107c:	fffffc01 	.word	0xfffffc01
 8001080:	0800ac88 	.word	0x0800ac88
 8001084:	fffff801 	.word	0xfffff801
 8001088:	fffffc0d 	.word	0xfffffc0d
 800108c:	000003f3 	.word	0x000003f3
 8001090:	000003ff 	.word	0x000003ff
 8001094:	feffffff 	.word	0xfeffffff
 8001098:	000007fe 	.word	0x000007fe
 800109c:	4544      	cmp	r4, r8
 800109e:	d200      	bcs.n	80010a2 <__aeabi_ddiv+0x26e>
 80010a0:	e116      	b.n	80012d0 <__aeabi_ddiv+0x49c>
 80010a2:	d100      	bne.n	80010a6 <__aeabi_ddiv+0x272>
 80010a4:	e111      	b.n	80012ca <__aeabi_ddiv+0x496>
 80010a6:	2301      	movs	r3, #1
 80010a8:	425b      	negs	r3, r3
 80010aa:	469c      	mov	ip, r3
 80010ac:	002e      	movs	r6, r5
 80010ae:	4640      	mov	r0, r8
 80010b0:	2500      	movs	r5, #0
 80010b2:	44e3      	add	fp, ip
 80010b4:	0223      	lsls	r3, r4, #8
 80010b6:	0e14      	lsrs	r4, r2, #24
 80010b8:	431c      	orrs	r4, r3
 80010ba:	0c1b      	lsrs	r3, r3, #16
 80010bc:	4699      	mov	r9, r3
 80010be:	0423      	lsls	r3, r4, #16
 80010c0:	0c1f      	lsrs	r7, r3, #16
 80010c2:	0212      	lsls	r2, r2, #8
 80010c4:	4649      	mov	r1, r9
 80010c6:	9200      	str	r2, [sp, #0]
 80010c8:	9701      	str	r7, [sp, #4]
 80010ca:	f7ff f8bf 	bl	800024c <__aeabi_uidivmod>
 80010ce:	0002      	movs	r2, r0
 80010d0:	437a      	muls	r2, r7
 80010d2:	040b      	lsls	r3, r1, #16
 80010d4:	0c31      	lsrs	r1, r6, #16
 80010d6:	4680      	mov	r8, r0
 80010d8:	4319      	orrs	r1, r3
 80010da:	428a      	cmp	r2, r1
 80010dc:	d90b      	bls.n	80010f6 <__aeabi_ddiv+0x2c2>
 80010de:	2301      	movs	r3, #1
 80010e0:	425b      	negs	r3, r3
 80010e2:	469c      	mov	ip, r3
 80010e4:	1909      	adds	r1, r1, r4
 80010e6:	44e0      	add	r8, ip
 80010e8:	428c      	cmp	r4, r1
 80010ea:	d804      	bhi.n	80010f6 <__aeabi_ddiv+0x2c2>
 80010ec:	428a      	cmp	r2, r1
 80010ee:	d902      	bls.n	80010f6 <__aeabi_ddiv+0x2c2>
 80010f0:	1e83      	subs	r3, r0, #2
 80010f2:	4698      	mov	r8, r3
 80010f4:	1909      	adds	r1, r1, r4
 80010f6:	1a88      	subs	r0, r1, r2
 80010f8:	4649      	mov	r1, r9
 80010fa:	f7ff f8a7 	bl	800024c <__aeabi_uidivmod>
 80010fe:	0409      	lsls	r1, r1, #16
 8001100:	468c      	mov	ip, r1
 8001102:	0431      	lsls	r1, r6, #16
 8001104:	4666      	mov	r6, ip
 8001106:	9a01      	ldr	r2, [sp, #4]
 8001108:	0c09      	lsrs	r1, r1, #16
 800110a:	4342      	muls	r2, r0
 800110c:	0003      	movs	r3, r0
 800110e:	4331      	orrs	r1, r6
 8001110:	428a      	cmp	r2, r1
 8001112:	d904      	bls.n	800111e <__aeabi_ddiv+0x2ea>
 8001114:	1909      	adds	r1, r1, r4
 8001116:	3b01      	subs	r3, #1
 8001118:	428c      	cmp	r4, r1
 800111a:	d800      	bhi.n	800111e <__aeabi_ddiv+0x2ea>
 800111c:	e111      	b.n	8001342 <__aeabi_ddiv+0x50e>
 800111e:	1a89      	subs	r1, r1, r2
 8001120:	4642      	mov	r2, r8
 8001122:	9e00      	ldr	r6, [sp, #0]
 8001124:	0412      	lsls	r2, r2, #16
 8001126:	431a      	orrs	r2, r3
 8001128:	0c33      	lsrs	r3, r6, #16
 800112a:	001f      	movs	r7, r3
 800112c:	0c10      	lsrs	r0, r2, #16
 800112e:	4690      	mov	r8, r2
 8001130:	9302      	str	r3, [sp, #8]
 8001132:	0413      	lsls	r3, r2, #16
 8001134:	0432      	lsls	r2, r6, #16
 8001136:	0c16      	lsrs	r6, r2, #16
 8001138:	0032      	movs	r2, r6
 800113a:	0c1b      	lsrs	r3, r3, #16
 800113c:	435a      	muls	r2, r3
 800113e:	9603      	str	r6, [sp, #12]
 8001140:	437b      	muls	r3, r7
 8001142:	4346      	muls	r6, r0
 8001144:	4378      	muls	r0, r7
 8001146:	0c17      	lsrs	r7, r2, #16
 8001148:	46bc      	mov	ip, r7
 800114a:	199b      	adds	r3, r3, r6
 800114c:	4463      	add	r3, ip
 800114e:	429e      	cmp	r6, r3
 8001150:	d903      	bls.n	800115a <__aeabi_ddiv+0x326>
 8001152:	2680      	movs	r6, #128	; 0x80
 8001154:	0276      	lsls	r6, r6, #9
 8001156:	46b4      	mov	ip, r6
 8001158:	4460      	add	r0, ip
 800115a:	0c1e      	lsrs	r6, r3, #16
 800115c:	1830      	adds	r0, r6, r0
 800115e:	0416      	lsls	r6, r2, #16
 8001160:	041b      	lsls	r3, r3, #16
 8001162:	0c36      	lsrs	r6, r6, #16
 8001164:	199e      	adds	r6, r3, r6
 8001166:	4281      	cmp	r1, r0
 8001168:	d200      	bcs.n	800116c <__aeabi_ddiv+0x338>
 800116a:	e09c      	b.n	80012a6 <__aeabi_ddiv+0x472>
 800116c:	d100      	bne.n	8001170 <__aeabi_ddiv+0x33c>
 800116e:	e097      	b.n	80012a0 <__aeabi_ddiv+0x46c>
 8001170:	1bae      	subs	r6, r5, r6
 8001172:	1a09      	subs	r1, r1, r0
 8001174:	42b5      	cmp	r5, r6
 8001176:	4180      	sbcs	r0, r0
 8001178:	4240      	negs	r0, r0
 800117a:	1a08      	subs	r0, r1, r0
 800117c:	4284      	cmp	r4, r0
 800117e:	d100      	bne.n	8001182 <__aeabi_ddiv+0x34e>
 8001180:	e111      	b.n	80013a6 <__aeabi_ddiv+0x572>
 8001182:	4649      	mov	r1, r9
 8001184:	f7ff f862 	bl	800024c <__aeabi_uidivmod>
 8001188:	9a01      	ldr	r2, [sp, #4]
 800118a:	040b      	lsls	r3, r1, #16
 800118c:	4342      	muls	r2, r0
 800118e:	0c31      	lsrs	r1, r6, #16
 8001190:	0005      	movs	r5, r0
 8001192:	4319      	orrs	r1, r3
 8001194:	428a      	cmp	r2, r1
 8001196:	d907      	bls.n	80011a8 <__aeabi_ddiv+0x374>
 8001198:	1909      	adds	r1, r1, r4
 800119a:	3d01      	subs	r5, #1
 800119c:	428c      	cmp	r4, r1
 800119e:	d803      	bhi.n	80011a8 <__aeabi_ddiv+0x374>
 80011a0:	428a      	cmp	r2, r1
 80011a2:	d901      	bls.n	80011a8 <__aeabi_ddiv+0x374>
 80011a4:	1e85      	subs	r5, r0, #2
 80011a6:	1909      	adds	r1, r1, r4
 80011a8:	1a88      	subs	r0, r1, r2
 80011aa:	4649      	mov	r1, r9
 80011ac:	f7ff f84e 	bl	800024c <__aeabi_uidivmod>
 80011b0:	0409      	lsls	r1, r1, #16
 80011b2:	468c      	mov	ip, r1
 80011b4:	0431      	lsls	r1, r6, #16
 80011b6:	4666      	mov	r6, ip
 80011b8:	9a01      	ldr	r2, [sp, #4]
 80011ba:	0c09      	lsrs	r1, r1, #16
 80011bc:	4342      	muls	r2, r0
 80011be:	0003      	movs	r3, r0
 80011c0:	4331      	orrs	r1, r6
 80011c2:	428a      	cmp	r2, r1
 80011c4:	d907      	bls.n	80011d6 <__aeabi_ddiv+0x3a2>
 80011c6:	1909      	adds	r1, r1, r4
 80011c8:	3b01      	subs	r3, #1
 80011ca:	428c      	cmp	r4, r1
 80011cc:	d803      	bhi.n	80011d6 <__aeabi_ddiv+0x3a2>
 80011ce:	428a      	cmp	r2, r1
 80011d0:	d901      	bls.n	80011d6 <__aeabi_ddiv+0x3a2>
 80011d2:	1e83      	subs	r3, r0, #2
 80011d4:	1909      	adds	r1, r1, r4
 80011d6:	9e03      	ldr	r6, [sp, #12]
 80011d8:	1a89      	subs	r1, r1, r2
 80011da:	0032      	movs	r2, r6
 80011dc:	042d      	lsls	r5, r5, #16
 80011de:	431d      	orrs	r5, r3
 80011e0:	9f02      	ldr	r7, [sp, #8]
 80011e2:	042b      	lsls	r3, r5, #16
 80011e4:	0c1b      	lsrs	r3, r3, #16
 80011e6:	435a      	muls	r2, r3
 80011e8:	437b      	muls	r3, r7
 80011ea:	469c      	mov	ip, r3
 80011ec:	0c28      	lsrs	r0, r5, #16
 80011ee:	4346      	muls	r6, r0
 80011f0:	0c13      	lsrs	r3, r2, #16
 80011f2:	44b4      	add	ip, r6
 80011f4:	4463      	add	r3, ip
 80011f6:	4378      	muls	r0, r7
 80011f8:	429e      	cmp	r6, r3
 80011fa:	d903      	bls.n	8001204 <__aeabi_ddiv+0x3d0>
 80011fc:	2680      	movs	r6, #128	; 0x80
 80011fe:	0276      	lsls	r6, r6, #9
 8001200:	46b4      	mov	ip, r6
 8001202:	4460      	add	r0, ip
 8001204:	0c1e      	lsrs	r6, r3, #16
 8001206:	0412      	lsls	r2, r2, #16
 8001208:	041b      	lsls	r3, r3, #16
 800120a:	0c12      	lsrs	r2, r2, #16
 800120c:	1830      	adds	r0, r6, r0
 800120e:	189b      	adds	r3, r3, r2
 8001210:	4281      	cmp	r1, r0
 8001212:	d306      	bcc.n	8001222 <__aeabi_ddiv+0x3ee>
 8001214:	d002      	beq.n	800121c <__aeabi_ddiv+0x3e8>
 8001216:	2301      	movs	r3, #1
 8001218:	431d      	orrs	r5, r3
 800121a:	e6ce      	b.n	8000fba <__aeabi_ddiv+0x186>
 800121c:	2b00      	cmp	r3, #0
 800121e:	d100      	bne.n	8001222 <__aeabi_ddiv+0x3ee>
 8001220:	e6cb      	b.n	8000fba <__aeabi_ddiv+0x186>
 8001222:	1861      	adds	r1, r4, r1
 8001224:	1e6e      	subs	r6, r5, #1
 8001226:	42a1      	cmp	r1, r4
 8001228:	d200      	bcs.n	800122c <__aeabi_ddiv+0x3f8>
 800122a:	e0a4      	b.n	8001376 <__aeabi_ddiv+0x542>
 800122c:	4281      	cmp	r1, r0
 800122e:	d200      	bcs.n	8001232 <__aeabi_ddiv+0x3fe>
 8001230:	e0c9      	b.n	80013c6 <__aeabi_ddiv+0x592>
 8001232:	d100      	bne.n	8001236 <__aeabi_ddiv+0x402>
 8001234:	e0d9      	b.n	80013ea <__aeabi_ddiv+0x5b6>
 8001236:	0035      	movs	r5, r6
 8001238:	e7ed      	b.n	8001216 <__aeabi_ddiv+0x3e2>
 800123a:	2501      	movs	r5, #1
 800123c:	426d      	negs	r5, r5
 800123e:	2101      	movs	r1, #1
 8001240:	1a89      	subs	r1, r1, r2
 8001242:	2938      	cmp	r1, #56	; 0x38
 8001244:	dd00      	ble.n	8001248 <__aeabi_ddiv+0x414>
 8001246:	e64c      	b.n	8000ee2 <__aeabi_ddiv+0xae>
 8001248:	291f      	cmp	r1, #31
 800124a:	dc00      	bgt.n	800124e <__aeabi_ddiv+0x41a>
 800124c:	e07f      	b.n	800134e <__aeabi_ddiv+0x51a>
 800124e:	231f      	movs	r3, #31
 8001250:	425b      	negs	r3, r3
 8001252:	1a9a      	subs	r2, r3, r2
 8001254:	4643      	mov	r3, r8
 8001256:	40d3      	lsrs	r3, r2
 8001258:	2920      	cmp	r1, #32
 800125a:	d004      	beq.n	8001266 <__aeabi_ddiv+0x432>
 800125c:	4644      	mov	r4, r8
 800125e:	4a65      	ldr	r2, [pc, #404]	; (80013f4 <__aeabi_ddiv+0x5c0>)
 8001260:	445a      	add	r2, fp
 8001262:	4094      	lsls	r4, r2
 8001264:	4325      	orrs	r5, r4
 8001266:	1e6a      	subs	r2, r5, #1
 8001268:	4195      	sbcs	r5, r2
 800126a:	2207      	movs	r2, #7
 800126c:	432b      	orrs	r3, r5
 800126e:	0015      	movs	r5, r2
 8001270:	2400      	movs	r4, #0
 8001272:	401d      	ands	r5, r3
 8001274:	421a      	tst	r2, r3
 8001276:	d100      	bne.n	800127a <__aeabi_ddiv+0x446>
 8001278:	e0a1      	b.n	80013be <__aeabi_ddiv+0x58a>
 800127a:	220f      	movs	r2, #15
 800127c:	2400      	movs	r4, #0
 800127e:	401a      	ands	r2, r3
 8001280:	2a04      	cmp	r2, #4
 8001282:	d100      	bne.n	8001286 <__aeabi_ddiv+0x452>
 8001284:	e098      	b.n	80013b8 <__aeabi_ddiv+0x584>
 8001286:	1d1a      	adds	r2, r3, #4
 8001288:	429a      	cmp	r2, r3
 800128a:	419b      	sbcs	r3, r3
 800128c:	425b      	negs	r3, r3
 800128e:	18e4      	adds	r4, r4, r3
 8001290:	0013      	movs	r3, r2
 8001292:	0222      	lsls	r2, r4, #8
 8001294:	d400      	bmi.n	8001298 <__aeabi_ddiv+0x464>
 8001296:	e08f      	b.n	80013b8 <__aeabi_ddiv+0x584>
 8001298:	2301      	movs	r3, #1
 800129a:	2400      	movs	r4, #0
 800129c:	2500      	movs	r5, #0
 800129e:	e623      	b.n	8000ee8 <__aeabi_ddiv+0xb4>
 80012a0:	42b5      	cmp	r5, r6
 80012a2:	d300      	bcc.n	80012a6 <__aeabi_ddiv+0x472>
 80012a4:	e764      	b.n	8001170 <__aeabi_ddiv+0x33c>
 80012a6:	4643      	mov	r3, r8
 80012a8:	1e5a      	subs	r2, r3, #1
 80012aa:	9b00      	ldr	r3, [sp, #0]
 80012ac:	469c      	mov	ip, r3
 80012ae:	4465      	add	r5, ip
 80012b0:	001f      	movs	r7, r3
 80012b2:	429d      	cmp	r5, r3
 80012b4:	419b      	sbcs	r3, r3
 80012b6:	425b      	negs	r3, r3
 80012b8:	191b      	adds	r3, r3, r4
 80012ba:	18c9      	adds	r1, r1, r3
 80012bc:	428c      	cmp	r4, r1
 80012be:	d23a      	bcs.n	8001336 <__aeabi_ddiv+0x502>
 80012c0:	4288      	cmp	r0, r1
 80012c2:	d863      	bhi.n	800138c <__aeabi_ddiv+0x558>
 80012c4:	d060      	beq.n	8001388 <__aeabi_ddiv+0x554>
 80012c6:	4690      	mov	r8, r2
 80012c8:	e752      	b.n	8001170 <__aeabi_ddiv+0x33c>
 80012ca:	42aa      	cmp	r2, r5
 80012cc:	d900      	bls.n	80012d0 <__aeabi_ddiv+0x49c>
 80012ce:	e6ea      	b.n	80010a6 <__aeabi_ddiv+0x272>
 80012d0:	4643      	mov	r3, r8
 80012d2:	07de      	lsls	r6, r3, #31
 80012d4:	0858      	lsrs	r0, r3, #1
 80012d6:	086b      	lsrs	r3, r5, #1
 80012d8:	431e      	orrs	r6, r3
 80012da:	07ed      	lsls	r5, r5, #31
 80012dc:	e6ea      	b.n	80010b4 <__aeabi_ddiv+0x280>
 80012de:	4648      	mov	r0, r9
 80012e0:	f001 f8de 	bl	80024a0 <__clzsi2>
 80012e4:	0001      	movs	r1, r0
 80012e6:	0002      	movs	r2, r0
 80012e8:	3115      	adds	r1, #21
 80012ea:	3220      	adds	r2, #32
 80012ec:	291c      	cmp	r1, #28
 80012ee:	dc00      	bgt.n	80012f2 <__aeabi_ddiv+0x4be>
 80012f0:	e61a      	b.n	8000f28 <__aeabi_ddiv+0xf4>
 80012f2:	464b      	mov	r3, r9
 80012f4:	3808      	subs	r0, #8
 80012f6:	4083      	lsls	r3, r0
 80012f8:	2500      	movs	r5, #0
 80012fa:	4698      	mov	r8, r3
 80012fc:	e620      	b.n	8000f40 <__aeabi_ddiv+0x10c>
 80012fe:	f001 f8cf 	bl	80024a0 <__clzsi2>
 8001302:	0003      	movs	r3, r0
 8001304:	001a      	movs	r2, r3
 8001306:	3215      	adds	r2, #21
 8001308:	3020      	adds	r0, #32
 800130a:	2a1c      	cmp	r2, #28
 800130c:	dc00      	bgt.n	8001310 <__aeabi_ddiv+0x4dc>
 800130e:	e630      	b.n	8000f72 <__aeabi_ddiv+0x13e>
 8001310:	4654      	mov	r4, sl
 8001312:	3b08      	subs	r3, #8
 8001314:	2200      	movs	r2, #0
 8001316:	409c      	lsls	r4, r3
 8001318:	e635      	b.n	8000f86 <__aeabi_ddiv+0x152>
 800131a:	230f      	movs	r3, #15
 800131c:	402b      	ands	r3, r5
 800131e:	2b04      	cmp	r3, #4
 8001320:	d100      	bne.n	8001324 <__aeabi_ddiv+0x4f0>
 8001322:	e652      	b.n	8000fca <__aeabi_ddiv+0x196>
 8001324:	2305      	movs	r3, #5
 8001326:	425b      	negs	r3, r3
 8001328:	42ab      	cmp	r3, r5
 800132a:	419b      	sbcs	r3, r3
 800132c:	3504      	adds	r5, #4
 800132e:	425b      	negs	r3, r3
 8001330:	08ed      	lsrs	r5, r5, #3
 8001332:	4498      	add	r8, r3
 8001334:	e64a      	b.n	8000fcc <__aeabi_ddiv+0x198>
 8001336:	428c      	cmp	r4, r1
 8001338:	d1c5      	bne.n	80012c6 <__aeabi_ddiv+0x492>
 800133a:	42af      	cmp	r7, r5
 800133c:	d9c0      	bls.n	80012c0 <__aeabi_ddiv+0x48c>
 800133e:	4690      	mov	r8, r2
 8001340:	e716      	b.n	8001170 <__aeabi_ddiv+0x33c>
 8001342:	428a      	cmp	r2, r1
 8001344:	d800      	bhi.n	8001348 <__aeabi_ddiv+0x514>
 8001346:	e6ea      	b.n	800111e <__aeabi_ddiv+0x2ea>
 8001348:	1e83      	subs	r3, r0, #2
 800134a:	1909      	adds	r1, r1, r4
 800134c:	e6e7      	b.n	800111e <__aeabi_ddiv+0x2ea>
 800134e:	4a2a      	ldr	r2, [pc, #168]	; (80013f8 <__aeabi_ddiv+0x5c4>)
 8001350:	0028      	movs	r0, r5
 8001352:	445a      	add	r2, fp
 8001354:	4643      	mov	r3, r8
 8001356:	4095      	lsls	r5, r2
 8001358:	4093      	lsls	r3, r2
 800135a:	40c8      	lsrs	r0, r1
 800135c:	1e6a      	subs	r2, r5, #1
 800135e:	4195      	sbcs	r5, r2
 8001360:	4644      	mov	r4, r8
 8001362:	4303      	orrs	r3, r0
 8001364:	432b      	orrs	r3, r5
 8001366:	40cc      	lsrs	r4, r1
 8001368:	075a      	lsls	r2, r3, #29
 800136a:	d092      	beq.n	8001292 <__aeabi_ddiv+0x45e>
 800136c:	220f      	movs	r2, #15
 800136e:	401a      	ands	r2, r3
 8001370:	2a04      	cmp	r2, #4
 8001372:	d188      	bne.n	8001286 <__aeabi_ddiv+0x452>
 8001374:	e78d      	b.n	8001292 <__aeabi_ddiv+0x45e>
 8001376:	0035      	movs	r5, r6
 8001378:	4281      	cmp	r1, r0
 800137a:	d000      	beq.n	800137e <__aeabi_ddiv+0x54a>
 800137c:	e74b      	b.n	8001216 <__aeabi_ddiv+0x3e2>
 800137e:	9a00      	ldr	r2, [sp, #0]
 8001380:	4293      	cmp	r3, r2
 8001382:	d000      	beq.n	8001386 <__aeabi_ddiv+0x552>
 8001384:	e747      	b.n	8001216 <__aeabi_ddiv+0x3e2>
 8001386:	e618      	b.n	8000fba <__aeabi_ddiv+0x186>
 8001388:	42ae      	cmp	r6, r5
 800138a:	d99c      	bls.n	80012c6 <__aeabi_ddiv+0x492>
 800138c:	2302      	movs	r3, #2
 800138e:	425b      	negs	r3, r3
 8001390:	469c      	mov	ip, r3
 8001392:	9b00      	ldr	r3, [sp, #0]
 8001394:	44e0      	add	r8, ip
 8001396:	469c      	mov	ip, r3
 8001398:	4465      	add	r5, ip
 800139a:	429d      	cmp	r5, r3
 800139c:	419b      	sbcs	r3, r3
 800139e:	425b      	negs	r3, r3
 80013a0:	191b      	adds	r3, r3, r4
 80013a2:	18c9      	adds	r1, r1, r3
 80013a4:	e6e4      	b.n	8001170 <__aeabi_ddiv+0x33c>
 80013a6:	4a15      	ldr	r2, [pc, #84]	; (80013fc <__aeabi_ddiv+0x5c8>)
 80013a8:	445a      	add	r2, fp
 80013aa:	2a00      	cmp	r2, #0
 80013ac:	dc00      	bgt.n	80013b0 <__aeabi_ddiv+0x57c>
 80013ae:	e744      	b.n	800123a <__aeabi_ddiv+0x406>
 80013b0:	2301      	movs	r3, #1
 80013b2:	2500      	movs	r5, #0
 80013b4:	4498      	add	r8, r3
 80013b6:	e609      	b.n	8000fcc <__aeabi_ddiv+0x198>
 80013b8:	0765      	lsls	r5, r4, #29
 80013ba:	0264      	lsls	r4, r4, #9
 80013bc:	0b24      	lsrs	r4, r4, #12
 80013be:	08db      	lsrs	r3, r3, #3
 80013c0:	431d      	orrs	r5, r3
 80013c2:	2300      	movs	r3, #0
 80013c4:	e590      	b.n	8000ee8 <__aeabi_ddiv+0xb4>
 80013c6:	9e00      	ldr	r6, [sp, #0]
 80013c8:	3d02      	subs	r5, #2
 80013ca:	0072      	lsls	r2, r6, #1
 80013cc:	42b2      	cmp	r2, r6
 80013ce:	41bf      	sbcs	r7, r7
 80013d0:	427f      	negs	r7, r7
 80013d2:	193c      	adds	r4, r7, r4
 80013d4:	1909      	adds	r1, r1, r4
 80013d6:	9200      	str	r2, [sp, #0]
 80013d8:	e7ce      	b.n	8001378 <__aeabi_ddiv+0x544>
 80013da:	2480      	movs	r4, #128	; 0x80
 80013dc:	4643      	mov	r3, r8
 80013de:	0324      	lsls	r4, r4, #12
 80013e0:	431c      	orrs	r4, r3
 80013e2:	0324      	lsls	r4, r4, #12
 80013e4:	4b06      	ldr	r3, [pc, #24]	; (8001400 <__aeabi_ddiv+0x5cc>)
 80013e6:	0b24      	lsrs	r4, r4, #12
 80013e8:	e57e      	b.n	8000ee8 <__aeabi_ddiv+0xb4>
 80013ea:	9a00      	ldr	r2, [sp, #0]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d3ea      	bcc.n	80013c6 <__aeabi_ddiv+0x592>
 80013f0:	0035      	movs	r5, r6
 80013f2:	e7c4      	b.n	800137e <__aeabi_ddiv+0x54a>
 80013f4:	0000043e 	.word	0x0000043e
 80013f8:	0000041e 	.word	0x0000041e
 80013fc:	000003ff 	.word	0x000003ff
 8001400:	000007ff 	.word	0x000007ff

08001404 <__eqdf2>:
 8001404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001406:	464f      	mov	r7, r9
 8001408:	4646      	mov	r6, r8
 800140a:	46d6      	mov	lr, sl
 800140c:	4694      	mov	ip, r2
 800140e:	4691      	mov	r9, r2
 8001410:	031a      	lsls	r2, r3, #12
 8001412:	0b12      	lsrs	r2, r2, #12
 8001414:	4d18      	ldr	r5, [pc, #96]	; (8001478 <__eqdf2+0x74>)
 8001416:	b5c0      	push	{r6, r7, lr}
 8001418:	004c      	lsls	r4, r1, #1
 800141a:	030f      	lsls	r7, r1, #12
 800141c:	4692      	mov	sl, r2
 800141e:	005a      	lsls	r2, r3, #1
 8001420:	0006      	movs	r6, r0
 8001422:	4680      	mov	r8, r0
 8001424:	0b3f      	lsrs	r7, r7, #12
 8001426:	2001      	movs	r0, #1
 8001428:	0d64      	lsrs	r4, r4, #21
 800142a:	0fc9      	lsrs	r1, r1, #31
 800142c:	0d52      	lsrs	r2, r2, #21
 800142e:	0fdb      	lsrs	r3, r3, #31
 8001430:	42ac      	cmp	r4, r5
 8001432:	d00a      	beq.n	800144a <__eqdf2+0x46>
 8001434:	42aa      	cmp	r2, r5
 8001436:	d003      	beq.n	8001440 <__eqdf2+0x3c>
 8001438:	4294      	cmp	r4, r2
 800143a:	d101      	bne.n	8001440 <__eqdf2+0x3c>
 800143c:	4557      	cmp	r7, sl
 800143e:	d00d      	beq.n	800145c <__eqdf2+0x58>
 8001440:	bce0      	pop	{r5, r6, r7}
 8001442:	46ba      	mov	sl, r7
 8001444:	46b1      	mov	r9, r6
 8001446:	46a8      	mov	r8, r5
 8001448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800144a:	003d      	movs	r5, r7
 800144c:	4335      	orrs	r5, r6
 800144e:	d1f7      	bne.n	8001440 <__eqdf2+0x3c>
 8001450:	42a2      	cmp	r2, r4
 8001452:	d1f5      	bne.n	8001440 <__eqdf2+0x3c>
 8001454:	4652      	mov	r2, sl
 8001456:	4665      	mov	r5, ip
 8001458:	432a      	orrs	r2, r5
 800145a:	d1f1      	bne.n	8001440 <__eqdf2+0x3c>
 800145c:	2001      	movs	r0, #1
 800145e:	45c8      	cmp	r8, r9
 8001460:	d1ee      	bne.n	8001440 <__eqdf2+0x3c>
 8001462:	4299      	cmp	r1, r3
 8001464:	d006      	beq.n	8001474 <__eqdf2+0x70>
 8001466:	2c00      	cmp	r4, #0
 8001468:	d1ea      	bne.n	8001440 <__eqdf2+0x3c>
 800146a:	433e      	orrs	r6, r7
 800146c:	0030      	movs	r0, r6
 800146e:	1e46      	subs	r6, r0, #1
 8001470:	41b0      	sbcs	r0, r6
 8001472:	e7e5      	b.n	8001440 <__eqdf2+0x3c>
 8001474:	2000      	movs	r0, #0
 8001476:	e7e3      	b.n	8001440 <__eqdf2+0x3c>
 8001478:	000007ff 	.word	0x000007ff

0800147c <__gedf2>:
 800147c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800147e:	464e      	mov	r6, r9
 8001480:	4645      	mov	r5, r8
 8001482:	4657      	mov	r7, sl
 8001484:	46de      	mov	lr, fp
 8001486:	0004      	movs	r4, r0
 8001488:	0018      	movs	r0, r3
 800148a:	b5e0      	push	{r5, r6, r7, lr}
 800148c:	0016      	movs	r6, r2
 800148e:	031b      	lsls	r3, r3, #12
 8001490:	0b1b      	lsrs	r3, r3, #12
 8001492:	4d32      	ldr	r5, [pc, #200]	; (800155c <__gedf2+0xe0>)
 8001494:	030f      	lsls	r7, r1, #12
 8001496:	004a      	lsls	r2, r1, #1
 8001498:	4699      	mov	r9, r3
 800149a:	0043      	lsls	r3, r0, #1
 800149c:	46a4      	mov	ip, r4
 800149e:	46b0      	mov	r8, r6
 80014a0:	0b3f      	lsrs	r7, r7, #12
 80014a2:	0d52      	lsrs	r2, r2, #21
 80014a4:	0fc9      	lsrs	r1, r1, #31
 80014a6:	0d5b      	lsrs	r3, r3, #21
 80014a8:	0fc0      	lsrs	r0, r0, #31
 80014aa:	42aa      	cmp	r2, r5
 80014ac:	d029      	beq.n	8001502 <__gedf2+0x86>
 80014ae:	42ab      	cmp	r3, r5
 80014b0:	d018      	beq.n	80014e4 <__gedf2+0x68>
 80014b2:	2a00      	cmp	r2, #0
 80014b4:	d12a      	bne.n	800150c <__gedf2+0x90>
 80014b6:	433c      	orrs	r4, r7
 80014b8:	46a3      	mov	fp, r4
 80014ba:	4265      	negs	r5, r4
 80014bc:	4165      	adcs	r5, r4
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d102      	bne.n	80014c8 <__gedf2+0x4c>
 80014c2:	464c      	mov	r4, r9
 80014c4:	4326      	orrs	r6, r4
 80014c6:	d027      	beq.n	8001518 <__gedf2+0x9c>
 80014c8:	2d00      	cmp	r5, #0
 80014ca:	d115      	bne.n	80014f8 <__gedf2+0x7c>
 80014cc:	4281      	cmp	r1, r0
 80014ce:	d028      	beq.n	8001522 <__gedf2+0xa6>
 80014d0:	2002      	movs	r0, #2
 80014d2:	3901      	subs	r1, #1
 80014d4:	4008      	ands	r0, r1
 80014d6:	3801      	subs	r0, #1
 80014d8:	bcf0      	pop	{r4, r5, r6, r7}
 80014da:	46bb      	mov	fp, r7
 80014dc:	46b2      	mov	sl, r6
 80014de:	46a9      	mov	r9, r5
 80014e0:	46a0      	mov	r8, r4
 80014e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014e4:	464d      	mov	r5, r9
 80014e6:	432e      	orrs	r6, r5
 80014e8:	d12f      	bne.n	800154a <__gedf2+0xce>
 80014ea:	2a00      	cmp	r2, #0
 80014ec:	d1ee      	bne.n	80014cc <__gedf2+0x50>
 80014ee:	433c      	orrs	r4, r7
 80014f0:	4265      	negs	r5, r4
 80014f2:	4165      	adcs	r5, r4
 80014f4:	2d00      	cmp	r5, #0
 80014f6:	d0e9      	beq.n	80014cc <__gedf2+0x50>
 80014f8:	2800      	cmp	r0, #0
 80014fa:	d1ed      	bne.n	80014d8 <__gedf2+0x5c>
 80014fc:	2001      	movs	r0, #1
 80014fe:	4240      	negs	r0, r0
 8001500:	e7ea      	b.n	80014d8 <__gedf2+0x5c>
 8001502:	003d      	movs	r5, r7
 8001504:	4325      	orrs	r5, r4
 8001506:	d120      	bne.n	800154a <__gedf2+0xce>
 8001508:	4293      	cmp	r3, r2
 800150a:	d0eb      	beq.n	80014e4 <__gedf2+0x68>
 800150c:	2b00      	cmp	r3, #0
 800150e:	d1dd      	bne.n	80014cc <__gedf2+0x50>
 8001510:	464c      	mov	r4, r9
 8001512:	4326      	orrs	r6, r4
 8001514:	d1da      	bne.n	80014cc <__gedf2+0x50>
 8001516:	e7db      	b.n	80014d0 <__gedf2+0x54>
 8001518:	465b      	mov	r3, fp
 800151a:	2000      	movs	r0, #0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d0db      	beq.n	80014d8 <__gedf2+0x5c>
 8001520:	e7d6      	b.n	80014d0 <__gedf2+0x54>
 8001522:	429a      	cmp	r2, r3
 8001524:	dc0a      	bgt.n	800153c <__gedf2+0xc0>
 8001526:	dbe7      	blt.n	80014f8 <__gedf2+0x7c>
 8001528:	454f      	cmp	r7, r9
 800152a:	d8d1      	bhi.n	80014d0 <__gedf2+0x54>
 800152c:	d010      	beq.n	8001550 <__gedf2+0xd4>
 800152e:	2000      	movs	r0, #0
 8001530:	454f      	cmp	r7, r9
 8001532:	d2d1      	bcs.n	80014d8 <__gedf2+0x5c>
 8001534:	2900      	cmp	r1, #0
 8001536:	d0e1      	beq.n	80014fc <__gedf2+0x80>
 8001538:	0008      	movs	r0, r1
 800153a:	e7cd      	b.n	80014d8 <__gedf2+0x5c>
 800153c:	4243      	negs	r3, r0
 800153e:	4158      	adcs	r0, r3
 8001540:	2302      	movs	r3, #2
 8001542:	4240      	negs	r0, r0
 8001544:	4018      	ands	r0, r3
 8001546:	3801      	subs	r0, #1
 8001548:	e7c6      	b.n	80014d8 <__gedf2+0x5c>
 800154a:	2002      	movs	r0, #2
 800154c:	4240      	negs	r0, r0
 800154e:	e7c3      	b.n	80014d8 <__gedf2+0x5c>
 8001550:	45c4      	cmp	ip, r8
 8001552:	d8bd      	bhi.n	80014d0 <__gedf2+0x54>
 8001554:	2000      	movs	r0, #0
 8001556:	45c4      	cmp	ip, r8
 8001558:	d2be      	bcs.n	80014d8 <__gedf2+0x5c>
 800155a:	e7eb      	b.n	8001534 <__gedf2+0xb8>
 800155c:	000007ff 	.word	0x000007ff

08001560 <__ledf2>:
 8001560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001562:	464e      	mov	r6, r9
 8001564:	4645      	mov	r5, r8
 8001566:	4657      	mov	r7, sl
 8001568:	46de      	mov	lr, fp
 800156a:	0004      	movs	r4, r0
 800156c:	0018      	movs	r0, r3
 800156e:	b5e0      	push	{r5, r6, r7, lr}
 8001570:	0016      	movs	r6, r2
 8001572:	031b      	lsls	r3, r3, #12
 8001574:	0b1b      	lsrs	r3, r3, #12
 8001576:	4d31      	ldr	r5, [pc, #196]	; (800163c <__ledf2+0xdc>)
 8001578:	030f      	lsls	r7, r1, #12
 800157a:	004a      	lsls	r2, r1, #1
 800157c:	4699      	mov	r9, r3
 800157e:	0043      	lsls	r3, r0, #1
 8001580:	46a4      	mov	ip, r4
 8001582:	46b0      	mov	r8, r6
 8001584:	0b3f      	lsrs	r7, r7, #12
 8001586:	0d52      	lsrs	r2, r2, #21
 8001588:	0fc9      	lsrs	r1, r1, #31
 800158a:	0d5b      	lsrs	r3, r3, #21
 800158c:	0fc0      	lsrs	r0, r0, #31
 800158e:	42aa      	cmp	r2, r5
 8001590:	d011      	beq.n	80015b6 <__ledf2+0x56>
 8001592:	42ab      	cmp	r3, r5
 8001594:	d014      	beq.n	80015c0 <__ledf2+0x60>
 8001596:	2a00      	cmp	r2, #0
 8001598:	d12f      	bne.n	80015fa <__ledf2+0x9a>
 800159a:	433c      	orrs	r4, r7
 800159c:	46a3      	mov	fp, r4
 800159e:	4265      	negs	r5, r4
 80015a0:	4165      	adcs	r5, r4
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d114      	bne.n	80015d0 <__ledf2+0x70>
 80015a6:	464c      	mov	r4, r9
 80015a8:	4326      	orrs	r6, r4
 80015aa:	d111      	bne.n	80015d0 <__ledf2+0x70>
 80015ac:	465b      	mov	r3, fp
 80015ae:	2000      	movs	r0, #0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d017      	beq.n	80015e4 <__ledf2+0x84>
 80015b4:	e010      	b.n	80015d8 <__ledf2+0x78>
 80015b6:	003d      	movs	r5, r7
 80015b8:	4325      	orrs	r5, r4
 80015ba:	d112      	bne.n	80015e2 <__ledf2+0x82>
 80015bc:	4293      	cmp	r3, r2
 80015be:	d11c      	bne.n	80015fa <__ledf2+0x9a>
 80015c0:	464d      	mov	r5, r9
 80015c2:	432e      	orrs	r6, r5
 80015c4:	d10d      	bne.n	80015e2 <__ledf2+0x82>
 80015c6:	2a00      	cmp	r2, #0
 80015c8:	d104      	bne.n	80015d4 <__ledf2+0x74>
 80015ca:	433c      	orrs	r4, r7
 80015cc:	4265      	negs	r5, r4
 80015ce:	4165      	adcs	r5, r4
 80015d0:	2d00      	cmp	r5, #0
 80015d2:	d10d      	bne.n	80015f0 <__ledf2+0x90>
 80015d4:	4281      	cmp	r1, r0
 80015d6:	d016      	beq.n	8001606 <__ledf2+0xa6>
 80015d8:	2002      	movs	r0, #2
 80015da:	3901      	subs	r1, #1
 80015dc:	4008      	ands	r0, r1
 80015de:	3801      	subs	r0, #1
 80015e0:	e000      	b.n	80015e4 <__ledf2+0x84>
 80015e2:	2002      	movs	r0, #2
 80015e4:	bcf0      	pop	{r4, r5, r6, r7}
 80015e6:	46bb      	mov	fp, r7
 80015e8:	46b2      	mov	sl, r6
 80015ea:	46a9      	mov	r9, r5
 80015ec:	46a0      	mov	r8, r4
 80015ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015f0:	2800      	cmp	r0, #0
 80015f2:	d1f7      	bne.n	80015e4 <__ledf2+0x84>
 80015f4:	2001      	movs	r0, #1
 80015f6:	4240      	negs	r0, r0
 80015f8:	e7f4      	b.n	80015e4 <__ledf2+0x84>
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1ea      	bne.n	80015d4 <__ledf2+0x74>
 80015fe:	464c      	mov	r4, r9
 8001600:	4326      	orrs	r6, r4
 8001602:	d1e7      	bne.n	80015d4 <__ledf2+0x74>
 8001604:	e7e8      	b.n	80015d8 <__ledf2+0x78>
 8001606:	429a      	cmp	r2, r3
 8001608:	dd06      	ble.n	8001618 <__ledf2+0xb8>
 800160a:	4243      	negs	r3, r0
 800160c:	4158      	adcs	r0, r3
 800160e:	2302      	movs	r3, #2
 8001610:	4240      	negs	r0, r0
 8001612:	4018      	ands	r0, r3
 8001614:	3801      	subs	r0, #1
 8001616:	e7e5      	b.n	80015e4 <__ledf2+0x84>
 8001618:	429a      	cmp	r2, r3
 800161a:	dbe9      	blt.n	80015f0 <__ledf2+0x90>
 800161c:	454f      	cmp	r7, r9
 800161e:	d8db      	bhi.n	80015d8 <__ledf2+0x78>
 8001620:	d006      	beq.n	8001630 <__ledf2+0xd0>
 8001622:	2000      	movs	r0, #0
 8001624:	454f      	cmp	r7, r9
 8001626:	d2dd      	bcs.n	80015e4 <__ledf2+0x84>
 8001628:	2900      	cmp	r1, #0
 800162a:	d0e3      	beq.n	80015f4 <__ledf2+0x94>
 800162c:	0008      	movs	r0, r1
 800162e:	e7d9      	b.n	80015e4 <__ledf2+0x84>
 8001630:	45c4      	cmp	ip, r8
 8001632:	d8d1      	bhi.n	80015d8 <__ledf2+0x78>
 8001634:	2000      	movs	r0, #0
 8001636:	45c4      	cmp	ip, r8
 8001638:	d2d4      	bcs.n	80015e4 <__ledf2+0x84>
 800163a:	e7f5      	b.n	8001628 <__ledf2+0xc8>
 800163c:	000007ff 	.word	0x000007ff

08001640 <__aeabi_dmul>:
 8001640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001642:	4657      	mov	r7, sl
 8001644:	464e      	mov	r6, r9
 8001646:	4645      	mov	r5, r8
 8001648:	46de      	mov	lr, fp
 800164a:	b5e0      	push	{r5, r6, r7, lr}
 800164c:	4698      	mov	r8, r3
 800164e:	030c      	lsls	r4, r1, #12
 8001650:	004b      	lsls	r3, r1, #1
 8001652:	0006      	movs	r6, r0
 8001654:	4692      	mov	sl, r2
 8001656:	b087      	sub	sp, #28
 8001658:	0b24      	lsrs	r4, r4, #12
 800165a:	0d5b      	lsrs	r3, r3, #21
 800165c:	0fcf      	lsrs	r7, r1, #31
 800165e:	2b00      	cmp	r3, #0
 8001660:	d06c      	beq.n	800173c <__aeabi_dmul+0xfc>
 8001662:	4add      	ldr	r2, [pc, #884]	; (80019d8 <__aeabi_dmul+0x398>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d100      	bne.n	800166a <__aeabi_dmul+0x2a>
 8001668:	e086      	b.n	8001778 <__aeabi_dmul+0x138>
 800166a:	0f42      	lsrs	r2, r0, #29
 800166c:	00e4      	lsls	r4, r4, #3
 800166e:	4314      	orrs	r4, r2
 8001670:	2280      	movs	r2, #128	; 0x80
 8001672:	0412      	lsls	r2, r2, #16
 8001674:	4314      	orrs	r4, r2
 8001676:	4ad9      	ldr	r2, [pc, #868]	; (80019dc <__aeabi_dmul+0x39c>)
 8001678:	00c5      	lsls	r5, r0, #3
 800167a:	4694      	mov	ip, r2
 800167c:	4463      	add	r3, ip
 800167e:	9300      	str	r3, [sp, #0]
 8001680:	2300      	movs	r3, #0
 8001682:	4699      	mov	r9, r3
 8001684:	469b      	mov	fp, r3
 8001686:	4643      	mov	r3, r8
 8001688:	4642      	mov	r2, r8
 800168a:	031e      	lsls	r6, r3, #12
 800168c:	0fd2      	lsrs	r2, r2, #31
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	4650      	mov	r0, sl
 8001692:	4690      	mov	r8, r2
 8001694:	0b36      	lsrs	r6, r6, #12
 8001696:	0d5b      	lsrs	r3, r3, #21
 8001698:	d100      	bne.n	800169c <__aeabi_dmul+0x5c>
 800169a:	e078      	b.n	800178e <__aeabi_dmul+0x14e>
 800169c:	4ace      	ldr	r2, [pc, #824]	; (80019d8 <__aeabi_dmul+0x398>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d01d      	beq.n	80016de <__aeabi_dmul+0x9e>
 80016a2:	49ce      	ldr	r1, [pc, #824]	; (80019dc <__aeabi_dmul+0x39c>)
 80016a4:	0f42      	lsrs	r2, r0, #29
 80016a6:	468c      	mov	ip, r1
 80016a8:	9900      	ldr	r1, [sp, #0]
 80016aa:	4463      	add	r3, ip
 80016ac:	00f6      	lsls	r6, r6, #3
 80016ae:	468c      	mov	ip, r1
 80016b0:	4316      	orrs	r6, r2
 80016b2:	2280      	movs	r2, #128	; 0x80
 80016b4:	449c      	add	ip, r3
 80016b6:	0412      	lsls	r2, r2, #16
 80016b8:	4663      	mov	r3, ip
 80016ba:	4316      	orrs	r6, r2
 80016bc:	00c2      	lsls	r2, r0, #3
 80016be:	2000      	movs	r0, #0
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	9900      	ldr	r1, [sp, #0]
 80016c4:	4643      	mov	r3, r8
 80016c6:	3101      	adds	r1, #1
 80016c8:	468c      	mov	ip, r1
 80016ca:	4649      	mov	r1, r9
 80016cc:	407b      	eors	r3, r7
 80016ce:	9301      	str	r3, [sp, #4]
 80016d0:	290f      	cmp	r1, #15
 80016d2:	d900      	bls.n	80016d6 <__aeabi_dmul+0x96>
 80016d4:	e07e      	b.n	80017d4 <__aeabi_dmul+0x194>
 80016d6:	4bc2      	ldr	r3, [pc, #776]	; (80019e0 <__aeabi_dmul+0x3a0>)
 80016d8:	0089      	lsls	r1, r1, #2
 80016da:	5859      	ldr	r1, [r3, r1]
 80016dc:	468f      	mov	pc, r1
 80016de:	4652      	mov	r2, sl
 80016e0:	9b00      	ldr	r3, [sp, #0]
 80016e2:	4332      	orrs	r2, r6
 80016e4:	d000      	beq.n	80016e8 <__aeabi_dmul+0xa8>
 80016e6:	e156      	b.n	8001996 <__aeabi_dmul+0x356>
 80016e8:	49bb      	ldr	r1, [pc, #748]	; (80019d8 <__aeabi_dmul+0x398>)
 80016ea:	2600      	movs	r6, #0
 80016ec:	468c      	mov	ip, r1
 80016ee:	4463      	add	r3, ip
 80016f0:	4649      	mov	r1, r9
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	2302      	movs	r3, #2
 80016f6:	4319      	orrs	r1, r3
 80016f8:	4689      	mov	r9, r1
 80016fa:	2002      	movs	r0, #2
 80016fc:	e7e1      	b.n	80016c2 <__aeabi_dmul+0x82>
 80016fe:	4643      	mov	r3, r8
 8001700:	9301      	str	r3, [sp, #4]
 8001702:	0034      	movs	r4, r6
 8001704:	0015      	movs	r5, r2
 8001706:	4683      	mov	fp, r0
 8001708:	465b      	mov	r3, fp
 800170a:	2b02      	cmp	r3, #2
 800170c:	d05e      	beq.n	80017cc <__aeabi_dmul+0x18c>
 800170e:	2b03      	cmp	r3, #3
 8001710:	d100      	bne.n	8001714 <__aeabi_dmul+0xd4>
 8001712:	e1f3      	b.n	8001afc <__aeabi_dmul+0x4bc>
 8001714:	2b01      	cmp	r3, #1
 8001716:	d000      	beq.n	800171a <__aeabi_dmul+0xda>
 8001718:	e118      	b.n	800194c <__aeabi_dmul+0x30c>
 800171a:	2200      	movs	r2, #0
 800171c:	2400      	movs	r4, #0
 800171e:	2500      	movs	r5, #0
 8001720:	9b01      	ldr	r3, [sp, #4]
 8001722:	0512      	lsls	r2, r2, #20
 8001724:	4322      	orrs	r2, r4
 8001726:	07db      	lsls	r3, r3, #31
 8001728:	431a      	orrs	r2, r3
 800172a:	0028      	movs	r0, r5
 800172c:	0011      	movs	r1, r2
 800172e:	b007      	add	sp, #28
 8001730:	bcf0      	pop	{r4, r5, r6, r7}
 8001732:	46bb      	mov	fp, r7
 8001734:	46b2      	mov	sl, r6
 8001736:	46a9      	mov	r9, r5
 8001738:	46a0      	mov	r8, r4
 800173a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800173c:	0025      	movs	r5, r4
 800173e:	4305      	orrs	r5, r0
 8001740:	d100      	bne.n	8001744 <__aeabi_dmul+0x104>
 8001742:	e141      	b.n	80019c8 <__aeabi_dmul+0x388>
 8001744:	2c00      	cmp	r4, #0
 8001746:	d100      	bne.n	800174a <__aeabi_dmul+0x10a>
 8001748:	e1ad      	b.n	8001aa6 <__aeabi_dmul+0x466>
 800174a:	0020      	movs	r0, r4
 800174c:	f000 fea8 	bl	80024a0 <__clzsi2>
 8001750:	0001      	movs	r1, r0
 8001752:	0002      	movs	r2, r0
 8001754:	390b      	subs	r1, #11
 8001756:	231d      	movs	r3, #29
 8001758:	0010      	movs	r0, r2
 800175a:	1a5b      	subs	r3, r3, r1
 800175c:	0031      	movs	r1, r6
 800175e:	0035      	movs	r5, r6
 8001760:	3808      	subs	r0, #8
 8001762:	4084      	lsls	r4, r0
 8001764:	40d9      	lsrs	r1, r3
 8001766:	4085      	lsls	r5, r0
 8001768:	430c      	orrs	r4, r1
 800176a:	489e      	ldr	r0, [pc, #632]	; (80019e4 <__aeabi_dmul+0x3a4>)
 800176c:	1a83      	subs	r3, r0, r2
 800176e:	9300      	str	r3, [sp, #0]
 8001770:	2300      	movs	r3, #0
 8001772:	4699      	mov	r9, r3
 8001774:	469b      	mov	fp, r3
 8001776:	e786      	b.n	8001686 <__aeabi_dmul+0x46>
 8001778:	0005      	movs	r5, r0
 800177a:	4325      	orrs	r5, r4
 800177c:	d000      	beq.n	8001780 <__aeabi_dmul+0x140>
 800177e:	e11c      	b.n	80019ba <__aeabi_dmul+0x37a>
 8001780:	2208      	movs	r2, #8
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	2302      	movs	r3, #2
 8001786:	2400      	movs	r4, #0
 8001788:	4691      	mov	r9, r2
 800178a:	469b      	mov	fp, r3
 800178c:	e77b      	b.n	8001686 <__aeabi_dmul+0x46>
 800178e:	4652      	mov	r2, sl
 8001790:	4332      	orrs	r2, r6
 8001792:	d100      	bne.n	8001796 <__aeabi_dmul+0x156>
 8001794:	e10a      	b.n	80019ac <__aeabi_dmul+0x36c>
 8001796:	2e00      	cmp	r6, #0
 8001798:	d100      	bne.n	800179c <__aeabi_dmul+0x15c>
 800179a:	e176      	b.n	8001a8a <__aeabi_dmul+0x44a>
 800179c:	0030      	movs	r0, r6
 800179e:	f000 fe7f 	bl	80024a0 <__clzsi2>
 80017a2:	0002      	movs	r2, r0
 80017a4:	3a0b      	subs	r2, #11
 80017a6:	231d      	movs	r3, #29
 80017a8:	0001      	movs	r1, r0
 80017aa:	1a9b      	subs	r3, r3, r2
 80017ac:	4652      	mov	r2, sl
 80017ae:	3908      	subs	r1, #8
 80017b0:	40da      	lsrs	r2, r3
 80017b2:	408e      	lsls	r6, r1
 80017b4:	4316      	orrs	r6, r2
 80017b6:	4652      	mov	r2, sl
 80017b8:	408a      	lsls	r2, r1
 80017ba:	9b00      	ldr	r3, [sp, #0]
 80017bc:	4989      	ldr	r1, [pc, #548]	; (80019e4 <__aeabi_dmul+0x3a4>)
 80017be:	1a18      	subs	r0, r3, r0
 80017c0:	0003      	movs	r3, r0
 80017c2:	468c      	mov	ip, r1
 80017c4:	4463      	add	r3, ip
 80017c6:	2000      	movs	r0, #0
 80017c8:	9300      	str	r3, [sp, #0]
 80017ca:	e77a      	b.n	80016c2 <__aeabi_dmul+0x82>
 80017cc:	2400      	movs	r4, #0
 80017ce:	2500      	movs	r5, #0
 80017d0:	4a81      	ldr	r2, [pc, #516]	; (80019d8 <__aeabi_dmul+0x398>)
 80017d2:	e7a5      	b.n	8001720 <__aeabi_dmul+0xe0>
 80017d4:	0c2f      	lsrs	r7, r5, #16
 80017d6:	042d      	lsls	r5, r5, #16
 80017d8:	0c2d      	lsrs	r5, r5, #16
 80017da:	002b      	movs	r3, r5
 80017dc:	0c11      	lsrs	r1, r2, #16
 80017de:	0412      	lsls	r2, r2, #16
 80017e0:	0c12      	lsrs	r2, r2, #16
 80017e2:	4353      	muls	r3, r2
 80017e4:	4698      	mov	r8, r3
 80017e6:	0013      	movs	r3, r2
 80017e8:	0028      	movs	r0, r5
 80017ea:	437b      	muls	r3, r7
 80017ec:	4699      	mov	r9, r3
 80017ee:	4348      	muls	r0, r1
 80017f0:	4448      	add	r0, r9
 80017f2:	4683      	mov	fp, r0
 80017f4:	4640      	mov	r0, r8
 80017f6:	000b      	movs	r3, r1
 80017f8:	0c00      	lsrs	r0, r0, #16
 80017fa:	4682      	mov	sl, r0
 80017fc:	4658      	mov	r0, fp
 80017fe:	437b      	muls	r3, r7
 8001800:	4450      	add	r0, sl
 8001802:	9302      	str	r3, [sp, #8]
 8001804:	4581      	cmp	r9, r0
 8001806:	d906      	bls.n	8001816 <__aeabi_dmul+0x1d6>
 8001808:	469a      	mov	sl, r3
 800180a:	2380      	movs	r3, #128	; 0x80
 800180c:	025b      	lsls	r3, r3, #9
 800180e:	4699      	mov	r9, r3
 8001810:	44ca      	add	sl, r9
 8001812:	4653      	mov	r3, sl
 8001814:	9302      	str	r3, [sp, #8]
 8001816:	0c03      	lsrs	r3, r0, #16
 8001818:	469b      	mov	fp, r3
 800181a:	4643      	mov	r3, r8
 800181c:	041b      	lsls	r3, r3, #16
 800181e:	0400      	lsls	r0, r0, #16
 8001820:	0c1b      	lsrs	r3, r3, #16
 8001822:	4698      	mov	r8, r3
 8001824:	0003      	movs	r3, r0
 8001826:	4443      	add	r3, r8
 8001828:	9304      	str	r3, [sp, #16]
 800182a:	0c33      	lsrs	r3, r6, #16
 800182c:	4699      	mov	r9, r3
 800182e:	002b      	movs	r3, r5
 8001830:	0436      	lsls	r6, r6, #16
 8001832:	0c36      	lsrs	r6, r6, #16
 8001834:	4373      	muls	r3, r6
 8001836:	4698      	mov	r8, r3
 8001838:	0033      	movs	r3, r6
 800183a:	437b      	muls	r3, r7
 800183c:	469a      	mov	sl, r3
 800183e:	464b      	mov	r3, r9
 8001840:	435d      	muls	r5, r3
 8001842:	435f      	muls	r7, r3
 8001844:	4643      	mov	r3, r8
 8001846:	4455      	add	r5, sl
 8001848:	0c18      	lsrs	r0, r3, #16
 800184a:	1940      	adds	r0, r0, r5
 800184c:	4582      	cmp	sl, r0
 800184e:	d903      	bls.n	8001858 <__aeabi_dmul+0x218>
 8001850:	2380      	movs	r3, #128	; 0x80
 8001852:	025b      	lsls	r3, r3, #9
 8001854:	469a      	mov	sl, r3
 8001856:	4457      	add	r7, sl
 8001858:	0c05      	lsrs	r5, r0, #16
 800185a:	19eb      	adds	r3, r5, r7
 800185c:	9305      	str	r3, [sp, #20]
 800185e:	4643      	mov	r3, r8
 8001860:	041d      	lsls	r5, r3, #16
 8001862:	0c2d      	lsrs	r5, r5, #16
 8001864:	0400      	lsls	r0, r0, #16
 8001866:	1940      	adds	r0, r0, r5
 8001868:	0c25      	lsrs	r5, r4, #16
 800186a:	0424      	lsls	r4, r4, #16
 800186c:	0c24      	lsrs	r4, r4, #16
 800186e:	0027      	movs	r7, r4
 8001870:	4357      	muls	r7, r2
 8001872:	436a      	muls	r2, r5
 8001874:	4690      	mov	r8, r2
 8001876:	002a      	movs	r2, r5
 8001878:	0c3b      	lsrs	r3, r7, #16
 800187a:	469a      	mov	sl, r3
 800187c:	434a      	muls	r2, r1
 800187e:	4361      	muls	r1, r4
 8001880:	4441      	add	r1, r8
 8001882:	4451      	add	r1, sl
 8001884:	4483      	add	fp, r0
 8001886:	4588      	cmp	r8, r1
 8001888:	d903      	bls.n	8001892 <__aeabi_dmul+0x252>
 800188a:	2380      	movs	r3, #128	; 0x80
 800188c:	025b      	lsls	r3, r3, #9
 800188e:	4698      	mov	r8, r3
 8001890:	4442      	add	r2, r8
 8001892:	043f      	lsls	r7, r7, #16
 8001894:	0c0b      	lsrs	r3, r1, #16
 8001896:	0c3f      	lsrs	r7, r7, #16
 8001898:	0409      	lsls	r1, r1, #16
 800189a:	19c9      	adds	r1, r1, r7
 800189c:	0027      	movs	r7, r4
 800189e:	4698      	mov	r8, r3
 80018a0:	464b      	mov	r3, r9
 80018a2:	4377      	muls	r7, r6
 80018a4:	435c      	muls	r4, r3
 80018a6:	436e      	muls	r6, r5
 80018a8:	435d      	muls	r5, r3
 80018aa:	0c3b      	lsrs	r3, r7, #16
 80018ac:	4699      	mov	r9, r3
 80018ae:	19a4      	adds	r4, r4, r6
 80018b0:	444c      	add	r4, r9
 80018b2:	4442      	add	r2, r8
 80018b4:	9503      	str	r5, [sp, #12]
 80018b6:	42a6      	cmp	r6, r4
 80018b8:	d904      	bls.n	80018c4 <__aeabi_dmul+0x284>
 80018ba:	2380      	movs	r3, #128	; 0x80
 80018bc:	025b      	lsls	r3, r3, #9
 80018be:	4698      	mov	r8, r3
 80018c0:	4445      	add	r5, r8
 80018c2:	9503      	str	r5, [sp, #12]
 80018c4:	9b02      	ldr	r3, [sp, #8]
 80018c6:	043f      	lsls	r7, r7, #16
 80018c8:	445b      	add	r3, fp
 80018ca:	001e      	movs	r6, r3
 80018cc:	4283      	cmp	r3, r0
 80018ce:	4180      	sbcs	r0, r0
 80018d0:	0423      	lsls	r3, r4, #16
 80018d2:	4698      	mov	r8, r3
 80018d4:	9b05      	ldr	r3, [sp, #20]
 80018d6:	0c3f      	lsrs	r7, r7, #16
 80018d8:	4447      	add	r7, r8
 80018da:	4698      	mov	r8, r3
 80018dc:	1876      	adds	r6, r6, r1
 80018de:	428e      	cmp	r6, r1
 80018e0:	4189      	sbcs	r1, r1
 80018e2:	4447      	add	r7, r8
 80018e4:	4240      	negs	r0, r0
 80018e6:	183d      	adds	r5, r7, r0
 80018e8:	46a8      	mov	r8, r5
 80018ea:	4693      	mov	fp, r2
 80018ec:	4249      	negs	r1, r1
 80018ee:	468a      	mov	sl, r1
 80018f0:	44c3      	add	fp, r8
 80018f2:	429f      	cmp	r7, r3
 80018f4:	41bf      	sbcs	r7, r7
 80018f6:	4580      	cmp	r8, r0
 80018f8:	4180      	sbcs	r0, r0
 80018fa:	9b03      	ldr	r3, [sp, #12]
 80018fc:	44da      	add	sl, fp
 80018fe:	4698      	mov	r8, r3
 8001900:	4653      	mov	r3, sl
 8001902:	4240      	negs	r0, r0
 8001904:	427f      	negs	r7, r7
 8001906:	4307      	orrs	r7, r0
 8001908:	0c24      	lsrs	r4, r4, #16
 800190a:	4593      	cmp	fp, r2
 800190c:	4192      	sbcs	r2, r2
 800190e:	458a      	cmp	sl, r1
 8001910:	4189      	sbcs	r1, r1
 8001912:	193f      	adds	r7, r7, r4
 8001914:	0ddc      	lsrs	r4, r3, #23
 8001916:	9b04      	ldr	r3, [sp, #16]
 8001918:	0275      	lsls	r5, r6, #9
 800191a:	431d      	orrs	r5, r3
 800191c:	1e68      	subs	r0, r5, #1
 800191e:	4185      	sbcs	r5, r0
 8001920:	4653      	mov	r3, sl
 8001922:	4252      	negs	r2, r2
 8001924:	4249      	negs	r1, r1
 8001926:	430a      	orrs	r2, r1
 8001928:	18bf      	adds	r7, r7, r2
 800192a:	4447      	add	r7, r8
 800192c:	0df6      	lsrs	r6, r6, #23
 800192e:	027f      	lsls	r7, r7, #9
 8001930:	4335      	orrs	r5, r6
 8001932:	025a      	lsls	r2, r3, #9
 8001934:	433c      	orrs	r4, r7
 8001936:	4315      	orrs	r5, r2
 8001938:	01fb      	lsls	r3, r7, #7
 800193a:	d400      	bmi.n	800193e <__aeabi_dmul+0x2fe>
 800193c:	e0c1      	b.n	8001ac2 <__aeabi_dmul+0x482>
 800193e:	2101      	movs	r1, #1
 8001940:	086a      	lsrs	r2, r5, #1
 8001942:	400d      	ands	r5, r1
 8001944:	4315      	orrs	r5, r2
 8001946:	07e2      	lsls	r2, r4, #31
 8001948:	4315      	orrs	r5, r2
 800194a:	0864      	lsrs	r4, r4, #1
 800194c:	4926      	ldr	r1, [pc, #152]	; (80019e8 <__aeabi_dmul+0x3a8>)
 800194e:	4461      	add	r1, ip
 8001950:	2900      	cmp	r1, #0
 8001952:	dd56      	ble.n	8001a02 <__aeabi_dmul+0x3c2>
 8001954:	076b      	lsls	r3, r5, #29
 8001956:	d009      	beq.n	800196c <__aeabi_dmul+0x32c>
 8001958:	220f      	movs	r2, #15
 800195a:	402a      	ands	r2, r5
 800195c:	2a04      	cmp	r2, #4
 800195e:	d005      	beq.n	800196c <__aeabi_dmul+0x32c>
 8001960:	1d2a      	adds	r2, r5, #4
 8001962:	42aa      	cmp	r2, r5
 8001964:	41ad      	sbcs	r5, r5
 8001966:	426d      	negs	r5, r5
 8001968:	1964      	adds	r4, r4, r5
 800196a:	0015      	movs	r5, r2
 800196c:	01e3      	lsls	r3, r4, #7
 800196e:	d504      	bpl.n	800197a <__aeabi_dmul+0x33a>
 8001970:	2180      	movs	r1, #128	; 0x80
 8001972:	4a1e      	ldr	r2, [pc, #120]	; (80019ec <__aeabi_dmul+0x3ac>)
 8001974:	00c9      	lsls	r1, r1, #3
 8001976:	4014      	ands	r4, r2
 8001978:	4461      	add	r1, ip
 800197a:	4a1d      	ldr	r2, [pc, #116]	; (80019f0 <__aeabi_dmul+0x3b0>)
 800197c:	4291      	cmp	r1, r2
 800197e:	dd00      	ble.n	8001982 <__aeabi_dmul+0x342>
 8001980:	e724      	b.n	80017cc <__aeabi_dmul+0x18c>
 8001982:	0762      	lsls	r2, r4, #29
 8001984:	08ed      	lsrs	r5, r5, #3
 8001986:	0264      	lsls	r4, r4, #9
 8001988:	0549      	lsls	r1, r1, #21
 800198a:	4315      	orrs	r5, r2
 800198c:	0b24      	lsrs	r4, r4, #12
 800198e:	0d4a      	lsrs	r2, r1, #21
 8001990:	e6c6      	b.n	8001720 <__aeabi_dmul+0xe0>
 8001992:	9701      	str	r7, [sp, #4]
 8001994:	e6b8      	b.n	8001708 <__aeabi_dmul+0xc8>
 8001996:	4a10      	ldr	r2, [pc, #64]	; (80019d8 <__aeabi_dmul+0x398>)
 8001998:	2003      	movs	r0, #3
 800199a:	4694      	mov	ip, r2
 800199c:	4463      	add	r3, ip
 800199e:	464a      	mov	r2, r9
 80019a0:	9300      	str	r3, [sp, #0]
 80019a2:	2303      	movs	r3, #3
 80019a4:	431a      	orrs	r2, r3
 80019a6:	4691      	mov	r9, r2
 80019a8:	4652      	mov	r2, sl
 80019aa:	e68a      	b.n	80016c2 <__aeabi_dmul+0x82>
 80019ac:	4649      	mov	r1, r9
 80019ae:	2301      	movs	r3, #1
 80019b0:	4319      	orrs	r1, r3
 80019b2:	4689      	mov	r9, r1
 80019b4:	2600      	movs	r6, #0
 80019b6:	2001      	movs	r0, #1
 80019b8:	e683      	b.n	80016c2 <__aeabi_dmul+0x82>
 80019ba:	220c      	movs	r2, #12
 80019bc:	9300      	str	r3, [sp, #0]
 80019be:	2303      	movs	r3, #3
 80019c0:	0005      	movs	r5, r0
 80019c2:	4691      	mov	r9, r2
 80019c4:	469b      	mov	fp, r3
 80019c6:	e65e      	b.n	8001686 <__aeabi_dmul+0x46>
 80019c8:	2304      	movs	r3, #4
 80019ca:	4699      	mov	r9, r3
 80019cc:	2300      	movs	r3, #0
 80019ce:	9300      	str	r3, [sp, #0]
 80019d0:	3301      	adds	r3, #1
 80019d2:	2400      	movs	r4, #0
 80019d4:	469b      	mov	fp, r3
 80019d6:	e656      	b.n	8001686 <__aeabi_dmul+0x46>
 80019d8:	000007ff 	.word	0x000007ff
 80019dc:	fffffc01 	.word	0xfffffc01
 80019e0:	0800acc8 	.word	0x0800acc8
 80019e4:	fffffc0d 	.word	0xfffffc0d
 80019e8:	000003ff 	.word	0x000003ff
 80019ec:	feffffff 	.word	0xfeffffff
 80019f0:	000007fe 	.word	0x000007fe
 80019f4:	2300      	movs	r3, #0
 80019f6:	2480      	movs	r4, #128	; 0x80
 80019f8:	2500      	movs	r5, #0
 80019fa:	4a44      	ldr	r2, [pc, #272]	; (8001b0c <__aeabi_dmul+0x4cc>)
 80019fc:	9301      	str	r3, [sp, #4]
 80019fe:	0324      	lsls	r4, r4, #12
 8001a00:	e68e      	b.n	8001720 <__aeabi_dmul+0xe0>
 8001a02:	2001      	movs	r0, #1
 8001a04:	1a40      	subs	r0, r0, r1
 8001a06:	2838      	cmp	r0, #56	; 0x38
 8001a08:	dd00      	ble.n	8001a0c <__aeabi_dmul+0x3cc>
 8001a0a:	e686      	b.n	800171a <__aeabi_dmul+0xda>
 8001a0c:	281f      	cmp	r0, #31
 8001a0e:	dd5b      	ble.n	8001ac8 <__aeabi_dmul+0x488>
 8001a10:	221f      	movs	r2, #31
 8001a12:	0023      	movs	r3, r4
 8001a14:	4252      	negs	r2, r2
 8001a16:	1a51      	subs	r1, r2, r1
 8001a18:	40cb      	lsrs	r3, r1
 8001a1a:	0019      	movs	r1, r3
 8001a1c:	2820      	cmp	r0, #32
 8001a1e:	d003      	beq.n	8001a28 <__aeabi_dmul+0x3e8>
 8001a20:	4a3b      	ldr	r2, [pc, #236]	; (8001b10 <__aeabi_dmul+0x4d0>)
 8001a22:	4462      	add	r2, ip
 8001a24:	4094      	lsls	r4, r2
 8001a26:	4325      	orrs	r5, r4
 8001a28:	1e6a      	subs	r2, r5, #1
 8001a2a:	4195      	sbcs	r5, r2
 8001a2c:	002a      	movs	r2, r5
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	2107      	movs	r1, #7
 8001a32:	000d      	movs	r5, r1
 8001a34:	2400      	movs	r4, #0
 8001a36:	4015      	ands	r5, r2
 8001a38:	4211      	tst	r1, r2
 8001a3a:	d05b      	beq.n	8001af4 <__aeabi_dmul+0x4b4>
 8001a3c:	210f      	movs	r1, #15
 8001a3e:	2400      	movs	r4, #0
 8001a40:	4011      	ands	r1, r2
 8001a42:	2904      	cmp	r1, #4
 8001a44:	d053      	beq.n	8001aee <__aeabi_dmul+0x4ae>
 8001a46:	1d11      	adds	r1, r2, #4
 8001a48:	4291      	cmp	r1, r2
 8001a4a:	4192      	sbcs	r2, r2
 8001a4c:	4252      	negs	r2, r2
 8001a4e:	18a4      	adds	r4, r4, r2
 8001a50:	000a      	movs	r2, r1
 8001a52:	0223      	lsls	r3, r4, #8
 8001a54:	d54b      	bpl.n	8001aee <__aeabi_dmul+0x4ae>
 8001a56:	2201      	movs	r2, #1
 8001a58:	2400      	movs	r4, #0
 8001a5a:	2500      	movs	r5, #0
 8001a5c:	e660      	b.n	8001720 <__aeabi_dmul+0xe0>
 8001a5e:	2380      	movs	r3, #128	; 0x80
 8001a60:	031b      	lsls	r3, r3, #12
 8001a62:	421c      	tst	r4, r3
 8001a64:	d009      	beq.n	8001a7a <__aeabi_dmul+0x43a>
 8001a66:	421e      	tst	r6, r3
 8001a68:	d107      	bne.n	8001a7a <__aeabi_dmul+0x43a>
 8001a6a:	4333      	orrs	r3, r6
 8001a6c:	031c      	lsls	r4, r3, #12
 8001a6e:	4643      	mov	r3, r8
 8001a70:	0015      	movs	r5, r2
 8001a72:	0b24      	lsrs	r4, r4, #12
 8001a74:	4a25      	ldr	r2, [pc, #148]	; (8001b0c <__aeabi_dmul+0x4cc>)
 8001a76:	9301      	str	r3, [sp, #4]
 8001a78:	e652      	b.n	8001720 <__aeabi_dmul+0xe0>
 8001a7a:	2280      	movs	r2, #128	; 0x80
 8001a7c:	0312      	lsls	r2, r2, #12
 8001a7e:	4314      	orrs	r4, r2
 8001a80:	0324      	lsls	r4, r4, #12
 8001a82:	4a22      	ldr	r2, [pc, #136]	; (8001b0c <__aeabi_dmul+0x4cc>)
 8001a84:	0b24      	lsrs	r4, r4, #12
 8001a86:	9701      	str	r7, [sp, #4]
 8001a88:	e64a      	b.n	8001720 <__aeabi_dmul+0xe0>
 8001a8a:	f000 fd09 	bl	80024a0 <__clzsi2>
 8001a8e:	0003      	movs	r3, r0
 8001a90:	001a      	movs	r2, r3
 8001a92:	3215      	adds	r2, #21
 8001a94:	3020      	adds	r0, #32
 8001a96:	2a1c      	cmp	r2, #28
 8001a98:	dc00      	bgt.n	8001a9c <__aeabi_dmul+0x45c>
 8001a9a:	e684      	b.n	80017a6 <__aeabi_dmul+0x166>
 8001a9c:	4656      	mov	r6, sl
 8001a9e:	3b08      	subs	r3, #8
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	409e      	lsls	r6, r3
 8001aa4:	e689      	b.n	80017ba <__aeabi_dmul+0x17a>
 8001aa6:	f000 fcfb 	bl	80024a0 <__clzsi2>
 8001aaa:	0001      	movs	r1, r0
 8001aac:	0002      	movs	r2, r0
 8001aae:	3115      	adds	r1, #21
 8001ab0:	3220      	adds	r2, #32
 8001ab2:	291c      	cmp	r1, #28
 8001ab4:	dc00      	bgt.n	8001ab8 <__aeabi_dmul+0x478>
 8001ab6:	e64e      	b.n	8001756 <__aeabi_dmul+0x116>
 8001ab8:	0034      	movs	r4, r6
 8001aba:	3808      	subs	r0, #8
 8001abc:	2500      	movs	r5, #0
 8001abe:	4084      	lsls	r4, r0
 8001ac0:	e653      	b.n	800176a <__aeabi_dmul+0x12a>
 8001ac2:	9b00      	ldr	r3, [sp, #0]
 8001ac4:	469c      	mov	ip, r3
 8001ac6:	e741      	b.n	800194c <__aeabi_dmul+0x30c>
 8001ac8:	4912      	ldr	r1, [pc, #72]	; (8001b14 <__aeabi_dmul+0x4d4>)
 8001aca:	0022      	movs	r2, r4
 8001acc:	4461      	add	r1, ip
 8001ace:	002e      	movs	r6, r5
 8001ad0:	408d      	lsls	r5, r1
 8001ad2:	408a      	lsls	r2, r1
 8001ad4:	40c6      	lsrs	r6, r0
 8001ad6:	1e69      	subs	r1, r5, #1
 8001ad8:	418d      	sbcs	r5, r1
 8001ada:	4332      	orrs	r2, r6
 8001adc:	432a      	orrs	r2, r5
 8001ade:	40c4      	lsrs	r4, r0
 8001ae0:	0753      	lsls	r3, r2, #29
 8001ae2:	d0b6      	beq.n	8001a52 <__aeabi_dmul+0x412>
 8001ae4:	210f      	movs	r1, #15
 8001ae6:	4011      	ands	r1, r2
 8001ae8:	2904      	cmp	r1, #4
 8001aea:	d1ac      	bne.n	8001a46 <__aeabi_dmul+0x406>
 8001aec:	e7b1      	b.n	8001a52 <__aeabi_dmul+0x412>
 8001aee:	0765      	lsls	r5, r4, #29
 8001af0:	0264      	lsls	r4, r4, #9
 8001af2:	0b24      	lsrs	r4, r4, #12
 8001af4:	08d2      	lsrs	r2, r2, #3
 8001af6:	4315      	orrs	r5, r2
 8001af8:	2200      	movs	r2, #0
 8001afa:	e611      	b.n	8001720 <__aeabi_dmul+0xe0>
 8001afc:	2280      	movs	r2, #128	; 0x80
 8001afe:	0312      	lsls	r2, r2, #12
 8001b00:	4314      	orrs	r4, r2
 8001b02:	0324      	lsls	r4, r4, #12
 8001b04:	4a01      	ldr	r2, [pc, #4]	; (8001b0c <__aeabi_dmul+0x4cc>)
 8001b06:	0b24      	lsrs	r4, r4, #12
 8001b08:	e60a      	b.n	8001720 <__aeabi_dmul+0xe0>
 8001b0a:	46c0      	nop			; (mov r8, r8)
 8001b0c:	000007ff 	.word	0x000007ff
 8001b10:	0000043e 	.word	0x0000043e
 8001b14:	0000041e 	.word	0x0000041e

08001b18 <__aeabi_dsub>:
 8001b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b1a:	4657      	mov	r7, sl
 8001b1c:	464e      	mov	r6, r9
 8001b1e:	4645      	mov	r5, r8
 8001b20:	46de      	mov	lr, fp
 8001b22:	0004      	movs	r4, r0
 8001b24:	b5e0      	push	{r5, r6, r7, lr}
 8001b26:	001f      	movs	r7, r3
 8001b28:	0010      	movs	r0, r2
 8001b2a:	030b      	lsls	r3, r1, #12
 8001b2c:	0f62      	lsrs	r2, r4, #29
 8001b2e:	004e      	lsls	r6, r1, #1
 8001b30:	0fcd      	lsrs	r5, r1, #31
 8001b32:	0a5b      	lsrs	r3, r3, #9
 8001b34:	0339      	lsls	r1, r7, #12
 8001b36:	4313      	orrs	r3, r2
 8001b38:	0a49      	lsrs	r1, r1, #9
 8001b3a:	00e2      	lsls	r2, r4, #3
 8001b3c:	0f44      	lsrs	r4, r0, #29
 8001b3e:	4321      	orrs	r1, r4
 8001b40:	4cc2      	ldr	r4, [pc, #776]	; (8001e4c <__aeabi_dsub+0x334>)
 8001b42:	4691      	mov	r9, r2
 8001b44:	4692      	mov	sl, r2
 8001b46:	00c0      	lsls	r0, r0, #3
 8001b48:	007a      	lsls	r2, r7, #1
 8001b4a:	4680      	mov	r8, r0
 8001b4c:	0d76      	lsrs	r6, r6, #21
 8001b4e:	0d52      	lsrs	r2, r2, #21
 8001b50:	0fff      	lsrs	r7, r7, #31
 8001b52:	42a2      	cmp	r2, r4
 8001b54:	d100      	bne.n	8001b58 <__aeabi_dsub+0x40>
 8001b56:	e0b4      	b.n	8001cc2 <__aeabi_dsub+0x1aa>
 8001b58:	2401      	movs	r4, #1
 8001b5a:	4067      	eors	r7, r4
 8001b5c:	46bb      	mov	fp, r7
 8001b5e:	42bd      	cmp	r5, r7
 8001b60:	d100      	bne.n	8001b64 <__aeabi_dsub+0x4c>
 8001b62:	e088      	b.n	8001c76 <__aeabi_dsub+0x15e>
 8001b64:	1ab4      	subs	r4, r6, r2
 8001b66:	46a4      	mov	ip, r4
 8001b68:	2c00      	cmp	r4, #0
 8001b6a:	dc00      	bgt.n	8001b6e <__aeabi_dsub+0x56>
 8001b6c:	e0b2      	b.n	8001cd4 <__aeabi_dsub+0x1bc>
 8001b6e:	2a00      	cmp	r2, #0
 8001b70:	d100      	bne.n	8001b74 <__aeabi_dsub+0x5c>
 8001b72:	e0c5      	b.n	8001d00 <__aeabi_dsub+0x1e8>
 8001b74:	4ab5      	ldr	r2, [pc, #724]	; (8001e4c <__aeabi_dsub+0x334>)
 8001b76:	4296      	cmp	r6, r2
 8001b78:	d100      	bne.n	8001b7c <__aeabi_dsub+0x64>
 8001b7a:	e28b      	b.n	8002094 <__aeabi_dsub+0x57c>
 8001b7c:	2280      	movs	r2, #128	; 0x80
 8001b7e:	0412      	lsls	r2, r2, #16
 8001b80:	4311      	orrs	r1, r2
 8001b82:	4662      	mov	r2, ip
 8001b84:	2a38      	cmp	r2, #56	; 0x38
 8001b86:	dd00      	ble.n	8001b8a <__aeabi_dsub+0x72>
 8001b88:	e1a1      	b.n	8001ece <__aeabi_dsub+0x3b6>
 8001b8a:	2a1f      	cmp	r2, #31
 8001b8c:	dd00      	ble.n	8001b90 <__aeabi_dsub+0x78>
 8001b8e:	e216      	b.n	8001fbe <__aeabi_dsub+0x4a6>
 8001b90:	2720      	movs	r7, #32
 8001b92:	000c      	movs	r4, r1
 8001b94:	1abf      	subs	r7, r7, r2
 8001b96:	40bc      	lsls	r4, r7
 8001b98:	0002      	movs	r2, r0
 8001b9a:	46a0      	mov	r8, r4
 8001b9c:	4664      	mov	r4, ip
 8001b9e:	40b8      	lsls	r0, r7
 8001ba0:	40e2      	lsrs	r2, r4
 8001ba2:	4644      	mov	r4, r8
 8001ba4:	4314      	orrs	r4, r2
 8001ba6:	0002      	movs	r2, r0
 8001ba8:	1e50      	subs	r0, r2, #1
 8001baa:	4182      	sbcs	r2, r0
 8001bac:	4660      	mov	r0, ip
 8001bae:	40c1      	lsrs	r1, r0
 8001bb0:	4322      	orrs	r2, r4
 8001bb2:	1a5b      	subs	r3, r3, r1
 8001bb4:	4649      	mov	r1, r9
 8001bb6:	1a8c      	subs	r4, r1, r2
 8001bb8:	45a1      	cmp	r9, r4
 8001bba:	4192      	sbcs	r2, r2
 8001bbc:	4252      	negs	r2, r2
 8001bbe:	1a9b      	subs	r3, r3, r2
 8001bc0:	4698      	mov	r8, r3
 8001bc2:	4643      	mov	r3, r8
 8001bc4:	021b      	lsls	r3, r3, #8
 8001bc6:	d400      	bmi.n	8001bca <__aeabi_dsub+0xb2>
 8001bc8:	e117      	b.n	8001dfa <__aeabi_dsub+0x2e2>
 8001bca:	4643      	mov	r3, r8
 8001bcc:	025b      	lsls	r3, r3, #9
 8001bce:	0a5b      	lsrs	r3, r3, #9
 8001bd0:	4698      	mov	r8, r3
 8001bd2:	4643      	mov	r3, r8
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d100      	bne.n	8001bda <__aeabi_dsub+0xc2>
 8001bd8:	e16c      	b.n	8001eb4 <__aeabi_dsub+0x39c>
 8001bda:	4640      	mov	r0, r8
 8001bdc:	f000 fc60 	bl	80024a0 <__clzsi2>
 8001be0:	0002      	movs	r2, r0
 8001be2:	3a08      	subs	r2, #8
 8001be4:	2120      	movs	r1, #32
 8001be6:	0020      	movs	r0, r4
 8001be8:	4643      	mov	r3, r8
 8001bea:	1a89      	subs	r1, r1, r2
 8001bec:	4093      	lsls	r3, r2
 8001bee:	40c8      	lsrs	r0, r1
 8001bf0:	4094      	lsls	r4, r2
 8001bf2:	4303      	orrs	r3, r0
 8001bf4:	4296      	cmp	r6, r2
 8001bf6:	dd00      	ble.n	8001bfa <__aeabi_dsub+0xe2>
 8001bf8:	e157      	b.n	8001eaa <__aeabi_dsub+0x392>
 8001bfa:	1b96      	subs	r6, r2, r6
 8001bfc:	1c71      	adds	r1, r6, #1
 8001bfe:	291f      	cmp	r1, #31
 8001c00:	dd00      	ble.n	8001c04 <__aeabi_dsub+0xec>
 8001c02:	e1cb      	b.n	8001f9c <__aeabi_dsub+0x484>
 8001c04:	2220      	movs	r2, #32
 8001c06:	0018      	movs	r0, r3
 8001c08:	0026      	movs	r6, r4
 8001c0a:	1a52      	subs	r2, r2, r1
 8001c0c:	4094      	lsls	r4, r2
 8001c0e:	4090      	lsls	r0, r2
 8001c10:	40ce      	lsrs	r6, r1
 8001c12:	40cb      	lsrs	r3, r1
 8001c14:	1e62      	subs	r2, r4, #1
 8001c16:	4194      	sbcs	r4, r2
 8001c18:	4330      	orrs	r0, r6
 8001c1a:	4698      	mov	r8, r3
 8001c1c:	2600      	movs	r6, #0
 8001c1e:	4304      	orrs	r4, r0
 8001c20:	0763      	lsls	r3, r4, #29
 8001c22:	d009      	beq.n	8001c38 <__aeabi_dsub+0x120>
 8001c24:	230f      	movs	r3, #15
 8001c26:	4023      	ands	r3, r4
 8001c28:	2b04      	cmp	r3, #4
 8001c2a:	d005      	beq.n	8001c38 <__aeabi_dsub+0x120>
 8001c2c:	1d23      	adds	r3, r4, #4
 8001c2e:	42a3      	cmp	r3, r4
 8001c30:	41a4      	sbcs	r4, r4
 8001c32:	4264      	negs	r4, r4
 8001c34:	44a0      	add	r8, r4
 8001c36:	001c      	movs	r4, r3
 8001c38:	4643      	mov	r3, r8
 8001c3a:	021b      	lsls	r3, r3, #8
 8001c3c:	d400      	bmi.n	8001c40 <__aeabi_dsub+0x128>
 8001c3e:	e0df      	b.n	8001e00 <__aeabi_dsub+0x2e8>
 8001c40:	4b82      	ldr	r3, [pc, #520]	; (8001e4c <__aeabi_dsub+0x334>)
 8001c42:	3601      	adds	r6, #1
 8001c44:	429e      	cmp	r6, r3
 8001c46:	d100      	bne.n	8001c4a <__aeabi_dsub+0x132>
 8001c48:	e0fb      	b.n	8001e42 <__aeabi_dsub+0x32a>
 8001c4a:	4642      	mov	r2, r8
 8001c4c:	4b80      	ldr	r3, [pc, #512]	; (8001e50 <__aeabi_dsub+0x338>)
 8001c4e:	08e4      	lsrs	r4, r4, #3
 8001c50:	401a      	ands	r2, r3
 8001c52:	0013      	movs	r3, r2
 8001c54:	0571      	lsls	r1, r6, #21
 8001c56:	0752      	lsls	r2, r2, #29
 8001c58:	025b      	lsls	r3, r3, #9
 8001c5a:	4322      	orrs	r2, r4
 8001c5c:	0b1b      	lsrs	r3, r3, #12
 8001c5e:	0d49      	lsrs	r1, r1, #21
 8001c60:	0509      	lsls	r1, r1, #20
 8001c62:	07ed      	lsls	r5, r5, #31
 8001c64:	4319      	orrs	r1, r3
 8001c66:	4329      	orrs	r1, r5
 8001c68:	0010      	movs	r0, r2
 8001c6a:	bcf0      	pop	{r4, r5, r6, r7}
 8001c6c:	46bb      	mov	fp, r7
 8001c6e:	46b2      	mov	sl, r6
 8001c70:	46a9      	mov	r9, r5
 8001c72:	46a0      	mov	r8, r4
 8001c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c76:	1ab4      	subs	r4, r6, r2
 8001c78:	46a4      	mov	ip, r4
 8001c7a:	2c00      	cmp	r4, #0
 8001c7c:	dd58      	ble.n	8001d30 <__aeabi_dsub+0x218>
 8001c7e:	2a00      	cmp	r2, #0
 8001c80:	d100      	bne.n	8001c84 <__aeabi_dsub+0x16c>
 8001c82:	e09e      	b.n	8001dc2 <__aeabi_dsub+0x2aa>
 8001c84:	4a71      	ldr	r2, [pc, #452]	; (8001e4c <__aeabi_dsub+0x334>)
 8001c86:	4296      	cmp	r6, r2
 8001c88:	d100      	bne.n	8001c8c <__aeabi_dsub+0x174>
 8001c8a:	e13b      	b.n	8001f04 <__aeabi_dsub+0x3ec>
 8001c8c:	2280      	movs	r2, #128	; 0x80
 8001c8e:	0412      	lsls	r2, r2, #16
 8001c90:	4311      	orrs	r1, r2
 8001c92:	4662      	mov	r2, ip
 8001c94:	2a38      	cmp	r2, #56	; 0x38
 8001c96:	dd00      	ble.n	8001c9a <__aeabi_dsub+0x182>
 8001c98:	e0c1      	b.n	8001e1e <__aeabi_dsub+0x306>
 8001c9a:	2a1f      	cmp	r2, #31
 8001c9c:	dc00      	bgt.n	8001ca0 <__aeabi_dsub+0x188>
 8001c9e:	e1bb      	b.n	8002018 <__aeabi_dsub+0x500>
 8001ca0:	000c      	movs	r4, r1
 8001ca2:	3a20      	subs	r2, #32
 8001ca4:	40d4      	lsrs	r4, r2
 8001ca6:	0022      	movs	r2, r4
 8001ca8:	4664      	mov	r4, ip
 8001caa:	2c20      	cmp	r4, #32
 8001cac:	d004      	beq.n	8001cb8 <__aeabi_dsub+0x1a0>
 8001cae:	2740      	movs	r7, #64	; 0x40
 8001cb0:	1b3f      	subs	r7, r7, r4
 8001cb2:	40b9      	lsls	r1, r7
 8001cb4:	4308      	orrs	r0, r1
 8001cb6:	4680      	mov	r8, r0
 8001cb8:	4644      	mov	r4, r8
 8001cba:	1e61      	subs	r1, r4, #1
 8001cbc:	418c      	sbcs	r4, r1
 8001cbe:	4314      	orrs	r4, r2
 8001cc0:	e0b1      	b.n	8001e26 <__aeabi_dsub+0x30e>
 8001cc2:	000c      	movs	r4, r1
 8001cc4:	4304      	orrs	r4, r0
 8001cc6:	d02a      	beq.n	8001d1e <__aeabi_dsub+0x206>
 8001cc8:	46bb      	mov	fp, r7
 8001cca:	42bd      	cmp	r5, r7
 8001ccc:	d02d      	beq.n	8001d2a <__aeabi_dsub+0x212>
 8001cce:	4c61      	ldr	r4, [pc, #388]	; (8001e54 <__aeabi_dsub+0x33c>)
 8001cd0:	46a4      	mov	ip, r4
 8001cd2:	44b4      	add	ip, r6
 8001cd4:	4664      	mov	r4, ip
 8001cd6:	2c00      	cmp	r4, #0
 8001cd8:	d05c      	beq.n	8001d94 <__aeabi_dsub+0x27c>
 8001cda:	1b94      	subs	r4, r2, r6
 8001cdc:	46a4      	mov	ip, r4
 8001cde:	2e00      	cmp	r6, #0
 8001ce0:	d000      	beq.n	8001ce4 <__aeabi_dsub+0x1cc>
 8001ce2:	e115      	b.n	8001f10 <__aeabi_dsub+0x3f8>
 8001ce4:	464d      	mov	r5, r9
 8001ce6:	431d      	orrs	r5, r3
 8001ce8:	d100      	bne.n	8001cec <__aeabi_dsub+0x1d4>
 8001cea:	e1c3      	b.n	8002074 <__aeabi_dsub+0x55c>
 8001cec:	1e65      	subs	r5, r4, #1
 8001cee:	2c01      	cmp	r4, #1
 8001cf0:	d100      	bne.n	8001cf4 <__aeabi_dsub+0x1dc>
 8001cf2:	e20c      	b.n	800210e <__aeabi_dsub+0x5f6>
 8001cf4:	4e55      	ldr	r6, [pc, #340]	; (8001e4c <__aeabi_dsub+0x334>)
 8001cf6:	42b4      	cmp	r4, r6
 8001cf8:	d100      	bne.n	8001cfc <__aeabi_dsub+0x1e4>
 8001cfa:	e1f8      	b.n	80020ee <__aeabi_dsub+0x5d6>
 8001cfc:	46ac      	mov	ip, r5
 8001cfe:	e10e      	b.n	8001f1e <__aeabi_dsub+0x406>
 8001d00:	000a      	movs	r2, r1
 8001d02:	4302      	orrs	r2, r0
 8001d04:	d100      	bne.n	8001d08 <__aeabi_dsub+0x1f0>
 8001d06:	e136      	b.n	8001f76 <__aeabi_dsub+0x45e>
 8001d08:	0022      	movs	r2, r4
 8001d0a:	3a01      	subs	r2, #1
 8001d0c:	2c01      	cmp	r4, #1
 8001d0e:	d100      	bne.n	8001d12 <__aeabi_dsub+0x1fa>
 8001d10:	e1c6      	b.n	80020a0 <__aeabi_dsub+0x588>
 8001d12:	4c4e      	ldr	r4, [pc, #312]	; (8001e4c <__aeabi_dsub+0x334>)
 8001d14:	45a4      	cmp	ip, r4
 8001d16:	d100      	bne.n	8001d1a <__aeabi_dsub+0x202>
 8001d18:	e0f4      	b.n	8001f04 <__aeabi_dsub+0x3ec>
 8001d1a:	4694      	mov	ip, r2
 8001d1c:	e731      	b.n	8001b82 <__aeabi_dsub+0x6a>
 8001d1e:	2401      	movs	r4, #1
 8001d20:	4067      	eors	r7, r4
 8001d22:	46bb      	mov	fp, r7
 8001d24:	42bd      	cmp	r5, r7
 8001d26:	d000      	beq.n	8001d2a <__aeabi_dsub+0x212>
 8001d28:	e71c      	b.n	8001b64 <__aeabi_dsub+0x4c>
 8001d2a:	4c4a      	ldr	r4, [pc, #296]	; (8001e54 <__aeabi_dsub+0x33c>)
 8001d2c:	46a4      	mov	ip, r4
 8001d2e:	44b4      	add	ip, r6
 8001d30:	4664      	mov	r4, ip
 8001d32:	2c00      	cmp	r4, #0
 8001d34:	d100      	bne.n	8001d38 <__aeabi_dsub+0x220>
 8001d36:	e0cf      	b.n	8001ed8 <__aeabi_dsub+0x3c0>
 8001d38:	1b94      	subs	r4, r2, r6
 8001d3a:	46a4      	mov	ip, r4
 8001d3c:	2e00      	cmp	r6, #0
 8001d3e:	d100      	bne.n	8001d42 <__aeabi_dsub+0x22a>
 8001d40:	e15c      	b.n	8001ffc <__aeabi_dsub+0x4e4>
 8001d42:	4e42      	ldr	r6, [pc, #264]	; (8001e4c <__aeabi_dsub+0x334>)
 8001d44:	42b2      	cmp	r2, r6
 8001d46:	d100      	bne.n	8001d4a <__aeabi_dsub+0x232>
 8001d48:	e1ec      	b.n	8002124 <__aeabi_dsub+0x60c>
 8001d4a:	2680      	movs	r6, #128	; 0x80
 8001d4c:	0436      	lsls	r6, r6, #16
 8001d4e:	4333      	orrs	r3, r6
 8001d50:	4664      	mov	r4, ip
 8001d52:	2c38      	cmp	r4, #56	; 0x38
 8001d54:	dd00      	ble.n	8001d58 <__aeabi_dsub+0x240>
 8001d56:	e1b3      	b.n	80020c0 <__aeabi_dsub+0x5a8>
 8001d58:	2c1f      	cmp	r4, #31
 8001d5a:	dd00      	ble.n	8001d5e <__aeabi_dsub+0x246>
 8001d5c:	e238      	b.n	80021d0 <__aeabi_dsub+0x6b8>
 8001d5e:	2620      	movs	r6, #32
 8001d60:	1b36      	subs	r6, r6, r4
 8001d62:	001c      	movs	r4, r3
 8001d64:	40b4      	lsls	r4, r6
 8001d66:	464f      	mov	r7, r9
 8001d68:	46a0      	mov	r8, r4
 8001d6a:	4664      	mov	r4, ip
 8001d6c:	40e7      	lsrs	r7, r4
 8001d6e:	4644      	mov	r4, r8
 8001d70:	433c      	orrs	r4, r7
 8001d72:	464f      	mov	r7, r9
 8001d74:	40b7      	lsls	r7, r6
 8001d76:	003e      	movs	r6, r7
 8001d78:	1e77      	subs	r7, r6, #1
 8001d7a:	41be      	sbcs	r6, r7
 8001d7c:	4334      	orrs	r4, r6
 8001d7e:	4666      	mov	r6, ip
 8001d80:	40f3      	lsrs	r3, r6
 8001d82:	18c9      	adds	r1, r1, r3
 8001d84:	1824      	adds	r4, r4, r0
 8001d86:	4284      	cmp	r4, r0
 8001d88:	419b      	sbcs	r3, r3
 8001d8a:	425b      	negs	r3, r3
 8001d8c:	4698      	mov	r8, r3
 8001d8e:	0016      	movs	r6, r2
 8001d90:	4488      	add	r8, r1
 8001d92:	e04e      	b.n	8001e32 <__aeabi_dsub+0x31a>
 8001d94:	4a30      	ldr	r2, [pc, #192]	; (8001e58 <__aeabi_dsub+0x340>)
 8001d96:	1c74      	adds	r4, r6, #1
 8001d98:	4214      	tst	r4, r2
 8001d9a:	d000      	beq.n	8001d9e <__aeabi_dsub+0x286>
 8001d9c:	e0d6      	b.n	8001f4c <__aeabi_dsub+0x434>
 8001d9e:	464a      	mov	r2, r9
 8001da0:	431a      	orrs	r2, r3
 8001da2:	2e00      	cmp	r6, #0
 8001da4:	d000      	beq.n	8001da8 <__aeabi_dsub+0x290>
 8001da6:	e15b      	b.n	8002060 <__aeabi_dsub+0x548>
 8001da8:	2a00      	cmp	r2, #0
 8001daa:	d100      	bne.n	8001dae <__aeabi_dsub+0x296>
 8001dac:	e1a5      	b.n	80020fa <__aeabi_dsub+0x5e2>
 8001dae:	000a      	movs	r2, r1
 8001db0:	4302      	orrs	r2, r0
 8001db2:	d000      	beq.n	8001db6 <__aeabi_dsub+0x29e>
 8001db4:	e1bb      	b.n	800212e <__aeabi_dsub+0x616>
 8001db6:	464a      	mov	r2, r9
 8001db8:	0759      	lsls	r1, r3, #29
 8001dba:	08d2      	lsrs	r2, r2, #3
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	08db      	lsrs	r3, r3, #3
 8001dc0:	e027      	b.n	8001e12 <__aeabi_dsub+0x2fa>
 8001dc2:	000a      	movs	r2, r1
 8001dc4:	4302      	orrs	r2, r0
 8001dc6:	d100      	bne.n	8001dca <__aeabi_dsub+0x2b2>
 8001dc8:	e174      	b.n	80020b4 <__aeabi_dsub+0x59c>
 8001dca:	0022      	movs	r2, r4
 8001dcc:	3a01      	subs	r2, #1
 8001dce:	2c01      	cmp	r4, #1
 8001dd0:	d005      	beq.n	8001dde <__aeabi_dsub+0x2c6>
 8001dd2:	4c1e      	ldr	r4, [pc, #120]	; (8001e4c <__aeabi_dsub+0x334>)
 8001dd4:	45a4      	cmp	ip, r4
 8001dd6:	d100      	bne.n	8001dda <__aeabi_dsub+0x2c2>
 8001dd8:	e094      	b.n	8001f04 <__aeabi_dsub+0x3ec>
 8001dda:	4694      	mov	ip, r2
 8001ddc:	e759      	b.n	8001c92 <__aeabi_dsub+0x17a>
 8001dde:	4448      	add	r0, r9
 8001de0:	4548      	cmp	r0, r9
 8001de2:	4192      	sbcs	r2, r2
 8001de4:	185b      	adds	r3, r3, r1
 8001de6:	4698      	mov	r8, r3
 8001de8:	0004      	movs	r4, r0
 8001dea:	4252      	negs	r2, r2
 8001dec:	4490      	add	r8, r2
 8001dee:	4643      	mov	r3, r8
 8001df0:	2602      	movs	r6, #2
 8001df2:	021b      	lsls	r3, r3, #8
 8001df4:	d500      	bpl.n	8001df8 <__aeabi_dsub+0x2e0>
 8001df6:	e0c4      	b.n	8001f82 <__aeabi_dsub+0x46a>
 8001df8:	3e01      	subs	r6, #1
 8001dfa:	0763      	lsls	r3, r4, #29
 8001dfc:	d000      	beq.n	8001e00 <__aeabi_dsub+0x2e8>
 8001dfe:	e711      	b.n	8001c24 <__aeabi_dsub+0x10c>
 8001e00:	4643      	mov	r3, r8
 8001e02:	46b4      	mov	ip, r6
 8001e04:	0759      	lsls	r1, r3, #29
 8001e06:	08e2      	lsrs	r2, r4, #3
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	08db      	lsrs	r3, r3, #3
 8001e0c:	490f      	ldr	r1, [pc, #60]	; (8001e4c <__aeabi_dsub+0x334>)
 8001e0e:	458c      	cmp	ip, r1
 8001e10:	d040      	beq.n	8001e94 <__aeabi_dsub+0x37c>
 8001e12:	4661      	mov	r1, ip
 8001e14:	031b      	lsls	r3, r3, #12
 8001e16:	0549      	lsls	r1, r1, #21
 8001e18:	0b1b      	lsrs	r3, r3, #12
 8001e1a:	0d49      	lsrs	r1, r1, #21
 8001e1c:	e720      	b.n	8001c60 <__aeabi_dsub+0x148>
 8001e1e:	4301      	orrs	r1, r0
 8001e20:	000c      	movs	r4, r1
 8001e22:	1e61      	subs	r1, r4, #1
 8001e24:	418c      	sbcs	r4, r1
 8001e26:	444c      	add	r4, r9
 8001e28:	454c      	cmp	r4, r9
 8001e2a:	4192      	sbcs	r2, r2
 8001e2c:	4252      	negs	r2, r2
 8001e2e:	4690      	mov	r8, r2
 8001e30:	4498      	add	r8, r3
 8001e32:	4643      	mov	r3, r8
 8001e34:	021b      	lsls	r3, r3, #8
 8001e36:	d5e0      	bpl.n	8001dfa <__aeabi_dsub+0x2e2>
 8001e38:	4b04      	ldr	r3, [pc, #16]	; (8001e4c <__aeabi_dsub+0x334>)
 8001e3a:	3601      	adds	r6, #1
 8001e3c:	429e      	cmp	r6, r3
 8001e3e:	d000      	beq.n	8001e42 <__aeabi_dsub+0x32a>
 8001e40:	e09f      	b.n	8001f82 <__aeabi_dsub+0x46a>
 8001e42:	0031      	movs	r1, r6
 8001e44:	2300      	movs	r3, #0
 8001e46:	2200      	movs	r2, #0
 8001e48:	e70a      	b.n	8001c60 <__aeabi_dsub+0x148>
 8001e4a:	46c0      	nop			; (mov r8, r8)
 8001e4c:	000007ff 	.word	0x000007ff
 8001e50:	ff7fffff 	.word	0xff7fffff
 8001e54:	fffff801 	.word	0xfffff801
 8001e58:	000007fe 	.word	0x000007fe
 8001e5c:	2a00      	cmp	r2, #0
 8001e5e:	d100      	bne.n	8001e62 <__aeabi_dsub+0x34a>
 8001e60:	e160      	b.n	8002124 <__aeabi_dsub+0x60c>
 8001e62:	000a      	movs	r2, r1
 8001e64:	4302      	orrs	r2, r0
 8001e66:	d04d      	beq.n	8001f04 <__aeabi_dsub+0x3ec>
 8001e68:	464a      	mov	r2, r9
 8001e6a:	075c      	lsls	r4, r3, #29
 8001e6c:	08d2      	lsrs	r2, r2, #3
 8001e6e:	4322      	orrs	r2, r4
 8001e70:	2480      	movs	r4, #128	; 0x80
 8001e72:	08db      	lsrs	r3, r3, #3
 8001e74:	0324      	lsls	r4, r4, #12
 8001e76:	4223      	tst	r3, r4
 8001e78:	d007      	beq.n	8001e8a <__aeabi_dsub+0x372>
 8001e7a:	08ce      	lsrs	r6, r1, #3
 8001e7c:	4226      	tst	r6, r4
 8001e7e:	d104      	bne.n	8001e8a <__aeabi_dsub+0x372>
 8001e80:	465d      	mov	r5, fp
 8001e82:	0033      	movs	r3, r6
 8001e84:	08c2      	lsrs	r2, r0, #3
 8001e86:	0749      	lsls	r1, r1, #29
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	0f51      	lsrs	r1, r2, #29
 8001e8c:	00d2      	lsls	r2, r2, #3
 8001e8e:	08d2      	lsrs	r2, r2, #3
 8001e90:	0749      	lsls	r1, r1, #29
 8001e92:	430a      	orrs	r2, r1
 8001e94:	0011      	movs	r1, r2
 8001e96:	4319      	orrs	r1, r3
 8001e98:	d100      	bne.n	8001e9c <__aeabi_dsub+0x384>
 8001e9a:	e1c8      	b.n	800222e <__aeabi_dsub+0x716>
 8001e9c:	2180      	movs	r1, #128	; 0x80
 8001e9e:	0309      	lsls	r1, r1, #12
 8001ea0:	430b      	orrs	r3, r1
 8001ea2:	031b      	lsls	r3, r3, #12
 8001ea4:	49d5      	ldr	r1, [pc, #852]	; (80021fc <__aeabi_dsub+0x6e4>)
 8001ea6:	0b1b      	lsrs	r3, r3, #12
 8001ea8:	e6da      	b.n	8001c60 <__aeabi_dsub+0x148>
 8001eaa:	49d5      	ldr	r1, [pc, #852]	; (8002200 <__aeabi_dsub+0x6e8>)
 8001eac:	1ab6      	subs	r6, r6, r2
 8001eae:	400b      	ands	r3, r1
 8001eb0:	4698      	mov	r8, r3
 8001eb2:	e6b5      	b.n	8001c20 <__aeabi_dsub+0x108>
 8001eb4:	0020      	movs	r0, r4
 8001eb6:	f000 faf3 	bl	80024a0 <__clzsi2>
 8001eba:	0002      	movs	r2, r0
 8001ebc:	3218      	adds	r2, #24
 8001ebe:	2a1f      	cmp	r2, #31
 8001ec0:	dc00      	bgt.n	8001ec4 <__aeabi_dsub+0x3ac>
 8001ec2:	e68f      	b.n	8001be4 <__aeabi_dsub+0xcc>
 8001ec4:	0023      	movs	r3, r4
 8001ec6:	3808      	subs	r0, #8
 8001ec8:	4083      	lsls	r3, r0
 8001eca:	2400      	movs	r4, #0
 8001ecc:	e692      	b.n	8001bf4 <__aeabi_dsub+0xdc>
 8001ece:	4308      	orrs	r0, r1
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	1e50      	subs	r0, r2, #1
 8001ed4:	4182      	sbcs	r2, r0
 8001ed6:	e66d      	b.n	8001bb4 <__aeabi_dsub+0x9c>
 8001ed8:	4cca      	ldr	r4, [pc, #808]	; (8002204 <__aeabi_dsub+0x6ec>)
 8001eda:	1c72      	adds	r2, r6, #1
 8001edc:	4222      	tst	r2, r4
 8001ede:	d000      	beq.n	8001ee2 <__aeabi_dsub+0x3ca>
 8001ee0:	e0ad      	b.n	800203e <__aeabi_dsub+0x526>
 8001ee2:	464a      	mov	r2, r9
 8001ee4:	431a      	orrs	r2, r3
 8001ee6:	2e00      	cmp	r6, #0
 8001ee8:	d1b8      	bne.n	8001e5c <__aeabi_dsub+0x344>
 8001eea:	2a00      	cmp	r2, #0
 8001eec:	d100      	bne.n	8001ef0 <__aeabi_dsub+0x3d8>
 8001eee:	e158      	b.n	80021a2 <__aeabi_dsub+0x68a>
 8001ef0:	000a      	movs	r2, r1
 8001ef2:	4302      	orrs	r2, r0
 8001ef4:	d000      	beq.n	8001ef8 <__aeabi_dsub+0x3e0>
 8001ef6:	e159      	b.n	80021ac <__aeabi_dsub+0x694>
 8001ef8:	464a      	mov	r2, r9
 8001efa:	0759      	lsls	r1, r3, #29
 8001efc:	08d2      	lsrs	r2, r2, #3
 8001efe:	430a      	orrs	r2, r1
 8001f00:	08db      	lsrs	r3, r3, #3
 8001f02:	e786      	b.n	8001e12 <__aeabi_dsub+0x2fa>
 8001f04:	464a      	mov	r2, r9
 8001f06:	0759      	lsls	r1, r3, #29
 8001f08:	08d2      	lsrs	r2, r2, #3
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	08db      	lsrs	r3, r3, #3
 8001f0e:	e7c1      	b.n	8001e94 <__aeabi_dsub+0x37c>
 8001f10:	4dba      	ldr	r5, [pc, #744]	; (80021fc <__aeabi_dsub+0x6e4>)
 8001f12:	42aa      	cmp	r2, r5
 8001f14:	d100      	bne.n	8001f18 <__aeabi_dsub+0x400>
 8001f16:	e11e      	b.n	8002156 <__aeabi_dsub+0x63e>
 8001f18:	2580      	movs	r5, #128	; 0x80
 8001f1a:	042d      	lsls	r5, r5, #16
 8001f1c:	432b      	orrs	r3, r5
 8001f1e:	4664      	mov	r4, ip
 8001f20:	2c38      	cmp	r4, #56	; 0x38
 8001f22:	dc5d      	bgt.n	8001fe0 <__aeabi_dsub+0x4c8>
 8001f24:	2c1f      	cmp	r4, #31
 8001f26:	dd00      	ble.n	8001f2a <__aeabi_dsub+0x412>
 8001f28:	e0d0      	b.n	80020cc <__aeabi_dsub+0x5b4>
 8001f2a:	2520      	movs	r5, #32
 8001f2c:	4667      	mov	r7, ip
 8001f2e:	1b2d      	subs	r5, r5, r4
 8001f30:	464e      	mov	r6, r9
 8001f32:	001c      	movs	r4, r3
 8001f34:	40fe      	lsrs	r6, r7
 8001f36:	40ac      	lsls	r4, r5
 8001f38:	4334      	orrs	r4, r6
 8001f3a:	464e      	mov	r6, r9
 8001f3c:	40ae      	lsls	r6, r5
 8001f3e:	0035      	movs	r5, r6
 8001f40:	40fb      	lsrs	r3, r7
 8001f42:	1e6e      	subs	r6, r5, #1
 8001f44:	41b5      	sbcs	r5, r6
 8001f46:	1ac9      	subs	r1, r1, r3
 8001f48:	432c      	orrs	r4, r5
 8001f4a:	e04e      	b.n	8001fea <__aeabi_dsub+0x4d2>
 8001f4c:	464a      	mov	r2, r9
 8001f4e:	1a14      	subs	r4, r2, r0
 8001f50:	45a1      	cmp	r9, r4
 8001f52:	4192      	sbcs	r2, r2
 8001f54:	4252      	negs	r2, r2
 8001f56:	4690      	mov	r8, r2
 8001f58:	1a5f      	subs	r7, r3, r1
 8001f5a:	003a      	movs	r2, r7
 8001f5c:	4647      	mov	r7, r8
 8001f5e:	1bd2      	subs	r2, r2, r7
 8001f60:	4690      	mov	r8, r2
 8001f62:	0212      	lsls	r2, r2, #8
 8001f64:	d500      	bpl.n	8001f68 <__aeabi_dsub+0x450>
 8001f66:	e08b      	b.n	8002080 <__aeabi_dsub+0x568>
 8001f68:	4642      	mov	r2, r8
 8001f6a:	4322      	orrs	r2, r4
 8001f6c:	d000      	beq.n	8001f70 <__aeabi_dsub+0x458>
 8001f6e:	e630      	b.n	8001bd2 <__aeabi_dsub+0xba>
 8001f70:	2300      	movs	r3, #0
 8001f72:	2500      	movs	r5, #0
 8001f74:	e74d      	b.n	8001e12 <__aeabi_dsub+0x2fa>
 8001f76:	464a      	mov	r2, r9
 8001f78:	0759      	lsls	r1, r3, #29
 8001f7a:	08d2      	lsrs	r2, r2, #3
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	08db      	lsrs	r3, r3, #3
 8001f80:	e744      	b.n	8001e0c <__aeabi_dsub+0x2f4>
 8001f82:	4642      	mov	r2, r8
 8001f84:	4b9e      	ldr	r3, [pc, #632]	; (8002200 <__aeabi_dsub+0x6e8>)
 8001f86:	0861      	lsrs	r1, r4, #1
 8001f88:	401a      	ands	r2, r3
 8001f8a:	0013      	movs	r3, r2
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	4014      	ands	r4, r2
 8001f90:	430c      	orrs	r4, r1
 8001f92:	07da      	lsls	r2, r3, #31
 8001f94:	085b      	lsrs	r3, r3, #1
 8001f96:	4698      	mov	r8, r3
 8001f98:	4314      	orrs	r4, r2
 8001f9a:	e641      	b.n	8001c20 <__aeabi_dsub+0x108>
 8001f9c:	001a      	movs	r2, r3
 8001f9e:	3e1f      	subs	r6, #31
 8001fa0:	40f2      	lsrs	r2, r6
 8001fa2:	0016      	movs	r6, r2
 8001fa4:	2920      	cmp	r1, #32
 8001fa6:	d003      	beq.n	8001fb0 <__aeabi_dsub+0x498>
 8001fa8:	2240      	movs	r2, #64	; 0x40
 8001faa:	1a51      	subs	r1, r2, r1
 8001fac:	408b      	lsls	r3, r1
 8001fae:	431c      	orrs	r4, r3
 8001fb0:	1e62      	subs	r2, r4, #1
 8001fb2:	4194      	sbcs	r4, r2
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	4334      	orrs	r4, r6
 8001fb8:	4698      	mov	r8, r3
 8001fba:	2600      	movs	r6, #0
 8001fbc:	e71d      	b.n	8001dfa <__aeabi_dsub+0x2e2>
 8001fbe:	000c      	movs	r4, r1
 8001fc0:	3a20      	subs	r2, #32
 8001fc2:	40d4      	lsrs	r4, r2
 8001fc4:	0022      	movs	r2, r4
 8001fc6:	4664      	mov	r4, ip
 8001fc8:	2c20      	cmp	r4, #32
 8001fca:	d004      	beq.n	8001fd6 <__aeabi_dsub+0x4be>
 8001fcc:	2740      	movs	r7, #64	; 0x40
 8001fce:	1b3f      	subs	r7, r7, r4
 8001fd0:	40b9      	lsls	r1, r7
 8001fd2:	4308      	orrs	r0, r1
 8001fd4:	4680      	mov	r8, r0
 8001fd6:	4644      	mov	r4, r8
 8001fd8:	1e61      	subs	r1, r4, #1
 8001fda:	418c      	sbcs	r4, r1
 8001fdc:	4322      	orrs	r2, r4
 8001fde:	e5e9      	b.n	8001bb4 <__aeabi_dsub+0x9c>
 8001fe0:	464c      	mov	r4, r9
 8001fe2:	4323      	orrs	r3, r4
 8001fe4:	001c      	movs	r4, r3
 8001fe6:	1e63      	subs	r3, r4, #1
 8001fe8:	419c      	sbcs	r4, r3
 8001fea:	1b04      	subs	r4, r0, r4
 8001fec:	42a0      	cmp	r0, r4
 8001fee:	419b      	sbcs	r3, r3
 8001ff0:	425b      	negs	r3, r3
 8001ff2:	1acb      	subs	r3, r1, r3
 8001ff4:	4698      	mov	r8, r3
 8001ff6:	465d      	mov	r5, fp
 8001ff8:	0016      	movs	r6, r2
 8001ffa:	e5e2      	b.n	8001bc2 <__aeabi_dsub+0xaa>
 8001ffc:	464e      	mov	r6, r9
 8001ffe:	431e      	orrs	r6, r3
 8002000:	d100      	bne.n	8002004 <__aeabi_dsub+0x4ec>
 8002002:	e0ae      	b.n	8002162 <__aeabi_dsub+0x64a>
 8002004:	1e66      	subs	r6, r4, #1
 8002006:	2c01      	cmp	r4, #1
 8002008:	d100      	bne.n	800200c <__aeabi_dsub+0x4f4>
 800200a:	e0fd      	b.n	8002208 <__aeabi_dsub+0x6f0>
 800200c:	4f7b      	ldr	r7, [pc, #492]	; (80021fc <__aeabi_dsub+0x6e4>)
 800200e:	42bc      	cmp	r4, r7
 8002010:	d100      	bne.n	8002014 <__aeabi_dsub+0x4fc>
 8002012:	e107      	b.n	8002224 <__aeabi_dsub+0x70c>
 8002014:	46b4      	mov	ip, r6
 8002016:	e69b      	b.n	8001d50 <__aeabi_dsub+0x238>
 8002018:	4664      	mov	r4, ip
 800201a:	2220      	movs	r2, #32
 800201c:	1b12      	subs	r2, r2, r4
 800201e:	000c      	movs	r4, r1
 8002020:	4094      	lsls	r4, r2
 8002022:	0007      	movs	r7, r0
 8002024:	4090      	lsls	r0, r2
 8002026:	46a0      	mov	r8, r4
 8002028:	4664      	mov	r4, ip
 800202a:	1e42      	subs	r2, r0, #1
 800202c:	4190      	sbcs	r0, r2
 800202e:	4662      	mov	r2, ip
 8002030:	40e7      	lsrs	r7, r4
 8002032:	4644      	mov	r4, r8
 8002034:	40d1      	lsrs	r1, r2
 8002036:	433c      	orrs	r4, r7
 8002038:	4304      	orrs	r4, r0
 800203a:	185b      	adds	r3, r3, r1
 800203c:	e6f3      	b.n	8001e26 <__aeabi_dsub+0x30e>
 800203e:	4c6f      	ldr	r4, [pc, #444]	; (80021fc <__aeabi_dsub+0x6e4>)
 8002040:	42a2      	cmp	r2, r4
 8002042:	d100      	bne.n	8002046 <__aeabi_dsub+0x52e>
 8002044:	e0d5      	b.n	80021f2 <__aeabi_dsub+0x6da>
 8002046:	4448      	add	r0, r9
 8002048:	185b      	adds	r3, r3, r1
 800204a:	4548      	cmp	r0, r9
 800204c:	4189      	sbcs	r1, r1
 800204e:	4249      	negs	r1, r1
 8002050:	185b      	adds	r3, r3, r1
 8002052:	07dc      	lsls	r4, r3, #31
 8002054:	0840      	lsrs	r0, r0, #1
 8002056:	085b      	lsrs	r3, r3, #1
 8002058:	4698      	mov	r8, r3
 800205a:	0016      	movs	r6, r2
 800205c:	4304      	orrs	r4, r0
 800205e:	e6cc      	b.n	8001dfa <__aeabi_dsub+0x2e2>
 8002060:	2a00      	cmp	r2, #0
 8002062:	d000      	beq.n	8002066 <__aeabi_dsub+0x54e>
 8002064:	e082      	b.n	800216c <__aeabi_dsub+0x654>
 8002066:	000a      	movs	r2, r1
 8002068:	4302      	orrs	r2, r0
 800206a:	d140      	bne.n	80020ee <__aeabi_dsub+0x5d6>
 800206c:	2380      	movs	r3, #128	; 0x80
 800206e:	2500      	movs	r5, #0
 8002070:	031b      	lsls	r3, r3, #12
 8002072:	e713      	b.n	8001e9c <__aeabi_dsub+0x384>
 8002074:	074b      	lsls	r3, r1, #29
 8002076:	08c2      	lsrs	r2, r0, #3
 8002078:	431a      	orrs	r2, r3
 800207a:	465d      	mov	r5, fp
 800207c:	08cb      	lsrs	r3, r1, #3
 800207e:	e6c5      	b.n	8001e0c <__aeabi_dsub+0x2f4>
 8002080:	464a      	mov	r2, r9
 8002082:	1a84      	subs	r4, r0, r2
 8002084:	42a0      	cmp	r0, r4
 8002086:	4192      	sbcs	r2, r2
 8002088:	1acb      	subs	r3, r1, r3
 800208a:	4252      	negs	r2, r2
 800208c:	1a9b      	subs	r3, r3, r2
 800208e:	4698      	mov	r8, r3
 8002090:	465d      	mov	r5, fp
 8002092:	e59e      	b.n	8001bd2 <__aeabi_dsub+0xba>
 8002094:	464a      	mov	r2, r9
 8002096:	0759      	lsls	r1, r3, #29
 8002098:	08d2      	lsrs	r2, r2, #3
 800209a:	430a      	orrs	r2, r1
 800209c:	08db      	lsrs	r3, r3, #3
 800209e:	e6f9      	b.n	8001e94 <__aeabi_dsub+0x37c>
 80020a0:	464a      	mov	r2, r9
 80020a2:	1a14      	subs	r4, r2, r0
 80020a4:	45a1      	cmp	r9, r4
 80020a6:	4192      	sbcs	r2, r2
 80020a8:	1a5b      	subs	r3, r3, r1
 80020aa:	4252      	negs	r2, r2
 80020ac:	1a9b      	subs	r3, r3, r2
 80020ae:	4698      	mov	r8, r3
 80020b0:	2601      	movs	r6, #1
 80020b2:	e586      	b.n	8001bc2 <__aeabi_dsub+0xaa>
 80020b4:	464a      	mov	r2, r9
 80020b6:	0759      	lsls	r1, r3, #29
 80020b8:	08d2      	lsrs	r2, r2, #3
 80020ba:	430a      	orrs	r2, r1
 80020bc:	08db      	lsrs	r3, r3, #3
 80020be:	e6a5      	b.n	8001e0c <__aeabi_dsub+0x2f4>
 80020c0:	464c      	mov	r4, r9
 80020c2:	4323      	orrs	r3, r4
 80020c4:	001c      	movs	r4, r3
 80020c6:	1e63      	subs	r3, r4, #1
 80020c8:	419c      	sbcs	r4, r3
 80020ca:	e65b      	b.n	8001d84 <__aeabi_dsub+0x26c>
 80020cc:	4665      	mov	r5, ip
 80020ce:	001e      	movs	r6, r3
 80020d0:	3d20      	subs	r5, #32
 80020d2:	40ee      	lsrs	r6, r5
 80020d4:	2c20      	cmp	r4, #32
 80020d6:	d005      	beq.n	80020e4 <__aeabi_dsub+0x5cc>
 80020d8:	2540      	movs	r5, #64	; 0x40
 80020da:	1b2d      	subs	r5, r5, r4
 80020dc:	40ab      	lsls	r3, r5
 80020de:	464c      	mov	r4, r9
 80020e0:	431c      	orrs	r4, r3
 80020e2:	46a2      	mov	sl, r4
 80020e4:	4654      	mov	r4, sl
 80020e6:	1e63      	subs	r3, r4, #1
 80020e8:	419c      	sbcs	r4, r3
 80020ea:	4334      	orrs	r4, r6
 80020ec:	e77d      	b.n	8001fea <__aeabi_dsub+0x4d2>
 80020ee:	074b      	lsls	r3, r1, #29
 80020f0:	08c2      	lsrs	r2, r0, #3
 80020f2:	431a      	orrs	r2, r3
 80020f4:	465d      	mov	r5, fp
 80020f6:	08cb      	lsrs	r3, r1, #3
 80020f8:	e6cc      	b.n	8001e94 <__aeabi_dsub+0x37c>
 80020fa:	000a      	movs	r2, r1
 80020fc:	4302      	orrs	r2, r0
 80020fe:	d100      	bne.n	8002102 <__aeabi_dsub+0x5ea>
 8002100:	e736      	b.n	8001f70 <__aeabi_dsub+0x458>
 8002102:	074b      	lsls	r3, r1, #29
 8002104:	08c2      	lsrs	r2, r0, #3
 8002106:	431a      	orrs	r2, r3
 8002108:	465d      	mov	r5, fp
 800210a:	08cb      	lsrs	r3, r1, #3
 800210c:	e681      	b.n	8001e12 <__aeabi_dsub+0x2fa>
 800210e:	464a      	mov	r2, r9
 8002110:	1a84      	subs	r4, r0, r2
 8002112:	42a0      	cmp	r0, r4
 8002114:	4192      	sbcs	r2, r2
 8002116:	1acb      	subs	r3, r1, r3
 8002118:	4252      	negs	r2, r2
 800211a:	1a9b      	subs	r3, r3, r2
 800211c:	4698      	mov	r8, r3
 800211e:	465d      	mov	r5, fp
 8002120:	2601      	movs	r6, #1
 8002122:	e54e      	b.n	8001bc2 <__aeabi_dsub+0xaa>
 8002124:	074b      	lsls	r3, r1, #29
 8002126:	08c2      	lsrs	r2, r0, #3
 8002128:	431a      	orrs	r2, r3
 800212a:	08cb      	lsrs	r3, r1, #3
 800212c:	e6b2      	b.n	8001e94 <__aeabi_dsub+0x37c>
 800212e:	464a      	mov	r2, r9
 8002130:	1a14      	subs	r4, r2, r0
 8002132:	45a1      	cmp	r9, r4
 8002134:	4192      	sbcs	r2, r2
 8002136:	1a5f      	subs	r7, r3, r1
 8002138:	4252      	negs	r2, r2
 800213a:	1aba      	subs	r2, r7, r2
 800213c:	4690      	mov	r8, r2
 800213e:	0212      	lsls	r2, r2, #8
 8002140:	d56b      	bpl.n	800221a <__aeabi_dsub+0x702>
 8002142:	464a      	mov	r2, r9
 8002144:	1a84      	subs	r4, r0, r2
 8002146:	42a0      	cmp	r0, r4
 8002148:	4192      	sbcs	r2, r2
 800214a:	1acb      	subs	r3, r1, r3
 800214c:	4252      	negs	r2, r2
 800214e:	1a9b      	subs	r3, r3, r2
 8002150:	4698      	mov	r8, r3
 8002152:	465d      	mov	r5, fp
 8002154:	e564      	b.n	8001c20 <__aeabi_dsub+0x108>
 8002156:	074b      	lsls	r3, r1, #29
 8002158:	08c2      	lsrs	r2, r0, #3
 800215a:	431a      	orrs	r2, r3
 800215c:	465d      	mov	r5, fp
 800215e:	08cb      	lsrs	r3, r1, #3
 8002160:	e698      	b.n	8001e94 <__aeabi_dsub+0x37c>
 8002162:	074b      	lsls	r3, r1, #29
 8002164:	08c2      	lsrs	r2, r0, #3
 8002166:	431a      	orrs	r2, r3
 8002168:	08cb      	lsrs	r3, r1, #3
 800216a:	e64f      	b.n	8001e0c <__aeabi_dsub+0x2f4>
 800216c:	000a      	movs	r2, r1
 800216e:	4302      	orrs	r2, r0
 8002170:	d090      	beq.n	8002094 <__aeabi_dsub+0x57c>
 8002172:	464a      	mov	r2, r9
 8002174:	075c      	lsls	r4, r3, #29
 8002176:	08d2      	lsrs	r2, r2, #3
 8002178:	4314      	orrs	r4, r2
 800217a:	2280      	movs	r2, #128	; 0x80
 800217c:	08db      	lsrs	r3, r3, #3
 800217e:	0312      	lsls	r2, r2, #12
 8002180:	4213      	tst	r3, r2
 8002182:	d008      	beq.n	8002196 <__aeabi_dsub+0x67e>
 8002184:	08ce      	lsrs	r6, r1, #3
 8002186:	4216      	tst	r6, r2
 8002188:	d105      	bne.n	8002196 <__aeabi_dsub+0x67e>
 800218a:	08c0      	lsrs	r0, r0, #3
 800218c:	0749      	lsls	r1, r1, #29
 800218e:	4308      	orrs	r0, r1
 8002190:	0004      	movs	r4, r0
 8002192:	465d      	mov	r5, fp
 8002194:	0033      	movs	r3, r6
 8002196:	0f61      	lsrs	r1, r4, #29
 8002198:	00e2      	lsls	r2, r4, #3
 800219a:	0749      	lsls	r1, r1, #29
 800219c:	08d2      	lsrs	r2, r2, #3
 800219e:	430a      	orrs	r2, r1
 80021a0:	e678      	b.n	8001e94 <__aeabi_dsub+0x37c>
 80021a2:	074b      	lsls	r3, r1, #29
 80021a4:	08c2      	lsrs	r2, r0, #3
 80021a6:	431a      	orrs	r2, r3
 80021a8:	08cb      	lsrs	r3, r1, #3
 80021aa:	e632      	b.n	8001e12 <__aeabi_dsub+0x2fa>
 80021ac:	4448      	add	r0, r9
 80021ae:	185b      	adds	r3, r3, r1
 80021b0:	4548      	cmp	r0, r9
 80021b2:	4192      	sbcs	r2, r2
 80021b4:	4698      	mov	r8, r3
 80021b6:	4252      	negs	r2, r2
 80021b8:	4490      	add	r8, r2
 80021ba:	4643      	mov	r3, r8
 80021bc:	0004      	movs	r4, r0
 80021be:	021b      	lsls	r3, r3, #8
 80021c0:	d400      	bmi.n	80021c4 <__aeabi_dsub+0x6ac>
 80021c2:	e61a      	b.n	8001dfa <__aeabi_dsub+0x2e2>
 80021c4:	4642      	mov	r2, r8
 80021c6:	4b0e      	ldr	r3, [pc, #56]	; (8002200 <__aeabi_dsub+0x6e8>)
 80021c8:	2601      	movs	r6, #1
 80021ca:	401a      	ands	r2, r3
 80021cc:	4690      	mov	r8, r2
 80021ce:	e614      	b.n	8001dfa <__aeabi_dsub+0x2e2>
 80021d0:	4666      	mov	r6, ip
 80021d2:	001f      	movs	r7, r3
 80021d4:	3e20      	subs	r6, #32
 80021d6:	40f7      	lsrs	r7, r6
 80021d8:	2c20      	cmp	r4, #32
 80021da:	d005      	beq.n	80021e8 <__aeabi_dsub+0x6d0>
 80021dc:	2640      	movs	r6, #64	; 0x40
 80021de:	1b36      	subs	r6, r6, r4
 80021e0:	40b3      	lsls	r3, r6
 80021e2:	464c      	mov	r4, r9
 80021e4:	431c      	orrs	r4, r3
 80021e6:	46a2      	mov	sl, r4
 80021e8:	4654      	mov	r4, sl
 80021ea:	1e63      	subs	r3, r4, #1
 80021ec:	419c      	sbcs	r4, r3
 80021ee:	433c      	orrs	r4, r7
 80021f0:	e5c8      	b.n	8001d84 <__aeabi_dsub+0x26c>
 80021f2:	0011      	movs	r1, r2
 80021f4:	2300      	movs	r3, #0
 80021f6:	2200      	movs	r2, #0
 80021f8:	e532      	b.n	8001c60 <__aeabi_dsub+0x148>
 80021fa:	46c0      	nop			; (mov r8, r8)
 80021fc:	000007ff 	.word	0x000007ff
 8002200:	ff7fffff 	.word	0xff7fffff
 8002204:	000007fe 	.word	0x000007fe
 8002208:	464a      	mov	r2, r9
 800220a:	1814      	adds	r4, r2, r0
 800220c:	4284      	cmp	r4, r0
 800220e:	4192      	sbcs	r2, r2
 8002210:	185b      	adds	r3, r3, r1
 8002212:	4698      	mov	r8, r3
 8002214:	4252      	negs	r2, r2
 8002216:	4490      	add	r8, r2
 8002218:	e5e9      	b.n	8001dee <__aeabi_dsub+0x2d6>
 800221a:	4642      	mov	r2, r8
 800221c:	4322      	orrs	r2, r4
 800221e:	d100      	bne.n	8002222 <__aeabi_dsub+0x70a>
 8002220:	e6a6      	b.n	8001f70 <__aeabi_dsub+0x458>
 8002222:	e5ea      	b.n	8001dfa <__aeabi_dsub+0x2e2>
 8002224:	074b      	lsls	r3, r1, #29
 8002226:	08c2      	lsrs	r2, r0, #3
 8002228:	431a      	orrs	r2, r3
 800222a:	08cb      	lsrs	r3, r1, #3
 800222c:	e632      	b.n	8001e94 <__aeabi_dsub+0x37c>
 800222e:	2200      	movs	r2, #0
 8002230:	4901      	ldr	r1, [pc, #4]	; (8002238 <__aeabi_dsub+0x720>)
 8002232:	0013      	movs	r3, r2
 8002234:	e514      	b.n	8001c60 <__aeabi_dsub+0x148>
 8002236:	46c0      	nop			; (mov r8, r8)
 8002238:	000007ff 	.word	0x000007ff

0800223c <__aeabi_dcmpun>:
 800223c:	b570      	push	{r4, r5, r6, lr}
 800223e:	0005      	movs	r5, r0
 8002240:	480c      	ldr	r0, [pc, #48]	; (8002274 <__aeabi_dcmpun+0x38>)
 8002242:	030c      	lsls	r4, r1, #12
 8002244:	0016      	movs	r6, r2
 8002246:	0049      	lsls	r1, r1, #1
 8002248:	031a      	lsls	r2, r3, #12
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	0b24      	lsrs	r4, r4, #12
 800224e:	0d49      	lsrs	r1, r1, #21
 8002250:	0b12      	lsrs	r2, r2, #12
 8002252:	0d5b      	lsrs	r3, r3, #21
 8002254:	4281      	cmp	r1, r0
 8002256:	d008      	beq.n	800226a <__aeabi_dcmpun+0x2e>
 8002258:	4906      	ldr	r1, [pc, #24]	; (8002274 <__aeabi_dcmpun+0x38>)
 800225a:	2000      	movs	r0, #0
 800225c:	428b      	cmp	r3, r1
 800225e:	d103      	bne.n	8002268 <__aeabi_dcmpun+0x2c>
 8002260:	4332      	orrs	r2, r6
 8002262:	0010      	movs	r0, r2
 8002264:	1e42      	subs	r2, r0, #1
 8002266:	4190      	sbcs	r0, r2
 8002268:	bd70      	pop	{r4, r5, r6, pc}
 800226a:	2001      	movs	r0, #1
 800226c:	432c      	orrs	r4, r5
 800226e:	d1fb      	bne.n	8002268 <__aeabi_dcmpun+0x2c>
 8002270:	e7f2      	b.n	8002258 <__aeabi_dcmpun+0x1c>
 8002272:	46c0      	nop			; (mov r8, r8)
 8002274:	000007ff 	.word	0x000007ff

08002278 <__aeabi_d2iz>:
 8002278:	000a      	movs	r2, r1
 800227a:	b530      	push	{r4, r5, lr}
 800227c:	4c13      	ldr	r4, [pc, #76]	; (80022cc <__aeabi_d2iz+0x54>)
 800227e:	0053      	lsls	r3, r2, #1
 8002280:	0309      	lsls	r1, r1, #12
 8002282:	0005      	movs	r5, r0
 8002284:	0b09      	lsrs	r1, r1, #12
 8002286:	2000      	movs	r0, #0
 8002288:	0d5b      	lsrs	r3, r3, #21
 800228a:	0fd2      	lsrs	r2, r2, #31
 800228c:	42a3      	cmp	r3, r4
 800228e:	dd04      	ble.n	800229a <__aeabi_d2iz+0x22>
 8002290:	480f      	ldr	r0, [pc, #60]	; (80022d0 <__aeabi_d2iz+0x58>)
 8002292:	4283      	cmp	r3, r0
 8002294:	dd02      	ble.n	800229c <__aeabi_d2iz+0x24>
 8002296:	4b0f      	ldr	r3, [pc, #60]	; (80022d4 <__aeabi_d2iz+0x5c>)
 8002298:	18d0      	adds	r0, r2, r3
 800229a:	bd30      	pop	{r4, r5, pc}
 800229c:	2080      	movs	r0, #128	; 0x80
 800229e:	0340      	lsls	r0, r0, #13
 80022a0:	4301      	orrs	r1, r0
 80022a2:	480d      	ldr	r0, [pc, #52]	; (80022d8 <__aeabi_d2iz+0x60>)
 80022a4:	1ac0      	subs	r0, r0, r3
 80022a6:	281f      	cmp	r0, #31
 80022a8:	dd08      	ble.n	80022bc <__aeabi_d2iz+0x44>
 80022aa:	480c      	ldr	r0, [pc, #48]	; (80022dc <__aeabi_d2iz+0x64>)
 80022ac:	1ac3      	subs	r3, r0, r3
 80022ae:	40d9      	lsrs	r1, r3
 80022b0:	000b      	movs	r3, r1
 80022b2:	4258      	negs	r0, r3
 80022b4:	2a00      	cmp	r2, #0
 80022b6:	d1f0      	bne.n	800229a <__aeabi_d2iz+0x22>
 80022b8:	0018      	movs	r0, r3
 80022ba:	e7ee      	b.n	800229a <__aeabi_d2iz+0x22>
 80022bc:	4c08      	ldr	r4, [pc, #32]	; (80022e0 <__aeabi_d2iz+0x68>)
 80022be:	40c5      	lsrs	r5, r0
 80022c0:	46a4      	mov	ip, r4
 80022c2:	4463      	add	r3, ip
 80022c4:	4099      	lsls	r1, r3
 80022c6:	000b      	movs	r3, r1
 80022c8:	432b      	orrs	r3, r5
 80022ca:	e7f2      	b.n	80022b2 <__aeabi_d2iz+0x3a>
 80022cc:	000003fe 	.word	0x000003fe
 80022d0:	0000041d 	.word	0x0000041d
 80022d4:	7fffffff 	.word	0x7fffffff
 80022d8:	00000433 	.word	0x00000433
 80022dc:	00000413 	.word	0x00000413
 80022e0:	fffffbed 	.word	0xfffffbed

080022e4 <__aeabi_i2d>:
 80022e4:	b570      	push	{r4, r5, r6, lr}
 80022e6:	2800      	cmp	r0, #0
 80022e8:	d016      	beq.n	8002318 <__aeabi_i2d+0x34>
 80022ea:	17c3      	asrs	r3, r0, #31
 80022ec:	18c5      	adds	r5, r0, r3
 80022ee:	405d      	eors	r5, r3
 80022f0:	0fc4      	lsrs	r4, r0, #31
 80022f2:	0028      	movs	r0, r5
 80022f4:	f000 f8d4 	bl	80024a0 <__clzsi2>
 80022f8:	4a11      	ldr	r2, [pc, #68]	; (8002340 <__aeabi_i2d+0x5c>)
 80022fa:	1a12      	subs	r2, r2, r0
 80022fc:	280a      	cmp	r0, #10
 80022fe:	dc16      	bgt.n	800232e <__aeabi_i2d+0x4a>
 8002300:	0003      	movs	r3, r0
 8002302:	002e      	movs	r6, r5
 8002304:	3315      	adds	r3, #21
 8002306:	409e      	lsls	r6, r3
 8002308:	230b      	movs	r3, #11
 800230a:	1a18      	subs	r0, r3, r0
 800230c:	40c5      	lsrs	r5, r0
 800230e:	0553      	lsls	r3, r2, #21
 8002310:	032d      	lsls	r5, r5, #12
 8002312:	0b2d      	lsrs	r5, r5, #12
 8002314:	0d5b      	lsrs	r3, r3, #21
 8002316:	e003      	b.n	8002320 <__aeabi_i2d+0x3c>
 8002318:	2400      	movs	r4, #0
 800231a:	2300      	movs	r3, #0
 800231c:	2500      	movs	r5, #0
 800231e:	2600      	movs	r6, #0
 8002320:	051b      	lsls	r3, r3, #20
 8002322:	432b      	orrs	r3, r5
 8002324:	07e4      	lsls	r4, r4, #31
 8002326:	4323      	orrs	r3, r4
 8002328:	0030      	movs	r0, r6
 800232a:	0019      	movs	r1, r3
 800232c:	bd70      	pop	{r4, r5, r6, pc}
 800232e:	380b      	subs	r0, #11
 8002330:	4085      	lsls	r5, r0
 8002332:	0553      	lsls	r3, r2, #21
 8002334:	032d      	lsls	r5, r5, #12
 8002336:	2600      	movs	r6, #0
 8002338:	0b2d      	lsrs	r5, r5, #12
 800233a:	0d5b      	lsrs	r3, r3, #21
 800233c:	e7f0      	b.n	8002320 <__aeabi_i2d+0x3c>
 800233e:	46c0      	nop			; (mov r8, r8)
 8002340:	0000041e 	.word	0x0000041e

08002344 <__aeabi_ui2d>:
 8002344:	b510      	push	{r4, lr}
 8002346:	1e04      	subs	r4, r0, #0
 8002348:	d010      	beq.n	800236c <__aeabi_ui2d+0x28>
 800234a:	f000 f8a9 	bl	80024a0 <__clzsi2>
 800234e:	4b0f      	ldr	r3, [pc, #60]	; (800238c <__aeabi_ui2d+0x48>)
 8002350:	1a1b      	subs	r3, r3, r0
 8002352:	280a      	cmp	r0, #10
 8002354:	dc11      	bgt.n	800237a <__aeabi_ui2d+0x36>
 8002356:	220b      	movs	r2, #11
 8002358:	0021      	movs	r1, r4
 800235a:	1a12      	subs	r2, r2, r0
 800235c:	40d1      	lsrs	r1, r2
 800235e:	3015      	adds	r0, #21
 8002360:	030a      	lsls	r2, r1, #12
 8002362:	055b      	lsls	r3, r3, #21
 8002364:	4084      	lsls	r4, r0
 8002366:	0b12      	lsrs	r2, r2, #12
 8002368:	0d5b      	lsrs	r3, r3, #21
 800236a:	e001      	b.n	8002370 <__aeabi_ui2d+0x2c>
 800236c:	2300      	movs	r3, #0
 800236e:	2200      	movs	r2, #0
 8002370:	051b      	lsls	r3, r3, #20
 8002372:	4313      	orrs	r3, r2
 8002374:	0020      	movs	r0, r4
 8002376:	0019      	movs	r1, r3
 8002378:	bd10      	pop	{r4, pc}
 800237a:	0022      	movs	r2, r4
 800237c:	380b      	subs	r0, #11
 800237e:	4082      	lsls	r2, r0
 8002380:	055b      	lsls	r3, r3, #21
 8002382:	0312      	lsls	r2, r2, #12
 8002384:	2400      	movs	r4, #0
 8002386:	0b12      	lsrs	r2, r2, #12
 8002388:	0d5b      	lsrs	r3, r3, #21
 800238a:	e7f1      	b.n	8002370 <__aeabi_ui2d+0x2c>
 800238c:	0000041e 	.word	0x0000041e

08002390 <__aeabi_d2f>:
 8002390:	0002      	movs	r2, r0
 8002392:	004b      	lsls	r3, r1, #1
 8002394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002396:	0308      	lsls	r0, r1, #12
 8002398:	0d5b      	lsrs	r3, r3, #21
 800239a:	4e3d      	ldr	r6, [pc, #244]	; (8002490 <__aeabi_d2f+0x100>)
 800239c:	0fcc      	lsrs	r4, r1, #31
 800239e:	0a40      	lsrs	r0, r0, #9
 80023a0:	0f51      	lsrs	r1, r2, #29
 80023a2:	1c5f      	adds	r7, r3, #1
 80023a4:	4308      	orrs	r0, r1
 80023a6:	00d5      	lsls	r5, r2, #3
 80023a8:	4237      	tst	r7, r6
 80023aa:	d00a      	beq.n	80023c2 <__aeabi_d2f+0x32>
 80023ac:	4939      	ldr	r1, [pc, #228]	; (8002494 <__aeabi_d2f+0x104>)
 80023ae:	185e      	adds	r6, r3, r1
 80023b0:	2efe      	cmp	r6, #254	; 0xfe
 80023b2:	dd16      	ble.n	80023e2 <__aeabi_d2f+0x52>
 80023b4:	23ff      	movs	r3, #255	; 0xff
 80023b6:	2100      	movs	r1, #0
 80023b8:	05db      	lsls	r3, r3, #23
 80023ba:	430b      	orrs	r3, r1
 80023bc:	07e0      	lsls	r0, r4, #31
 80023be:	4318      	orrs	r0, r3
 80023c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d106      	bne.n	80023d4 <__aeabi_d2f+0x44>
 80023c6:	4328      	orrs	r0, r5
 80023c8:	d027      	beq.n	800241a <__aeabi_d2f+0x8a>
 80023ca:	2105      	movs	r1, #5
 80023cc:	0189      	lsls	r1, r1, #6
 80023ce:	0a49      	lsrs	r1, r1, #9
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	e7f1      	b.n	80023b8 <__aeabi_d2f+0x28>
 80023d4:	4305      	orrs	r5, r0
 80023d6:	d0ed      	beq.n	80023b4 <__aeabi_d2f+0x24>
 80023d8:	2180      	movs	r1, #128	; 0x80
 80023da:	03c9      	lsls	r1, r1, #15
 80023dc:	23ff      	movs	r3, #255	; 0xff
 80023de:	4301      	orrs	r1, r0
 80023e0:	e7ea      	b.n	80023b8 <__aeabi_d2f+0x28>
 80023e2:	2e00      	cmp	r6, #0
 80023e4:	dd1c      	ble.n	8002420 <__aeabi_d2f+0x90>
 80023e6:	0192      	lsls	r2, r2, #6
 80023e8:	0011      	movs	r1, r2
 80023ea:	1e4a      	subs	r2, r1, #1
 80023ec:	4191      	sbcs	r1, r2
 80023ee:	00c0      	lsls	r0, r0, #3
 80023f0:	0f6d      	lsrs	r5, r5, #29
 80023f2:	4301      	orrs	r1, r0
 80023f4:	4329      	orrs	r1, r5
 80023f6:	074b      	lsls	r3, r1, #29
 80023f8:	d048      	beq.n	800248c <__aeabi_d2f+0xfc>
 80023fa:	230f      	movs	r3, #15
 80023fc:	400b      	ands	r3, r1
 80023fe:	2b04      	cmp	r3, #4
 8002400:	d000      	beq.n	8002404 <__aeabi_d2f+0x74>
 8002402:	3104      	adds	r1, #4
 8002404:	2380      	movs	r3, #128	; 0x80
 8002406:	04db      	lsls	r3, r3, #19
 8002408:	400b      	ands	r3, r1
 800240a:	d03f      	beq.n	800248c <__aeabi_d2f+0xfc>
 800240c:	1c72      	adds	r2, r6, #1
 800240e:	2efe      	cmp	r6, #254	; 0xfe
 8002410:	d0d0      	beq.n	80023b4 <__aeabi_d2f+0x24>
 8002412:	0189      	lsls	r1, r1, #6
 8002414:	0a49      	lsrs	r1, r1, #9
 8002416:	b2d3      	uxtb	r3, r2
 8002418:	e7ce      	b.n	80023b8 <__aeabi_d2f+0x28>
 800241a:	2300      	movs	r3, #0
 800241c:	2100      	movs	r1, #0
 800241e:	e7cb      	b.n	80023b8 <__aeabi_d2f+0x28>
 8002420:	0032      	movs	r2, r6
 8002422:	3217      	adds	r2, #23
 8002424:	db22      	blt.n	800246c <__aeabi_d2f+0xdc>
 8002426:	2180      	movs	r1, #128	; 0x80
 8002428:	221e      	movs	r2, #30
 800242a:	0409      	lsls	r1, r1, #16
 800242c:	4308      	orrs	r0, r1
 800242e:	1b92      	subs	r2, r2, r6
 8002430:	2a1f      	cmp	r2, #31
 8002432:	dd1d      	ble.n	8002470 <__aeabi_d2f+0xe0>
 8002434:	2102      	movs	r1, #2
 8002436:	4249      	negs	r1, r1
 8002438:	1b8e      	subs	r6, r1, r6
 800243a:	0001      	movs	r1, r0
 800243c:	40f1      	lsrs	r1, r6
 800243e:	000e      	movs	r6, r1
 8002440:	2a20      	cmp	r2, #32
 8002442:	d004      	beq.n	800244e <__aeabi_d2f+0xbe>
 8002444:	4a14      	ldr	r2, [pc, #80]	; (8002498 <__aeabi_d2f+0x108>)
 8002446:	4694      	mov	ip, r2
 8002448:	4463      	add	r3, ip
 800244a:	4098      	lsls	r0, r3
 800244c:	4305      	orrs	r5, r0
 800244e:	0029      	movs	r1, r5
 8002450:	1e4d      	subs	r5, r1, #1
 8002452:	41a9      	sbcs	r1, r5
 8002454:	4331      	orrs	r1, r6
 8002456:	2600      	movs	r6, #0
 8002458:	074b      	lsls	r3, r1, #29
 800245a:	d1ce      	bne.n	80023fa <__aeabi_d2f+0x6a>
 800245c:	2080      	movs	r0, #128	; 0x80
 800245e:	000b      	movs	r3, r1
 8002460:	04c0      	lsls	r0, r0, #19
 8002462:	2201      	movs	r2, #1
 8002464:	4003      	ands	r3, r0
 8002466:	4201      	tst	r1, r0
 8002468:	d1d3      	bne.n	8002412 <__aeabi_d2f+0x82>
 800246a:	e7af      	b.n	80023cc <__aeabi_d2f+0x3c>
 800246c:	2300      	movs	r3, #0
 800246e:	e7ac      	b.n	80023ca <__aeabi_d2f+0x3a>
 8002470:	490a      	ldr	r1, [pc, #40]	; (800249c <__aeabi_d2f+0x10c>)
 8002472:	468c      	mov	ip, r1
 8002474:	0029      	movs	r1, r5
 8002476:	4463      	add	r3, ip
 8002478:	40d1      	lsrs	r1, r2
 800247a:	409d      	lsls	r5, r3
 800247c:	000a      	movs	r2, r1
 800247e:	0029      	movs	r1, r5
 8002480:	4098      	lsls	r0, r3
 8002482:	1e4d      	subs	r5, r1, #1
 8002484:	41a9      	sbcs	r1, r5
 8002486:	4301      	orrs	r1, r0
 8002488:	4311      	orrs	r1, r2
 800248a:	e7e4      	b.n	8002456 <__aeabi_d2f+0xc6>
 800248c:	0033      	movs	r3, r6
 800248e:	e79d      	b.n	80023cc <__aeabi_d2f+0x3c>
 8002490:	000007fe 	.word	0x000007fe
 8002494:	fffffc80 	.word	0xfffffc80
 8002498:	fffffca2 	.word	0xfffffca2
 800249c:	fffffc82 	.word	0xfffffc82

080024a0 <__clzsi2>:
 80024a0:	211c      	movs	r1, #28
 80024a2:	2301      	movs	r3, #1
 80024a4:	041b      	lsls	r3, r3, #16
 80024a6:	4298      	cmp	r0, r3
 80024a8:	d301      	bcc.n	80024ae <__clzsi2+0xe>
 80024aa:	0c00      	lsrs	r0, r0, #16
 80024ac:	3910      	subs	r1, #16
 80024ae:	0a1b      	lsrs	r3, r3, #8
 80024b0:	4298      	cmp	r0, r3
 80024b2:	d301      	bcc.n	80024b8 <__clzsi2+0x18>
 80024b4:	0a00      	lsrs	r0, r0, #8
 80024b6:	3908      	subs	r1, #8
 80024b8:	091b      	lsrs	r3, r3, #4
 80024ba:	4298      	cmp	r0, r3
 80024bc:	d301      	bcc.n	80024c2 <__clzsi2+0x22>
 80024be:	0900      	lsrs	r0, r0, #4
 80024c0:	3904      	subs	r1, #4
 80024c2:	a202      	add	r2, pc, #8	; (adr r2, 80024cc <__clzsi2+0x2c>)
 80024c4:	5c10      	ldrb	r0, [r2, r0]
 80024c6:	1840      	adds	r0, r0, r1
 80024c8:	4770      	bx	lr
 80024ca:	46c0      	nop			; (mov r8, r8)
 80024cc:	02020304 	.word	0x02020304
 80024d0:	01010101 	.word	0x01010101
	...

080024dc <__clzdi2>:
 80024dc:	b510      	push	{r4, lr}
 80024de:	2900      	cmp	r1, #0
 80024e0:	d103      	bne.n	80024ea <__clzdi2+0xe>
 80024e2:	f7ff ffdd 	bl	80024a0 <__clzsi2>
 80024e6:	3020      	adds	r0, #32
 80024e8:	e002      	b.n	80024f0 <__clzdi2+0x14>
 80024ea:	1c08      	adds	r0, r1, #0
 80024ec:	f7ff ffd8 	bl	80024a0 <__clzsi2>
 80024f0:	bd10      	pop	{r4, pc}
 80024f2:	46c0      	nop			; (mov r8, r8)

080024f4 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80024f4:	21fa      	movs	r1, #250	; 0xfa
 80024f6:	4b0a      	ldr	r3, [pc, #40]	; (8002520 <HAL_InitTick+0x2c>)
{
 80024f8:	b510      	push	{r4, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80024fa:	0089      	lsls	r1, r1, #2
{
 80024fc:	0004      	movs	r4, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80024fe:	6818      	ldr	r0, [r3, #0]
 8002500:	f7fd fe1e 	bl	8000140 <__udivsi3>
 8002504:	f000 fbde 	bl	8002cc4 <HAL_SYSTICK_Config>
  {
    status = HAL_ERROR;
 8002508:	2301      	movs	r3, #1
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 800250a:	2800      	cmp	r0, #0
 800250c:	d001      	beq.n	8002512 <HAL_InitTick+0x1e>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
  }

  /* Return function status */
  return status;
}
 800250e:	0018      	movs	r0, r3
 8002510:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8002512:	2200      	movs	r2, #0
 8002514:	0021      	movs	r1, r4
 8002516:	3801      	subs	r0, #1
 8002518:	f000 fb98 	bl	8002c4c <HAL_NVIC_SetPriority>
 800251c:	2300      	movs	r3, #0
 800251e:	e7f6      	b.n	800250e <HAL_InitTick+0x1a>
 8002520:	20000010 	.word	0x20000010

08002524 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002524:	2140      	movs	r1, #64	; 0x40
 8002526:	4a08      	ldr	r2, [pc, #32]	; (8002548 <HAL_Init+0x24>)
{
 8002528:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800252a:	6813      	ldr	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800252c:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800252e:	430b      	orrs	r3, r1
 8002530:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002532:	f7ff ffdf 	bl	80024f4 <HAL_InitTick>
 8002536:	1e04      	subs	r4, r0, #0
 8002538:	d002      	beq.n	8002540 <HAL_Init+0x1c>
    status = HAL_ERROR;
 800253a:	2401      	movs	r4, #1
}
 800253c:	0020      	movs	r0, r4
 800253e:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 8002540:	f003 fb94 	bl	8005c6c <HAL_MspInit>
 8002544:	e7fa      	b.n	800253c <HAL_Init+0x18>
 8002546:	46c0      	nop			; (mov r8, r8)
 8002548:	40022000 	.word	0x40022000

0800254c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800254c:	4a02      	ldr	r2, [pc, #8]	; (8002558 <HAL_IncTick+0xc>)
 800254e:	6813      	ldr	r3, [r2, #0]
 8002550:	3301      	adds	r3, #1
 8002552:	6013      	str	r3, [r2, #0]
}
 8002554:	4770      	bx	lr
 8002556:	46c0      	nop			; (mov r8, r8)
 8002558:	20000210 	.word	0x20000210

0800255c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800255c:	4b01      	ldr	r3, [pc, #4]	; (8002564 <HAL_GetTick+0x8>)
 800255e:	6818      	ldr	r0, [r3, #0]
}
 8002560:	4770      	bx	lr
 8002562:	46c0      	nop			; (mov r8, r8)
 8002564:	20000210 	.word	0x20000210

08002568 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002568:	b570      	push	{r4, r5, r6, lr}
 800256a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800256c:	f7ff fff6 	bl	800255c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
    wait++;
 8002570:	1c63      	adds	r3, r4, #1
 8002572:	1e5a      	subs	r2, r3, #1
 8002574:	4193      	sbcs	r3, r2
  uint32_t tickstart = HAL_GetTick();
 8002576:	0005      	movs	r5, r0
    wait++;
 8002578:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800257a:	f7ff ffef 	bl	800255c <HAL_GetTick>
 800257e:	1b40      	subs	r0, r0, r5
 8002580:	42a0      	cmp	r0, r4
 8002582:	d3fa      	bcc.n	800257a <HAL_Delay+0x12>
  {
  }
}
 8002584:	bd70      	pop	{r4, r5, r6, pc}
 8002586:	46c0      	nop			; (mov r8, r8)

08002588 <ADC_Disable>:
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002588:	2103      	movs	r1, #3
 800258a:	6802      	ldr	r2, [r0, #0]
{
 800258c:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800258e:	6893      	ldr	r3, [r2, #8]
{
 8002590:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002592:	400b      	ands	r3, r1
 8002594:	2b01      	cmp	r3, #1
 8002596:	d001      	beq.n	800259c <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002598:	2000      	movs	r0, #0
}
 800259a:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800259c:	6810      	ldr	r0, [r2, #0]
 800259e:	4203      	tst	r3, r0
 80025a0:	d0fa      	beq.n	8002598 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80025a2:	2005      	movs	r0, #5
 80025a4:	6895      	ldr	r5, [r2, #8]
 80025a6:	4028      	ands	r0, r5
 80025a8:	2801      	cmp	r0, #1
 80025aa:	d008      	beq.n	80025be <ADC_Disable+0x36>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025ac:	2110      	movs	r1, #16
 80025ae:	6d62      	ldr	r2, [r4, #84]	; 0x54
      return HAL_ERROR;
 80025b0:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025b2:	430a      	orrs	r2, r1
 80025b4:	6562      	str	r2, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025b6:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80025b8:	4313      	orrs	r3, r2
 80025ba:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 80025bc:	e7ed      	b.n	800259a <ADC_Disable+0x12>
      __HAL_ADC_DISABLE(hadc);
 80025be:	6893      	ldr	r3, [r2, #8]
 80025c0:	3001      	adds	r0, #1
 80025c2:	4303      	orrs	r3, r0
 80025c4:	6093      	str	r3, [r2, #8]
 80025c6:	6011      	str	r1, [r2, #0]
    tickstart = HAL_GetTick();
 80025c8:	f7ff ffc8 	bl	800255c <HAL_GetTick>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80025cc:	2601      	movs	r6, #1
    tickstart = HAL_GetTick();
 80025ce:	0005      	movs	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80025d0:	e004      	b.n	80025dc <ADC_Disable+0x54>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80025d2:	f7ff ffc3 	bl	800255c <HAL_GetTick>
 80025d6:	1b40      	subs	r0, r0, r5
 80025d8:	280a      	cmp	r0, #10
 80025da:	d804      	bhi.n	80025e6 <ADC_Disable+0x5e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80025dc:	6823      	ldr	r3, [r4, #0]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	421e      	tst	r6, r3
 80025e2:	d1f6      	bne.n	80025d2 <ADC_Disable+0x4a>
 80025e4:	e7d8      	b.n	8002598 <ADC_Disable+0x10>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025e6:	2210      	movs	r2, #16
 80025e8:	6d63      	ldr	r3, [r4, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025ea:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025ec:	4313      	orrs	r3, r2
 80025ee:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80025f2:	431e      	orrs	r6, r3
 80025f4:	65a6      	str	r6, [r4, #88]	; 0x58
        
        return HAL_ERROR;
 80025f6:	e7d0      	b.n	800259a <ADC_Disable+0x12>

080025f8 <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 80025f8:	2303      	movs	r3, #3
{
 80025fa:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80025fc:	6802      	ldr	r2, [r0, #0]
{
 80025fe:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002600:	6891      	ldr	r1, [r2, #8]
{
 8002602:	b082      	sub	sp, #8
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002604:	400b      	ands	r3, r1
 8002606:	2b01      	cmp	r3, #1
 8002608:	d027      	beq.n	800265a <ADC_Enable+0x62>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800260a:	6891      	ldr	r1, [r2, #8]
 800260c:	4b20      	ldr	r3, [pc, #128]	; (8002690 <ADC_Enable+0x98>)
 800260e:	4219      	tst	r1, r3
 8002610:	d12a      	bne.n	8002668 <ADC_Enable+0x70>
    __HAL_ADC_ENABLE(hadc);
 8002612:	2101      	movs	r1, #1
 8002614:	6893      	ldr	r3, [r2, #8]
 8002616:	430b      	orrs	r3, r1
 8002618:	6093      	str	r3, [r2, #8]
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800261a:	4b1e      	ldr	r3, [pc, #120]	; (8002694 <ADC_Enable+0x9c>)
 800261c:	491e      	ldr	r1, [pc, #120]	; (8002698 <ADC_Enable+0xa0>)
 800261e:	6818      	ldr	r0, [r3, #0]
 8002620:	f7fd fd8e 	bl	8000140 <__udivsi3>
 8002624:	9001      	str	r0, [sp, #4]

  while(waitLoopIndex != 0U)
 8002626:	9b01      	ldr	r3, [sp, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d005      	beq.n	8002638 <ADC_Enable+0x40>
  {
    waitLoopIndex--;
 800262c:	9b01      	ldr	r3, [sp, #4]
 800262e:	3b01      	subs	r3, #1
 8002630:	9301      	str	r3, [sp, #4]
  while(waitLoopIndex != 0U)
 8002632:	9b01      	ldr	r3, [sp, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1f9      	bne.n	800262c <ADC_Enable+0x34>
    tickstart = HAL_GetTick();
 8002638:	f7ff ff90 	bl	800255c <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800263c:	2601      	movs	r6, #1
    tickstart = HAL_GetTick();
 800263e:	0005      	movs	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002640:	e004      	b.n	800264c <ADC_Enable+0x54>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002642:	f7ff ff8b 	bl	800255c <HAL_GetTick>
 8002646:	1b40      	subs	r0, r0, r5
 8002648:	280a      	cmp	r0, #10
 800264a:	d817      	bhi.n	800267c <ADC_Enable+0x84>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800264c:	6823      	ldr	r3, [r4, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	421e      	tst	r6, r3
 8002652:	d0f6      	beq.n	8002642 <ADC_Enable+0x4a>
  return HAL_OK;
 8002654:	2000      	movs	r0, #0
}
 8002656:	b002      	add	sp, #8
 8002658:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800265a:	6811      	ldr	r1, [r2, #0]
 800265c:	420b      	tst	r3, r1
 800265e:	d1f9      	bne.n	8002654 <ADC_Enable+0x5c>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002660:	6891      	ldr	r1, [r2, #8]
 8002662:	4b0b      	ldr	r3, [pc, #44]	; (8002690 <ADC_Enable+0x98>)
 8002664:	4219      	tst	r1, r3
 8002666:	d0d4      	beq.n	8002612 <ADC_Enable+0x1a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002668:	2210      	movs	r2, #16
 800266a:	6d63      	ldr	r3, [r4, #84]	; 0x54
      return HAL_ERROR;
 800266c:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800266e:	4313      	orrs	r3, r2
 8002670:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002672:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002674:	3a0f      	subs	r2, #15
 8002676:	4313      	orrs	r3, r2
 8002678:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 800267a:	e7ec      	b.n	8002656 <ADC_Enable+0x5e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800267c:	2210      	movs	r2, #16
 800267e:	6d63      	ldr	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 8002680:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002682:	4313      	orrs	r3, r2
 8002684:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002686:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002688:	431e      	orrs	r6, r3
 800268a:	65a6      	str	r6, [r4, #88]	; 0x58
        return HAL_ERROR;
 800268c:	e7e3      	b.n	8002656 <ADC_Enable+0x5e>
 800268e:	46c0      	nop			; (mov r8, r8)
 8002690:	80000017 	.word	0x80000017
 8002694:	20000010 	.word	0x20000010
 8002698:	000f4240 	.word	0x000f4240

0800269c <HAL_ADC_Init>:
{
 800269c:	b570      	push	{r4, r5, r6, lr}
 800269e:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 80026a0:	d100      	bne.n	80026a4 <HAL_ADC_Init+0x8>
 80026a2:	e0aa      	b.n	80027fa <HAL_ADC_Init+0x15e>
  if(hadc->State == HAL_ADC_STATE_RESET)
 80026a4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d100      	bne.n	80026ac <HAL_ADC_Init+0x10>
 80026aa:	e09c      	b.n	80027e6 <HAL_ADC_Init+0x14a>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80026ac:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80026ae:	06db      	lsls	r3, r3, #27
 80026b0:	d42b      	bmi.n	800270a <HAL_ADC_Init+0x6e>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 80026b2:	2104      	movs	r1, #4
 80026b4:	0008      	movs	r0, r1
 80026b6:	6823      	ldr	r3, [r4, #0]
 80026b8:	689a      	ldr	r2, [r3, #8]
 80026ba:	4010      	ands	r0, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80026bc:	4211      	tst	r1, r2
 80026be:	d124      	bne.n	800270a <HAL_ADC_Init+0x6e>
  ADC_STATE_CLR_SET(hadc->State,
 80026c0:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80026c2:	4a61      	ldr	r2, [pc, #388]	; (8002848 <HAL_ADC_Init+0x1ac>)
 80026c4:	4011      	ands	r1, r2
 80026c6:	3206      	adds	r2, #6
 80026c8:	32ff      	adds	r2, #255	; 0xff
 80026ca:	4311      	orrs	r1, r2
 80026cc:	6561      	str	r1, [r4, #84]	; 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 80026ce:	6899      	ldr	r1, [r3, #8]
 80026d0:	3201      	adds	r2, #1
 80026d2:	400a      	ands	r2, r1
 80026d4:	2a01      	cmp	r2, #1
 80026d6:	d100      	bne.n	80026da <HAL_ADC_Init+0x3e>
 80026d8:	e091      	b.n	80027fe <HAL_ADC_Init+0x162>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80026da:	2580      	movs	r5, #128	; 0x80
 80026dc:	6861      	ldr	r1, [r4, #4]
 80026de:	05ed      	lsls	r5, r5, #23
 80026e0:	004a      	lsls	r2, r1, #1
 80026e2:	0852      	lsrs	r2, r2, #1
 80026e4:	42aa      	cmp	r2, r5
 80026e6:	d019      	beq.n	800271c <HAL_ADC_Init+0x80>
 80026e8:	2280      	movs	r2, #128	; 0x80
 80026ea:	0612      	lsls	r2, r2, #24
 80026ec:	4291      	cmp	r1, r2
 80026ee:	d015      	beq.n	800271c <HAL_ADC_Init+0x80>
 80026f0:	691a      	ldr	r2, [r3, #16]
 80026f2:	4e56      	ldr	r6, [pc, #344]	; (800284c <HAL_ADC_Init+0x1b0>)
 80026f4:	0092      	lsls	r2, r2, #2
 80026f6:	0892      	lsrs	r2, r2, #2
 80026f8:	611a      	str	r2, [r3, #16]
 80026fa:	4a55      	ldr	r2, [pc, #340]	; (8002850 <HAL_ADC_Init+0x1b4>)
 80026fc:	6815      	ldr	r5, [r2, #0]
 80026fe:	4035      	ands	r5, r6
 8002700:	6015      	str	r5, [r2, #0]
 8002702:	6815      	ldr	r5, [r2, #0]
 8002704:	4329      	orrs	r1, r5
 8002706:	6011      	str	r1, [r2, #0]
 8002708:	e00f      	b.n	800272a <HAL_ADC_Init+0x8e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800270a:	2210      	movs	r2, #16
 800270c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 800270e:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002710:	4313      	orrs	r3, r2
 8002712:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8002714:	2200      	movs	r2, #0
 8002716:	2350      	movs	r3, #80	; 0x50
 8002718:	54e2      	strb	r2, [r4, r3]
}
 800271a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800271c:	691a      	ldr	r2, [r3, #16]
 800271e:	0092      	lsls	r2, r2, #2
 8002720:	0892      	lsrs	r2, r2, #2
 8002722:	611a      	str	r2, [r3, #16]
 8002724:	691a      	ldr	r2, [r3, #16]
 8002726:	4311      	orrs	r1, r2
 8002728:	6119      	str	r1, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 800272a:	2118      	movs	r1, #24
 800272c:	68da      	ldr	r2, [r3, #12]
 800272e:	438a      	bics	r2, r1
 8002730:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8002732:	68da      	ldr	r2, [r3, #12]
 8002734:	68a1      	ldr	r1, [r4, #8]
 8002736:	430a      	orrs	r2, r1
 8002738:	60da      	str	r2, [r3, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800273a:	4a45      	ldr	r2, [pc, #276]	; (8002850 <HAL_ADC_Init+0x1b4>)
 800273c:	4d45      	ldr	r5, [pc, #276]	; (8002854 <HAL_ADC_Init+0x1b8>)
 800273e:	6811      	ldr	r1, [r2, #0]
 8002740:	4029      	ands	r1, r5
 8002742:	6011      	str	r1, [r2, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8002744:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002746:	6815      	ldr	r5, [r2, #0]
 8002748:	0649      	lsls	r1, r1, #25
 800274a:	4329      	orrs	r1, r5
 800274c:	6011      	str	r1, [r2, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800274e:	2280      	movs	r2, #128	; 0x80
 8002750:	6899      	ldr	r1, [r3, #8]
 8002752:	0552      	lsls	r2, r2, #21
 8002754:	4211      	tst	r1, r2
 8002756:	d04c      	beq.n	80027f2 <HAL_ADC_Init+0x156>
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8002758:	68da      	ldr	r2, [r3, #12]
 800275a:	493f      	ldr	r1, [pc, #252]	; (8002858 <HAL_ADC_Init+0x1bc>)
 800275c:	400a      	ands	r2, r1
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800275e:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8002760:	60da      	str	r2, [r3, #12]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002762:	68dd      	ldr	r5, [r3, #12]
 8002764:	68e2      	ldr	r2, [r4, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002766:	2902      	cmp	r1, #2
 8002768:	d100      	bne.n	800276c <HAL_ADC_Init+0xd0>
 800276a:	2004      	movs	r0, #4
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800276c:	2120      	movs	r1, #32
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800276e:	6b26      	ldr	r6, [r4, #48]	; 0x30
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002770:	5c61      	ldrb	r1, [r4, r1]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002772:	4332      	orrs	r2, r6
 8002774:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002776:	69a5      	ldr	r5, [r4, #24]
 8002778:	03ad      	lsls	r5, r5, #14
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800277a:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800277c:	69e5      	ldr	r5, [r4, #28]
 800277e:	03ed      	lsls	r5, r5, #15
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002780:	432a      	orrs	r2, r5
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002782:	034d      	lsls	r5, r1, #13
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002784:	432a      	orrs	r2, r5
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002786:	252c      	movs	r5, #44	; 0x2c
 8002788:	5d65      	ldrb	r5, [r4, r5]
 800278a:	006d      	lsls	r5, r5, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800278c:	432a      	orrs	r2, r5
 800278e:	4302      	orrs	r2, r0
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002790:	20c2      	movs	r0, #194	; 0xc2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002792:	60da      	str	r2, [r3, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002794:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002796:	30ff      	adds	r0, #255	; 0xff
 8002798:	4282      	cmp	r2, r0
 800279a:	d004      	beq.n	80027a6 <HAL_ADC_Init+0x10a>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800279c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800279e:	68d8      	ldr	r0, [r3, #12]
 80027a0:	432a      	orrs	r2, r5
 80027a2:	4302      	orrs	r2, r0
 80027a4:	60da      	str	r2, [r3, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027a6:	2221      	movs	r2, #33	; 0x21
 80027a8:	5ca2      	ldrb	r2, [r4, r2]
 80027aa:	2a01      	cmp	r2, #1
 80027ac:	d03b      	beq.n	8002826 <HAL_ADC_Init+0x18a>
  if (hadc->Init.OversamplingMode == ENABLE)
 80027ae:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80027b0:	2901      	cmp	r1, #1
 80027b2:	d028      	beq.n	8002806 <HAL_ADC_Init+0x16a>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80027b4:	2201      	movs	r2, #1
 80027b6:	6919      	ldr	r1, [r3, #16]
 80027b8:	420a      	tst	r2, r1
 80027ba:	d002      	beq.n	80027c2 <HAL_ADC_Init+0x126>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80027bc:	6919      	ldr	r1, [r3, #16]
 80027be:	4391      	bics	r1, r2
 80027c0:	6119      	str	r1, [r3, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80027c2:	2107      	movs	r1, #7
 80027c4:	695a      	ldr	r2, [r3, #20]
  return HAL_OK;
 80027c6:	2000      	movs	r0, #0
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80027c8:	438a      	bics	r2, r1
 80027ca:	615a      	str	r2, [r3, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80027cc:	695a      	ldr	r2, [r3, #20]
 80027ce:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80027d0:	430a      	orrs	r2, r1
 80027d2:	615a      	str	r2, [r3, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 80027d4:	2300      	movs	r3, #0
  ADC_STATE_CLR_SET(hadc->State,
 80027d6:	2203      	movs	r2, #3
  ADC_CLEAR_ERRORCODE(hadc);
 80027d8:	65a3      	str	r3, [r4, #88]	; 0x58
  ADC_STATE_CLR_SET(hadc->State,
 80027da:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80027dc:	4393      	bics	r3, r2
 80027de:	3a02      	subs	r2, #2
 80027e0:	4313      	orrs	r3, r2
 80027e2:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 80027e4:	e799      	b.n	800271a <HAL_ADC_Init+0x7e>
    hadc->Lock = HAL_UNLOCKED;
 80027e6:	2250      	movs	r2, #80	; 0x50
    ADC_CLEAR_ERRORCODE(hadc);
 80027e8:	6583      	str	r3, [r0, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 80027ea:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 80027ec:	f002 fe62 	bl	80054b4 <HAL_ADC_MspInit>
 80027f0:	e75c      	b.n	80026ac <HAL_ADC_Init+0x10>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80027f2:	6899      	ldr	r1, [r3, #8]
 80027f4:	430a      	orrs	r2, r1
 80027f6:	609a      	str	r2, [r3, #8]
 80027f8:	e7ae      	b.n	8002758 <HAL_ADC_Init+0xbc>
    return HAL_ERROR;
 80027fa:	2001      	movs	r0, #1
 80027fc:	e78d      	b.n	800271a <HAL_ADC_Init+0x7e>
  if (ADC_IS_ENABLE(hadc) == RESET)
 80027fe:	6819      	ldr	r1, [r3, #0]
 8002800:	420a      	tst	r2, r1
 8002802:	d19a      	bne.n	800273a <HAL_ADC_Init+0x9e>
 8002804:	e769      	b.n	80026da <HAL_ADC_Init+0x3e>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8002806:	691a      	ldr	r2, [r3, #16]
 8002808:	4814      	ldr	r0, [pc, #80]	; (800285c <HAL_ADC_Init+0x1c0>)
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800280a:	6c65      	ldr	r5, [r4, #68]	; 0x44
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800280c:	4002      	ands	r2, r0
 800280e:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002810:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002812:	6918      	ldr	r0, [r3, #16]
 8002814:	432a      	orrs	r2, r5
                               hadc->Init.Oversample.RightBitShift             |
 8002816:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8002818:	432a      	orrs	r2, r5
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800281a:	4302      	orrs	r2, r0
 800281c:	611a      	str	r2, [r3, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800281e:	691a      	ldr	r2, [r3, #16]
 8002820:	4311      	orrs	r1, r2
 8002822:	6119      	str	r1, [r3, #16]
 8002824:	e7cd      	b.n	80027c2 <HAL_ADC_Init+0x126>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8002826:	2900      	cmp	r1, #0
 8002828:	d105      	bne.n	8002836 <HAL_ADC_Init+0x19a>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800282a:	2280      	movs	r2, #128	; 0x80
 800282c:	68d9      	ldr	r1, [r3, #12]
 800282e:	0252      	lsls	r2, r2, #9
 8002830:	430a      	orrs	r2, r1
 8002832:	60da      	str	r2, [r3, #12]
 8002834:	e7bb      	b.n	80027ae <HAL_ADC_Init+0x112>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002836:	2020      	movs	r0, #32
 8002838:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800283a:	4301      	orrs	r1, r0
 800283c:	6561      	str	r1, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800283e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002840:	430a      	orrs	r2, r1
 8002842:	65a2      	str	r2, [r4, #88]	; 0x58
 8002844:	e7b3      	b.n	80027ae <HAL_ADC_Init+0x112>
 8002846:	46c0      	nop			; (mov r8, r8)
 8002848:	fffffefd 	.word	0xfffffefd
 800284c:	ffc3ffff 	.word	0xffc3ffff
 8002850:	40012708 	.word	0x40012708
 8002854:	fdffffff 	.word	0xfdffffff
 8002858:	fffe0219 	.word	0xfffe0219
 800285c:	fffffc03 	.word	0xfffffc03

08002860 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002860:	6803      	ldr	r3, [r0, #0]
{
 8002862:	b510      	push	{r4, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002864:	689a      	ldr	r2, [r3, #8]
{
 8002866:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002868:	0752      	lsls	r2, r2, #29
 800286a:	d421      	bmi.n	80028b0 <HAL_ADC_Start+0x50>
    __HAL_LOCK(hadc);
 800286c:	2250      	movs	r2, #80	; 0x50
 800286e:	5c81      	ldrb	r1, [r0, r2]
 8002870:	2901      	cmp	r1, #1
 8002872:	d01d      	beq.n	80028b0 <HAL_ADC_Start+0x50>
 8002874:	2101      	movs	r1, #1
 8002876:	5481      	strb	r1, [r0, r2]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002878:	69c2      	ldr	r2, [r0, #28]
 800287a:	2a01      	cmp	r2, #1
 800287c:	d112      	bne.n	80028a4 <HAL_ADC_Start+0x44>
      ADC_STATE_CLR_SET(hadc->State,
 800287e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002880:	490c      	ldr	r1, [pc, #48]	; (80028b4 <HAL_ADC_Start+0x54>)
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002882:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8002884:	4011      	ands	r1, r2
 8002886:	2280      	movs	r2, #128	; 0x80
 8002888:	0052      	lsls	r2, r2, #1
 800288a:	430a      	orrs	r2, r1
 800288c:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_UNLOCK(hadc);
 800288e:	2150      	movs	r1, #80	; 0x50
      ADC_CLEAR_ERRORCODE(hadc);
 8002890:	2200      	movs	r2, #0
 8002892:	65a2      	str	r2, [r4, #88]	; 0x58
      __HAL_UNLOCK(hadc);
 8002894:	5462      	strb	r2, [r4, r1]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002896:	321c      	adds	r2, #28
 8002898:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	394c      	subs	r1, #76	; 0x4c
 800289e:	430a      	orrs	r2, r1
 80028a0:	609a      	str	r2, [r3, #8]
}
 80028a2:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Enable(hadc);
 80028a4:	f7ff fea8 	bl	80025f8 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80028a8:	2800      	cmp	r0, #0
 80028aa:	d1fa      	bne.n	80028a2 <HAL_ADC_Start+0x42>
 80028ac:	6823      	ldr	r3, [r4, #0]
 80028ae:	e7e6      	b.n	800287e <HAL_ADC_Start+0x1e>
    tmp_hal_status = HAL_BUSY;
 80028b0:	2002      	movs	r0, #2
 80028b2:	e7f6      	b.n	80028a2 <HAL_ADC_Start+0x42>
 80028b4:	fffff0fe 	.word	0xfffff0fe

080028b8 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 80028b8:	2350      	movs	r3, #80	; 0x50
{
 80028ba:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 80028bc:	5cc2      	ldrb	r2, [r0, r3]
{
 80028be:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 80028c0:	2a01      	cmp	r2, #1
 80028c2:	d020      	beq.n	8002906 <HAL_ADC_Stop+0x4e>
 80028c4:	2201      	movs	r2, #1
 80028c6:	54c2      	strb	r2, [r0, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80028c8:	6803      	ldr	r3, [r0, #0]
 80028ca:	3203      	adds	r2, #3
 80028cc:	6899      	ldr	r1, [r3, #8]
 80028ce:	420a      	tst	r2, r1
 80028d0:	d010      	beq.n	80028f4 <HAL_ADC_Stop+0x3c>
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80028d2:	6899      	ldr	r1, [r3, #8]
 80028d4:	420a      	tst	r2, r1
 80028d6:	d120      	bne.n	800291a <HAL_ADC_Stop+0x62>
    tickstart = HAL_GetTick();
 80028d8:	f7ff fe40 	bl	800255c <HAL_GetTick>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80028dc:	2604      	movs	r6, #4
    tickstart = HAL_GetTick();
 80028de:	0005      	movs	r5, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80028e0:	e004      	b.n	80028ec <HAL_ADC_Stop+0x34>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80028e2:	f7ff fe3b 	bl	800255c <HAL_GetTick>
 80028e6:	1b40      	subs	r0, r0, r5
 80028e8:	280a      	cmp	r0, #10
 80028ea:	d81e      	bhi.n	800292a <HAL_ADC_Stop+0x72>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80028ec:	6823      	ldr	r3, [r4, #0]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	421e      	tst	r6, r3
 80028f2:	d1f6      	bne.n	80028e2 <HAL_ADC_Stop+0x2a>
    tmp_hal_status = ADC_Disable(hadc);
 80028f4:	0020      	movs	r0, r4
 80028f6:	f7ff fe47 	bl	8002588 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80028fa:	2800      	cmp	r0, #0
 80028fc:	d005      	beq.n	800290a <HAL_ADC_Stop+0x52>
  __HAL_UNLOCK(hadc);
 80028fe:	2350      	movs	r3, #80	; 0x50
 8002900:	2200      	movs	r2, #0
 8002902:	54e2      	strb	r2, [r4, r3]
}
 8002904:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hadc);
 8002906:	2002      	movs	r0, #2
 8002908:	e7fc      	b.n	8002904 <HAL_ADC_Stop+0x4c>
      ADC_STATE_CLR_SET(hadc->State,
 800290a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800290c:	4a0c      	ldr	r2, [pc, #48]	; (8002940 <HAL_ADC_Stop+0x88>)
 800290e:	4013      	ands	r3, r2
 8002910:	3204      	adds	r2, #4
 8002912:	32ff      	adds	r2, #255	; 0xff
 8002914:	4313      	orrs	r3, r2
 8002916:	6563      	str	r3, [r4, #84]	; 0x54
 8002918:	e7f1      	b.n	80028fe <HAL_ADC_Stop+0x46>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 800291a:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800291c:	0792      	lsls	r2, r2, #30
 800291e:	d4db      	bmi.n	80028d8 <HAL_ADC_Stop+0x20>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8002920:	2110      	movs	r1, #16
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	430a      	orrs	r2, r1
 8002926:	609a      	str	r2, [r3, #8]
 8002928:	e7d6      	b.n	80028d8 <HAL_ADC_Stop+0x20>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800292a:	2210      	movs	r2, #16
 800292c:	6d63      	ldr	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800292e:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002930:	4313      	orrs	r3, r2
 8002932:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002934:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002936:	3a0f      	subs	r2, #15
 8002938:	4313      	orrs	r3, r2
 800293a:	65a3      	str	r3, [r4, #88]	; 0x58
  if (tmp_hal_status == HAL_OK)
 800293c:	e7df      	b.n	80028fe <HAL_ADC_Stop+0x46>
 800293e:	46c0      	nop			; (mov r8, r8)
 8002940:	fffffefe 	.word	0xfffffefe

08002944 <HAL_ADC_Start_DMA>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002944:	6803      	ldr	r3, [r0, #0]
{
 8002946:	b570      	push	{r4, r5, r6, lr}
 8002948:	000d      	movs	r5, r1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800294a:	6899      	ldr	r1, [r3, #8]
{
 800294c:	0004      	movs	r4, r0
 800294e:	0016      	movs	r6, r2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002950:	074a      	lsls	r2, r1, #29
 8002952:	d436      	bmi.n	80029c2 <HAL_ADC_Start_DMA+0x7e>
    __HAL_LOCK(hadc);
 8002954:	2250      	movs	r2, #80	; 0x50
 8002956:	5c81      	ldrb	r1, [r0, r2]
 8002958:	2901      	cmp	r1, #1
 800295a:	d032      	beq.n	80029c2 <HAL_ADC_Start_DMA+0x7e>
 800295c:	2101      	movs	r1, #1
 800295e:	5481      	strb	r1, [r0, r2]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002960:	69c2      	ldr	r2, [r0, #28]
 8002962:	2a01      	cmp	r2, #1
 8002964:	d004      	beq.n	8002970 <HAL_ADC_Start_DMA+0x2c>
      tmp_hal_status = ADC_Enable(hadc);
 8002966:	f7ff fe47 	bl	80025f8 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800296a:	2800      	cmp	r0, #0
 800296c:	d128      	bne.n	80029c0 <HAL_ADC_Start_DMA+0x7c>
 800296e:	6823      	ldr	r3, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 8002970:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002972:	4915      	ldr	r1, [pc, #84]	; (80029c8 <HAL_ADC_Start_DMA+0x84>)
 8002974:	4011      	ands	r1, r2
 8002976:	2280      	movs	r2, #128	; 0x80
 8002978:	0052      	lsls	r2, r2, #1
 800297a:	430a      	orrs	r2, r1
 800297c:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_UNLOCK(hadc);
 800297e:	2150      	movs	r1, #80	; 0x50
      ADC_CLEAR_ERRORCODE(hadc);
 8002980:	2200      	movs	r2, #0
 8002982:	65a2      	str	r2, [r4, #88]	; 0x58
      __HAL_UNLOCK(hadc);
 8002984:	5462      	strb	r2, [r4, r1]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002986:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002988:	4a10      	ldr	r2, [pc, #64]	; (80029cc <HAL_ADC_Start_DMA+0x88>)
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800298a:	3940      	subs	r1, #64	; 0x40
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800298c:	62c2      	str	r2, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800298e:	4a10      	ldr	r2, [pc, #64]	; (80029d0 <HAL_ADC_Start_DMA+0x8c>)
 8002990:	6302      	str	r2, [r0, #48]	; 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002992:	4a10      	ldr	r2, [pc, #64]	; (80029d4 <HAL_ADC_Start_DMA+0x90>)
 8002994:	6342      	str	r2, [r0, #52]	; 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002996:	221c      	movs	r2, #28
 8002998:	601a      	str	r2, [r3, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	430a      	orrs	r2, r1
 800299e:	605a      	str	r2, [r3, #4]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80029a0:	68da      	ldr	r2, [r3, #12]
 80029a2:	390f      	subs	r1, #15
 80029a4:	430a      	orrs	r2, r1
 80029a6:	60da      	str	r2, [r3, #12]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80029a8:	3340      	adds	r3, #64	; 0x40
 80029aa:	0019      	movs	r1, r3
 80029ac:	002a      	movs	r2, r5
 80029ae:	0033      	movs	r3, r6
 80029b0:	f000 f9e8 	bl	8002d84 <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80029b4:	2104      	movs	r1, #4
 80029b6:	2000      	movs	r0, #0
 80029b8:	6822      	ldr	r2, [r4, #0]
 80029ba:	6893      	ldr	r3, [r2, #8]
 80029bc:	430b      	orrs	r3, r1
 80029be:	6093      	str	r3, [r2, #8]
}
 80029c0:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = HAL_BUSY;
 80029c2:	2002      	movs	r0, #2
 80029c4:	e7fc      	b.n	80029c0 <HAL_ADC_Start_DMA+0x7c>
 80029c6:	46c0      	nop			; (mov r8, r8)
 80029c8:	fffff0fe 	.word	0xfffff0fe
 80029cc:	080029e1 	.word	0x080029e1
 80029d0:	08002a59 	.word	0x08002a59
 80029d4:	08002a6d 	.word	0x08002a6d

080029d8 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 80029d8:	6803      	ldr	r3, [r0, #0]
 80029da:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80029dc:	4770      	bx	lr
 80029de:	46c0      	nop			; (mov r8, r8)

080029e0 <ADC_DMAConvCplt>:
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80029e0:	2150      	movs	r1, #80	; 0x50
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029e2:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 80029e4:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80029e6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80029e8:	4211      	tst	r1, r2
 80029ea:	d10e      	bne.n	8002a0a <ADC_DMAConvCplt+0x2a>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029ec:	2280      	movs	r2, #128	; 0x80
 80029ee:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80029f0:	0092      	lsls	r2, r2, #2
 80029f2:	430a      	orrs	r2, r1
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80029f4:	21c0      	movs	r1, #192	; 0xc0
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029f6:	655a      	str	r2, [r3, #84]	; 0x54
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	0109      	lsls	r1, r1, #4
 80029fc:	68d0      	ldr	r0, [r2, #12]
 80029fe:	4208      	tst	r0, r1
 8002a00:	d007      	beq.n	8002a12 <ADC_DMAConvCplt+0x32>
    HAL_ADC_ConvCpltCallback(hadc);
 8002a02:	0018      	movs	r0, r3
 8002a04:	f003 f858 	bl	8005ab8 <HAL_ADC_ConvCpltCallback>
}
 8002a08:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a0e:	4798      	blx	r3
}
 8002a10:	e7fa      	b.n	8002a08 <ADC_DMAConvCplt+0x28>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002a12:	2120      	movs	r1, #32
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002a14:	5c58      	ldrb	r0, [r3, r1]
 8002a16:	2800      	cmp	r0, #0
 8002a18:	d1f3      	bne.n	8002a02 <ADC_DMAConvCplt+0x22>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002a1a:	6810      	ldr	r0, [r2, #0]
 8002a1c:	0700      	lsls	r0, r0, #28
 8002a1e:	d5f0      	bpl.n	8002a02 <ADC_DMAConvCplt+0x22>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002a20:	6890      	ldr	r0, [r2, #8]
 8002a22:	0740      	lsls	r0, r0, #29
 8002a24:	d40b      	bmi.n	8002a3e <ADC_DMAConvCplt+0x5e>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002a26:	200c      	movs	r0, #12
 8002a28:	6851      	ldr	r1, [r2, #4]
 8002a2a:	4381      	bics	r1, r0
 8002a2c:	6051      	str	r1, [r2, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8002a2e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a30:	4907      	ldr	r1, [pc, #28]	; (8002a50 <ADC_DMAConvCplt+0x70>)
 8002a32:	400a      	ands	r2, r1
 8002a34:	3104      	adds	r1, #4
 8002a36:	31ff      	adds	r1, #255	; 0xff
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	655a      	str	r2, [r3, #84]	; 0x54
 8002a3c:	e7e1      	b.n	8002a02 <ADC_DMAConvCplt+0x22>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a3e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a40:	4311      	orrs	r1, r2
 8002a42:	6559      	str	r1, [r3, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a44:	2101      	movs	r1, #1
 8002a46:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	659a      	str	r2, [r3, #88]	; 0x58
 8002a4c:	e7d9      	b.n	8002a02 <ADC_DMAConvCplt+0x22>
 8002a4e:	46c0      	nop			; (mov r8, r8)
 8002a50:	fffffefe 	.word	0xfffffefe

08002a54 <HAL_ADC_ConvHalfCpltCallback>:
 8002a54:	4770      	bx	lr
 8002a56:	46c0      	nop			; (mov r8, r8)

08002a58 <ADC_DMAHalfConvCplt>:
{
 8002a58:	b510      	push	{r4, lr}
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8002a5a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8002a5c:	f7ff fffa 	bl	8002a54 <HAL_ADC_ConvHalfCpltCallback>
}
 8002a60:	bd10      	pop	{r4, pc}
 8002a62:	46c0      	nop			; (mov r8, r8)

08002a64 <HAL_ADC_LevelOutOfWindowCallback>:
 8002a64:	4770      	bx	lr
 8002a66:	46c0      	nop			; (mov r8, r8)

08002a68 <HAL_ADC_ErrorCallback>:
 8002a68:	4770      	bx	lr
 8002a6a:	46c0      	nop			; (mov r8, r8)

08002a6c <ADC_DMAError>:
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002a6c:	2240      	movs	r2, #64	; 0x40
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a6e:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8002a70:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002a72:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002a74:	4313      	orrs	r3, r2
 8002a76:	6543      	str	r3, [r0, #84]	; 0x54
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002a78:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002a7a:	3a3c      	subs	r2, #60	; 0x3c
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	6583      	str	r3, [r0, #88]	; 0x58
  HAL_ADC_ErrorCallback(hadc); 
 8002a80:	f7ff fff2 	bl	8002a68 <HAL_ADC_ErrorCallback>
}
 8002a84:	bd10      	pop	{r4, pc}
 8002a86:	46c0      	nop			; (mov r8, r8)

08002a88 <HAL_ADC_IRQHandler>:
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002a88:	2204      	movs	r2, #4
 8002a8a:	6803      	ldr	r3, [r0, #0]
{
 8002a8c:	b570      	push	{r4, r5, r6, lr}
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002a8e:	6819      	ldr	r1, [r3, #0]
{
 8002a90:	0004      	movs	r4, r0
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002a92:	420a      	tst	r2, r1
 8002a94:	d04e      	beq.n	8002b34 <HAL_ADC_IRQHandler+0xac>
 8002a96:	6859      	ldr	r1, [r3, #4]
 8002a98:	420a      	tst	r2, r1
 8002a9a:	d04b      	beq.n	8002b34 <HAL_ADC_IRQHandler+0xac>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a9c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002a9e:	06d2      	lsls	r2, r2, #27
 8002aa0:	d404      	bmi.n	8002aac <HAL_ADC_IRQHandler+0x24>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002aa2:	2280      	movs	r2, #128	; 0x80
 8002aa4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8002aa6:	0092      	lsls	r2, r2, #2
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	6562      	str	r2, [r4, #84]	; 0x54
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002aac:	22c0      	movs	r2, #192	; 0xc0
 8002aae:	68d9      	ldr	r1, [r3, #12]
 8002ab0:	0112      	lsls	r2, r2, #4
 8002ab2:	4211      	tst	r1, r2
 8002ab4:	d114      	bne.n	8002ae0 <HAL_ADC_IRQHandler+0x58>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002ab6:	2220      	movs	r2, #32
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002ab8:	5ca1      	ldrb	r1, [r4, r2]
 8002aba:	2900      	cmp	r1, #0
 8002abc:	d110      	bne.n	8002ae0 <HAL_ADC_IRQHandler+0x58>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002abe:	6819      	ldr	r1, [r3, #0]
 8002ac0:	0709      	lsls	r1, r1, #28
 8002ac2:	d50d      	bpl.n	8002ae0 <HAL_ADC_IRQHandler+0x58>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002ac4:	6899      	ldr	r1, [r3, #8]
 8002ac6:	0749      	lsls	r1, r1, #29
 8002ac8:	d449      	bmi.n	8002b5e <HAL_ADC_IRQHandler+0xd6>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002aca:	210c      	movs	r1, #12
 8002acc:	685a      	ldr	r2, [r3, #4]
 8002ace:	438a      	bics	r2, r1
 8002ad0:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8002ad2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002ad4:	4a26      	ldr	r2, [pc, #152]	; (8002b70 <HAL_ADC_IRQHandler+0xe8>)
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	3204      	adds	r2, #4
 8002ada:	32ff      	adds	r2, #255	; 0xff
 8002adc:	4313      	orrs	r3, r2
 8002ade:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8002ae0:	0020      	movs	r0, r4
 8002ae2:	f002 ffe9 	bl	8005ab8 <HAL_ADC_ConvCpltCallback>
    if (hadc->Init.LowPowerAutoWait != ENABLE)
 8002ae6:	69a3      	ldr	r3, [r4, #24]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d036      	beq.n	8002b5a <HAL_ADC_IRQHandler+0xd2>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002aec:	220c      	movs	r2, #12
 8002aee:	6823      	ldr	r3, [r4, #0]
 8002af0:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8002af2:	2580      	movs	r5, #128	; 0x80
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	4215      	tst	r5, r2
 8002af8:	d002      	beq.n	8002b00 <HAL_ADC_IRQHandler+0x78>
 8002afa:	685a      	ldr	r2, [r3, #4]
 8002afc:	4215      	tst	r5, r2
 8002afe:	d121      	bne.n	8002b44 <HAL_ADC_IRQHandler+0xbc>
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8002b00:	2210      	movs	r2, #16
 8002b02:	6819      	ldr	r1, [r3, #0]
 8002b04:	420a      	tst	r2, r1
 8002b06:	d014      	beq.n	8002b32 <HAL_ADC_IRQHandler+0xaa>
 8002b08:	6859      	ldr	r1, [r3, #4]
 8002b0a:	420a      	tst	r2, r1
 8002b0c:	d011      	beq.n	8002b32 <HAL_ADC_IRQHandler+0xaa>
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8002b0e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002b10:	2a00      	cmp	r2, #0
 8002b12:	d002      	beq.n	8002b1a <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8002b14:	68da      	ldr	r2, [r3, #12]
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8002b16:	07d2      	lsls	r2, r2, #31
 8002b18:	d509      	bpl.n	8002b2e <HAL_ADC_IRQHandler+0xa6>
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002b1a:	2102      	movs	r1, #2
 8002b1c:	6da2      	ldr	r2, [r4, #88]	; 0x58
      HAL_ADC_ErrorCallback(hadc);
 8002b1e:	0020      	movs	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002b20:	430a      	orrs	r2, r1
 8002b22:	65a2      	str	r2, [r4, #88]	; 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002b24:	2210      	movs	r2, #16
 8002b26:	601a      	str	r2, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 8002b28:	f7ff ff9e 	bl	8002a68 <HAL_ADC_ErrorCallback>
 8002b2c:	6823      	ldr	r3, [r4, #0]
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002b2e:	2210      	movs	r2, #16
 8002b30:	601a      	str	r2, [r3, #0]
}
 8002b32:	bd70      	pop	{r4, r5, r6, pc}
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002b34:	2208      	movs	r2, #8
 8002b36:	6819      	ldr	r1, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002b38:	420a      	tst	r2, r1
 8002b3a:	d0da      	beq.n	8002af2 <HAL_ADC_IRQHandler+0x6a>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002b3c:	6859      	ldr	r1, [r3, #4]
 8002b3e:	420a      	tst	r2, r1
 8002b40:	d0d7      	beq.n	8002af2 <HAL_ADC_IRQHandler+0x6a>
 8002b42:	e7ab      	b.n	8002a9c <HAL_ADC_IRQHandler+0x14>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002b44:	2380      	movs	r3, #128	; 0x80
 8002b46:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002b48:	025b      	lsls	r3, r3, #9
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002b4e:	0020      	movs	r0, r4
 8002b50:	f7ff ff88 	bl	8002a64 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002b54:	6823      	ldr	r3, [r4, #0]
 8002b56:	601d      	str	r5, [r3, #0]
 8002b58:	e7d2      	b.n	8002b00 <HAL_ADC_IRQHandler+0x78>
 8002b5a:	6823      	ldr	r3, [r4, #0]
 8002b5c:	e7c9      	b.n	8002af2 <HAL_ADC_IRQHandler+0x6a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b5e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002b60:	431a      	orrs	r2, r3
 8002b62:	6562      	str	r2, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b64:	2201      	movs	r2, #1
 8002b66:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	65a3      	str	r3, [r4, #88]	; 0x58
 8002b6c:	e7b8      	b.n	8002ae0 <HAL_ADC_IRQHandler+0x58>
 8002b6e:	46c0      	nop			; (mov r8, r8)
 8002b70:	fffffefe 	.word	0xfffffefe

08002b74 <HAL_ADC_ConfigChannel>:
  __HAL_LOCK(hadc);
 8002b74:	2350      	movs	r3, #80	; 0x50
{
 8002b76:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hadc);
 8002b78:	5cc2      	ldrb	r2, [r0, r3]
{
 8002b7a:	0004      	movs	r4, r0
 8002b7c:	b083      	sub	sp, #12
  __HAL_LOCK(hadc);
 8002b7e:	2a01      	cmp	r2, #1
 8002b80:	d055      	beq.n	8002c2e <HAL_ADC_ConfigChannel+0xba>
 8002b82:	2201      	movs	r2, #1
 8002b84:	54c2      	strb	r2, [r0, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8002b86:	6802      	ldr	r2, [r0, #0]
 8002b88:	6890      	ldr	r0, [r2, #8]
 8002b8a:	0740      	lsls	r0, r0, #29
 8002b8c:	d42b      	bmi.n	8002be6 <HAL_ADC_ConfigChannel+0x72>
  if (sConfig->Rank != ADC_RANK_NONE)
 8002b8e:	4b29      	ldr	r3, [pc, #164]	; (8002c34 <HAL_ADC_ConfigChannel+0xc0>)
 8002b90:	6848      	ldr	r0, [r1, #4]
 8002b92:	4298      	cmp	r0, r3
 8002b94:	d02f      	beq.n	8002bf6 <HAL_ADC_ConfigChannel+0x82>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8002b96:	680d      	ldr	r5, [r1, #0]
 8002b98:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8002b9a:	036b      	lsls	r3, r5, #13
 8002b9c:	0b5b      	lsrs	r3, r3, #13
 8002b9e:	4303      	orrs	r3, r0
 8002ba0:	6293      	str	r3, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002ba2:	036b      	lsls	r3, r5, #13
 8002ba4:	d517      	bpl.n	8002bd6 <HAL_ADC_ConfigChannel+0x62>
      ADC->CCR |= ADC_CCR_TSEN;   
 8002ba6:	2380      	movs	r3, #128	; 0x80
 8002ba8:	4a23      	ldr	r2, [pc, #140]	; (8002c38 <HAL_ADC_ConfigChannel+0xc4>)
 8002baa:	041b      	lsls	r3, r3, #16
 8002bac:	6811      	ldr	r1, [r2, #0]
 8002bae:	430b      	orrs	r3, r1
 8002bb0:	6013      	str	r3, [r2, #0]
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8002bb2:	4b22      	ldr	r3, [pc, #136]	; (8002c3c <HAL_ADC_ConfigChannel+0xc8>)
 8002bb4:	4922      	ldr	r1, [pc, #136]	; (8002c40 <HAL_ADC_ConfigChannel+0xcc>)
 8002bb6:	6818      	ldr	r0, [r3, #0]
 8002bb8:	f7fd fac2 	bl	8000140 <__udivsi3>
 8002bbc:	0083      	lsls	r3, r0, #2
 8002bbe:	181b      	adds	r3, r3, r0
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	9301      	str	r3, [sp, #4]
  while(waitLoopIndex != 0U)
 8002bc4:	9b01      	ldr	r3, [sp, #4]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d005      	beq.n	8002bd6 <HAL_ADC_ConfigChannel+0x62>
    waitLoopIndex--;
 8002bca:	9b01      	ldr	r3, [sp, #4]
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	9301      	str	r3, [sp, #4]
  while(waitLoopIndex != 0U)
 8002bd0:	9b01      	ldr	r3, [sp, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1f9      	bne.n	8002bca <HAL_ADC_ConfigChannel+0x56>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002bd6:	03ab      	lsls	r3, r5, #14
 8002bd8:	d422      	bmi.n	8002c20 <HAL_ADC_ConfigChannel+0xac>
  __HAL_UNLOCK(hadc);
 8002bda:	2350      	movs	r3, #80	; 0x50
 8002bdc:	2200      	movs	r2, #0
  return HAL_OK;
 8002bde:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8002be0:	54e2      	strb	r2, [r4, r3]
}
 8002be2:	b003      	add	sp, #12
 8002be4:	bd30      	pop	{r4, r5, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002be6:	2120      	movs	r1, #32
 8002be8:	6d62      	ldr	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 8002bea:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bec:	430a      	orrs	r2, r1
 8002bee:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	54e2      	strb	r2, [r4, r3]
    return HAL_ERROR;
 8002bf4:	e7f5      	b.n	8002be2 <HAL_ADC_ConfigChannel+0x6e>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8002bf6:	680b      	ldr	r3, [r1, #0]
 8002bf8:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8002bfa:	0359      	lsls	r1, r3, #13
 8002bfc:	0b49      	lsrs	r1, r1, #13
 8002bfe:	4388      	bics	r0, r1
 8002c00:	6290      	str	r0, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002c02:	035a      	lsls	r2, r3, #13
 8002c04:	d504      	bpl.n	8002c10 <HAL_ADC_ConfigChannel+0x9c>
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8002c06:	490c      	ldr	r1, [pc, #48]	; (8002c38 <HAL_ADC_ConfigChannel+0xc4>)
 8002c08:	480e      	ldr	r0, [pc, #56]	; (8002c44 <HAL_ADC_ConfigChannel+0xd0>)
 8002c0a:	680a      	ldr	r2, [r1, #0]
 8002c0c:	4002      	ands	r2, r0
 8002c0e:	600a      	str	r2, [r1, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002c10:	039b      	lsls	r3, r3, #14
 8002c12:	d5e2      	bpl.n	8002bda <HAL_ADC_ConfigChannel+0x66>
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8002c14:	4a08      	ldr	r2, [pc, #32]	; (8002c38 <HAL_ADC_ConfigChannel+0xc4>)
 8002c16:	490c      	ldr	r1, [pc, #48]	; (8002c48 <HAL_ADC_ConfigChannel+0xd4>)
 8002c18:	6813      	ldr	r3, [r2, #0]
 8002c1a:	400b      	ands	r3, r1
 8002c1c:	6013      	str	r3, [r2, #0]
 8002c1e:	e7dc      	b.n	8002bda <HAL_ADC_ConfigChannel+0x66>
      ADC->CCR |= ADC_CCR_VREFEN;   
 8002c20:	2380      	movs	r3, #128	; 0x80
 8002c22:	4a05      	ldr	r2, [pc, #20]	; (8002c38 <HAL_ADC_ConfigChannel+0xc4>)
 8002c24:	03db      	lsls	r3, r3, #15
 8002c26:	6811      	ldr	r1, [r2, #0]
 8002c28:	430b      	orrs	r3, r1
 8002c2a:	6013      	str	r3, [r2, #0]
 8002c2c:	e7d5      	b.n	8002bda <HAL_ADC_ConfigChannel+0x66>
  __HAL_LOCK(hadc);
 8002c2e:	2002      	movs	r0, #2
 8002c30:	e7d7      	b.n	8002be2 <HAL_ADC_ConfigChannel+0x6e>
 8002c32:	46c0      	nop			; (mov r8, r8)
 8002c34:	00001001 	.word	0x00001001
 8002c38:	40012708 	.word	0x40012708
 8002c3c:	20000010 	.word	0x20000010
 8002c40:	000f4240 	.word	0x000f4240
 8002c44:	ff7fffff 	.word	0xff7fffff
 8002c48:	ffbfffff 	.word	0xffbfffff

08002c4c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c4c:	b570      	push	{r4, r5, r6, lr}
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8002c4e:	2800      	cmp	r0, #0
 8002c50:	db14      	blt.n	8002c7c <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c52:	4b15      	ldr	r3, [pc, #84]	; (8002ca8 <HAL_NVIC_SetPriority+0x5c>)
 8002c54:	2203      	movs	r2, #3
 8002c56:	469c      	mov	ip, r3
 8002c58:	23ff      	movs	r3, #255	; 0xff
 8002c5a:	0884      	lsrs	r4, r0, #2
 8002c5c:	4010      	ands	r0, r2
 8002c5e:	001a      	movs	r2, r3
 8002c60:	26c0      	movs	r6, #192	; 0xc0
 8002c62:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002c64:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c66:	4082      	lsls	r2, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002c68:	400b      	ands	r3, r1
 8002c6a:	4083      	lsls	r3, r0
 8002c6c:	00a4      	lsls	r4, r4, #2
 8002c6e:	4464      	add	r4, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c70:	00b6      	lsls	r6, r6, #2
 8002c72:	59a5      	ldr	r5, [r4, r6]
 8002c74:	4395      	bics	r5, r2
 8002c76:	432b      	orrs	r3, r5
 8002c78:	51a3      	str	r3, [r4, r6]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8002c7a:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c7c:	4a0b      	ldr	r2, [pc, #44]	; (8002cac <HAL_NVIC_SetPriority+0x60>)
 8002c7e:	2403      	movs	r4, #3
 8002c80:	4694      	mov	ip, r2
 8002c82:	230f      	movs	r3, #15
 8002c84:	22ff      	movs	r2, #255	; 0xff
 8002c86:	4003      	ands	r3, r0
 8002c88:	4020      	ands	r0, r4
 8002c8a:	0014      	movs	r4, r2
 8002c8c:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002c8e:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c90:	4084      	lsls	r4, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002c92:	400a      	ands	r2, r1
 8002c94:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c96:	3b08      	subs	r3, #8
 8002c98:	089b      	lsrs	r3, r3, #2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4463      	add	r3, ip
 8002c9e:	69dd      	ldr	r5, [r3, #28]
 8002ca0:	43a5      	bics	r5, r4
 8002ca2:	432a      	orrs	r2, r5
 8002ca4:	61da      	str	r2, [r3, #28]
  }
}
 8002ca6:	e7e8      	b.n	8002c7a <HAL_NVIC_SetPriority+0x2e>
 8002ca8:	e000e100 	.word	0xe000e100
 8002cac:	e000ed00 	.word	0xe000ed00

08002cb0 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002cb0:	231f      	movs	r3, #31
 8002cb2:	4018      	ands	r0, r3
 8002cb4:	3b1e      	subs	r3, #30
 8002cb6:	4083      	lsls	r3, r0
 8002cb8:	4a01      	ldr	r2, [pc, #4]	; (8002cc0 <HAL_NVIC_EnableIRQ+0x10>)
 8002cba:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002cbc:	4770      	bx	lr
 8002cbe:	46c0      	nop			; (mov r8, r8)
 8002cc0:	e000e100 	.word	0xe000e100

08002cc4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cc4:	2280      	movs	r2, #128	; 0x80
 8002cc6:	1e43      	subs	r3, r0, #1
 8002cc8:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cca:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d20e      	bcs.n	8002cee <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002cd0:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cd2:	4a07      	ldr	r2, [pc, #28]	; (8002cf0 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002cd4:	4807      	ldr	r0, [pc, #28]	; (8002cf4 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cd6:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002cd8:	6a03      	ldr	r3, [r0, #32]
 8002cda:	0609      	lsls	r1, r1, #24
 8002cdc:	021b      	lsls	r3, r3, #8
 8002cde:	0a1b      	lsrs	r3, r3, #8
 8002ce0:	430b      	orrs	r3, r1
 8002ce2:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ce4:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ce6:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ce8:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cea:	3307      	adds	r3, #7
 8002cec:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002cee:	4770      	bx	lr
 8002cf0:	e000e010 	.word	0xe000e010
 8002cf4:	e000ed00 	.word	0xe000ed00

08002cf8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002cf8:	b570      	push	{r4, r5, r6, lr}
 8002cfa:	1e04      	subs	r4, r0, #0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002cfc:	d038      	beq.n	8002d70 <HAL_DMA_Init+0x78>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002cfe:	6805      	ldr	r5, [r0, #0]
 8002d00:	4b1c      	ldr	r3, [pc, #112]	; (8002d74 <HAL_DMA_Init+0x7c>)
 8002d02:	2114      	movs	r1, #20
 8002d04:	18e8      	adds	r0, r5, r3
 8002d06:	f7fd fa1b 	bl	8000140 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8002d0a:	4b1b      	ldr	r3, [pc, #108]	; (8002d78 <HAL_DMA_Init+0x80>)

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d0c:	2202      	movs	r2, #2
  hdma->DmaBaseAddress = DMA1;
 8002d0e:	6423      	str	r3, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d10:	2325      	movs	r3, #37	; 0x25
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002d12:	0080      	lsls	r0, r0, #2
 8002d14:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d16:	54e2      	strb	r2, [r4, r3]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002d18:	682b      	ldr	r3, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002d1a:	4a18      	ldr	r2, [pc, #96]	; (8002d7c <HAL_DMA_Init+0x84>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d1c:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002d1e:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8002d20:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d22:	6926      	ldr	r6, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 8002d24:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d26:	4333      	orrs	r3, r6
 8002d28:	6966      	ldr	r6, [r4, #20]
 8002d2a:	4333      	orrs	r3, r6
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d2c:	69a6      	ldr	r6, [r4, #24]
 8002d2e:	4333      	orrs	r3, r6
 8002d30:	69e6      	ldr	r6, [r4, #28]
 8002d32:	4333      	orrs	r3, r6
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d34:	6a26      	ldr	r6, [r4, #32]
 8002d36:	4333      	orrs	r3, r6
  tmp |=  hdma->Init.Direction        |
 8002d38:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002d3a:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002d3c:	2380      	movs	r3, #128	; 0x80
 8002d3e:	01db      	lsls	r3, r3, #7
 8002d40:	4299      	cmp	r1, r3
 8002d42:	d00c      	beq.n	8002d5e <HAL_DMA_Init+0x66>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002d44:	231c      	movs	r3, #28
 8002d46:	4018      	ands	r0, r3
 8002d48:	3b0d      	subs	r3, #13
 8002d4a:	4083      	lsls	r3, r0
 8002d4c:	4a0c      	ldr	r2, [pc, #48]	; (8002d80 <HAL_DMA_Init+0x88>)
 8002d4e:	6811      	ldr	r1, [r2, #0]
 8002d50:	4399      	bics	r1, r3
 8002d52:	6011      	str	r1, [r2, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002d54:	6863      	ldr	r3, [r4, #4]
 8002d56:	6811      	ldr	r1, [r2, #0]
 8002d58:	4083      	lsls	r3, r0
 8002d5a:	430b      	orrs	r3, r1
 8002d5c:	6013      	str	r3, [r2, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d5e:	2300      	movs	r3, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002d60:	2225      	movs	r2, #37	; 0x25
 8002d62:	2101      	movs	r1, #1

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;

  return HAL_OK;
 8002d64:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d66:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 8002d68:	54a1      	strb	r1, [r4, r2]
  hdma->Lock = HAL_UNLOCKED;
 8002d6a:	3a01      	subs	r2, #1
 8002d6c:	54a3      	strb	r3, [r4, r2]
}
 8002d6e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002d70:	2001      	movs	r0, #1
 8002d72:	e7fc      	b.n	8002d6e <HAL_DMA_Init+0x76>
 8002d74:	bffdfff8 	.word	0xbffdfff8
 8002d78:	40020000 	.word	0x40020000
 8002d7c:	ffff800f 	.word	0xffff800f
 8002d80:	400200a8 	.word	0x400200a8

08002d84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d84:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002d86:	2424      	movs	r4, #36	; 0x24
 8002d88:	5d05      	ldrb	r5, [r0, r4]
{
 8002d8a:	b083      	sub	sp, #12
  __HAL_LOCK(hdma);
 8002d8c:	2d01      	cmp	r5, #1
 8002d8e:	d03c      	beq.n	8002e0a <HAL_DMA_Start_IT+0x86>
 8002d90:	2501      	movs	r5, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 8002d92:	2725      	movs	r7, #37	; 0x25
  __HAL_LOCK(hdma);
 8002d94:	5505      	strb	r5, [r0, r4]
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d96:	5dc5      	ldrb	r5, [r0, r7]
 8002d98:	b2ee      	uxtb	r6, r5
 8002d9a:	2d01      	cmp	r5, #1
 8002d9c:	d004      	beq.n	8002da8 <HAL_DMA_Start_IT+0x24>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d9e:	2300      	movs	r3, #0
 8002da0:	5503      	strb	r3, [r0, r4]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002da2:	2002      	movs	r0, #2
  }
  return status;
}
 8002da4:	b003      	add	sp, #12
 8002da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8002da8:	3c22      	subs	r4, #34	; 0x22
 8002daa:	55c4      	strb	r4, [r0, r7]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dac:	2400      	movs	r4, #0
 8002dae:	63c4      	str	r4, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8002db0:	6804      	ldr	r4, [r0, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002db2:	3f09      	subs	r7, #9
    __HAL_DMA_DISABLE(hdma);
 8002db4:	6825      	ldr	r5, [r4, #0]
 8002db6:	43b5      	bics	r5, r6
 8002db8:	6025      	str	r5, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002dba:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8002dbc:	9501      	str	r5, [sp, #4]
 8002dbe:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8002dc0:	402f      	ands	r7, r5
 8002dc2:	40be      	lsls	r6, r7
 8002dc4:	9d01      	ldr	r5, [sp, #4]
 8002dc6:	606e      	str	r6, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002dc8:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002dca:	6883      	ldr	r3, [r0, #8]
 8002dcc:	2b10      	cmp	r3, #16
 8002dce:	d00e      	beq.n	8002dee <HAL_DMA_Start_IT+0x6a>
    if(NULL != hdma->XferHalfCpltCallback )
 8002dd0:	6b03      	ldr	r3, [r0, #48]	; 0x30
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002dd2:	60a1      	str	r1, [r4, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002dd4:	60e2      	str	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00e      	beq.n	8002df8 <HAL_DMA_Start_IT+0x74>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dda:	220e      	movs	r2, #14
 8002ddc:	6823      	ldr	r3, [r4, #0]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8002de2:	2201      	movs	r2, #1
 8002de4:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002de6:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8002de8:	4313      	orrs	r3, r2
 8002dea:	6023      	str	r3, [r4, #0]
 8002dec:	e7da      	b.n	8002da4 <HAL_DMA_Start_IT+0x20>
    if(NULL != hdma->XferHalfCpltCallback )
 8002dee:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->Instance->CPAR = DstAddress;
 8002df0:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002df2:	60e1      	str	r1, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1f0      	bne.n	8002dda <HAL_DMA_Start_IT+0x56>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002df8:	2204      	movs	r2, #4
 8002dfa:	6823      	ldr	r3, [r4, #0]
 8002dfc:	4393      	bics	r3, r2
 8002dfe:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002e00:	6823      	ldr	r3, [r4, #0]
 8002e02:	3206      	adds	r2, #6
 8002e04:	4313      	orrs	r3, r2
 8002e06:	6023      	str	r3, [r4, #0]
 8002e08:	e7eb      	b.n	8002de2 <HAL_DMA_Start_IT+0x5e>
  __HAL_LOCK(hdma);
 8002e0a:	2002      	movs	r0, #2
 8002e0c:	e7ca      	b.n	8002da4 <HAL_DMA_Start_IT+0x20>
 8002e0e:	46c0      	nop			; (mov r8, r8)

08002e10 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002e10:	2325      	movs	r3, #37	; 0x25
{
 8002e12:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002e14:	5cc2      	ldrb	r2, [r0, r3]
 8002e16:	2a02      	cmp	r2, #2
 8002e18:	d003      	beq.n	8002e22 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e1a:	3b21      	subs	r3, #33	; 0x21
 8002e1c:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8002e1e:	2001      	movs	r0, #1
}
 8002e20:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e22:	240e      	movs	r4, #14
 8002e24:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002e26:	6c45      	ldr	r5, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e28:	6811      	ldr	r1, [r2, #0]
 8002e2a:	43a1      	bics	r1, r4
 8002e2c:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002e2e:	2101      	movs	r1, #1
 8002e30:	6814      	ldr	r4, [r2, #0]
 8002e32:	438c      	bics	r4, r1
 8002e34:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002e36:	221c      	movs	r2, #28
 8002e38:	402a      	ands	r2, r5
 8002e3a:	000d      	movs	r5, r1
 8002e3c:	4095      	lsls	r5, r2
 8002e3e:	6c04      	ldr	r4, [r0, #64]	; 0x40
    __HAL_UNLOCK(hdma);
 8002e40:	2200      	movs	r2, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002e42:	6065      	str	r5, [r4, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002e44:	54c1      	strb	r1, [r0, r3]
    __HAL_UNLOCK(hdma);
 8002e46:	2324      	movs	r3, #36	; 0x24
 8002e48:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferAbortCallback != NULL)
 8002e4a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d002      	beq.n	8002e56 <HAL_DMA_Abort_IT+0x46>
      hdma->XferAbortCallback(hdma);
 8002e50:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002e52:	2000      	movs	r0, #0
 8002e54:	e7e4      	b.n	8002e20 <HAL_DMA_Abort_IT+0x10>
 8002e56:	2000      	movs	r0, #0
 8002e58:	e7e2      	b.n	8002e20 <HAL_DMA_Abort_IT+0x10>
 8002e5a:	46c0      	nop			; (mov r8, r8)

08002e5c <HAL_DMA_IRQHandler>:
{
 8002e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8002e5e:	231c      	movs	r3, #28
 8002e60:	6c44      	ldr	r4, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e62:	6c05      	ldr	r5, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8002e64:	4023      	ands	r3, r4
 8002e66:	2404      	movs	r4, #4
 8002e68:	0026      	movs	r6, r4
 8002e6a:	409e      	lsls	r6, r3
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e6c:	682a      	ldr	r2, [r5, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002e6e:	6801      	ldr	r1, [r0, #0]
 8002e70:	680f      	ldr	r7, [r1, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8002e72:	4232      	tst	r2, r6
 8002e74:	d00d      	beq.n	8002e92 <HAL_DMA_IRQHandler+0x36>
 8002e76:	423c      	tst	r4, r7
 8002e78:	d00b      	beq.n	8002e92 <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e7a:	680b      	ldr	r3, [r1, #0]
 8002e7c:	069b      	lsls	r3, r3, #26
 8002e7e:	d402      	bmi.n	8002e86 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e80:	680b      	ldr	r3, [r1, #0]
 8002e82:	43a3      	bics	r3, r4
 8002e84:	600b      	str	r3, [r1, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8002e86:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8002e88:	606e      	str	r6, [r5, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d000      	beq.n	8002e90 <HAL_DMA_IRQHandler+0x34>
      hdma->XferErrorCallback(hdma);
 8002e8e:	4798      	blx	r3
}
 8002e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8002e92:	2402      	movs	r4, #2
 8002e94:	0026      	movs	r6, r4
 8002e96:	409e      	lsls	r6, r3
 8002e98:	4232      	tst	r2, r6
 8002e9a:	d014      	beq.n	8002ec6 <HAL_DMA_IRQHandler+0x6a>
 8002e9c:	423c      	tst	r4, r7
 8002e9e:	d012      	beq.n	8002ec6 <HAL_DMA_IRQHandler+0x6a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ea0:	680b      	ldr	r3, [r1, #0]
 8002ea2:	069b      	lsls	r3, r3, #26
 8002ea4:	d406      	bmi.n	8002eb4 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002ea6:	220a      	movs	r2, #10
 8002ea8:	680b      	ldr	r3, [r1, #0]
 8002eaa:	4393      	bics	r3, r2
 8002eac:	600b      	str	r3, [r1, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002eae:	2325      	movs	r3, #37	; 0x25
 8002eb0:	3a09      	subs	r2, #9
 8002eb2:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8002eb4:	2324      	movs	r3, #36	; 0x24
 8002eb6:	2200      	movs	r2, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002eb8:	606e      	str	r6, [r5, #4]
    __HAL_UNLOCK(hdma);
 8002eba:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferCpltCallback != NULL)
 8002ebc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d0e6      	beq.n	8002e90 <HAL_DMA_IRQHandler+0x34>
      hdma->XferErrorCallback(hdma);
 8002ec2:	4798      	blx	r3
  return;
 8002ec4:	e7e4      	b.n	8002e90 <HAL_DMA_IRQHandler+0x34>
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8002ec6:	2408      	movs	r4, #8
 8002ec8:	0026      	movs	r6, r4
 8002eca:	409e      	lsls	r6, r3
 8002ecc:	4232      	tst	r2, r6
 8002ece:	d0df      	beq.n	8002e90 <HAL_DMA_IRQHandler+0x34>
 8002ed0:	423c      	tst	r4, r7
 8002ed2:	d0dd      	beq.n	8002e90 <HAL_DMA_IRQHandler+0x34>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ed4:	680a      	ldr	r2, [r1, #0]
 8002ed6:	3406      	adds	r4, #6
 8002ed8:	43a2      	bics	r2, r4
 8002eda:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002edc:	2201      	movs	r2, #1
 8002ede:	0011      	movs	r1, r2
 8002ee0:	4099      	lsls	r1, r3
    hdma->State = HAL_DMA_STATE_READY;
 8002ee2:	2325      	movs	r3, #37	; 0x25
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002ee4:	6069      	str	r1, [r5, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ee6:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8002ee8:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8002eea:	2200      	movs	r2, #0
 8002eec:	3b01      	subs	r3, #1
 8002eee:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 8002ef0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d0cc      	beq.n	8002e90 <HAL_DMA_IRQHandler+0x34>
      hdma->XferErrorCallback(hdma);
 8002ef6:	4798      	blx	r3
  return;
 8002ef8:	e7ca      	b.n	8002e90 <HAL_DMA_IRQHandler+0x34>
 8002efa:	46c0      	nop			; (mov r8, r8)

08002efc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002efe:	4645      	mov	r5, r8
 8002f00:	46de      	mov	lr, fp
 8002f02:	4657      	mov	r7, sl
 8002f04:	464e      	mov	r6, r9
 8002f06:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002f08:	680d      	ldr	r5, [r1, #0]
  uint32_t position = 0x00U;
 8002f0a:	2300      	movs	r3, #0
{
 8002f0c:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0)
 8002f0e:	2d00      	cmp	r5, #0
 8002f10:	d100      	bne.n	8002f14 <HAL_GPIO_Init+0x18>
 8002f12:	e07f      	b.n	8003014 <HAL_GPIO_Init+0x118>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002f14:	2201      	movs	r2, #1
 8002f16:	4691      	mov	r9, r2
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f18:	4a6f      	ldr	r2, [pc, #444]	; (80030d8 <HAL_GPIO_Init+0x1dc>)
 8002f1a:	9100      	str	r1, [sp, #0]
 8002f1c:	4690      	mov	r8, r2
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002f1e:	464a      	mov	r2, r9
 8002f20:	002e      	movs	r6, r5
 8002f22:	409a      	lsls	r2, r3
 8002f24:	4016      	ands	r6, r2
 8002f26:	9601      	str	r6, [sp, #4]
    if(iocurrent)
 8002f28:	4215      	tst	r5, r2
 8002f2a:	d06f      	beq.n	800300c <HAL_GPIO_Init+0x110>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8002f2c:	9900      	ldr	r1, [sp, #0]
 8002f2e:	2610      	movs	r6, #16
 8002f30:	6849      	ldr	r1, [r1, #4]
 8002f32:	000c      	movs	r4, r1
 8002f34:	43b4      	bics	r4, r6
 8002f36:	2c02      	cmp	r4, #2
 8002f38:	d100      	bne.n	8002f3c <HAL_GPIO_Init+0x40>
 8002f3a:	e072      	b.n	8003022 <HAL_GPIO_Init+0x126>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f3c:	3c01      	subs	r4, #1
 8002f3e:	2c01      	cmp	r4, #1
 8002f40:	d800      	bhi.n	8002f44 <HAL_GPIO_Init+0x48>
 8002f42:	e088      	b.n	8003056 <HAL_GPIO_Init+0x15a>
 8002f44:	2403      	movs	r4, #3
 8002f46:	005a      	lsls	r2, r3, #1
 8002f48:	4094      	lsls	r4, r2
 8002f4a:	4694      	mov	ip, r2
 8002f4c:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 8002f4e:	6802      	ldr	r2, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f50:	4666      	mov	r6, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002f52:	4022      	ands	r2, r4
 8002f54:	4692      	mov	sl, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f56:	2203      	movs	r2, #3
 8002f58:	400a      	ands	r2, r1
 8002f5a:	40b2      	lsls	r2, r6
 8002f5c:	4656      	mov	r6, sl
 8002f5e:	4332      	orrs	r2, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8002f60:	4666      	mov	r6, ip
      GPIOx->MODER = temp;
 8002f62:	6002      	str	r2, [r0, #0]
      temp = GPIOx->PUPDR;
 8002f64:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f66:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8002f68:	9a00      	ldr	r2, [sp, #0]
 8002f6a:	6892      	ldr	r2, [r2, #8]
 8002f6c:	40b2      	lsls	r2, r6
 8002f6e:	4314      	orrs	r4, r2
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8002f70:	2280      	movs	r2, #128	; 0x80
 8002f72:	0552      	lsls	r2, r2, #21
      GPIOx->PUPDR = temp;
 8002f74:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8002f76:	4211      	tst	r1, r2
 8002f78:	d048      	beq.n	800300c <HAL_GPIO_Init+0x110>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f7a:	464e      	mov	r6, r9
 8002f7c:	4c57      	ldr	r4, [pc, #348]	; (80030dc <HAL_GPIO_Init+0x1e0>)
 8002f7e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002f80:	4332      	orrs	r2, r6
 8002f82:	6362      	str	r2, [r4, #52]	; 0x34
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8002f84:	2603      	movs	r6, #3
 8002f86:	4c56      	ldr	r4, [pc, #344]	; (80030e0 <HAL_GPIO_Init+0x1e4>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8002f88:	089a      	lsrs	r2, r3, #2
 8002f8a:	46a4      	mov	ip, r4
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8002f8c:	401e      	ands	r6, r3
 8002f8e:	00b6      	lsls	r6, r6, #2
 8002f90:	0092      	lsls	r2, r2, #2
 8002f92:	4462      	add	r2, ip
 8002f94:	46b4      	mov	ip, r6
 8002f96:	260f      	movs	r6, #15
 8002f98:	4667      	mov	r7, ip
 8002f9a:	40be      	lsls	r6, r7
        temp = SYSCFG->EXTICR[position >> 2U];
 8002f9c:	6894      	ldr	r4, [r2, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8002f9e:	43b4      	bics	r4, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002fa0:	26a0      	movs	r6, #160	; 0xa0
 8002fa2:	05f6      	lsls	r6, r6, #23
 8002fa4:	42b0      	cmp	r0, r6
 8002fa6:	d015      	beq.n	8002fd4 <HAL_GPIO_Init+0xd8>
 8002fa8:	4e4e      	ldr	r6, [pc, #312]	; (80030e4 <HAL_GPIO_Init+0x1e8>)
 8002faa:	42b0      	cmp	r0, r6
 8002fac:	d100      	bne.n	8002fb0 <HAL_GPIO_Init+0xb4>
 8002fae:	e08f      	b.n	80030d0 <HAL_GPIO_Init+0x1d4>
 8002fb0:	4e4d      	ldr	r6, [pc, #308]	; (80030e8 <HAL_GPIO_Init+0x1ec>)
 8002fb2:	46b2      	mov	sl, r6
 8002fb4:	2602      	movs	r6, #2
 8002fb6:	4550      	cmp	r0, sl
 8002fb8:	d009      	beq.n	8002fce <HAL_GPIO_Init+0xd2>
 8002fba:	4e4c      	ldr	r6, [pc, #304]	; (80030ec <HAL_GPIO_Init+0x1f0>)
 8002fbc:	42b0      	cmp	r0, r6
 8002fbe:	d100      	bne.n	8002fc2 <HAL_GPIO_Init+0xc6>
 8002fc0:	e082      	b.n	80030c8 <HAL_GPIO_Init+0x1cc>
 8002fc2:	4e4b      	ldr	r6, [pc, #300]	; (80030f0 <HAL_GPIO_Init+0x1f4>)
 8002fc4:	46b2      	mov	sl, r6
 8002fc6:	2605      	movs	r6, #5
 8002fc8:	4550      	cmp	r0, sl
 8002fca:	d000      	beq.n	8002fce <HAL_GPIO_Init+0xd2>
 8002fcc:	2606      	movs	r6, #6
 8002fce:	4667      	mov	r7, ip
 8002fd0:	40be      	lsls	r6, r7
 8002fd2:	4334      	orrs	r4, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fd4:	6094      	str	r4, [r2, #8]
        temp = EXTI->IMR;
 8002fd6:	4642      	mov	r2, r8
        temp &= ~((uint32_t)iocurrent);
 8002fd8:	9c01      	ldr	r4, [sp, #4]
        temp = EXTI->IMR;
 8002fda:	6812      	ldr	r2, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8002fdc:	43e4      	mvns	r4, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fde:	03ce      	lsls	r6, r1, #15
 8002fe0:	d45a      	bmi.n	8003098 <HAL_GPIO_Init+0x19c>
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8002fe2:	4646      	mov	r6, r8
        temp &= ~((uint32_t)iocurrent);
 8002fe4:	4022      	ands	r2, r4
        EXTI->IMR = temp;
 8002fe6:	6032      	str	r2, [r6, #0]

        temp = EXTI->EMR;
 8002fe8:	6872      	ldr	r2, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fea:	038e      	lsls	r6, r1, #14
 8002fec:	d45b      	bmi.n	80030a6 <HAL_GPIO_Init+0x1aa>
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8002fee:	4646      	mov	r6, r8
        temp &= ~((uint32_t)iocurrent);
 8002ff0:	4022      	ands	r2, r4
        EXTI->EMR = temp;
 8002ff2:	6072      	str	r2, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ff4:	68b2      	ldr	r2, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ff6:	02ce      	lsls	r6, r1, #11
 8002ff8:	d45c      	bmi.n	80030b4 <HAL_GPIO_Init+0x1b8>
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8002ffa:	4646      	mov	r6, r8
        temp &= ~((uint32_t)iocurrent);
 8002ffc:	4022      	ands	r2, r4
        EXTI->RTSR = temp;
 8002ffe:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR;
 8003000:	68f2      	ldr	r2, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003002:	0289      	lsls	r1, r1, #10
 8003004:	d45d      	bmi.n	80030c2 <HAL_GPIO_Init+0x1c6>
        temp &= ~((uint32_t)iocurrent);
 8003006:	4022      	ands	r2, r4
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8003008:	4641      	mov	r1, r8
 800300a:	60ca      	str	r2, [r1, #12]
  while (((GPIO_Init->Pin) >> position) != 0)
 800300c:	002a      	movs	r2, r5
      }
    }
    position++;
 800300e:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0)
 8003010:	40da      	lsrs	r2, r3
 8003012:	d184      	bne.n	8002f1e <HAL_GPIO_Init+0x22>
  }
}
 8003014:	b003      	add	sp, #12
 8003016:	bcf0      	pop	{r4, r5, r6, r7}
 8003018:	46bb      	mov	fp, r7
 800301a:	46b2      	mov	sl, r6
 800301c:	46a9      	mov	r9, r5
 800301e:	46a0      	mov	r8, r4
 8003020:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->AFR[position >> 3U];
 8003022:	08dc      	lsrs	r4, r3, #3
 8003024:	00a4      	lsls	r4, r4, #2
 8003026:	1904      	adds	r4, r0, r4
 8003028:	6a26      	ldr	r6, [r4, #32]
 800302a:	46b2      	mov	sl, r6
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 800302c:	2607      	movs	r6, #7
 800302e:	401e      	ands	r6, r3
 8003030:	00b6      	lsls	r6, r6, #2
 8003032:	46b4      	mov	ip, r6
 8003034:	260f      	movs	r6, #15
 8003036:	4667      	mov	r7, ip
 8003038:	40be      	lsls	r6, r7
 800303a:	46b3      	mov	fp, r6
 800303c:	4656      	mov	r6, sl
 800303e:	465f      	mov	r7, fp
 8003040:	43be      	bics	r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8003042:	4667      	mov	r7, ip
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8003044:	46b2      	mov	sl, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8003046:	9e00      	ldr	r6, [sp, #0]
 8003048:	6936      	ldr	r6, [r6, #16]
 800304a:	40be      	lsls	r6, r7
 800304c:	46b4      	mov	ip, r6
 800304e:	4656      	mov	r6, sl
 8003050:	4667      	mov	r7, ip
 8003052:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 8003054:	6226      	str	r6, [r4, #32]
        temp = GPIOx->OSPEEDR;
 8003056:	6884      	ldr	r4, [r0, #8]
 8003058:	46a2      	mov	sl, r4
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800305a:	005c      	lsls	r4, r3, #1
 800305c:	46a4      	mov	ip, r4
 800305e:	2403      	movs	r4, #3
 8003060:	4666      	mov	r6, ip
 8003062:	40b4      	lsls	r4, r6
 8003064:	46a3      	mov	fp, r4
 8003066:	4656      	mov	r6, sl
 8003068:	465f      	mov	r7, fp
 800306a:	43be      	bics	r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 800306c:	4667      	mov	r7, ip
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800306e:	46b3      	mov	fp, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003070:	9e00      	ldr	r6, [sp, #0]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003072:	43e4      	mvns	r4, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003074:	68f6      	ldr	r6, [r6, #12]
 8003076:	40be      	lsls	r6, r7
 8003078:	46b2      	mov	sl, r6
 800307a:	465e      	mov	r6, fp
 800307c:	4657      	mov	r7, sl
 800307e:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8003080:	6086      	str	r6, [r0, #8]
        temp= GPIOx->OTYPER;
 8003082:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003084:	4396      	bics	r6, r2
 8003086:	46b2      	mov	sl, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003088:	464e      	mov	r6, r9
 800308a:	090a      	lsrs	r2, r1, #4
 800308c:	4032      	ands	r2, r6
 800308e:	409a      	lsls	r2, r3
 8003090:	4656      	mov	r6, sl
 8003092:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 8003094:	6042      	str	r2, [r0, #4]
 8003096:	e75a      	b.n	8002f4e <HAL_GPIO_Init+0x52>
          temp |= iocurrent;
 8003098:	9e01      	ldr	r6, [sp, #4]
 800309a:	4332      	orrs	r2, r6
        EXTI->IMR = temp;
 800309c:	4646      	mov	r6, r8
 800309e:	6032      	str	r2, [r6, #0]
        temp = EXTI->EMR;
 80030a0:	6872      	ldr	r2, [r6, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030a2:	038e      	lsls	r6, r1, #14
 80030a4:	d5a3      	bpl.n	8002fee <HAL_GPIO_Init+0xf2>
          temp |= iocurrent;
 80030a6:	9e01      	ldr	r6, [sp, #4]
 80030a8:	4332      	orrs	r2, r6
        EXTI->EMR = temp;
 80030aa:	4646      	mov	r6, r8
 80030ac:	6072      	str	r2, [r6, #4]
        temp = EXTI->RTSR;
 80030ae:	68b2      	ldr	r2, [r6, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030b0:	02ce      	lsls	r6, r1, #11
 80030b2:	d5a2      	bpl.n	8002ffa <HAL_GPIO_Init+0xfe>
          temp |= iocurrent;
 80030b4:	9e01      	ldr	r6, [sp, #4]
 80030b6:	4332      	orrs	r2, r6
        EXTI->RTSR = temp;
 80030b8:	4646      	mov	r6, r8
 80030ba:	60b2      	str	r2, [r6, #8]
        temp = EXTI->FTSR;
 80030bc:	68f2      	ldr	r2, [r6, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030be:	0289      	lsls	r1, r1, #10
 80030c0:	d5a1      	bpl.n	8003006 <HAL_GPIO_Init+0x10a>
          temp |= iocurrent;
 80030c2:	9901      	ldr	r1, [sp, #4]
 80030c4:	430a      	orrs	r2, r1
 80030c6:	e79f      	b.n	8003008 <HAL_GPIO_Init+0x10c>
 80030c8:	2603      	movs	r6, #3
 80030ca:	40be      	lsls	r6, r7
 80030cc:	4334      	orrs	r4, r6
 80030ce:	e781      	b.n	8002fd4 <HAL_GPIO_Init+0xd8>
 80030d0:	464e      	mov	r6, r9
 80030d2:	40be      	lsls	r6, r7
 80030d4:	4334      	orrs	r4, r6
 80030d6:	e77d      	b.n	8002fd4 <HAL_GPIO_Init+0xd8>
 80030d8:	40010400 	.word	0x40010400
 80030dc:	40021000 	.word	0x40021000
 80030e0:	40010000 	.word	0x40010000
 80030e4:	50000400 	.word	0x50000400
 80030e8:	50000800 	.word	0x50000800
 80030ec:	50000c00 	.word	0x50000c00
 80030f0:	50001c00 	.word	0x50001c00

080030f4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 80030f4:	2a00      	cmp	r2, #0
 80030f6:	d001      	beq.n	80030fc <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030f8:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80030fa:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 80030fc:	6281      	str	r1, [r0, #40]	; 0x28
}
 80030fe:	e7fc      	b.n	80030fa <HAL_GPIO_WritePin+0x6>

08003100 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8003100:	4b04      	ldr	r3, [pc, #16]	; (8003114 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8003102:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8003104:	695a      	ldr	r2, [r3, #20]
 8003106:	4210      	tst	r0, r2
 8003108:	d100      	bne.n	800310c <HAL_GPIO_EXTI_IRQHandler+0xc>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 800310a:	bd10      	pop	{r4, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800310c:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800310e:	f002 fc87 	bl	8005a20 <HAL_GPIO_EXTI_Callback>
}
 8003112:	e7fa      	b.n	800310a <HAL_GPIO_EXTI_IRQHandler+0xa>
 8003114:	40010400 	.word	0x40010400

08003118 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003118:	2310      	movs	r3, #16
{
 800311a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800311c:	46c6      	mov	lr, r8
 800311e:	0004      	movs	r4, r0
 8003120:	000d      	movs	r5, r1
 8003122:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003124:	2702      	movs	r7, #2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003126:	4698      	mov	r8, r3
{
 8003128:	b500      	push	{lr}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800312a:	6823      	ldr	r3, [r4, #0]
 800312c:	1c6a      	adds	r2, r5, #1
 800312e:	d131      	bne.n	8003194 <I2C_WaitOnTXISFlagUntilTimeout+0x7c>
 8003130:	2102      	movs	r1, #2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003132:	2010      	movs	r0, #16
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003134:	699a      	ldr	r2, [r3, #24]
 8003136:	4211      	tst	r1, r2
 8003138:	d12a      	bne.n	8003190 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800313a:	699a      	ldr	r2, [r3, #24]
 800313c:	4210      	tst	r0, r2
 800313e:	d0f9      	beq.n	8003134 <I2C_WaitOnTXISFlagUntilTimeout+0x1c>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003140:	2120      	movs	r1, #32
 8003142:	699a      	ldr	r2, [r3, #24]
 8003144:	4211      	tst	r1, r2
 8003146:	d0fc      	beq.n	8003142 <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003148:	2210      	movs	r2, #16
 800314a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800314c:	3210      	adds	r2, #16
 800314e:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003150:	699a      	ldr	r2, [r3, #24]
 8003152:	0792      	lsls	r2, r2, #30
 8003154:	d501      	bpl.n	800315a <I2C_WaitOnTXISFlagUntilTimeout+0x42>
    hi2c->Instance->TXDR = 0x00U;
 8003156:	2200      	movs	r2, #0
 8003158:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800315a:	2201      	movs	r2, #1
 800315c:	6999      	ldr	r1, [r3, #24]
 800315e:	420a      	tst	r2, r1
 8003160:	d102      	bne.n	8003168 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003162:	6999      	ldr	r1, [r3, #24]
 8003164:	430a      	orrs	r2, r1
 8003166:	619a      	str	r2, [r3, #24]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003168:	685a      	ldr	r2, [r3, #4]
 800316a:	491b      	ldr	r1, [pc, #108]	; (80031d8 <I2C_WaitOnTXISFlagUntilTimeout+0xc0>)
 800316c:	400a      	ands	r2, r1
 800316e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003170:	2204      	movs	r2, #4
 8003172:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003174:	4313      	orrs	r3, r2
 8003176:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003178:	2341      	movs	r3, #65	; 0x41
 800317a:	321c      	adds	r2, #28
 800317c:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800317e:	2300      	movs	r3, #0
      return HAL_ERROR;
 8003180:	2001      	movs	r0, #1
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003182:	3222      	adds	r2, #34	; 0x22
 8003184:	54a3      	strb	r3, [r4, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003186:	3a02      	subs	r2, #2
 8003188:	54a3      	strb	r3, [r4, r2]
}
 800318a:	bc80      	pop	{r7}
 800318c:	46b8      	mov	r8, r7
 800318e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return HAL_OK;
 8003190:	2000      	movs	r0, #0
 8003192:	e7fa      	b.n	800318a <I2C_WaitOnTXISFlagUntilTimeout+0x72>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003194:	699a      	ldr	r2, [r3, #24]
 8003196:	4217      	tst	r7, r2
 8003198:	d1fa      	bne.n	8003190 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800319a:	4641      	mov	r1, r8
 800319c:	699a      	ldr	r2, [r3, #24]
 800319e:	4211      	tst	r1, r2
 80031a0:	d00d      	beq.n	80031be <I2C_WaitOnTXISFlagUntilTimeout+0xa6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031a2:	2720      	movs	r7, #32
 80031a4:	e007      	b.n	80031b6 <I2C_WaitOnTXISFlagUntilTimeout+0x9e>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031a6:	f7ff f9d9 	bl	800255c <HAL_GetTick>
 80031aa:	1b80      	subs	r0, r0, r6
 80031ac:	4285      	cmp	r5, r0
 80031ae:	d30d      	bcc.n	80031cc <I2C_WaitOnTXISFlagUntilTimeout+0xb4>
 80031b0:	2d00      	cmp	r5, #0
 80031b2:	d00b      	beq.n	80031cc <I2C_WaitOnTXISFlagUntilTimeout+0xb4>
 80031b4:	6823      	ldr	r3, [r4, #0]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031b6:	6999      	ldr	r1, [r3, #24]
 80031b8:	420f      	tst	r7, r1
 80031ba:	d0f4      	beq.n	80031a6 <I2C_WaitOnTXISFlagUntilTimeout+0x8e>
 80031bc:	e7c4      	b.n	8003148 <I2C_WaitOnTXISFlagUntilTimeout+0x30>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031be:	f7ff f9cd 	bl	800255c <HAL_GetTick>
 80031c2:	1b80      	subs	r0, r0, r6
 80031c4:	42a8      	cmp	r0, r5
 80031c6:	d801      	bhi.n	80031cc <I2C_WaitOnTXISFlagUntilTimeout+0xb4>
 80031c8:	2d00      	cmp	r5, #0
 80031ca:	d1ae      	bne.n	800312a <I2C_WaitOnTXISFlagUntilTimeout+0x12>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031cc:	2220      	movs	r2, #32
 80031ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80031d0:	4313      	orrs	r3, r2
 80031d2:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80031d4:	2341      	movs	r3, #65	; 0x41
 80031d6:	e7d1      	b.n	800317c <I2C_WaitOnTXISFlagUntilTimeout+0x64>
 80031d8:	fe00e800 	.word	0xfe00e800

080031dc <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80031dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031de:	46c6      	mov	lr, r8
 80031e0:	0004      	movs	r4, r0
 80031e2:	000d      	movs	r5, r1
 80031e4:	0016      	movs	r6, r2
 80031e6:	b500      	push	{lr}
 80031e8:	2900      	cmp	r1, #0
 80031ea:	d04c      	beq.n	8003286 <I2C_WaitOnSTOPFlagUntilTimeout+0xaa>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031ec:	2310      	movs	r3, #16
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031ee:	2720      	movs	r7, #32
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031f0:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031f2:	6823      	ldr	r3, [r4, #0]
 80031f4:	699a      	ldr	r2, [r3, #24]
 80031f6:	4217      	tst	r7, r2
 80031f8:	d154      	bne.n	80032a4 <I2C_WaitOnSTOPFlagUntilTimeout+0xc8>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031fa:	4641      	mov	r1, r8
 80031fc:	699a      	ldr	r2, [r3, #24]
 80031fe:	4211      	tst	r1, r2
 8003200:	d02a      	beq.n	8003258 <I2C_WaitOnSTOPFlagUntilTimeout+0x7c>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003202:	2720      	movs	r7, #32
 8003204:	1c6a      	adds	r2, r5, #1
 8003206:	d132      	bne.n	800326e <I2C_WaitOnSTOPFlagUntilTimeout+0x92>
 8003208:	2120      	movs	r1, #32
 800320a:	699a      	ldr	r2, [r3, #24]
 800320c:	4211      	tst	r1, r2
 800320e:	d0fc      	beq.n	800320a <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003210:	2210      	movs	r2, #16
 8003212:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003214:	3210      	adds	r2, #16
 8003216:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003218:	699a      	ldr	r2, [r3, #24]
 800321a:	0792      	lsls	r2, r2, #30
 800321c:	d501      	bpl.n	8003222 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    hi2c->Instance->TXDR = 0x00U;
 800321e:	2200      	movs	r2, #0
 8003220:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003222:	2201      	movs	r2, #1
 8003224:	6999      	ldr	r1, [r3, #24]
 8003226:	420a      	tst	r2, r1
 8003228:	d102      	bne.n	8003230 <I2C_WaitOnSTOPFlagUntilTimeout+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800322a:	6999      	ldr	r1, [r3, #24]
 800322c:	430a      	orrs	r2, r1
 800322e:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
 8003230:	685a      	ldr	r2, [r3, #4]
 8003232:	491d      	ldr	r1, [pc, #116]	; (80032a8 <I2C_WaitOnSTOPFlagUntilTimeout+0xcc>)
 8003234:	400a      	ands	r2, r1
 8003236:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003238:	2204      	movs	r2, #4
 800323a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800323c:	4313      	orrs	r3, r2
 800323e:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003240:	2341      	movs	r3, #65	; 0x41
 8003242:	321c      	adds	r2, #28
 8003244:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003246:	2300      	movs	r3, #0
      return HAL_ERROR;
 8003248:	2001      	movs	r0, #1
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800324a:	3222      	adds	r2, #34	; 0x22
 800324c:	54a3      	strb	r3, [r4, r2]
    __HAL_UNLOCK(hi2c);
 800324e:	3a02      	subs	r2, #2
 8003250:	54a3      	strb	r3, [r4, r2]
}
 8003252:	bc80      	pop	{r7}
 8003254:	46b8      	mov	r8, r7
 8003256:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003258:	f7ff f980 	bl	800255c <HAL_GetTick>
 800325c:	1b80      	subs	r0, r0, r6
 800325e:	4285      	cmp	r5, r0
 8003260:	d2c7      	bcs.n	80031f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003262:	2220      	movs	r2, #32
 8003264:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003266:	4313      	orrs	r3, r2
 8003268:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800326a:	2341      	movs	r3, #65	; 0x41
 800326c:	e7ea      	b.n	8003244 <I2C_WaitOnSTOPFlagUntilTimeout+0x68>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800326e:	699a      	ldr	r2, [r3, #24]
 8003270:	4217      	tst	r7, r2
 8003272:	d1cd      	bne.n	8003210 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003274:	f7ff f972 	bl	800255c <HAL_GetTick>
 8003278:	1b80      	subs	r0, r0, r6
 800327a:	4285      	cmp	r5, r0
 800327c:	d3f1      	bcc.n	8003262 <I2C_WaitOnSTOPFlagUntilTimeout+0x86>
 800327e:	2d00      	cmp	r5, #0
 8003280:	d0ef      	beq.n	8003262 <I2C_WaitOnSTOPFlagUntilTimeout+0x86>
 8003282:	6823      	ldr	r3, [r4, #0]
 8003284:	e7be      	b.n	8003204 <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003286:	6803      	ldr	r3, [r0, #0]
 8003288:	699a      	ldr	r2, [r3, #24]
 800328a:	0692      	lsls	r2, r2, #26
 800328c:	d40a      	bmi.n	80032a4 <I2C_WaitOnSTOPFlagUntilTimeout+0xc8>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800328e:	699a      	ldr	r2, [r3, #24]
 8003290:	06d2      	lsls	r2, r2, #27
 8003292:	d4b6      	bmi.n	8003202 <I2C_WaitOnSTOPFlagUntilTimeout+0x26>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003294:	f7ff f962 	bl	800255c <HAL_GetTick>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003298:	2220      	movs	r2, #32
 800329a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800329c:	4313      	orrs	r3, r2
 800329e:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80032a0:	2341      	movs	r3, #65	; 0x41
 80032a2:	e7cf      	b.n	8003244 <I2C_WaitOnSTOPFlagUntilTimeout+0x68>
  return HAL_OK;
 80032a4:	2000      	movs	r0, #0
 80032a6:	e7d4      	b.n	8003252 <I2C_WaitOnSTOPFlagUntilTimeout+0x76>
 80032a8:	fe00e800 	.word	0xfe00e800

080032ac <HAL_I2C_Init>:
{
 80032ac:	b510      	push	{r4, lr}
 80032ae:	1e04      	subs	r4, r0, #0
  if (hi2c == NULL)
 80032b0:	d04d      	beq.n	800334e <HAL_I2C_Init+0xa2>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032b2:	2341      	movs	r3, #65	; 0x41
 80032b4:	5cc3      	ldrb	r3, [r0, r3]
 80032b6:	b2da      	uxtb	r2, r3
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d043      	beq.n	8003344 <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80032bc:	2341      	movs	r3, #65	; 0x41
 80032be:	2224      	movs	r2, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 80032c0:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 80032c2:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 80032c4:	6823      	ldr	r3, [r4, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	438a      	bics	r2, r1
 80032ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80032cc:	6861      	ldr	r1, [r4, #4]
 80032ce:	4a21      	ldr	r2, [pc, #132]	; (8003354 <HAL_I2C_Init+0xa8>)
 80032d0:	400a      	ands	r2, r1
 80032d2:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80032d4:	689a      	ldr	r2, [r3, #8]
 80032d6:	4920      	ldr	r1, [pc, #128]	; (8003358 <HAL_I2C_Init+0xac>)
 80032d8:	400a      	ands	r2, r1
 80032da:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032dc:	68e2      	ldr	r2, [r4, #12]
 80032de:	2a01      	cmp	r2, #1
 80032e0:	d02a      	beq.n	8003338 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80032e2:	2184      	movs	r1, #132	; 0x84
 80032e4:	68a0      	ldr	r0, [r4, #8]
 80032e6:	0209      	lsls	r1, r1, #8
 80032e8:	4301      	orrs	r1, r0
 80032ea:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80032ec:	2a02      	cmp	r2, #2
 80032ee:	d102      	bne.n	80032f6 <HAL_I2C_Init+0x4a>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80032f0:	2280      	movs	r2, #128	; 0x80
 80032f2:	0112      	lsls	r2, r2, #4
 80032f4:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80032f6:	6859      	ldr	r1, [r3, #4]
 80032f8:	4a18      	ldr	r2, [pc, #96]	; (800335c <HAL_I2C_Init+0xb0>)
  return HAL_OK;
 80032fa:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80032fc:	430a      	orrs	r2, r1
 80032fe:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003300:	68da      	ldr	r2, [r3, #12]
 8003302:	4915      	ldr	r1, [pc, #84]	; (8003358 <HAL_I2C_Init+0xac>)
 8003304:	400a      	ands	r2, r1
 8003306:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003308:	6961      	ldr	r1, [r4, #20]
 800330a:	6922      	ldr	r2, [r4, #16]
 800330c:	430a      	orrs	r2, r1
 800330e:	69a1      	ldr	r1, [r4, #24]
 8003310:	0209      	lsls	r1, r1, #8
 8003312:	430a      	orrs	r2, r1
 8003314:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003316:	6a21      	ldr	r1, [r4, #32]
 8003318:	69e2      	ldr	r2, [r4, #28]
 800331a:	430a      	orrs	r2, r1
  __HAL_I2C_ENABLE(hi2c);
 800331c:	2101      	movs	r1, #1
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800331e:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	430a      	orrs	r2, r1
 8003324:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003326:	2300      	movs	r3, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8003328:	2241      	movs	r2, #65	; 0x41
 800332a:	311f      	adds	r1, #31
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800332c:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800332e:	54a1      	strb	r1, [r4, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003330:	3201      	adds	r2, #1
  hi2c->PreviousState = I2C_STATE_NONE;
 8003332:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003334:	54a3      	strb	r3, [r4, r2]
}
 8003336:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003338:	2280      	movs	r2, #128	; 0x80
 800333a:	68a1      	ldr	r1, [r4, #8]
 800333c:	0212      	lsls	r2, r2, #8
 800333e:	430a      	orrs	r2, r1
 8003340:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003342:	e7d8      	b.n	80032f6 <HAL_I2C_Init+0x4a>
    hi2c->Lock = HAL_UNLOCKED;
 8003344:	3340      	adds	r3, #64	; 0x40
 8003346:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 8003348:	f002 fa48 	bl	80057dc <HAL_I2C_MspInit>
 800334c:	e7b6      	b.n	80032bc <HAL_I2C_Init+0x10>
    return HAL_ERROR;
 800334e:	2001      	movs	r0, #1
 8003350:	e7f1      	b.n	8003336 <HAL_I2C_Init+0x8a>
 8003352:	46c0      	nop			; (mov r8, r8)
 8003354:	f0ffffff 	.word	0xf0ffffff
 8003358:	ffff7fff 	.word	0xffff7fff
 800335c:	02008000 	.word	0x02008000

08003360 <HAL_I2C_Mem_Write>:
{
 8003360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003362:	4645      	mov	r5, r8
 8003364:	46de      	mov	lr, fp
 8003366:	4657      	mov	r7, sl
 8003368:	464e      	mov	r6, r9
 800336a:	b5e0      	push	{r5, r6, r7, lr}
 800336c:	4698      	mov	r8, r3
 800336e:	ab0a      	add	r3, sp, #40	; 0x28
 8003370:	4691      	mov	r9, r2
 8003372:	cb04      	ldmia	r3!, {r2}
 8003374:	0004      	movs	r4, r0
 8003376:	881b      	ldrh	r3, [r3, #0]
 8003378:	000d      	movs	r5, r1
 800337a:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800337c:	2341      	movs	r3, #65	; 0x41
 800337e:	5cc3      	ldrb	r3, [r0, r3]
{
 8003380:	4692      	mov	sl, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003382:	2b20      	cmp	r3, #32
 8003384:	d000      	beq.n	8003388 <HAL_I2C_Mem_Write+0x28>
 8003386:	e0a0      	b.n	80034ca <HAL_I2C_Mem_Write+0x16a>
    if ((pData == NULL) || (Size == 0U))
 8003388:	2a00      	cmp	r2, #0
 800338a:	d100      	bne.n	800338e <HAL_I2C_Mem_Write+0x2e>
 800338c:	e093      	b.n	80034b6 <HAL_I2C_Mem_Write+0x156>
 800338e:	465b      	mov	r3, fp
 8003390:	2b00      	cmp	r3, #0
 8003392:	d100      	bne.n	8003396 <HAL_I2C_Mem_Write+0x36>
 8003394:	e08f      	b.n	80034b6 <HAL_I2C_Mem_Write+0x156>
    __HAL_LOCK(hi2c);
 8003396:	2340      	movs	r3, #64	; 0x40
 8003398:	5cc2      	ldrb	r2, [r0, r3]
 800339a:	2a01      	cmp	r2, #1
 800339c:	d100      	bne.n	80033a0 <HAL_I2C_Mem_Write+0x40>
 800339e:	e094      	b.n	80034ca <HAL_I2C_Mem_Write+0x16a>
 80033a0:	2201      	movs	r2, #1
 80033a2:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 80033a4:	f7ff f8da 	bl	800255c <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033a8:	2780      	movs	r7, #128	; 0x80
    tickstart = HAL_GetTick();
 80033aa:	0006      	movs	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033ac:	023f      	lsls	r7, r7, #8
 80033ae:	e005      	b.n	80033bc <HAL_I2C_Mem_Write+0x5c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033b0:	f7ff f8d4 	bl	800255c <HAL_GetTick>
 80033b4:	1b80      	subs	r0, r0, r6
 80033b6:	2819      	cmp	r0, #25
 80033b8:	d900      	bls.n	80033bc <HAL_I2C_Mem_Write+0x5c>
 80033ba:	e088      	b.n	80034ce <HAL_I2C_Mem_Write+0x16e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033bc:	6822      	ldr	r2, [r4, #0]
 80033be:	6993      	ldr	r3, [r2, #24]
 80033c0:	0019      	movs	r1, r3
 80033c2:	4039      	ands	r1, r7
 80033c4:	423b      	tst	r3, r7
 80033c6:	d1f3      	bne.n	80033b0 <HAL_I2C_Mem_Write+0x50>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80033c8:	2341      	movs	r3, #65	; 0x41
 80033ca:	2021      	movs	r0, #33	; 0x21
 80033cc:	54e0      	strb	r0, [r4, r3]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80033ce:	3301      	adds	r3, #1
 80033d0:	301f      	adds	r0, #31
 80033d2:	54e0      	strb	r0, [r4, r3]
    hi2c->pBuffPtr  = pData;
 80033d4:	4653      	mov	r3, sl
 80033d6:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80033d8:	465b      	mov	r3, fp
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033da:	6461      	str	r1, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 80033dc:	8563      	strh	r3, [r4, #42]	; 0x2a
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80033de:	6853      	ldr	r3, [r2, #4]
    hi2c->XferISR   = NULL;
 80033e0:	6361      	str	r1, [r4, #52]	; 0x34
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80033e2:	4973      	ldr	r1, [pc, #460]	; (80035b0 <HAL_I2C_Mem_Write+0x250>)
 80033e4:	05ad      	lsls	r5, r5, #22
 80033e6:	400b      	ands	r3, r1
 80033e8:	4641      	mov	r1, r8
 80033ea:	b2c9      	uxtb	r1, r1
 80033ec:	0409      	lsls	r1, r1, #16
 80033ee:	430b      	orrs	r3, r1
 80033f0:	0dad      	lsrs	r5, r5, #22
 80033f2:	4970      	ldr	r1, [pc, #448]	; (80035b4 <HAL_I2C_Mem_Write+0x254>)
 80033f4:	432b      	orrs	r3, r5
 80033f6:	430b      	orrs	r3, r1
 80033f8:	6053      	str	r3, [r2, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033fa:	0020      	movs	r0, r4
 80033fc:	0032      	movs	r2, r6
 80033fe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003400:	f7ff fe8a 	bl	8003118 <I2C_WaitOnTXISFlagUntilTimeout>
 8003404:	2800      	cmp	r0, #0
 8003406:	d000      	beq.n	800340a <HAL_I2C_Mem_Write+0xaa>
 8003408:	e091      	b.n	800352e <HAL_I2C_Mem_Write+0x1ce>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800340a:	4643      	mov	r3, r8
 800340c:	2b01      	cmp	r3, #1
 800340e:	d000      	beq.n	8003412 <HAL_I2C_Mem_Write+0xb2>
 8003410:	e081      	b.n	8003516 <HAL_I2C_Mem_Write+0x1b6>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003412:	464b      	mov	r3, r9
 8003414:	6821      	ldr	r1, [r4, #0]
 8003416:	b2df      	uxtb	r7, r3
 8003418:	628f      	str	r7, [r1, #40]	; 0x28
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800341a:	2780      	movs	r7, #128	; 0x80
 800341c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800341e:	3301      	adds	r3, #1
 8003420:	d162      	bne.n	80034e8 <HAL_I2C_Mem_Write+0x188>
 8003422:	2280      	movs	r2, #128	; 0x80
 8003424:	698b      	ldr	r3, [r1, #24]
 8003426:	421a      	tst	r2, r3
 8003428:	d0fc      	beq.n	8003424 <HAL_I2C_Mem_Write+0xc4>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800342a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800342c:	2bff      	cmp	r3, #255	; 0xff
 800342e:	d868      	bhi.n	8003502 <HAL_I2C_Mem_Write+0x1a2>
      hi2c->XferSize = hi2c->XferCount;
 8003430:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003432:	4861      	ldr	r0, [pc, #388]	; (80035b8 <HAL_I2C_Mem_Write+0x258>)
 8003434:	684a      	ldr	r2, [r1, #4]
      hi2c->XferSize = hi2c->XferCount;
 8003436:	b29b      	uxth	r3, r3
 8003438:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800343a:	4002      	ands	r2, r0
 800343c:	b2db      	uxtb	r3, r3
 800343e:	432a      	orrs	r2, r5
 8003440:	041b      	lsls	r3, r3, #16
 8003442:	4313      	orrs	r3, r2
 8003444:	2280      	movs	r2, #128	; 0x80
 8003446:	0492      	lsls	r2, r2, #18
 8003448:	4313      	orrs	r3, r2
 800344a:	604b      	str	r3, [r1, #4]
 800344c:	4b5a      	ldr	r3, [pc, #360]	; (80035b8 <HAL_I2C_Mem_Write+0x258>)
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800344e:	2780      	movs	r7, #128	; 0x80
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003450:	4698      	mov	r8, r3
 8003452:	e003      	b.n	800345c <HAL_I2C_Mem_Write+0xfc>
    while (hi2c->XferCount > 0U);
 8003454:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003456:	2b00      	cmp	r3, #0
 8003458:	d100      	bne.n	800345c <HAL_I2C_Mem_Write+0xfc>
 800345a:	e089      	b.n	8003570 <HAL_I2C_Mem_Write+0x210>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800345c:	0032      	movs	r2, r6
 800345e:	0020      	movs	r0, r4
 8003460:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003462:	f7ff fe59 	bl	8003118 <I2C_WaitOnTXISFlagUntilTimeout>
 8003466:	2800      	cmp	r0, #0
 8003468:	d13c      	bne.n	80034e4 <HAL_I2C_Mem_Write+0x184>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800346a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800346c:	6822      	ldr	r2, [r4, #0]
 800346e:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8003470:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003472:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8003474:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003476:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003478:	3b01      	subs	r3, #1
 800347a:	b29b      	uxth	r3, r3
 800347c:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800347e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003480:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003482:	3b01      	subs	r3, #1
 8003484:	b29b      	uxth	r3, r3
 8003486:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003488:	2900      	cmp	r1, #0
 800348a:	d0e3      	beq.n	8003454 <HAL_I2C_Mem_Write+0xf4>
 800348c:	2b00      	cmp	r3, #0
 800348e:	d1e1      	bne.n	8003454 <HAL_I2C_Mem_Write+0xf4>
 8003490:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003492:	3301      	adds	r3, #1
 8003494:	d150      	bne.n	8003538 <HAL_I2C_Mem_Write+0x1d8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003496:	6993      	ldr	r3, [r2, #24]
 8003498:	421f      	tst	r7, r3
 800349a:	d0fc      	beq.n	8003496 <HAL_I2C_Mem_Write+0x136>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800349c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800349e:	2bff      	cmp	r3, #255	; 0xff
 80034a0:	d957      	bls.n	8003552 <HAL_I2C_Mem_Write+0x1f2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80034a2:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80034a4:	4641      	mov	r1, r8
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80034a6:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80034a8:	6853      	ldr	r3, [r2, #4]
 80034aa:	400b      	ands	r3, r1
 80034ac:	4943      	ldr	r1, [pc, #268]	; (80035bc <HAL_I2C_Mem_Write+0x25c>)
 80034ae:	432b      	orrs	r3, r5
 80034b0:	430b      	orrs	r3, r1
 80034b2:	6053      	str	r3, [r2, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80034b4:	e7ce      	b.n	8003454 <HAL_I2C_Mem_Write+0xf4>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80034b6:	2380      	movs	r3, #128	; 0x80
      return  HAL_ERROR;
 80034b8:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	6463      	str	r3, [r4, #68]	; 0x44
}
 80034be:	bcf0      	pop	{r4, r5, r6, r7}
 80034c0:	46bb      	mov	fp, r7
 80034c2:	46b2      	mov	sl, r6
 80034c4:	46a9      	mov	r9, r5
 80034c6:	46a0      	mov	r8, r4
 80034c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80034ca:	2002      	movs	r0, #2
 80034cc:	e7f7      	b.n	80034be <HAL_I2C_Mem_Write+0x15e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034ce:	2220      	movs	r2, #32
 80034d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80034d2:	4313      	orrs	r3, r2
 80034d4:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034d6:	2341      	movs	r3, #65	; 0x41
 80034d8:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034da:	2300      	movs	r3, #0
 80034dc:	3222      	adds	r2, #34	; 0x22
 80034de:	54a3      	strb	r3, [r4, r2]
        __HAL_UNLOCK(hi2c);
 80034e0:	3a02      	subs	r2, #2
 80034e2:	54a3      	strb	r3, [r4, r2]
          return HAL_ERROR;
 80034e4:	2001      	movs	r0, #1
 80034e6:	e7ea      	b.n	80034be <HAL_I2C_Mem_Write+0x15e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034e8:	698b      	ldr	r3, [r1, #24]
 80034ea:	421f      	tst	r7, r3
 80034ec:	d19d      	bne.n	800342a <HAL_I2C_Mem_Write+0xca>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ee:	f7ff f835 	bl	800255c <HAL_GetTick>
 80034f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80034f4:	1b80      	subs	r0, r0, r6
 80034f6:	4283      	cmp	r3, r0
 80034f8:	d34f      	bcc.n	800359a <HAL_I2C_Mem_Write+0x23a>
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d04d      	beq.n	800359a <HAL_I2C_Mem_Write+0x23a>
 80034fe:	6821      	ldr	r1, [r4, #0]
 8003500:	e78c      	b.n	800341c <HAL_I2C_Mem_Write+0xbc>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003502:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003504:	4a2c      	ldr	r2, [pc, #176]	; (80035b8 <HAL_I2C_Mem_Write+0x258>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003506:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003508:	684b      	ldr	r3, [r1, #4]
 800350a:	4013      	ands	r3, r2
 800350c:	4a2b      	ldr	r2, [pc, #172]	; (80035bc <HAL_I2C_Mem_Write+0x25c>)
 800350e:	432b      	orrs	r3, r5
 8003510:	4313      	orrs	r3, r2
 8003512:	604b      	str	r3, [r1, #4]
}
 8003514:	e79a      	b.n	800344c <HAL_I2C_Mem_Write+0xec>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003516:	464a      	mov	r2, r9
 8003518:	6823      	ldr	r3, [r4, #0]
 800351a:	0a12      	lsrs	r2, r2, #8
 800351c:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800351e:	0020      	movs	r0, r4
 8003520:	0032      	movs	r2, r6
 8003522:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003524:	f7ff fdf8 	bl	8003118 <I2C_WaitOnTXISFlagUntilTimeout>
 8003528:	2800      	cmp	r0, #0
 800352a:	d100      	bne.n	800352e <HAL_I2C_Mem_Write+0x1ce>
 800352c:	e771      	b.n	8003412 <HAL_I2C_Mem_Write+0xb2>
      __HAL_UNLOCK(hi2c);
 800352e:	2340      	movs	r3, #64	; 0x40
 8003530:	2200      	movs	r2, #0
      return HAL_ERROR;
 8003532:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
 8003534:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR;
 8003536:	e7c2      	b.n	80034be <HAL_I2C_Mem_Write+0x15e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003538:	6993      	ldr	r3, [r2, #24]
 800353a:	421f      	tst	r7, r3
 800353c:	d1ae      	bne.n	800349c <HAL_I2C_Mem_Write+0x13c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800353e:	f7ff f80d 	bl	800255c <HAL_GetTick>
 8003542:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003544:	1b80      	subs	r0, r0, r6
 8003546:	4283      	cmp	r3, r0
 8003548:	d3c1      	bcc.n	80034ce <HAL_I2C_Mem_Write+0x16e>
 800354a:	2b00      	cmp	r3, #0
 800354c:	d0bf      	beq.n	80034ce <HAL_I2C_Mem_Write+0x16e>
 800354e:	6822      	ldr	r2, [r4, #0]
 8003550:	e79e      	b.n	8003490 <HAL_I2C_Mem_Write+0x130>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003552:	4640      	mov	r0, r8
          hi2c->XferSize = hi2c->XferCount;
 8003554:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003556:	6851      	ldr	r1, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 8003558:	b29b      	uxth	r3, r3
 800355a:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800355c:	4001      	ands	r1, r0
 800355e:	b2db      	uxtb	r3, r3
 8003560:	4329      	orrs	r1, r5
 8003562:	041b      	lsls	r3, r3, #16
 8003564:	430b      	orrs	r3, r1
 8003566:	2180      	movs	r1, #128	; 0x80
 8003568:	0489      	lsls	r1, r1, #18
 800356a:	430b      	orrs	r3, r1
 800356c:	6053      	str	r3, [r2, #4]
}
 800356e:	e771      	b.n	8003454 <HAL_I2C_Mem_Write+0xf4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003570:	0032      	movs	r2, r6
 8003572:	0020      	movs	r0, r4
 8003574:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003576:	f7ff fe31 	bl	80031dc <I2C_WaitOnSTOPFlagUntilTimeout>
 800357a:	2800      	cmp	r0, #0
 800357c:	d1b2      	bne.n	80034e4 <HAL_I2C_Mem_Write+0x184>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800357e:	2120      	movs	r1, #32
 8003580:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8003582:	4d0f      	ldr	r5, [pc, #60]	; (80035c0 <HAL_I2C_Mem_Write+0x260>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003584:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003586:	685a      	ldr	r2, [r3, #4]
 8003588:	402a      	ands	r2, r5
 800358a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800358c:	2341      	movs	r3, #65	; 0x41
 800358e:	54e1      	strb	r1, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003590:	3301      	adds	r3, #1
 8003592:	54e0      	strb	r0, [r4, r3]
    __HAL_UNLOCK(hi2c);
 8003594:	3b02      	subs	r3, #2
 8003596:	54e0      	strb	r0, [r4, r3]
    return HAL_OK;
 8003598:	e791      	b.n	80034be <HAL_I2C_Mem_Write+0x15e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800359a:	2220      	movs	r2, #32
 800359c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800359e:	4313      	orrs	r3, r2
 80035a0:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035a2:	2341      	movs	r3, #65	; 0x41
 80035a4:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035a6:	2200      	movs	r2, #0
 80035a8:	3301      	adds	r3, #1
 80035aa:	54e2      	strb	r2, [r4, r3]
    return HAL_ERROR;
 80035ac:	e7bf      	b.n	800352e <HAL_I2C_Mem_Write+0x1ce>
 80035ae:	46c0      	nop			; (mov r8, r8)
 80035b0:	fc009800 	.word	0xfc009800
 80035b4:	81002000 	.word	0x81002000
 80035b8:	fc009c00 	.word	0xfc009c00
 80035bc:	01ff0000 	.word	0x01ff0000
 80035c0:	fe00e800 	.word	0xfe00e800

080035c4 <HAL_I2C_Mem_Read>:
{
 80035c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035c6:	4645      	mov	r5, r8
 80035c8:	46de      	mov	lr, fp
 80035ca:	4657      	mov	r7, sl
 80035cc:	464e      	mov	r6, r9
 80035ce:	b5e0      	push	{r5, r6, r7, lr}
 80035d0:	b083      	sub	sp, #12
 80035d2:	4698      	mov	r8, r3
 80035d4:	ab0c      	add	r3, sp, #48	; 0x30
 80035d6:	9201      	str	r2, [sp, #4]
 80035d8:	cb04      	ldmia	r3!, {r2}
 80035da:	0004      	movs	r4, r0
 80035dc:	881b      	ldrh	r3, [r3, #0]
 80035de:	4689      	mov	r9, r1
 80035e0:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80035e2:	2341      	movs	r3, #65	; 0x41
 80035e4:	5cc3      	ldrb	r3, [r0, r3]
{
 80035e6:	4692      	mov	sl, r2
 80035e8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 80035ea:	2b20      	cmp	r3, #32
 80035ec:	d000      	beq.n	80035f0 <HAL_I2C_Mem_Read+0x2c>
 80035ee:	e0a5      	b.n	800373c <HAL_I2C_Mem_Read+0x178>
    if ((pData == NULL) || (Size == 0U))
 80035f0:	2a00      	cmp	r2, #0
 80035f2:	d100      	bne.n	80035f6 <HAL_I2C_Mem_Read+0x32>
 80035f4:	e097      	b.n	8003726 <HAL_I2C_Mem_Read+0x162>
 80035f6:	465b      	mov	r3, fp
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d100      	bne.n	80035fe <HAL_I2C_Mem_Read+0x3a>
 80035fc:	e093      	b.n	8003726 <HAL_I2C_Mem_Read+0x162>
    __HAL_LOCK(hi2c);
 80035fe:	2340      	movs	r3, #64	; 0x40
 8003600:	5cc2      	ldrb	r2, [r0, r3]
 8003602:	2a01      	cmp	r2, #1
 8003604:	d100      	bne.n	8003608 <HAL_I2C_Mem_Read+0x44>
 8003606:	e099      	b.n	800373c <HAL_I2C_Mem_Read+0x178>
 8003608:	2201      	movs	r2, #1
 800360a:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 800360c:	f7fe ffa6 	bl	800255c <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003610:	2680      	movs	r6, #128	; 0x80
    tickstart = HAL_GetTick();
 8003612:	0007      	movs	r7, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003614:	0236      	lsls	r6, r6, #8
 8003616:	e004      	b.n	8003622 <HAL_I2C_Mem_Read+0x5e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003618:	f7fe ffa0 	bl	800255c <HAL_GetTick>
 800361c:	1bc0      	subs	r0, r0, r7
 800361e:	2819      	cmp	r0, #25
 8003620:	d874      	bhi.n	800370c <HAL_I2C_Mem_Read+0x148>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003622:	6822      	ldr	r2, [r4, #0]
 8003624:	6993      	ldr	r3, [r2, #24]
 8003626:	0019      	movs	r1, r3
 8003628:	4031      	ands	r1, r6
 800362a:	4233      	tst	r3, r6
 800362c:	d1f4      	bne.n	8003618 <HAL_I2C_Mem_Read+0x54>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800362e:	2341      	movs	r3, #65	; 0x41
 8003630:	2022      	movs	r0, #34	; 0x22
 8003632:	54e0      	strb	r0, [r4, r3]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003634:	3301      	adds	r3, #1
 8003636:	301e      	adds	r0, #30
 8003638:	54e0      	strb	r0, [r4, r3]
    hi2c->pBuffPtr  = pData;
 800363a:	4653      	mov	r3, sl
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800363c:	6461      	str	r1, [r4, #68]	; 0x44
    hi2c->XferISR   = NULL;
 800363e:	6361      	str	r1, [r4, #52]	; 0x34
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003640:	4649      	mov	r1, r9
    hi2c->pBuffPtr  = pData;
 8003642:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8003644:	465b      	mov	r3, fp
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003646:	058e      	lsls	r6, r1, #22
    hi2c->XferCount = Size;
 8003648:	8563      	strh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800364a:	0db1      	lsrs	r1, r6, #22
 800364c:	6853      	ldr	r3, [r2, #4]
 800364e:	4689      	mov	r9, r1
 8003650:	497a      	ldr	r1, [pc, #488]	; (800383c <HAL_I2C_Mem_Read+0x278>)
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003652:	0020      	movs	r0, r4
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003654:	400b      	ands	r3, r1
 8003656:	4641      	mov	r1, r8
 8003658:	b2c9      	uxtb	r1, r1
 800365a:	0409      	lsls	r1, r1, #16
 800365c:	430b      	orrs	r3, r1
 800365e:	4649      	mov	r1, r9
 8003660:	430b      	orrs	r3, r1
 8003662:	4977      	ldr	r1, [pc, #476]	; (8003840 <HAL_I2C_Mem_Read+0x27c>)
 8003664:	430b      	orrs	r3, r1
 8003666:	6053      	str	r3, [r2, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003668:	0029      	movs	r1, r5
 800366a:	003a      	movs	r2, r7
 800366c:	f7ff fd54 	bl	8003118 <I2C_WaitOnTXISFlagUntilTimeout>
 8003670:	2800      	cmp	r0, #0
 8003672:	d000      	beq.n	8003676 <HAL_I2C_Mem_Read+0xb2>
 8003674:	e0cc      	b.n	8003810 <HAL_I2C_Mem_Read+0x24c>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003676:	4643      	mov	r3, r8
 8003678:	2b01      	cmp	r3, #1
 800367a:	d000      	beq.n	800367e <HAL_I2C_Mem_Read+0xba>
 800367c:	e07e      	b.n	800377c <HAL_I2C_Mem_Read+0x1b8>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800367e:	466a      	mov	r2, sp
 8003680:	6823      	ldr	r3, [r4, #0]
 8003682:	7912      	ldrb	r2, [r2, #4]
 8003684:	629a      	str	r2, [r3, #40]	; 0x28
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003686:	2640      	movs	r6, #64	; 0x40
 8003688:	1c6a      	adds	r2, r5, #1
 800368a:	d000      	beq.n	800368e <HAL_I2C_Mem_Read+0xca>
 800368c:	e0aa      	b.n	80037e4 <HAL_I2C_Mem_Read+0x220>
 800368e:	2140      	movs	r1, #64	; 0x40
 8003690:	699a      	ldr	r2, [r3, #24]
 8003692:	4211      	tst	r1, r2
 8003694:	d0fc      	beq.n	8003690 <HAL_I2C_Mem_Read+0xcc>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003696:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003698:	2aff      	cmp	r2, #255	; 0xff
 800369a:	d800      	bhi.n	800369e <HAL_I2C_Mem_Read+0xda>
 800369c:	e0bd      	b.n	800381a <HAL_I2C_Mem_Read+0x256>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800369e:	22ff      	movs	r2, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80036a0:	4966      	ldr	r1, [pc, #408]	; (800383c <HAL_I2C_Mem_Read+0x278>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80036a2:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	400a      	ands	r2, r1
 80036a8:	4649      	mov	r1, r9
 80036aa:	430a      	orrs	r2, r1
 80036ac:	4965      	ldr	r1, [pc, #404]	; (8003844 <HAL_I2C_Mem_Read+0x280>)
 80036ae:	430a      	orrs	r2, r1
 80036b0:	605a      	str	r2, [r3, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036b2:	2204      	movs	r2, #4
 80036b4:	2680      	movs	r6, #128	; 0x80
 80036b6:	4690      	mov	r8, r2
 80036b8:	1c6a      	adds	r2, r5, #1
 80036ba:	d11c      	bne.n	80036f6 <HAL_I2C_Mem_Read+0x132>
 80036bc:	4641      	mov	r1, r8
 80036be:	699a      	ldr	r2, [r3, #24]
 80036c0:	4211      	tst	r1, r2
 80036c2:	d0fb      	beq.n	80036bc <HAL_I2C_Mem_Read+0xf8>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80036c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80036c8:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 80036ca:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 80036cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80036ce:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 80036d0:	3301      	adds	r3, #1
      hi2c->XferCount--;
 80036d2:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 80036d4:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80036d6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80036d8:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80036da:	3b01      	subs	r3, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80036dc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80036de:	b29b      	uxth	r3, r3
 80036e0:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80036e2:	2a00      	cmp	r2, #0
 80036e4:	d001      	beq.n	80036ea <HAL_I2C_Mem_Read+0x126>
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d034      	beq.n	8003754 <HAL_I2C_Mem_Read+0x190>
    while (hi2c->XferCount > 0U);
 80036ea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d054      	beq.n	800379a <HAL_I2C_Mem_Read+0x1d6>
 80036f0:	6823      	ldr	r3, [r4, #0]
 80036f2:	1c6a      	adds	r2, r5, #1
 80036f4:	d0e2      	beq.n	80036bc <HAL_I2C_Mem_Read+0xf8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036f6:	4641      	mov	r1, r8
 80036f8:	699a      	ldr	r2, [r3, #24]
 80036fa:	4211      	tst	r1, r2
 80036fc:	d1e2      	bne.n	80036c4 <HAL_I2C_Mem_Read+0x100>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036fe:	f7fe ff2d 	bl	800255c <HAL_GetTick>
 8003702:	1bc0      	subs	r0, r0, r7
 8003704:	4285      	cmp	r5, r0
 8003706:	d301      	bcc.n	800370c <HAL_I2C_Mem_Read+0x148>
 8003708:	2d00      	cmp	r5, #0
 800370a:	d1f1      	bne.n	80036f0 <HAL_I2C_Mem_Read+0x12c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800370c:	2220      	movs	r2, #32
 800370e:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 8003710:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003712:	4313      	orrs	r3, r2
 8003714:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003716:	2341      	movs	r3, #65	; 0x41
 8003718:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800371a:	2300      	movs	r3, #0
 800371c:	3222      	adds	r2, #34	; 0x22
 800371e:	54a3      	strb	r3, [r4, r2]
        __HAL_UNLOCK(hi2c);
 8003720:	3a02      	subs	r2, #2
 8003722:	54a3      	strb	r3, [r4, r2]
        return HAL_ERROR;
 8003724:	e003      	b.n	800372e <HAL_I2C_Mem_Read+0x16a>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003726:	2380      	movs	r3, #128	; 0x80
      return  HAL_ERROR;
 8003728:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	6463      	str	r3, [r4, #68]	; 0x44
}
 800372e:	b003      	add	sp, #12
 8003730:	bcf0      	pop	{r4, r5, r6, r7}
 8003732:	46bb      	mov	fp, r7
 8003734:	46b2      	mov	sl, r6
 8003736:	46a9      	mov	r9, r5
 8003738:	46a0      	mov	r8, r4
 800373a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800373c:	2002      	movs	r0, #2
 800373e:	e7f6      	b.n	800372e <HAL_I2C_Mem_Read+0x16a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003740:	6993      	ldr	r3, [r2, #24]
 8003742:	421e      	tst	r6, r3
 8003744:	d10c      	bne.n	8003760 <HAL_I2C_Mem_Read+0x19c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003746:	f7fe ff09 	bl	800255c <HAL_GetTick>
 800374a:	1bc0      	subs	r0, r0, r7
 800374c:	4285      	cmp	r5, r0
 800374e:	d3dd      	bcc.n	800370c <HAL_I2C_Mem_Read+0x148>
 8003750:	2d00      	cmp	r5, #0
 8003752:	d0db      	beq.n	800370c <HAL_I2C_Mem_Read+0x148>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003754:	6822      	ldr	r2, [r4, #0]
 8003756:	1c6b      	adds	r3, r5, #1
 8003758:	d1f2      	bne.n	8003740 <HAL_I2C_Mem_Read+0x17c>
 800375a:	6993      	ldr	r3, [r2, #24]
 800375c:	421e      	tst	r6, r3
 800375e:	d0fc      	beq.n	800375a <HAL_I2C_Mem_Read+0x196>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003760:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003762:	2bff      	cmp	r3, #255	; 0xff
 8003764:	d92e      	bls.n	80037c4 <HAL_I2C_Mem_Read+0x200>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003766:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003768:	4937      	ldr	r1, [pc, #220]	; (8003848 <HAL_I2C_Mem_Read+0x284>)
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800376a:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800376c:	6853      	ldr	r3, [r2, #4]
 800376e:	400b      	ands	r3, r1
 8003770:	4649      	mov	r1, r9
 8003772:	430b      	orrs	r3, r1
 8003774:	4935      	ldr	r1, [pc, #212]	; (800384c <HAL_I2C_Mem_Read+0x288>)
 8003776:	430b      	orrs	r3, r1
 8003778:	6053      	str	r3, [r2, #4]
}
 800377a:	e7b6      	b.n	80036ea <HAL_I2C_Mem_Read+0x126>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800377c:	9e01      	ldr	r6, [sp, #4]
 800377e:	6823      	ldr	r3, [r4, #0]
 8003780:	0a32      	lsrs	r2, r6, #8
 8003782:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003784:	0029      	movs	r1, r5
 8003786:	003a      	movs	r2, r7
 8003788:	0020      	movs	r0, r4
 800378a:	f7ff fcc5 	bl	8003118 <I2C_WaitOnTXISFlagUntilTimeout>
 800378e:	2800      	cmp	r0, #0
 8003790:	d13e      	bne.n	8003810 <HAL_I2C_Mem_Read+0x24c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003792:	6823      	ldr	r3, [r4, #0]
 8003794:	b2f2      	uxtb	r2, r6
 8003796:	629a      	str	r2, [r3, #40]	; 0x28
 8003798:	e775      	b.n	8003686 <HAL_I2C_Mem_Read+0xc2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800379a:	003a      	movs	r2, r7
 800379c:	0029      	movs	r1, r5
 800379e:	0020      	movs	r0, r4
 80037a0:	f7ff fd1c 	bl	80031dc <I2C_WaitOnSTOPFlagUntilTimeout>
 80037a4:	2800      	cmp	r0, #0
 80037a6:	d147      	bne.n	8003838 <HAL_I2C_Mem_Read+0x274>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037a8:	2120      	movs	r1, #32
 80037aa:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 80037ac:	4d28      	ldr	r5, [pc, #160]	; (8003850 <HAL_I2C_Mem_Read+0x28c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037ae:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80037b0:	685a      	ldr	r2, [r3, #4]
 80037b2:	402a      	ands	r2, r5
 80037b4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80037b6:	2341      	movs	r3, #65	; 0x41
 80037b8:	54e1      	strb	r1, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80037ba:	3301      	adds	r3, #1
 80037bc:	54e0      	strb	r0, [r4, r3]
    __HAL_UNLOCK(hi2c);
 80037be:	3b02      	subs	r3, #2
 80037c0:	54e0      	strb	r0, [r4, r3]
    return HAL_OK;
 80037c2:	e7b4      	b.n	800372e <HAL_I2C_Mem_Read+0x16a>
          hi2c->XferSize = hi2c->XferCount;
 80037c4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80037c6:	4820      	ldr	r0, [pc, #128]	; (8003848 <HAL_I2C_Mem_Read+0x284>)
 80037c8:	6851      	ldr	r1, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 80037ca:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80037cc:	4001      	ands	r1, r0
 80037ce:	4648      	mov	r0, r9
          hi2c->XferSize = hi2c->XferCount;
 80037d0:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	4301      	orrs	r1, r0
 80037d6:	041b      	lsls	r3, r3, #16
 80037d8:	430b      	orrs	r3, r1
 80037da:	2180      	movs	r1, #128	; 0x80
 80037dc:	0489      	lsls	r1, r1, #18
 80037de:	430b      	orrs	r3, r1
 80037e0:	6053      	str	r3, [r2, #4]
}
 80037e2:	e782      	b.n	80036ea <HAL_I2C_Mem_Read+0x126>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037e4:	699a      	ldr	r2, [r3, #24]
 80037e6:	4216      	tst	r6, r2
 80037e8:	d000      	beq.n	80037ec <HAL_I2C_Mem_Read+0x228>
 80037ea:	e754      	b.n	8003696 <HAL_I2C_Mem_Read+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ec:	f7fe feb6 	bl	800255c <HAL_GetTick>
 80037f0:	1bc0      	subs	r0, r0, r7
 80037f2:	4285      	cmp	r5, r0
 80037f4:	d303      	bcc.n	80037fe <HAL_I2C_Mem_Read+0x23a>
 80037f6:	2d00      	cmp	r5, #0
 80037f8:	d001      	beq.n	80037fe <HAL_I2C_Mem_Read+0x23a>
 80037fa:	6823      	ldr	r3, [r4, #0]
 80037fc:	e744      	b.n	8003688 <HAL_I2C_Mem_Read+0xc4>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037fe:	2220      	movs	r2, #32
 8003800:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003802:	4313      	orrs	r3, r2
 8003804:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003806:	2341      	movs	r3, #65	; 0x41
 8003808:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800380a:	2200      	movs	r2, #0
 800380c:	3301      	adds	r3, #1
 800380e:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hi2c);
 8003810:	2340      	movs	r3, #64	; 0x40
 8003812:	2200      	movs	r2, #0
      return HAL_ERROR;
 8003814:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
 8003816:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR;
 8003818:	e789      	b.n	800372e <HAL_I2C_Mem_Read+0x16a>
      hi2c->XferSize = hi2c->XferCount;
 800381a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800381c:	4807      	ldr	r0, [pc, #28]	; (800383c <HAL_I2C_Mem_Read+0x278>)
 800381e:	6859      	ldr	r1, [r3, #4]
      hi2c->XferSize = hi2c->XferCount;
 8003820:	b292      	uxth	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003822:	4001      	ands	r1, r0
 8003824:	4648      	mov	r0, r9
      hi2c->XferSize = hi2c->XferCount;
 8003826:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003828:	b2d2      	uxtb	r2, r2
 800382a:	4301      	orrs	r1, r0
 800382c:	0412      	lsls	r2, r2, #16
 800382e:	430a      	orrs	r2, r1
 8003830:	4908      	ldr	r1, [pc, #32]	; (8003854 <HAL_I2C_Mem_Read+0x290>)
 8003832:	430a      	orrs	r2, r1
 8003834:	605a      	str	r2, [r3, #4]
}
 8003836:	e73c      	b.n	80036b2 <HAL_I2C_Mem_Read+0xee>
      return HAL_ERROR;
 8003838:	2001      	movs	r0, #1
 800383a:	e778      	b.n	800372e <HAL_I2C_Mem_Read+0x16a>
 800383c:	fc009800 	.word	0xfc009800
 8003840:	80002000 	.word	0x80002000
 8003844:	81ff2400 	.word	0x81ff2400
 8003848:	fc009c00 	.word	0xfc009c00
 800384c:	01ff0000 	.word	0x01ff0000
 8003850:	fe00e800 	.word	0xfe00e800
 8003854:	82002400 	.word	0x82002400

08003858 <HAL_I2C_IsDeviceReady>:
{
 8003858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800385a:	4657      	mov	r7, sl
 800385c:	4645      	mov	r5, r8
 800385e:	46de      	mov	lr, fp
 8003860:	464e      	mov	r6, r9
 8003862:	b5e0      	push	{r5, r6, r7, lr}
 8003864:	001d      	movs	r5, r3
  __IO uint32_t I2C_Trials = 0UL;
 8003866:	2300      	movs	r3, #0
{
 8003868:	4692      	mov	sl, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800386a:	2241      	movs	r2, #65	; 0x41
{
 800386c:	b083      	sub	sp, #12
  __IO uint32_t I2C_Trials = 0UL;
 800386e:	9301      	str	r3, [sp, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003870:	5c83      	ldrb	r3, [r0, r2]
{
 8003872:	0004      	movs	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003874:	2b20      	cmp	r3, #32
 8003876:	d157      	bne.n	8003928 <HAL_I2C_IsDeviceReady+0xd0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003878:	6803      	ldr	r3, [r0, #0]
 800387a:	2080      	movs	r0, #128	; 0x80
 800387c:	699e      	ldr	r6, [r3, #24]
 800387e:	0200      	lsls	r0, r0, #8
 8003880:	0037      	movs	r7, r6
 8003882:	4007      	ands	r7, r0
 8003884:	4206      	tst	r6, r0
 8003886:	d14f      	bne.n	8003928 <HAL_I2C_IsDeviceReady+0xd0>
    __HAL_LOCK(hi2c);
 8003888:	2040      	movs	r0, #64	; 0x40
 800388a:	5c26      	ldrb	r6, [r4, r0]
 800388c:	2e01      	cmp	r6, #1
 800388e:	d04b      	beq.n	8003928 <HAL_I2C_IsDeviceReady+0xd0>
 8003890:	2601      	movs	r6, #1
 8003892:	0589      	lsls	r1, r1, #22
 8003894:	5426      	strb	r6, [r4, r0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003896:	381c      	subs	r0, #28
 8003898:	54a0      	strb	r0, [r4, r2]
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800389a:	0d8a      	lsrs	r2, r1, #22
 800389c:	4691      	mov	r9, r2
 800389e:	22a0      	movs	r2, #160	; 0xa0
 80038a0:	4649      	mov	r1, r9
 80038a2:	0192      	lsls	r2, r2, #6
 80038a4:	4311      	orrs	r1, r2
 80038a6:	468b      	mov	fp, r1
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038a8:	6467      	str	r7, [r4, #68]	; 0x44
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80038aa:	68e2      	ldr	r2, [r4, #12]
 80038ac:	2a01      	cmp	r2, #1
 80038ae:	d063      	beq.n	8003978 <HAL_I2C_IsDeviceReady+0x120>
 80038b0:	465a      	mov	r2, fp
 80038b2:	b292      	uxth	r2, r2
 80038b4:	605a      	str	r2, [r3, #4]
      tickstart = HAL_GetTick();
 80038b6:	f7fe fe51 	bl	800255c <HAL_GetTick>
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80038ba:	2220      	movs	r2, #32
 80038bc:	6823      	ldr	r3, [r4, #0]
      tickstart = HAL_GetTick();
 80038be:	0006      	movs	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80038c0:	6999      	ldr	r1, [r3, #24]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80038c2:	6998      	ldr	r0, [r3, #24]
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80038c4:	400a      	ands	r2, r1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80038c6:	2110      	movs	r1, #16
 80038c8:	4001      	ands	r1, r0
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80038ca:	430a      	orrs	r2, r1
 80038cc:	d109      	bne.n	80038e2 <HAL_I2C_IsDeviceReady+0x8a>
 80038ce:	1c6a      	adds	r2, r5, #1
 80038d0:	d13e      	bne.n	8003950 <HAL_I2C_IsDeviceReady+0xf8>
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80038d2:	2710      	movs	r7, #16
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80038d4:	2020      	movs	r0, #32
 80038d6:	6999      	ldr	r1, [r3, #24]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80038d8:	699a      	ldr	r2, [r3, #24]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80038da:	4001      	ands	r1, r0
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80038dc:	403a      	ands	r2, r7
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80038de:	430a      	orrs	r2, r1
 80038e0:	d0f9      	beq.n	80038d6 <HAL_I2C_IsDeviceReady+0x7e>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80038e2:	699a      	ldr	r2, [r3, #24]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038e4:	2720      	movs	r7, #32
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80038e6:	06d2      	lsls	r2, r2, #27
 80038e8:	d400      	bmi.n	80038ec <HAL_I2C_IsDeviceReady+0x94>
 80038ea:	e072      	b.n	80039d2 <HAL_I2C_IsDeviceReady+0x17a>
 80038ec:	1c6a      	adds	r2, r5, #1
 80038ee:	d123      	bne.n	8003938 <HAL_I2C_IsDeviceReady+0xe0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038f0:	2120      	movs	r1, #32
 80038f2:	699a      	ldr	r2, [r3, #24]
 80038f4:	4211      	tst	r1, r2
 80038f6:	d0fc      	beq.n	80038f2 <HAL_I2C_IsDeviceReady+0x9a>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038f8:	2210      	movs	r2, #16
 80038fa:	61da      	str	r2, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038fc:	3210      	adds	r2, #16
 80038fe:	61da      	str	r2, [r3, #28]
      if (I2C_Trials == Trials)
 8003900:	9a01      	ldr	r2, [sp, #4]
 8003902:	4552      	cmp	r2, sl
 8003904:	d03f      	beq.n	8003986 <HAL_I2C_IsDeviceReady+0x12e>
      I2C_Trials++;
 8003906:	9a01      	ldr	r2, [sp, #4]
 8003908:	3201      	adds	r2, #1
 800390a:	9201      	str	r2, [sp, #4]
    while (I2C_Trials < Trials);
 800390c:	9a01      	ldr	r2, [sp, #4]
 800390e:	4552      	cmp	r2, sl
 8003910:	d3cb      	bcc.n	80038aa <HAL_I2C_IsDeviceReady+0x52>
    hi2c->State = HAL_I2C_STATE_READY;
 8003912:	2220      	movs	r2, #32
 8003914:	2341      	movs	r3, #65	; 0x41
 8003916:	54e2      	strb	r2, [r4, r3]
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003918:	6c63      	ldr	r3, [r4, #68]	; 0x44
    return HAL_ERROR;
 800391a:	2001      	movs	r0, #1
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800391c:	4313      	orrs	r3, r2
 800391e:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8003920:	2200      	movs	r2, #0
 8003922:	2340      	movs	r3, #64	; 0x40
 8003924:	54e2      	strb	r2, [r4, r3]
    return HAL_ERROR;
 8003926:	e000      	b.n	800392a <HAL_I2C_IsDeviceReady+0xd2>
    return HAL_BUSY;
 8003928:	2002      	movs	r0, #2
}
 800392a:	b003      	add	sp, #12
 800392c:	bcf0      	pop	{r4, r5, r6, r7}
 800392e:	46bb      	mov	fp, r7
 8003930:	46b2      	mov	sl, r6
 8003932:	46a9      	mov	r9, r5
 8003934:	46a0      	mov	r8, r4
 8003936:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003938:	699a      	ldr	r2, [r3, #24]
 800393a:	4217      	tst	r7, r2
 800393c:	d1dc      	bne.n	80038f8 <HAL_I2C_IsDeviceReady+0xa0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800393e:	f7fe fe0d 	bl	800255c <HAL_GetTick>
 8003942:	1b80      	subs	r0, r0, r6
 8003944:	4285      	cmp	r5, r0
 8003946:	d353      	bcc.n	80039f0 <HAL_I2C_IsDeviceReady+0x198>
 8003948:	2d00      	cmp	r5, #0
 800394a:	d051      	beq.n	80039f0 <HAL_I2C_IsDeviceReady+0x198>
 800394c:	6823      	ldr	r3, [r4, #0]
 800394e:	e7cd      	b.n	80038ec <HAL_I2C_IsDeviceReady+0x94>
 8003950:	2d00      	cmp	r5, #0
 8003952:	d015      	beq.n	8003980 <HAL_I2C_IsDeviceReady+0x128>
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003954:	2320      	movs	r3, #32
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003956:	2710      	movs	r7, #16
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003958:	4698      	mov	r8, r3
 800395a:	e007      	b.n	800396c <HAL_I2C_IsDeviceReady+0x114>
 800395c:	4640      	mov	r0, r8
 800395e:	6823      	ldr	r3, [r4, #0]
 8003960:	699a      	ldr	r2, [r3, #24]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003962:	6999      	ldr	r1, [r3, #24]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003964:	4002      	ands	r2, r0
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003966:	4039      	ands	r1, r7
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003968:	430a      	orrs	r2, r1
 800396a:	d1ba      	bne.n	80038e2 <HAL_I2C_IsDeviceReady+0x8a>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800396c:	f7fe fdf6 	bl	800255c <HAL_GetTick>
 8003970:	1b80      	subs	r0, r0, r6
 8003972:	4285      	cmp	r5, r0
 8003974:	d2f2      	bcs.n	800395c <HAL_I2C_IsDeviceReady+0x104>
 8003976:	e7cc      	b.n	8003912 <HAL_I2C_IsDeviceReady+0xba>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003978:	4649      	mov	r1, r9
 800397a:	4a24      	ldr	r2, [pc, #144]	; (8003a0c <HAL_I2C_IsDeviceReady+0x1b4>)
 800397c:	430a      	orrs	r2, r1
 800397e:	e799      	b.n	80038b4 <HAL_I2C_IsDeviceReady+0x5c>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003980:	f7fe fdec 	bl	800255c <HAL_GetTick>
            hi2c->State = HAL_I2C_STATE_READY;
 8003984:	e7c5      	b.n	8003912 <HAL_I2C_IsDeviceReady+0xba>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003986:	2280      	movs	r2, #128	; 0x80
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003988:	2720      	movs	r7, #32
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800398a:	6859      	ldr	r1, [r3, #4]
 800398c:	01d2      	lsls	r2, r2, #7
 800398e:	430a      	orrs	r2, r1
 8003990:	605a      	str	r2, [r3, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003992:	1c6a      	adds	r2, r5, #1
 8003994:	d106      	bne.n	80039a4 <HAL_I2C_IsDeviceReady+0x14c>
 8003996:	2120      	movs	r1, #32
 8003998:	699a      	ldr	r2, [r3, #24]
 800399a:	4211      	tst	r1, r2
 800399c:	d0fc      	beq.n	8003998 <HAL_I2C_IsDeviceReady+0x140>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800399e:	2220      	movs	r2, #32
 80039a0:	61da      	str	r2, [r3, #28]
 80039a2:	e7b0      	b.n	8003906 <HAL_I2C_IsDeviceReady+0xae>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039a4:	699a      	ldr	r2, [r3, #24]
 80039a6:	4217      	tst	r7, r2
 80039a8:	d1f9      	bne.n	800399e <HAL_I2C_IsDeviceReady+0x146>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039aa:	f7fe fdd7 	bl	800255c <HAL_GetTick>
 80039ae:	1b80      	subs	r0, r0, r6
 80039b0:	4285      	cmp	r5, r0
 80039b2:	d31d      	bcc.n	80039f0 <HAL_I2C_IsDeviceReady+0x198>
 80039b4:	2d00      	cmp	r5, #0
 80039b6:	d01b      	beq.n	80039f0 <HAL_I2C_IsDeviceReady+0x198>
 80039b8:	6823      	ldr	r3, [r4, #0]
 80039ba:	e7ea      	b.n	8003992 <HAL_I2C_IsDeviceReady+0x13a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039bc:	699a      	ldr	r2, [r3, #24]
 80039be:	4217      	tst	r7, r2
 80039c0:	d10d      	bne.n	80039de <HAL_I2C_IsDeviceReady+0x186>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039c2:	f7fe fdcb 	bl	800255c <HAL_GetTick>
 80039c6:	1b80      	subs	r0, r0, r6
 80039c8:	4285      	cmp	r5, r0
 80039ca:	d311      	bcc.n	80039f0 <HAL_I2C_IsDeviceReady+0x198>
 80039cc:	2d00      	cmp	r5, #0
 80039ce:	d00f      	beq.n	80039f0 <HAL_I2C_IsDeviceReady+0x198>
 80039d0:	6823      	ldr	r3, [r4, #0]
 80039d2:	1c6a      	adds	r2, r5, #1
 80039d4:	d1f2      	bne.n	80039bc <HAL_I2C_IsDeviceReady+0x164>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039d6:	2120      	movs	r1, #32
 80039d8:	699a      	ldr	r2, [r3, #24]
 80039da:	4211      	tst	r1, r2
 80039dc:	d0fc      	beq.n	80039d8 <HAL_I2C_IsDeviceReady+0x180>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039de:	2220      	movs	r2, #32
 80039e0:	61da      	str	r2, [r3, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 80039e2:	2341      	movs	r3, #65	; 0x41
 80039e4:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hi2c);
 80039e6:	2200      	movs	r2, #0
 80039e8:	3b01      	subs	r3, #1
        return HAL_OK;
 80039ea:	2000      	movs	r0, #0
        __HAL_UNLOCK(hi2c);
 80039ec:	54e2      	strb	r2, [r4, r3]
        return HAL_OK;
 80039ee:	e79c      	b.n	800392a <HAL_I2C_IsDeviceReady+0xd2>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039f0:	2220      	movs	r2, #32
 80039f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 80039f4:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039f6:	4313      	orrs	r3, r2
 80039f8:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80039fa:	2341      	movs	r3, #65	; 0x41
 80039fc:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039fe:	2300      	movs	r3, #0
 8003a00:	3222      	adds	r2, #34	; 0x22
 8003a02:	54a3      	strb	r3, [r4, r2]
        __HAL_UNLOCK(hi2c);
 8003a04:	3a02      	subs	r2, #2
 8003a06:	54a3      	strb	r3, [r4, r2]
        return HAL_ERROR;
 8003a08:	e78f      	b.n	800392a <HAL_I2C_IsDeviceReady+0xd2>
 8003a0a:	46c0      	nop			; (mov r8, r8)
 8003a0c:	02002000 	.word	0x02002000

08003a10 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a10:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a12:	2541      	movs	r5, #65	; 0x41
 8003a14:	5d43      	ldrb	r3, [r0, r5]
{
 8003a16:	000a      	movs	r2, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a18:	b2de      	uxtb	r6, r3
 8003a1a:	2b20      	cmp	r3, #32
 8003a1c:	d11b      	bne.n	8003a56 <HAL_I2CEx_ConfigAnalogFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a1e:	2740      	movs	r7, #64	; 0x40
 8003a20:	5dc3      	ldrb	r3, [r0, r7]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d017      	beq.n	8003a56 <HAL_I2CEx_ConfigAnalogFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a26:	2101      	movs	r1, #1
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a28:	2324      	movs	r3, #36	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 8003a2a:	468c      	mov	ip, r1
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a2c:	5543      	strb	r3, [r0, r5]
    __HAL_I2C_DISABLE(hi2c);
 8003a2e:	6803      	ldr	r3, [r0, #0]
 8003a30:	681c      	ldr	r4, [r3, #0]
 8003a32:	438c      	bics	r4, r1
 8003a34:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a36:	681c      	ldr	r4, [r3, #0]
 8003a38:	4908      	ldr	r1, [pc, #32]	; (8003a5c <HAL_I2CEx_ConfigAnalogFilter+0x4c>)
 8003a3a:	400c      	ands	r4, r1
 8003a3c:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a3e:	6819      	ldr	r1, [r3, #0]
 8003a40:	4311      	orrs	r1, r2
 8003a42:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a44:	4661      	mov	r1, ip
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a4c:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003a4e:	5546      	strb	r6, [r0, r5]
    __HAL_UNLOCK(hi2c);
 8003a50:	55c3      	strb	r3, [r0, r7]

    return HAL_OK;
 8003a52:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8003a56:	2002      	movs	r0, #2
 8003a58:	e7fc      	b.n	8003a54 <HAL_I2CEx_ConfigAnalogFilter+0x44>
 8003a5a:	46c0      	nop			; (mov r8, r8)
 8003a5c:	ffffefff 	.word	0xffffefff

08003a60 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a60:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a62:	2541      	movs	r5, #65	; 0x41
 8003a64:	5d43      	ldrb	r3, [r0, r5]
 8003a66:	b2de      	uxtb	r6, r3
 8003a68:	2b20      	cmp	r3, #32
 8003a6a:	d11a      	bne.n	8003aa2 <HAL_I2CEx_ConfigDigitalFilter+0x42>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a6c:	2740      	movs	r7, #64	; 0x40
 8003a6e:	5dc3      	ldrb	r3, [r0, r7]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d016      	beq.n	8003aa2 <HAL_I2CEx_ConfigDigitalFilter+0x42>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a74:	2324      	movs	r3, #36	; 0x24
 8003a76:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a78:	3b23      	subs	r3, #35	; 0x23
 8003a7a:	469c      	mov	ip, r3
 8003a7c:	6804      	ldr	r4, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003a7e:	0209      	lsls	r1, r1, #8
    __HAL_I2C_DISABLE(hi2c);
 8003a80:	6822      	ldr	r2, [r4, #0]
 8003a82:	439a      	bics	r2, r3
 8003a84:	6022      	str	r2, [r4, #0]
    tmpreg = hi2c->Instance->CR1;
 8003a86:	6822      	ldr	r2, [r4, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8003a88:	4b07      	ldr	r3, [pc, #28]	; (8003aa8 <HAL_I2CEx_ConfigDigitalFilter+0x48>)
 8003a8a:	401a      	ands	r2, r3
    tmpreg |= DigitalFilter << 8U;
 8003a8c:	4311      	orrs	r1, r2

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;

    __HAL_I2C_ENABLE(hi2c);
 8003a8e:	4662      	mov	r2, ip
    hi2c->Instance->CR1 = tmpreg;
 8003a90:	6021      	str	r1, [r4, #0]
    __HAL_I2C_ENABLE(hi2c);
 8003a92:	6823      	ldr	r3, [r4, #0]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	6023      	str	r3, [r4, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a98:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003a9a:	5546      	strb	r6, [r0, r5]
    __HAL_UNLOCK(hi2c);
 8003a9c:	55c3      	strb	r3, [r0, r7]

    return HAL_OK;
 8003a9e:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8003aa2:	2002      	movs	r0, #2
 8003aa4:	e7fc      	b.n	8003aa0 <HAL_I2CEx_ConfigDigitalFilter+0x40>
 8003aa6:	46c0      	nop			; (mov r8, r8)
 8003aa8:	fffff0ff 	.word	0xfffff0ff

08003aac <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003aac:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 8003aae:	4a24      	ldr	r2, [pc, #144]	; (8003b40 <HAL_RCC_GetSysClockFreq+0x94>)
{
 8003ab0:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8003ab2:	68d1      	ldr	r1, [r2, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8003ab4:	400b      	ands	r3, r1
 8003ab6:	2b08      	cmp	r3, #8
 8003ab8:	d00b      	beq.n	8003ad2 <HAL_RCC_GetSysClockFreq+0x26>
 8003aba:	2b0c      	cmp	r3, #12
 8003abc:	d014      	beq.n	8003ae8 <HAL_RCC_GetSysClockFreq+0x3c>
 8003abe:	2b04      	cmp	r3, #4
 8003ac0:	d009      	beq.n	8003ad6 <HAL_RCC_GetSysClockFreq+0x2a>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003ac2:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003ac4:	6853      	ldr	r3, [r2, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003ac6:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003ac8:	041b      	lsls	r3, r3, #16
 8003aca:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003acc:	3301      	adds	r3, #1
 8003ace:	4098      	lsls	r0, r3
      break;
    }
  }
  return sysclockfreq;
}
 8003ad0:	bd10      	pop	{r4, pc}
  switch (tmpreg & RCC_CFGR_SWS)
 8003ad2:	481c      	ldr	r0, [pc, #112]	; (8003b44 <HAL_RCC_GetSysClockFreq+0x98>)
 8003ad4:	e7fc      	b.n	8003ad0 <HAL_RCC_GetSysClockFreq+0x24>
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003ad6:	6810      	ldr	r0, [r2, #0]
        sysclockfreq =  HSI_VALUE;
 8003ad8:	4b1b      	ldr	r3, [pc, #108]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x9c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003ada:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 8003adc:	17c0      	asrs	r0, r0, #31
 8003ade:	4018      	ands	r0, r3
 8003ae0:	4b18      	ldr	r3, [pc, #96]	; (8003b44 <HAL_RCC_GetSysClockFreq+0x98>)
 8003ae2:	469c      	mov	ip, r3
 8003ae4:	4460      	add	r0, ip
 8003ae6:	e7f3      	b.n	8003ad0 <HAL_RCC_GetSysClockFreq+0x24>
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003ae8:	028b      	lsls	r3, r1, #10
 8003aea:	4818      	ldr	r0, [pc, #96]	; (8003b4c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003aec:	0f1b      	lsrs	r3, r3, #28
 8003aee:	5cc4      	ldrb	r4, [r0, r3]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003af0:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003af2:	68d3      	ldr	r3, [r2, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003af4:	0f89      	lsrs	r1, r1, #30
 8003af6:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003af8:	03db      	lsls	r3, r3, #15
 8003afa:	d40c      	bmi.n	8003b16 <HAL_RCC_GetSysClockFreq+0x6a>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003afc:	6813      	ldr	r3, [r2, #0]
 8003afe:	06db      	lsls	r3, r3, #27
 8003b00:	d513      	bpl.n	8003b2a <HAL_RCC_GetSysClockFreq+0x7e>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8003b02:	0163      	lsls	r3, r4, #5
 8003b04:	1b1b      	subs	r3, r3, r4
 8003b06:	0198      	lsls	r0, r3, #6
 8003b08:	1ac0      	subs	r0, r0, r3
 8003b0a:	00c0      	lsls	r0, r0, #3
 8003b0c:	1900      	adds	r0, r0, r4
 8003b0e:	0200      	lsls	r0, r0, #8
 8003b10:	f7fc fb16 	bl	8000140 <__udivsi3>
 8003b14:	e7dc      	b.n	8003ad0 <HAL_RCC_GetSysClockFreq+0x24>
        pllvco = (HSE_VALUE * pllm) / plld;
 8003b16:	0160      	lsls	r0, r4, #5
 8003b18:	1b00      	subs	r0, r0, r4
 8003b1a:	0183      	lsls	r3, r0, #6
 8003b1c:	1a18      	subs	r0, r3, r0
 8003b1e:	00c0      	lsls	r0, r0, #3
 8003b20:	1900      	adds	r0, r0, r4
 8003b22:	0280      	lsls	r0, r0, #10
 8003b24:	f7fc fb0c 	bl	8000140 <__udivsi3>
 8003b28:	e7d2      	b.n	8003ad0 <HAL_RCC_GetSysClockFreq+0x24>
         pllvco = (HSI_VALUE * pllm) / plld;
 8003b2a:	0163      	lsls	r3, r4, #5
 8003b2c:	1b1b      	subs	r3, r3, r4
 8003b2e:	0198      	lsls	r0, r3, #6
 8003b30:	1ac0      	subs	r0, r0, r3
 8003b32:	00c0      	lsls	r0, r0, #3
 8003b34:	1900      	adds	r0, r0, r4
 8003b36:	0280      	lsls	r0, r0, #10
 8003b38:	f7fc fb02 	bl	8000140 <__udivsi3>
 8003b3c:	e7c8      	b.n	8003ad0 <HAL_RCC_GetSysClockFreq+0x24>
 8003b3e:	46c0      	nop			; (mov r8, r8)
 8003b40:	40021000 	.word	0x40021000
 8003b44:	00f42400 	.word	0x00f42400
 8003b48:	ff48e500 	.word	0xff48e500
 8003b4c:	0800aedc 	.word	0x0800aedc

08003b50 <HAL_RCC_OscConfig>:
{
 8003b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b52:	46d6      	mov	lr, sl
 8003b54:	464f      	mov	r7, r9
 8003b56:	4646      	mov	r6, r8
 8003b58:	b5c0      	push	{r6, r7, lr}
 8003b5a:	0004      	movs	r4, r0
 8003b5c:	b082      	sub	sp, #8
  if(RCC_OscInitStruct == NULL)
 8003b5e:	2800      	cmp	r0, #0
 8003b60:	d100      	bne.n	8003b64 <HAL_RCC_OscConfig+0x14>
 8003b62:	e146      	b.n	8003df2 <HAL_RCC_OscConfig+0x2a2>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b64:	4bc8      	ldr	r3, [pc, #800]	; (8003e88 <HAL_RCC_OscConfig+0x338>)
 8003b66:	250c      	movs	r5, #12
 8003b68:	68da      	ldr	r2, [r3, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b6a:	68de      	ldr	r6, [r3, #12]
 8003b6c:	2380      	movs	r3, #128	; 0x80
 8003b6e:	025b      	lsls	r3, r3, #9
 8003b70:	401e      	ands	r6, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b72:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b74:	4015      	ands	r5, r2
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b76:	07da      	lsls	r2, r3, #31
 8003b78:	d533      	bpl.n	8003be2 <HAL_RCC_OscConfig+0x92>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b7a:	2d08      	cmp	r5, #8
 8003b7c:	d100      	bne.n	8003b80 <HAL_RCC_OscConfig+0x30>
 8003b7e:	e12f      	b.n	8003de0 <HAL_RCC_OscConfig+0x290>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b80:	2d0c      	cmp	r5, #12
 8003b82:	d100      	bne.n	8003b86 <HAL_RCC_OscConfig+0x36>
 8003b84:	e129      	b.n	8003dda <HAL_RCC_OscConfig+0x28a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b86:	2080      	movs	r0, #128	; 0x80
 8003b88:	6861      	ldr	r1, [r4, #4]
 8003b8a:	0240      	lsls	r0, r0, #9
 8003b8c:	4281      	cmp	r1, r0
 8003b8e:	d100      	bne.n	8003b92 <HAL_RCC_OscConfig+0x42>
 8003b90:	e160      	b.n	8003e54 <HAL_RCC_OscConfig+0x304>
 8003b92:	22a0      	movs	r2, #160	; 0xa0
 8003b94:	02d2      	lsls	r2, r2, #11
 8003b96:	4291      	cmp	r1, r2
 8003b98:	d100      	bne.n	8003b9c <HAL_RCC_OscConfig+0x4c>
 8003b9a:	e242      	b.n	8004022 <HAL_RCC_OscConfig+0x4d2>
 8003b9c:	4fba      	ldr	r7, [pc, #744]	; (8003e88 <HAL_RCC_OscConfig+0x338>)
 8003b9e:	4bbb      	ldr	r3, [pc, #748]	; (8003e8c <HAL_RCC_OscConfig+0x33c>)
 8003ba0:	683a      	ldr	r2, [r7, #0]
 8003ba2:	401a      	ands	r2, r3
 8003ba4:	603a      	str	r2, [r7, #0]
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	4ab9      	ldr	r2, [pc, #740]	; (8003e90 <HAL_RCC_OscConfig+0x340>)
 8003baa:	4003      	ands	r3, r0
 8003bac:	9301      	str	r3, [sp, #4]
 8003bae:	9b01      	ldr	r3, [sp, #4]
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	603b      	str	r3, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bb6:	2900      	cmp	r1, #0
 8003bb8:	d000      	beq.n	8003bbc <HAL_RCC_OscConfig+0x6c>
 8003bba:	e14f      	b.n	8003e5c <HAL_RCC_OscConfig+0x30c>
        tickstart = HAL_GetTick();
 8003bbc:	f7fe fcce 	bl	800255c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003bc0:	2380      	movs	r3, #128	; 0x80
 8003bc2:	029b      	lsls	r3, r3, #10
        tickstart = HAL_GetTick();
 8003bc4:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003bc6:	4699      	mov	r9, r3
 8003bc8:	e006      	b.n	8003bd8 <HAL_RCC_OscConfig+0x88>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bca:	f7fe fcc7 	bl	800255c <HAL_GetTick>
 8003bce:	4643      	mov	r3, r8
 8003bd0:	1ac0      	subs	r0, r0, r3
 8003bd2:	2864      	cmp	r0, #100	; 0x64
 8003bd4:	d900      	bls.n	8003bd8 <HAL_RCC_OscConfig+0x88>
 8003bd6:	e1c9      	b.n	8003f6c <HAL_RCC_OscConfig+0x41c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003bd8:	464a      	mov	r2, r9
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	4213      	tst	r3, r2
 8003bde:	d1f4      	bne.n	8003bca <HAL_RCC_OscConfig+0x7a>
 8003be0:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003be2:	079a      	lsls	r2, r3, #30
 8003be4:	d527      	bpl.n	8003c36 <HAL_RCC_OscConfig+0xe6>
    hsi_state = RCC_OscInitStruct->HSIState;
 8003be6:	68e3      	ldr	r3, [r4, #12]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003be8:	2d04      	cmp	r5, #4
 8003bea:	d100      	bne.n	8003bee <HAL_RCC_OscConfig+0x9e>
 8003bec:	e169      	b.n	8003ec2 <HAL_RCC_OscConfig+0x372>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003bee:	2d0c      	cmp	r5, #12
 8003bf0:	d100      	bne.n	8003bf4 <HAL_RCC_OscConfig+0xa4>
 8003bf2:	e163      	b.n	8003ebc <HAL_RCC_OscConfig+0x36c>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003bf4:	4ea4      	ldr	r6, [pc, #656]	; (8003e88 <HAL_RCC_OscConfig+0x338>)
      if(hsi_state != RCC_HSI_OFF)
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d100      	bne.n	8003bfc <HAL_RCC_OscConfig+0xac>
 8003bfa:	e1ce      	b.n	8003f9a <HAL_RCC_OscConfig+0x44a>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003bfc:	2109      	movs	r1, #9
 8003bfe:	6832      	ldr	r2, [r6, #0]
 8003c00:	438a      	bics	r2, r1
 8003c02:	4313      	orrs	r3, r2
 8003c04:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8003c06:	f7fe fca9 	bl	800255c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c0a:	2304      	movs	r3, #4
        tickstart = HAL_GetTick();
 8003c0c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c0e:	4698      	mov	r8, r3
 8003c10:	e005      	b.n	8003c1e <HAL_RCC_OscConfig+0xce>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c12:	f7fe fca3 	bl	800255c <HAL_GetTick>
 8003c16:	1bc0      	subs	r0, r0, r7
 8003c18:	2802      	cmp	r0, #2
 8003c1a:	d900      	bls.n	8003c1e <HAL_RCC_OscConfig+0xce>
 8003c1c:	e1a6      	b.n	8003f6c <HAL_RCC_OscConfig+0x41c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c1e:	4642      	mov	r2, r8
 8003c20:	6833      	ldr	r3, [r6, #0]
 8003c22:	421a      	tst	r2, r3
 8003c24:	d0f5      	beq.n	8003c12 <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c26:	6872      	ldr	r2, [r6, #4]
 8003c28:	6923      	ldr	r3, [r4, #16]
 8003c2a:	499a      	ldr	r1, [pc, #616]	; (8003e94 <HAL_RCC_OscConfig+0x344>)
 8003c2c:	021b      	lsls	r3, r3, #8
 8003c2e:	400a      	ands	r2, r1
 8003c30:	4313      	orrs	r3, r2
 8003c32:	6073      	str	r3, [r6, #4]
 8003c34:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c36:	06da      	lsls	r2, r3, #27
 8003c38:	d52b      	bpl.n	8003c92 <HAL_RCC_OscConfig+0x142>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8003c3a:	2d00      	cmp	r5, #0
 8003c3c:	d100      	bne.n	8003c40 <HAL_RCC_OscConfig+0xf0>
 8003c3e:	e0df      	b.n	8003e00 <HAL_RCC_OscConfig+0x2b0>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003c40:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_MSI_ENABLE();
 8003c42:	4e91      	ldr	r6, [pc, #580]	; (8003e88 <HAL_RCC_OscConfig+0x338>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d100      	bne.n	8003c4a <HAL_RCC_OscConfig+0xfa>
 8003c48:	e1bc      	b.n	8003fc4 <HAL_RCC_OscConfig+0x474>
        __HAL_RCC_MSI_ENABLE();
 8003c4a:	2380      	movs	r3, #128	; 0x80
 8003c4c:	6832      	ldr	r2, [r6, #0]
 8003c4e:	005b      	lsls	r3, r3, #1
 8003c50:	4313      	orrs	r3, r2
 8003c52:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8003c54:	f7fe fc82 	bl	800255c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003c58:	2380      	movs	r3, #128	; 0x80
 8003c5a:	009b      	lsls	r3, r3, #2
        tickstart = HAL_GetTick();
 8003c5c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003c5e:	4698      	mov	r8, r3
 8003c60:	e005      	b.n	8003c6e <HAL_RCC_OscConfig+0x11e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c62:	f7fe fc7b 	bl	800255c <HAL_GetTick>
 8003c66:	1bc0      	subs	r0, r0, r7
 8003c68:	2802      	cmp	r0, #2
 8003c6a:	d900      	bls.n	8003c6e <HAL_RCC_OscConfig+0x11e>
 8003c6c:	e17e      	b.n	8003f6c <HAL_RCC_OscConfig+0x41c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003c6e:	4642      	mov	r2, r8
 8003c70:	6833      	ldr	r3, [r6, #0]
 8003c72:	4213      	tst	r3, r2
 8003c74:	d0f5      	beq.n	8003c62 <HAL_RCC_OscConfig+0x112>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c76:	6873      	ldr	r3, [r6, #4]
 8003c78:	4a87      	ldr	r2, [pc, #540]	; (8003e98 <HAL_RCC_OscConfig+0x348>)
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	6073      	str	r3, [r6, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c82:	6872      	ldr	r2, [r6, #4]
 8003c84:	6a23      	ldr	r3, [r4, #32]
 8003c86:	0212      	lsls	r2, r2, #8
 8003c88:	061b      	lsls	r3, r3, #24
 8003c8a:	0a12      	lsrs	r2, r2, #8
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	6073      	str	r3, [r6, #4]
 8003c90:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c92:	071a      	lsls	r2, r3, #28
 8003c94:	d519      	bpl.n	8003cca <HAL_RCC_OscConfig+0x17a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c96:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8003c98:	4e7b      	ldr	r6, [pc, #492]	; (8003e88 <HAL_RCC_OscConfig+0x338>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d100      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x150>
 8003c9e:	e167      	b.n	8003f70 <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_LSI_ENABLE();
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	6533      	str	r3, [r6, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003ca8:	f7fe fc58 	bl	800255c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003cac:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 8003cae:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003cb0:	4698      	mov	r8, r3
 8003cb2:	e005      	b.n	8003cc0 <HAL_RCC_OscConfig+0x170>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cb4:	f7fe fc52 	bl	800255c <HAL_GetTick>
 8003cb8:	1bc0      	subs	r0, r0, r7
 8003cba:	2802      	cmp	r0, #2
 8003cbc:	d900      	bls.n	8003cc0 <HAL_RCC_OscConfig+0x170>
 8003cbe:	e155      	b.n	8003f6c <HAL_RCC_OscConfig+0x41c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003cc0:	4642      	mov	r2, r8
 8003cc2:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8003cc4:	421a      	tst	r2, r3
 8003cc6:	d0f5      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x164>
 8003cc8:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cca:	075a      	lsls	r2, r3, #29
 8003ccc:	d543      	bpl.n	8003d56 <HAL_RCC_OscConfig+0x206>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cce:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8003cd0:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cd2:	4a6d      	ldr	r2, [pc, #436]	; (8003e88 <HAL_RCC_OscConfig+0x338>)
 8003cd4:	055b      	lsls	r3, r3, #21
 8003cd6:	6b91      	ldr	r1, [r2, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 8003cd8:	4682      	mov	sl, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cda:	4219      	tst	r1, r3
 8003cdc:	d104      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cde:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8003ce0:	430b      	orrs	r3, r1
 8003ce2:	6393      	str	r3, [r2, #56]	; 0x38
      pwrclkchanged = SET;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	469a      	mov	sl, r3
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ce8:	2780      	movs	r7, #128	; 0x80
 8003cea:	4e6c      	ldr	r6, [pc, #432]	; (8003e9c <HAL_RCC_OscConfig+0x34c>)
 8003cec:	007f      	lsls	r7, r7, #1
 8003cee:	6833      	ldr	r3, [r6, #0]
 8003cf0:	423b      	tst	r3, r7
 8003cf2:	d100      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x1a6>
 8003cf4:	e12a      	b.n	8003f4c <HAL_RCC_OscConfig+0x3fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cf6:	2280      	movs	r2, #128	; 0x80
 8003cf8:	68a3      	ldr	r3, [r4, #8]
 8003cfa:	0052      	lsls	r2, r2, #1
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d100      	bne.n	8003d02 <HAL_RCC_OscConfig+0x1b2>
 8003d00:	e1d4      	b.n	80040ac <HAL_RCC_OscConfig+0x55c>
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d100      	bne.n	8003d08 <HAL_RCC_OscConfig+0x1b8>
 8003d06:	e105      	b.n	8003f14 <HAL_RCC_OscConfig+0x3c4>
 8003d08:	21a0      	movs	r1, #160	; 0xa0
 8003d0a:	00c9      	lsls	r1, r1, #3
 8003d0c:	428b      	cmp	r3, r1
 8003d0e:	d100      	bne.n	8003d12 <HAL_RCC_OscConfig+0x1c2>
 8003d10:	e1ee      	b.n	80040f0 <HAL_RCC_OscConfig+0x5a0>
 8003d12:	4b5d      	ldr	r3, [pc, #372]	; (8003e88 <HAL_RCC_OscConfig+0x338>)
 8003d14:	4962      	ldr	r1, [pc, #392]	; (8003ea0 <HAL_RCC_OscConfig+0x350>)
 8003d16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d18:	400a      	ands	r2, r1
 8003d1a:	651a      	str	r2, [r3, #80]	; 0x50
 8003d1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d1e:	4961      	ldr	r1, [pc, #388]	; (8003ea4 <HAL_RCC_OscConfig+0x354>)
 8003d20:	400a      	ands	r2, r1
 8003d22:	651a      	str	r2, [r3, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003d24:	f7fe fc1a 	bl	800255c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d28:	2780      	movs	r7, #128	; 0x80
 8003d2a:	4b57      	ldr	r3, [pc, #348]	; (8003e88 <HAL_RCC_OscConfig+0x338>)
      tickstart = HAL_GetTick();
 8003d2c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d2e:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d30:	4b5d      	ldr	r3, [pc, #372]	; (8003ea8 <HAL_RCC_OscConfig+0x358>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d32:	00bf      	lsls	r7, r7, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d34:	4699      	mov	r9, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d36:	e005      	b.n	8003d44 <HAL_RCC_OscConfig+0x1f4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d38:	f7fe fc10 	bl	800255c <HAL_GetTick>
 8003d3c:	1b80      	subs	r0, r0, r6
 8003d3e:	4548      	cmp	r0, r9
 8003d40:	d900      	bls.n	8003d44 <HAL_RCC_OscConfig+0x1f4>
 8003d42:	e113      	b.n	8003f6c <HAL_RCC_OscConfig+0x41c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d44:	4643      	mov	r3, r8
 8003d46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d48:	423b      	tst	r3, r7
 8003d4a:	d0f5      	beq.n	8003d38 <HAL_RCC_OscConfig+0x1e8>
    if(pwrclkchanged == SET)
 8003d4c:	4653      	mov	r3, sl
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d100      	bne.n	8003d54 <HAL_RCC_OscConfig+0x204>
 8003d52:	e170      	b.n	8004036 <HAL_RCC_OscConfig+0x4e6>
 8003d54:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d56:	069b      	lsls	r3, r3, #26
 8003d58:	d520      	bpl.n	8003d9c <HAL_RCC_OscConfig+0x24c>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d5a:	69a3      	ldr	r3, [r4, #24]
        __HAL_RCC_HSI48_ENABLE();
 8003d5c:	4e4a      	ldr	r6, [pc, #296]	; (8003e88 <HAL_RCC_OscConfig+0x338>)
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d100      	bne.n	8003d64 <HAL_RCC_OscConfig+0x214>
 8003d62:	e145      	b.n	8003ff0 <HAL_RCC_OscConfig+0x4a0>
        __HAL_RCC_HSI48_ENABLE();
 8003d64:	2101      	movs	r1, #1
 8003d66:	68b2      	ldr	r2, [r6, #8]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d68:	2702      	movs	r7, #2
        __HAL_RCC_HSI48_ENABLE();
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	60b2      	str	r2, [r6, #8]
 8003d6e:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8003d70:	4a4e      	ldr	r2, [pc, #312]	; (8003eac <HAL_RCC_OscConfig+0x35c>)
 8003d72:	430b      	orrs	r3, r1
 8003d74:	6373      	str	r3, [r6, #52]	; 0x34
 8003d76:	2380      	movs	r3, #128	; 0x80
 8003d78:	6a11      	ldr	r1, [r2, #32]
 8003d7a:	019b      	lsls	r3, r3, #6
 8003d7c:	430b      	orrs	r3, r1
 8003d7e:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8003d80:	f7fe fbec 	bl	800255c <HAL_GetTick>
 8003d84:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d86:	e006      	b.n	8003d96 <HAL_RCC_OscConfig+0x246>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d88:	f7fe fbe8 	bl	800255c <HAL_GetTick>
 8003d8c:	4643      	mov	r3, r8
 8003d8e:	1ac0      	subs	r0, r0, r3
 8003d90:	2802      	cmp	r0, #2
 8003d92:	d900      	bls.n	8003d96 <HAL_RCC_OscConfig+0x246>
 8003d94:	e0ea      	b.n	8003f6c <HAL_RCC_OscConfig+0x41c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d96:	68b3      	ldr	r3, [r6, #8]
 8003d98:	421f      	tst	r7, r3
 8003d9a:	d0f5      	beq.n	8003d88 <HAL_RCC_OscConfig+0x238>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d9c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d019      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x286>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003da2:	2d0c      	cmp	r5, #12
 8003da4:	d100      	bne.n	8003da8 <HAL_RCC_OscConfig+0x258>
 8003da6:	e186      	b.n	80040b6 <HAL_RCC_OscConfig+0x566>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d100      	bne.n	8003dae <HAL_RCC_OscConfig+0x25e>
 8003dac:	e14a      	b.n	8004044 <HAL_RCC_OscConfig+0x4f4>
        __HAL_RCC_PLL_DISABLE();
 8003dae:	4c36      	ldr	r4, [pc, #216]	; (8003e88 <HAL_RCC_OscConfig+0x338>)
 8003db0:	4a3f      	ldr	r2, [pc, #252]	; (8003eb0 <HAL_RCC_OscConfig+0x360>)
 8003db2:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003db4:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8003db6:	4013      	ands	r3, r2
 8003db8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003dba:	f7fe fbcf 	bl	800255c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003dbe:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 8003dc0:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003dc2:	e005      	b.n	8003dd0 <HAL_RCC_OscConfig+0x280>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dc4:	f7fe fbca 	bl	800255c <HAL_GetTick>
 8003dc8:	1b40      	subs	r0, r0, r5
 8003dca:	2802      	cmp	r0, #2
 8003dcc:	d900      	bls.n	8003dd0 <HAL_RCC_OscConfig+0x280>
 8003dce:	e0cd      	b.n	8003f6c <HAL_RCC_OscConfig+0x41c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003dd0:	6823      	ldr	r3, [r4, #0]
 8003dd2:	4233      	tst	r3, r6
 8003dd4:	d1f6      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x274>
  return HAL_OK;
 8003dd6:	2000      	movs	r0, #0
 8003dd8:	e00c      	b.n	8003df4 <HAL_RCC_OscConfig+0x2a4>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003dda:	2e00      	cmp	r6, #0
 8003ddc:	d100      	bne.n	8003de0 <HAL_RCC_OscConfig+0x290>
 8003dde:	e6d2      	b.n	8003b86 <HAL_RCC_OscConfig+0x36>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003de0:	4a29      	ldr	r2, [pc, #164]	; (8003e88 <HAL_RCC_OscConfig+0x338>)
 8003de2:	6812      	ldr	r2, [r2, #0]
 8003de4:	0392      	lsls	r2, r2, #14
 8003de6:	d400      	bmi.n	8003dea <HAL_RCC_OscConfig+0x29a>
 8003de8:	e6fb      	b.n	8003be2 <HAL_RCC_OscConfig+0x92>
 8003dea:	6862      	ldr	r2, [r4, #4]
 8003dec:	2a00      	cmp	r2, #0
 8003dee:	d000      	beq.n	8003df2 <HAL_RCC_OscConfig+0x2a2>
 8003df0:	e6f7      	b.n	8003be2 <HAL_RCC_OscConfig+0x92>
        return HAL_ERROR;
 8003df2:	2001      	movs	r0, #1
}
 8003df4:	b002      	add	sp, #8
 8003df6:	bce0      	pop	{r5, r6, r7}
 8003df8:	46ba      	mov	sl, r7
 8003dfa:	46b1      	mov	r9, r6
 8003dfc:	46a8      	mov	r8, r5
 8003dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e00:	4b21      	ldr	r3, [pc, #132]	; (8003e88 <HAL_RCC_OscConfig+0x338>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	059b      	lsls	r3, r3, #22
 8003e06:	d502      	bpl.n	8003e0e <HAL_RCC_OscConfig+0x2be>
 8003e08:	69e3      	ldr	r3, [r4, #28]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d0f1      	beq.n	8003df2 <HAL_RCC_OscConfig+0x2a2>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e0e:	4a1e      	ldr	r2, [pc, #120]	; (8003e88 <HAL_RCC_OscConfig+0x338>)
 8003e10:	4821      	ldr	r0, [pc, #132]	; (8003e98 <HAL_RCC_OscConfig+0x348>)
 8003e12:	6851      	ldr	r1, [r2, #4]
 8003e14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003e16:	4001      	ands	r1, r0
 8003e18:	4319      	orrs	r1, r3
 8003e1a:	6051      	str	r1, [r2, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e1c:	6850      	ldr	r0, [r2, #4]
 8003e1e:	6a21      	ldr	r1, [r4, #32]
 8003e20:	0200      	lsls	r0, r0, #8
 8003e22:	0a00      	lsrs	r0, r0, #8
 8003e24:	0609      	lsls	r1, r1, #24
 8003e26:	4301      	orrs	r1, r0
 8003e28:	6051      	str	r1, [r2, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003e2a:	68d1      	ldr	r1, [r2, #12]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003e2c:	2280      	movs	r2, #128	; 0x80
 8003e2e:	0b5b      	lsrs	r3, r3, #13
 8003e30:	3301      	adds	r3, #1
 8003e32:	0212      	lsls	r2, r2, #8
 8003e34:	409a      	lsls	r2, r3
 8003e36:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003e38:	060a      	lsls	r2, r1, #24
 8003e3a:	491e      	ldr	r1, [pc, #120]	; (8003eb4 <HAL_RCC_OscConfig+0x364>)
 8003e3c:	0f12      	lsrs	r2, r2, #28
 8003e3e:	5c8a      	ldrb	r2, [r1, r2]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8003e40:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003e42:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003e44:	4a1c      	ldr	r2, [pc, #112]	; (8003eb8 <HAL_RCC_OscConfig+0x368>)
 8003e46:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8003e48:	f7fe fb54 	bl	80024f4 <HAL_InitTick>
        if(status != HAL_OK)
 8003e4c:	2800      	cmp	r0, #0
 8003e4e:	d1d1      	bne.n	8003df4 <HAL_RCC_OscConfig+0x2a4>
 8003e50:	6823      	ldr	r3, [r4, #0]
 8003e52:	e71e      	b.n	8003c92 <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e54:	4a0c      	ldr	r2, [pc, #48]	; (8003e88 <HAL_RCC_OscConfig+0x338>)
 8003e56:	6813      	ldr	r3, [r2, #0]
 8003e58:	430b      	orrs	r3, r1
 8003e5a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003e5c:	f7fe fb7e 	bl	800255c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e60:	4b09      	ldr	r3, [pc, #36]	; (8003e88 <HAL_RCC_OscConfig+0x338>)
        tickstart = HAL_GetTick();
 8003e62:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e64:	4699      	mov	r9, r3
 8003e66:	2380      	movs	r3, #128	; 0x80
 8003e68:	029b      	lsls	r3, r3, #10
 8003e6a:	4698      	mov	r8, r3
 8003e6c:	e004      	b.n	8003e78 <HAL_RCC_OscConfig+0x328>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e6e:	f7fe fb75 	bl	800255c <HAL_GetTick>
 8003e72:	1bc0      	subs	r0, r0, r7
 8003e74:	2864      	cmp	r0, #100	; 0x64
 8003e76:	d879      	bhi.n	8003f6c <HAL_RCC_OscConfig+0x41c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e78:	464b      	mov	r3, r9
 8003e7a:	4642      	mov	r2, r8
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4213      	tst	r3, r2
 8003e80:	d0f5      	beq.n	8003e6e <HAL_RCC_OscConfig+0x31e>
 8003e82:	6823      	ldr	r3, [r4, #0]
 8003e84:	e6ad      	b.n	8003be2 <HAL_RCC_OscConfig+0x92>
 8003e86:	46c0      	nop			; (mov r8, r8)
 8003e88:	40021000 	.word	0x40021000
 8003e8c:	fffeffff 	.word	0xfffeffff
 8003e90:	fffbffff 	.word	0xfffbffff
 8003e94:	ffffe0ff 	.word	0xffffe0ff
 8003e98:	ffff1fff 	.word	0xffff1fff
 8003e9c:	40007000 	.word	0x40007000
 8003ea0:	fffffeff 	.word	0xfffffeff
 8003ea4:	fffffbff 	.word	0xfffffbff
 8003ea8:	00001388 	.word	0x00001388
 8003eac:	40010000 	.word	0x40010000
 8003eb0:	feffffff 	.word	0xfeffffff
 8003eb4:	0800aec4 	.word	0x0800aec4
 8003eb8:	20000010 	.word	0x20000010
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003ebc:	2e00      	cmp	r6, #0
 8003ebe:	d000      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x372>
 8003ec0:	e698      	b.n	8003bf4 <HAL_RCC_OscConfig+0xa4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003ec2:	4a90      	ldr	r2, [pc, #576]	; (8004104 <HAL_RCC_OscConfig+0x5b4>)
 8003ec4:	6812      	ldr	r2, [r2, #0]
 8003ec6:	0752      	lsls	r2, r2, #29
 8003ec8:	d502      	bpl.n	8003ed0 <HAL_RCC_OscConfig+0x380>
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d100      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x380>
 8003ece:	e790      	b.n	8003df2 <HAL_RCC_OscConfig+0x2a2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ed0:	4e8c      	ldr	r6, [pc, #560]	; (8004104 <HAL_RCC_OscConfig+0x5b4>)
 8003ed2:	6922      	ldr	r2, [r4, #16]
 8003ed4:	6871      	ldr	r1, [r6, #4]
 8003ed6:	488c      	ldr	r0, [pc, #560]	; (8004108 <HAL_RCC_OscConfig+0x5b8>)
 8003ed8:	0212      	lsls	r2, r2, #8
 8003eda:	4001      	ands	r1, r0
 8003edc:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003ede:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ee0:	6072      	str	r2, [r6, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003ee2:	6832      	ldr	r2, [r6, #0]
 8003ee4:	438a      	bics	r2, r1
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	6033      	str	r3, [r6, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003eea:	f7ff fddf 	bl	8003aac <HAL_RCC_GetSysClockFreq>
 8003eee:	68f3      	ldr	r3, [r6, #12]
 8003ef0:	4a86      	ldr	r2, [pc, #536]	; (800410c <HAL_RCC_OscConfig+0x5bc>)
 8003ef2:	061b      	lsls	r3, r3, #24
 8003ef4:	0f1b      	lsrs	r3, r3, #28
 8003ef6:	5cd3      	ldrb	r3, [r2, r3]
 8003ef8:	40d8      	lsrs	r0, r3
 8003efa:	4b85      	ldr	r3, [pc, #532]	; (8004110 <HAL_RCC_OscConfig+0x5c0>)
 8003efc:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8003efe:	2000      	movs	r0, #0
 8003f00:	f7fe faf8 	bl	80024f4 <HAL_InitTick>
      if(status != HAL_OK)
 8003f04:	2800      	cmp	r0, #0
 8003f06:	d000      	beq.n	8003f0a <HAL_RCC_OscConfig+0x3ba>
 8003f08:	e774      	b.n	8003df4 <HAL_RCC_OscConfig+0x2a4>
 8003f0a:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003f0c:	06da      	lsls	r2, r3, #27
 8003f0e:	d400      	bmi.n	8003f12 <HAL_RCC_OscConfig+0x3c2>
 8003f10:	e6bf      	b.n	8003c92 <HAL_RCC_OscConfig+0x142>
 8003f12:	e692      	b.n	8003c3a <HAL_RCC_OscConfig+0xea>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f14:	4e7b      	ldr	r6, [pc, #492]	; (8004104 <HAL_RCC_OscConfig+0x5b4>)
 8003f16:	4a7f      	ldr	r2, [pc, #508]	; (8004114 <HAL_RCC_OscConfig+0x5c4>)
 8003f18:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	6533      	str	r3, [r6, #80]	; 0x50
 8003f1e:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8003f20:	4a7d      	ldr	r2, [pc, #500]	; (8004118 <HAL_RCC_OscConfig+0x5c8>)
 8003f22:	4013      	ands	r3, r2
 8003f24:	6533      	str	r3, [r6, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003f26:	f7fe fb19 	bl	800255c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f2a:	2380      	movs	r3, #128	; 0x80
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f30:	4b7a      	ldr	r3, [pc, #488]	; (800411c <HAL_RCC_OscConfig+0x5cc>)
      tickstart = HAL_GetTick();
 8003f32:	0007      	movs	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f34:	4699      	mov	r9, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f36:	e004      	b.n	8003f42 <HAL_RCC_OscConfig+0x3f2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f38:	f7fe fb10 	bl	800255c <HAL_GetTick>
 8003f3c:	1bc0      	subs	r0, r0, r7
 8003f3e:	4548      	cmp	r0, r9
 8003f40:	d814      	bhi.n	8003f6c <HAL_RCC_OscConfig+0x41c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f42:	4642      	mov	r2, r8
 8003f44:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8003f46:	4213      	tst	r3, r2
 8003f48:	d1f6      	bne.n	8003f38 <HAL_RCC_OscConfig+0x3e8>
 8003f4a:	e6ff      	b.n	8003d4c <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f4c:	6833      	ldr	r3, [r6, #0]
 8003f4e:	433b      	orrs	r3, r7
 8003f50:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003f52:	f7fe fb03 	bl	800255c <HAL_GetTick>
 8003f56:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f58:	6833      	ldr	r3, [r6, #0]
 8003f5a:	423b      	tst	r3, r7
 8003f5c:	d000      	beq.n	8003f60 <HAL_RCC_OscConfig+0x410>
 8003f5e:	e6ca      	b.n	8003cf6 <HAL_RCC_OscConfig+0x1a6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f60:	f7fe fafc 	bl	800255c <HAL_GetTick>
 8003f64:	4643      	mov	r3, r8
 8003f66:	1ac0      	subs	r0, r0, r3
 8003f68:	2864      	cmp	r0, #100	; 0x64
 8003f6a:	d9f5      	bls.n	8003f58 <HAL_RCC_OscConfig+0x408>
            return HAL_TIMEOUT;
 8003f6c:	2003      	movs	r0, #3
 8003f6e:	e741      	b.n	8003df4 <HAL_RCC_OscConfig+0x2a4>
      __HAL_RCC_LSI_DISABLE();
 8003f70:	2201      	movs	r2, #1
 8003f72:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8003f74:	4393      	bics	r3, r2
 8003f76:	6533      	str	r3, [r6, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003f78:	f7fe faf0 	bl	800255c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003f7c:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 8003f7e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003f80:	4698      	mov	r8, r3
 8003f82:	e004      	b.n	8003f8e <HAL_RCC_OscConfig+0x43e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f84:	f7fe faea 	bl	800255c <HAL_GetTick>
 8003f88:	1bc0      	subs	r0, r0, r7
 8003f8a:	2802      	cmp	r0, #2
 8003f8c:	d8ee      	bhi.n	8003f6c <HAL_RCC_OscConfig+0x41c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003f8e:	4642      	mov	r2, r8
 8003f90:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8003f92:	421a      	tst	r2, r3
 8003f94:	d1f6      	bne.n	8003f84 <HAL_RCC_OscConfig+0x434>
 8003f96:	6823      	ldr	r3, [r4, #0]
 8003f98:	e697      	b.n	8003cca <HAL_RCC_OscConfig+0x17a>
        __HAL_RCC_HSI_DISABLE();
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	6833      	ldr	r3, [r6, #0]
 8003f9e:	4393      	bics	r3, r2
 8003fa0:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8003fa2:	f7fe fadb 	bl	800255c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003fa6:	2304      	movs	r3, #4
        tickstart = HAL_GetTick();
 8003fa8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003faa:	4698      	mov	r8, r3
 8003fac:	e004      	b.n	8003fb8 <HAL_RCC_OscConfig+0x468>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fae:	f7fe fad5 	bl	800255c <HAL_GetTick>
 8003fb2:	1bc0      	subs	r0, r0, r7
 8003fb4:	2802      	cmp	r0, #2
 8003fb6:	d8d9      	bhi.n	8003f6c <HAL_RCC_OscConfig+0x41c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003fb8:	4642      	mov	r2, r8
 8003fba:	6833      	ldr	r3, [r6, #0]
 8003fbc:	421a      	tst	r2, r3
 8003fbe:	d1f6      	bne.n	8003fae <HAL_RCC_OscConfig+0x45e>
 8003fc0:	6823      	ldr	r3, [r4, #0]
 8003fc2:	e7a3      	b.n	8003f0c <HAL_RCC_OscConfig+0x3bc>
        __HAL_RCC_MSI_DISABLE();
 8003fc4:	6833      	ldr	r3, [r6, #0]
 8003fc6:	4a53      	ldr	r2, [pc, #332]	; (8004114 <HAL_RCC_OscConfig+0x5c4>)
 8003fc8:	4013      	ands	r3, r2
 8003fca:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8003fcc:	f7fe fac6 	bl	800255c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003fd0:	2380      	movs	r3, #128	; 0x80
 8003fd2:	009b      	lsls	r3, r3, #2
        tickstart = HAL_GetTick();
 8003fd4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003fd6:	4698      	mov	r8, r3
 8003fd8:	e004      	b.n	8003fe4 <HAL_RCC_OscConfig+0x494>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003fda:	f7fe fabf 	bl	800255c <HAL_GetTick>
 8003fde:	1bc0      	subs	r0, r0, r7
 8003fe0:	2802      	cmp	r0, #2
 8003fe2:	d8c3      	bhi.n	8003f6c <HAL_RCC_OscConfig+0x41c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003fe4:	4642      	mov	r2, r8
 8003fe6:	6833      	ldr	r3, [r6, #0]
 8003fe8:	4213      	tst	r3, r2
 8003fea:	d1f6      	bne.n	8003fda <HAL_RCC_OscConfig+0x48a>
 8003fec:	6823      	ldr	r3, [r4, #0]
 8003fee:	e650      	b.n	8003c92 <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_HSI48_DISABLE();
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	68b3      	ldr	r3, [r6, #8]
 8003ff4:	494a      	ldr	r1, [pc, #296]	; (8004120 <HAL_RCC_OscConfig+0x5d0>)
 8003ff6:	4393      	bics	r3, r2
 8003ff8:	4a4a      	ldr	r2, [pc, #296]	; (8004124 <HAL_RCC_OscConfig+0x5d4>)
 8003ffa:	60b3      	str	r3, [r6, #8]
 8003ffc:	6a13      	ldr	r3, [r2, #32]
 8003ffe:	400b      	ands	r3, r1
 8004000:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8004002:	f7fe faab 	bl	800255c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004006:	2302      	movs	r3, #2
        tickstart = HAL_GetTick();
 8004008:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800400a:	4698      	mov	r8, r3
 800400c:	e004      	b.n	8004018 <HAL_RCC_OscConfig+0x4c8>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800400e:	f7fe faa5 	bl	800255c <HAL_GetTick>
 8004012:	1bc0      	subs	r0, r0, r7
 8004014:	2802      	cmp	r0, #2
 8004016:	d8a9      	bhi.n	8003f6c <HAL_RCC_OscConfig+0x41c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004018:	4642      	mov	r2, r8
 800401a:	68b3      	ldr	r3, [r6, #8]
 800401c:	421a      	tst	r2, r3
 800401e:	d1f6      	bne.n	800400e <HAL_RCC_OscConfig+0x4be>
 8004020:	e6bc      	b.n	8003d9c <HAL_RCC_OscConfig+0x24c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004022:	2380      	movs	r3, #128	; 0x80
 8004024:	4a37      	ldr	r2, [pc, #220]	; (8004104 <HAL_RCC_OscConfig+0x5b4>)
 8004026:	02db      	lsls	r3, r3, #11
 8004028:	6811      	ldr	r1, [r2, #0]
 800402a:	430b      	orrs	r3, r1
 800402c:	6013      	str	r3, [r2, #0]
 800402e:	6813      	ldr	r3, [r2, #0]
 8004030:	4303      	orrs	r3, r0
 8004032:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004034:	e712      	b.n	8003e5c <HAL_RCC_OscConfig+0x30c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004036:	4a33      	ldr	r2, [pc, #204]	; (8004104 <HAL_RCC_OscConfig+0x5b4>)
 8004038:	493b      	ldr	r1, [pc, #236]	; (8004128 <HAL_RCC_OscConfig+0x5d8>)
 800403a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800403c:	400b      	ands	r3, r1
 800403e:	6393      	str	r3, [r2, #56]	; 0x38
 8004040:	6823      	ldr	r3, [r4, #0]
 8004042:	e688      	b.n	8003d56 <HAL_RCC_OscConfig+0x206>
        __HAL_RCC_PLL_DISABLE();
 8004044:	4d2f      	ldr	r5, [pc, #188]	; (8004104 <HAL_RCC_OscConfig+0x5b4>)
 8004046:	4a39      	ldr	r2, [pc, #228]	; (800412c <HAL_RCC_OscConfig+0x5dc>)
 8004048:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800404a:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800404c:	4013      	ands	r3, r2
 800404e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004050:	f7fe fa84 	bl	800255c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004054:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8004056:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004058:	e004      	b.n	8004064 <HAL_RCC_OscConfig+0x514>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800405a:	f7fe fa7f 	bl	800255c <HAL_GetTick>
 800405e:	1b80      	subs	r0, r0, r6
 8004060:	2802      	cmp	r0, #2
 8004062:	d883      	bhi.n	8003f6c <HAL_RCC_OscConfig+0x41c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004064:	682b      	ldr	r3, [r5, #0]
 8004066:	423b      	tst	r3, r7
 8004068:	d1f7      	bne.n	800405a <HAL_RCC_OscConfig+0x50a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800406a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800406c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800406e:	68ea      	ldr	r2, [r5, #12]
 8004070:	430b      	orrs	r3, r1
 8004072:	492f      	ldr	r1, [pc, #188]	; (8004130 <HAL_RCC_OscConfig+0x5e0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004074:	4e23      	ldr	r6, [pc, #140]	; (8004104 <HAL_RCC_OscConfig+0x5b4>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004076:	400a      	ands	r2, r1
 8004078:	4313      	orrs	r3, r2
 800407a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800407c:	4313      	orrs	r3, r2
 800407e:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8004080:	2380      	movs	r3, #128	; 0x80
 8004082:	682a      	ldr	r2, [r5, #0]
 8004084:	045b      	lsls	r3, r3, #17
 8004086:	4313      	orrs	r3, r2
 8004088:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800408a:	f7fe fa67 	bl	800255c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800408e:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8004090:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004092:	04ad      	lsls	r5, r5, #18
 8004094:	e005      	b.n	80040a2 <HAL_RCC_OscConfig+0x552>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004096:	f7fe fa61 	bl	800255c <HAL_GetTick>
 800409a:	1b00      	subs	r0, r0, r4
 800409c:	2802      	cmp	r0, #2
 800409e:	d900      	bls.n	80040a2 <HAL_RCC_OscConfig+0x552>
 80040a0:	e764      	b.n	8003f6c <HAL_RCC_OscConfig+0x41c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80040a2:	6833      	ldr	r3, [r6, #0]
 80040a4:	422b      	tst	r3, r5
 80040a6:	d0f6      	beq.n	8004096 <HAL_RCC_OscConfig+0x546>
  return HAL_OK;
 80040a8:	2000      	movs	r0, #0
 80040aa:	e6a3      	b.n	8003df4 <HAL_RCC_OscConfig+0x2a4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040ac:	4a15      	ldr	r2, [pc, #84]	; (8004104 <HAL_RCC_OscConfig+0x5b4>)
 80040ae:	6d11      	ldr	r1, [r2, #80]	; 0x50
 80040b0:	430b      	orrs	r3, r1
 80040b2:	6513      	str	r3, [r2, #80]	; 0x50
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040b4:	e636      	b.n	8003d24 <HAL_RCC_OscConfig+0x1d4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d100      	bne.n	80040bc <HAL_RCC_OscConfig+0x56c>
 80040ba:	e69a      	b.n	8003df2 <HAL_RCC_OscConfig+0x2a2>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040bc:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 80040be:	4b11      	ldr	r3, [pc, #68]	; (8004104 <HAL_RCC_OscConfig+0x5b4>)
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040c0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
        pll_config = RCC->CFGR;
 80040c2:	68db      	ldr	r3, [r3, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040c4:	0252      	lsls	r2, r2, #9
        return HAL_ERROR;
 80040c6:	2001      	movs	r0, #1
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040c8:	401a      	ands	r2, r3
 80040ca:	428a      	cmp	r2, r1
 80040cc:	d000      	beq.n	80040d0 <HAL_RCC_OscConfig+0x580>
 80040ce:	e691      	b.n	8003df4 <HAL_RCC_OscConfig+0x2a4>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80040d0:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040d2:	6b21      	ldr	r1, [r4, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80040d4:	0392      	lsls	r2, r2, #14
 80040d6:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040d8:	428a      	cmp	r2, r1
 80040da:	d000      	beq.n	80040de <HAL_RCC_OscConfig+0x58e>
 80040dc:	e68a      	b.n	8003df4 <HAL_RCC_OscConfig+0x2a4>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80040de:	20c0      	movs	r0, #192	; 0xc0
 80040e0:	0400      	lsls	r0, r0, #16
 80040e2:	4003      	ands	r3, r0
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80040e4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80040e6:	1a18      	subs	r0, r3, r0
 80040e8:	1e43      	subs	r3, r0, #1
 80040ea:	4198      	sbcs	r0, r3
        return HAL_ERROR;
 80040ec:	b2c0      	uxtb	r0, r0
 80040ee:	e681      	b.n	8003df4 <HAL_RCC_OscConfig+0x2a4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040f0:	4b04      	ldr	r3, [pc, #16]	; (8004104 <HAL_RCC_OscConfig+0x5b4>)
 80040f2:	3901      	subs	r1, #1
 80040f4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80040f6:	39ff      	subs	r1, #255	; 0xff
 80040f8:	4301      	orrs	r1, r0
 80040fa:	6519      	str	r1, [r3, #80]	; 0x50
 80040fc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80040fe:	430a      	orrs	r2, r1
 8004100:	651a      	str	r2, [r3, #80]	; 0x50
 8004102:	e60f      	b.n	8003d24 <HAL_RCC_OscConfig+0x1d4>
 8004104:	40021000 	.word	0x40021000
 8004108:	ffffe0ff 	.word	0xffffe0ff
 800410c:	0800aec4 	.word	0x0800aec4
 8004110:	20000010 	.word	0x20000010
 8004114:	fffffeff 	.word	0xfffffeff
 8004118:	fffffbff 	.word	0xfffffbff
 800411c:	00001388 	.word	0x00001388
 8004120:	ffffdfff 	.word	0xffffdfff
 8004124:	40010000 	.word	0x40010000
 8004128:	efffffff 	.word	0xefffffff
 800412c:	feffffff 	.word	0xfeffffff
 8004130:	ff02ffff 	.word	0xff02ffff

08004134 <HAL_RCC_ClockConfig>:
{
 8004134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004136:	46ce      	mov	lr, r9
 8004138:	4647      	mov	r7, r8
 800413a:	0004      	movs	r4, r0
 800413c:	000d      	movs	r5, r1
 800413e:	b580      	push	{r7, lr}
  if(RCC_ClkInitStruct == NULL)
 8004140:	2800      	cmp	r0, #0
 8004142:	d00d      	beq.n	8004160 <HAL_RCC_ClockConfig+0x2c>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004144:	2201      	movs	r2, #1
 8004146:	4958      	ldr	r1, [pc, #352]	; (80042a8 <HAL_RCC_ClockConfig+0x174>)
 8004148:	680b      	ldr	r3, [r1, #0]
 800414a:	4013      	ands	r3, r2
 800414c:	42ab      	cmp	r3, r5
 800414e:	d20c      	bcs.n	800416a <HAL_RCC_ClockConfig+0x36>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004150:	680b      	ldr	r3, [r1, #0]
 8004152:	4393      	bics	r3, r2
 8004154:	432b      	orrs	r3, r5
 8004156:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004158:	680b      	ldr	r3, [r1, #0]
 800415a:	401a      	ands	r2, r3
 800415c:	42aa      	cmp	r2, r5
 800415e:	d004      	beq.n	800416a <HAL_RCC_ClockConfig+0x36>
    return HAL_ERROR;
 8004160:	2001      	movs	r0, #1
}
 8004162:	bcc0      	pop	{r6, r7}
 8004164:	46b9      	mov	r9, r7
 8004166:	46b0      	mov	r8, r6
 8004168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800416a:	6823      	ldr	r3, [r4, #0]
 800416c:	079a      	lsls	r2, r3, #30
 800416e:	d506      	bpl.n	800417e <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004170:	20f0      	movs	r0, #240	; 0xf0
 8004172:	494e      	ldr	r1, [pc, #312]	; (80042ac <HAL_RCC_ClockConfig+0x178>)
 8004174:	68ca      	ldr	r2, [r1, #12]
 8004176:	4382      	bics	r2, r0
 8004178:	68a0      	ldr	r0, [r4, #8]
 800417a:	4302      	orrs	r2, r0
 800417c:	60ca      	str	r2, [r1, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800417e:	07db      	lsls	r3, r3, #31
 8004180:	d528      	bpl.n	80041d4 <HAL_RCC_ClockConfig+0xa0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004182:	4b4a      	ldr	r3, [pc, #296]	; (80042ac <HAL_RCC_ClockConfig+0x178>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004184:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004186:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004188:	2a02      	cmp	r2, #2
 800418a:	d055      	beq.n	8004238 <HAL_RCC_ClockConfig+0x104>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800418c:	2a03      	cmp	r2, #3
 800418e:	d050      	beq.n	8004232 <HAL_RCC_ClockConfig+0xfe>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004190:	2a01      	cmp	r2, #1
 8004192:	d066      	beq.n	8004262 <HAL_RCC_ClockConfig+0x12e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004194:	059b      	lsls	r3, r3, #22
 8004196:	d5e3      	bpl.n	8004160 <HAL_RCC_ClockConfig+0x2c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004198:	2103      	movs	r1, #3
 800419a:	4e44      	ldr	r6, [pc, #272]	; (80042ac <HAL_RCC_ClockConfig+0x178>)
 800419c:	68f3      	ldr	r3, [r6, #12]
 800419e:	438b      	bics	r3, r1
 80041a0:	4313      	orrs	r3, r2
 80041a2:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 80041a4:	f7fe f9da 	bl	800255c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041a8:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80041aa:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d048      	beq.n	8004242 <HAL_RCC_ClockConfig+0x10e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041b0:	2b03      	cmp	r3, #3
 80041b2:	d059      	beq.n	8004268 <HAL_RCC_ClockConfig+0x134>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d067      	beq.n	8004288 <HAL_RCC_ClockConfig+0x154>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80041b8:	230c      	movs	r3, #12
 80041ba:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041bc:	4b3c      	ldr	r3, [pc, #240]	; (80042b0 <HAL_RCC_ClockConfig+0x17c>)
 80041be:	4699      	mov	r9, r3
 80041c0:	e004      	b.n	80041cc <HAL_RCC_ClockConfig+0x98>
 80041c2:	f7fe f9cb 	bl	800255c <HAL_GetTick>
 80041c6:	1bc0      	subs	r0, r0, r7
 80041c8:	4548      	cmp	r0, r9
 80041ca:	d838      	bhi.n	800423e <HAL_RCC_ClockConfig+0x10a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80041cc:	4642      	mov	r2, r8
 80041ce:	68f3      	ldr	r3, [r6, #12]
 80041d0:	421a      	tst	r2, r3
 80041d2:	d1f6      	bne.n	80041c2 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041d4:	2101      	movs	r1, #1
 80041d6:	4a34      	ldr	r2, [pc, #208]	; (80042a8 <HAL_RCC_ClockConfig+0x174>)
 80041d8:	6813      	ldr	r3, [r2, #0]
 80041da:	400b      	ands	r3, r1
 80041dc:	42ab      	cmp	r3, r5
 80041de:	d905      	bls.n	80041ec <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041e0:	6813      	ldr	r3, [r2, #0]
 80041e2:	438b      	bics	r3, r1
 80041e4:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041e6:	6813      	ldr	r3, [r2, #0]
 80041e8:	4219      	tst	r1, r3
 80041ea:	d1b9      	bne.n	8004160 <HAL_RCC_ClockConfig+0x2c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041ec:	6823      	ldr	r3, [r4, #0]
 80041ee:	075a      	lsls	r2, r3, #29
 80041f0:	d506      	bpl.n	8004200 <HAL_RCC_ClockConfig+0xcc>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041f2:	492e      	ldr	r1, [pc, #184]	; (80042ac <HAL_RCC_ClockConfig+0x178>)
 80041f4:	482f      	ldr	r0, [pc, #188]	; (80042b4 <HAL_RCC_ClockConfig+0x180>)
 80041f6:	68ca      	ldr	r2, [r1, #12]
 80041f8:	4002      	ands	r2, r0
 80041fa:	68e0      	ldr	r0, [r4, #12]
 80041fc:	4302      	orrs	r2, r0
 80041fe:	60ca      	str	r2, [r1, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004200:	071b      	lsls	r3, r3, #28
 8004202:	d507      	bpl.n	8004214 <HAL_RCC_ClockConfig+0xe0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004204:	4929      	ldr	r1, [pc, #164]	; (80042ac <HAL_RCC_ClockConfig+0x178>)
 8004206:	6923      	ldr	r3, [r4, #16]
 8004208:	68ca      	ldr	r2, [r1, #12]
 800420a:	482b      	ldr	r0, [pc, #172]	; (80042b8 <HAL_RCC_ClockConfig+0x184>)
 800420c:	00db      	lsls	r3, r3, #3
 800420e:	4002      	ands	r2, r0
 8004210:	4313      	orrs	r3, r2
 8004212:	60cb      	str	r3, [r1, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004214:	f7ff fc4a 	bl	8003aac <HAL_RCC_GetSysClockFreq>
 8004218:	4b24      	ldr	r3, [pc, #144]	; (80042ac <HAL_RCC_ClockConfig+0x178>)
 800421a:	4a28      	ldr	r2, [pc, #160]	; (80042bc <HAL_RCC_ClockConfig+0x188>)
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	061b      	lsls	r3, r3, #24
 8004220:	0f1b      	lsrs	r3, r3, #28
 8004222:	5cd3      	ldrb	r3, [r2, r3]
 8004224:	40d8      	lsrs	r0, r3
 8004226:	4b26      	ldr	r3, [pc, #152]	; (80042c0 <HAL_RCC_ClockConfig+0x18c>)
 8004228:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(TICK_INT_PRIORITY);
 800422a:	2000      	movs	r0, #0
 800422c:	f7fe f962 	bl	80024f4 <HAL_InitTick>
  if(status != HAL_OK)
 8004230:	e797      	b.n	8004162 <HAL_RCC_ClockConfig+0x2e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004232:	019b      	lsls	r3, r3, #6
 8004234:	d4b0      	bmi.n	8004198 <HAL_RCC_ClockConfig+0x64>
 8004236:	e793      	b.n	8004160 <HAL_RCC_ClockConfig+0x2c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004238:	039b      	lsls	r3, r3, #14
 800423a:	d4ad      	bmi.n	8004198 <HAL_RCC_ClockConfig+0x64>
 800423c:	e790      	b.n	8004160 <HAL_RCC_ClockConfig+0x2c>
          return HAL_TIMEOUT;
 800423e:	2003      	movs	r0, #3
 8004240:	e78f      	b.n	8004162 <HAL_RCC_ClockConfig+0x2e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004242:	330a      	adds	r3, #10
 8004244:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004246:	4b1a      	ldr	r3, [pc, #104]	; (80042b0 <HAL_RCC_ClockConfig+0x17c>)
 8004248:	4699      	mov	r9, r3
 800424a:	e004      	b.n	8004256 <HAL_RCC_ClockConfig+0x122>
 800424c:	f7fe f986 	bl	800255c <HAL_GetTick>
 8004250:	1bc0      	subs	r0, r0, r7
 8004252:	4548      	cmp	r0, r9
 8004254:	d8f3      	bhi.n	800423e <HAL_RCC_ClockConfig+0x10a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004256:	4642      	mov	r2, r8
 8004258:	68f3      	ldr	r3, [r6, #12]
 800425a:	4013      	ands	r3, r2
 800425c:	2b08      	cmp	r3, #8
 800425e:	d1f5      	bne.n	800424c <HAL_RCC_ClockConfig+0x118>
 8004260:	e7b8      	b.n	80041d4 <HAL_RCC_ClockConfig+0xa0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004262:	075b      	lsls	r3, r3, #29
 8004264:	d498      	bmi.n	8004198 <HAL_RCC_ClockConfig+0x64>
 8004266:	e77b      	b.n	8004160 <HAL_RCC_ClockConfig+0x2c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004268:	3309      	adds	r3, #9
 800426a:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800426c:	4b10      	ldr	r3, [pc, #64]	; (80042b0 <HAL_RCC_ClockConfig+0x17c>)
 800426e:	4699      	mov	r9, r3
 8004270:	e004      	b.n	800427c <HAL_RCC_ClockConfig+0x148>
 8004272:	f7fe f973 	bl	800255c <HAL_GetTick>
 8004276:	1bc0      	subs	r0, r0, r7
 8004278:	4548      	cmp	r0, r9
 800427a:	d8e0      	bhi.n	800423e <HAL_RCC_ClockConfig+0x10a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800427c:	4642      	mov	r2, r8
 800427e:	68f3      	ldr	r3, [r6, #12]
 8004280:	4013      	ands	r3, r2
 8004282:	2b0c      	cmp	r3, #12
 8004284:	d1f5      	bne.n	8004272 <HAL_RCC_ClockConfig+0x13e>
 8004286:	e7a5      	b.n	80041d4 <HAL_RCC_ClockConfig+0xa0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004288:	330b      	adds	r3, #11
 800428a:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800428c:	4b08      	ldr	r3, [pc, #32]	; (80042b0 <HAL_RCC_ClockConfig+0x17c>)
 800428e:	4699      	mov	r9, r3
 8004290:	e004      	b.n	800429c <HAL_RCC_ClockConfig+0x168>
 8004292:	f7fe f963 	bl	800255c <HAL_GetTick>
 8004296:	1bc0      	subs	r0, r0, r7
 8004298:	4548      	cmp	r0, r9
 800429a:	d8d0      	bhi.n	800423e <HAL_RCC_ClockConfig+0x10a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800429c:	4642      	mov	r2, r8
 800429e:	68f3      	ldr	r3, [r6, #12]
 80042a0:	4013      	ands	r3, r2
 80042a2:	2b04      	cmp	r3, #4
 80042a4:	d1f5      	bne.n	8004292 <HAL_RCC_ClockConfig+0x15e>
 80042a6:	e795      	b.n	80041d4 <HAL_RCC_ClockConfig+0xa0>
 80042a8:	40022000 	.word	0x40022000
 80042ac:	40021000 	.word	0x40021000
 80042b0:	00001388 	.word	0x00001388
 80042b4:	fffff8ff 	.word	0xfffff8ff
 80042b8:	ffffc7ff 	.word	0xffffc7ff
 80042bc:	0800aec4 	.word	0x0800aec4
 80042c0:	20000010 	.word	0x20000010

080042c4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80042c4:	4b04      	ldr	r3, [pc, #16]	; (80042d8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80042c6:	4a05      	ldr	r2, [pc, #20]	; (80042dc <HAL_RCC_GetPCLK1Freq+0x18>)
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	055b      	lsls	r3, r3, #21
 80042cc:	0f5b      	lsrs	r3, r3, #29
 80042ce:	5cd3      	ldrb	r3, [r2, r3]
 80042d0:	4a03      	ldr	r2, [pc, #12]	; (80042e0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80042d2:	6810      	ldr	r0, [r2, #0]
 80042d4:	40d8      	lsrs	r0, r3
}
 80042d6:	4770      	bx	lr
 80042d8:	40021000 	.word	0x40021000
 80042dc:	0800aed4 	.word	0x0800aed4
 80042e0:	20000010 	.word	0x20000010

080042e4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042e4:	4b04      	ldr	r3, [pc, #16]	; (80042f8 <HAL_RCC_GetPCLK2Freq+0x14>)
 80042e6:	4a05      	ldr	r2, [pc, #20]	; (80042fc <HAL_RCC_GetPCLK2Freq+0x18>)
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	049b      	lsls	r3, r3, #18
 80042ec:	0f5b      	lsrs	r3, r3, #29
 80042ee:	5cd3      	ldrb	r3, [r2, r3]
 80042f0:	4a03      	ldr	r2, [pc, #12]	; (8004300 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80042f2:	6810      	ldr	r0, [r2, #0]
 80042f4:	40d8      	lsrs	r0, r3
}
 80042f6:	4770      	bx	lr
 80042f8:	40021000 	.word	0x40021000
 80042fc:	0800aed4 	.word	0x0800aed4
 8004300:	20000010 	.word	0x20000010

08004304 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004306:	46ce      	mov	lr, r9
 8004308:	4647      	mov	r7, r8

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800430a:	6803      	ldr	r3, [r0, #0]
{
 800430c:	0004      	movs	r4, r0
 800430e:	b580      	push	{r7, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004310:	069a      	lsls	r2, r3, #26
 8004312:	d52d      	bpl.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004314:	2380      	movs	r3, #128	; 0x80
 8004316:	4a6f      	ldr	r2, [pc, #444]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004318:	055b      	lsls	r3, r3, #21
 800431a:	6b91      	ldr	r1, [r2, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 800431c:	2700      	movs	r7, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800431e:	4219      	tst	r1, r3
 8004320:	d061      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004322:	2680      	movs	r6, #128	; 0x80
 8004324:	4d6c      	ldr	r5, [pc, #432]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004326:	0076      	lsls	r6, r6, #1
 8004328:	682b      	ldr	r3, [r5, #0]
 800432a:	4233      	tst	r3, r6
 800432c:	d065      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0xf6>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800432e:	6865      	ldr	r5, [r4, #4]
 8004330:	22c0      	movs	r2, #192	; 0xc0
 8004332:	0028      	movs	r0, r5
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004334:	4967      	ldr	r1, [pc, #412]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004336:	0392      	lsls	r2, r2, #14
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004338:	680b      	ldr	r3, [r1, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800433a:	4010      	ands	r0, r2
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800433c:	4013      	ands	r3, r2
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800433e:	4298      	cmp	r0, r3
 8004340:	d100      	bne.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004342:	e0a1      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x184>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004344:	23c0      	movs	r3, #192	; 0xc0
 8004346:	002a      	movs	r2, r5
 8004348:	029b      	lsls	r3, r3, #10
 800434a:	401a      	ands	r2, r3
 800434c:	429a      	cmp	r2, r3
 800434e:	d066      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x11a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004350:	6d08      	ldr	r0, [r1, #80]	; 0x50
 8004352:	0001      	movs	r1, r0
 8004354:	4019      	ands	r1, r3

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004356:	4218      	tst	r0, r3
 8004358:	d169      	bne.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x12a>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800435a:	6823      	ldr	r3, [r4, #0]
 800435c:	485d      	ldr	r0, [pc, #372]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800435e:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8004360:	430a      	orrs	r2, r1
 8004362:	6502      	str	r2, [r0, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004364:	2f01      	cmp	r7, #1
 8004366:	d103      	bne.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004368:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800436a:	495c      	ldr	r1, [pc, #368]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800436c:	400a      	ands	r2, r1
 800436e:	6382      	str	r2, [r0, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004370:	07da      	lsls	r2, r3, #31
 8004372:	d506      	bpl.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x7e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004374:	2003      	movs	r0, #3
 8004376:	4957      	ldr	r1, [pc, #348]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004378:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800437a:	4382      	bics	r2, r0
 800437c:	68a0      	ldr	r0, [r4, #8]
 800437e:	4302      	orrs	r2, r0
 8004380:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004382:	079a      	lsls	r2, r3, #30
 8004384:	d506      	bpl.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004386:	200c      	movs	r0, #12
 8004388:	4952      	ldr	r1, [pc, #328]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800438a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800438c:	4382      	bics	r2, r0
 800438e:	68e0      	ldr	r0, [r4, #12]
 8004390:	4302      	orrs	r2, r0
 8004392:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004394:	075a      	lsls	r2, r3, #29
 8004396:	d506      	bpl.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004398:	494e      	ldr	r1, [pc, #312]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800439a:	4851      	ldr	r0, [pc, #324]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800439c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800439e:	4002      	ands	r2, r0
 80043a0:	6920      	ldr	r0, [r4, #16]
 80043a2:	4302      	orrs	r2, r0
 80043a4:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043a6:	071a      	lsls	r2, r3, #28
 80043a8:	d506      	bpl.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043aa:	494a      	ldr	r1, [pc, #296]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ac:	484d      	ldr	r0, [pc, #308]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80043ae:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80043b0:	4002      	ands	r2, r0
 80043b2:	6960      	ldr	r0, [r4, #20]
 80043b4:	4302      	orrs	r2, r0
 80043b6:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80043b8:	065a      	lsls	r2, r3, #25
 80043ba:	d506      	bpl.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043bc:	4945      	ldr	r1, [pc, #276]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043be:	484a      	ldr	r0, [pc, #296]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80043c0:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80043c2:	4002      	ands	r2, r0
 80043c4:	69e0      	ldr	r0, [r4, #28]
 80043c6:	4302      	orrs	r2, r0
 80043c8:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 80043ca:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80043cc:	061b      	lsls	r3, r3, #24
 80043ce:	d506      	bpl.n	80043de <HAL_RCCEx_PeriphCLKConfig+0xda>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80043d0:	4a40      	ldr	r2, [pc, #256]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043d2:	4946      	ldr	r1, [pc, #280]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80043d4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80043d6:	400b      	ands	r3, r1
 80043d8:	69a1      	ldr	r1, [r4, #24]
 80043da:	430b      	orrs	r3, r1
 80043dc:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 80043de:	bcc0      	pop	{r6, r7}
 80043e0:	46b9      	mov	r9, r7
 80043e2:	46b0      	mov	r8, r6
 80043e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043e6:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_PWR_CLK_ENABLE();
 80043e8:	6b91      	ldr	r1, [r2, #56]	; 0x38
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043ea:	4d3b      	ldr	r5, [pc, #236]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
      __HAL_RCC_PWR_CLK_ENABLE();
 80043ec:	430b      	orrs	r3, r1
 80043ee:	6393      	str	r3, [r2, #56]	; 0x38
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043f0:	682b      	ldr	r3, [r5, #0]
 80043f2:	0076      	lsls	r6, r6, #1
      pwrclkchanged = SET;
 80043f4:	3701      	adds	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043f6:	4233      	tst	r3, r6
 80043f8:	d199      	bne.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043fa:	682b      	ldr	r3, [r5, #0]
 80043fc:	4333      	orrs	r3, r6
 80043fe:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004400:	f7fe f8ac 	bl	800255c <HAL_GetTick>
 8004404:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004406:	682b      	ldr	r3, [r5, #0]
 8004408:	4233      	tst	r3, r6
 800440a:	d000      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x10a>
 800440c:	e78f      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x2a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800440e:	f7fe f8a5 	bl	800255c <HAL_GetTick>
 8004412:	4643      	mov	r3, r8
 8004414:	1ac0      	subs	r0, r0, r3
 8004416:	2864      	cmp	r0, #100	; 0x64
 8004418:	d9f5      	bls.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x102>
          return HAL_TIMEOUT;
 800441a:	2003      	movs	r0, #3
 800441c:	e7df      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0xda>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800441e:	680b      	ldr	r3, [r1, #0]
 8004420:	039b      	lsls	r3, r3, #14
 8004422:	d454      	bmi.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004424:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 8004426:	0019      	movs	r1, r3
 8004428:	4011      	ands	r1, r2
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800442a:	4213      	tst	r3, r2
 800442c:	d04d      	beq.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x1c6>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800442e:	6823      	ldr	r3, [r4, #0]
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004430:	4291      	cmp	r1, r2
 8004432:	d018      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x162>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004434:	0699      	lsls	r1, r3, #26
 8004436:	d516      	bpl.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x162>
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004438:	4e26      	ldr	r6, [pc, #152]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800443a:	6d31      	ldr	r1, [r6, #80]	; 0x50
 800443c:	468c      	mov	ip, r1
 800443e:	4660      	mov	r0, ip
 8004440:	492b      	ldr	r1, [pc, #172]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8004442:	4001      	ands	r1, r0
      __HAL_RCC_BACKUPRESET_FORCE();
 8004444:	6d30      	ldr	r0, [r6, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004446:	4689      	mov	r9, r1
      __HAL_RCC_BACKUPRESET_FORCE();
 8004448:	4680      	mov	r8, r0
 800444a:	2080      	movs	r0, #128	; 0x80
 800444c:	4641      	mov	r1, r8
 800444e:	0300      	lsls	r0, r0, #12
 8004450:	4308      	orrs	r0, r1
 8004452:	6530      	str	r0, [r6, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004454:	6d30      	ldr	r0, [r6, #80]	; 0x50
 8004456:	4927      	ldr	r1, [pc, #156]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004458:	4008      	ands	r0, r1
      RCC->CSR = temp_reg;
 800445a:	4649      	mov	r1, r9
      __HAL_RCC_BACKUPRESET_RELEASE();
 800445c:	6530      	str	r0, [r6, #80]	; 0x50
      RCC->CSR = temp_reg;
 800445e:	6531      	str	r1, [r6, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004460:	4661      	mov	r1, ip
 8004462:	05c9      	lsls	r1, r1, #23
 8004464:	d419      	bmi.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x196>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004466:	21c0      	movs	r1, #192	; 0xc0
 8004468:	0289      	lsls	r1, r1, #10
 800446a:	428a      	cmp	r2, r1
 800446c:	d000      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800446e:	e775      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x58>
 8004470:	20c0      	movs	r0, #192	; 0xc0
 8004472:	0380      	lsls	r0, r0, #14
 8004474:	4028      	ands	r0, r5
 8004476:	4917      	ldr	r1, [pc, #92]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004478:	4d1f      	ldr	r5, [pc, #124]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800447a:	680a      	ldr	r2, [r1, #0]
 800447c:	402a      	ands	r2, r5
 800447e:	4302      	orrs	r2, r0
 8004480:	600a      	str	r2, [r1, #0]
 8004482:	22c0      	movs	r2, #192	; 0xc0
 8004484:	0292      	lsls	r2, r2, #10
 8004486:	e769      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x58>
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004488:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 800448a:	22c0      	movs	r2, #192	; 0xc0
 800448c:	0019      	movs	r1, r3
 800448e:	0292      	lsls	r2, r2, #10
 8004490:	4011      	ands	r1, r2
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004492:	4213      	tst	r3, r2
 8004494:	d016      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8004496:	402a      	ands	r2, r5
 8004498:	e7c9      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        tickstart = HAL_GetTick();
 800449a:	f7fe f85f 	bl	800255c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800449e:	2380      	movs	r3, #128	; 0x80
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044a4:	4b15      	ldr	r3, [pc, #84]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
        tickstart = HAL_GetTick();
 80044a6:	0005      	movs	r5, r0
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044a8:	4699      	mov	r9, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80044aa:	e004      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044ac:	f7fe f856 	bl	800255c <HAL_GetTick>
 80044b0:	1b40      	subs	r0, r0, r5
 80044b2:	4548      	cmp	r0, r9
 80044b4:	d8b1      	bhi.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80044b6:	4642      	mov	r2, r8
 80044b8:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80044ba:	4213      	tst	r3, r2
 80044bc:	d0f6      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80044be:	22c0      	movs	r2, #192	; 0xc0
 80044c0:	6865      	ldr	r5, [r4, #4]
 80044c2:	0292      	lsls	r2, r2, #10
 80044c4:	6823      	ldr	r3, [r4, #0]
 80044c6:	402a      	ands	r2, r5
 80044c8:	e7cd      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x162>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044ca:	6823      	ldr	r3, [r4, #0]
 80044cc:	e7d3      	b.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x172>
          return HAL_ERROR;
 80044ce:	2001      	movs	r0, #1
 80044d0:	e785      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0xda>
 80044d2:	46c0      	nop			; (mov r8, r8)
 80044d4:	40021000 	.word	0x40021000
 80044d8:	40007000 	.word	0x40007000
 80044dc:	efffffff 	.word	0xefffffff
 80044e0:	fffff3ff 	.word	0xfffff3ff
 80044e4:	ffffcfff 	.word	0xffffcfff
 80044e8:	fbffffff 	.word	0xfbffffff
 80044ec:	fff3ffff 	.word	0xfff3ffff
 80044f0:	fffcffff 	.word	0xfffcffff
 80044f4:	fff7ffff 	.word	0xfff7ffff
 80044f8:	ffcfffff 	.word	0xffcfffff
 80044fc:	00001388 	.word	0x00001388

08004500 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004500:	b570      	push	{r4, r5, r6, lr}
 8004502:	1e04      	subs	r4, r0, #0
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004504:	d038      	beq.n	8004578 <HAL_SPI_Init+0x78>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004506:	2300      	movs	r3, #0
 8004508:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800450a:	3351      	adds	r3, #81	; 0x51
 800450c:	5cc3      	ldrb	r3, [r0, r3]
 800450e:	2600      	movs	r6, #0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d02b      	beq.n	800456c <HAL_SPI_Init+0x6c>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004514:	2151      	movs	r1, #81	; 0x51
 8004516:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004518:	2040      	movs	r0, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 800451a:	5463      	strb	r3, [r4, r1]
  __HAL_SPI_DISABLE(hspi);
 800451c:	6822      	ldr	r2, [r4, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800451e:	68a5      	ldr	r5, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8004520:	6813      	ldr	r3, [r2, #0]
 8004522:	4383      	bics	r3, r0
 8004524:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004526:	6863      	ldr	r3, [r4, #4]
 8004528:	69a0      	ldr	r0, [r4, #24]
 800452a:	432b      	orrs	r3, r5
 800452c:	68e5      	ldr	r5, [r4, #12]
 800452e:	432b      	orrs	r3, r5
 8004530:	6925      	ldr	r5, [r4, #16]
 8004532:	432b      	orrs	r3, r5
 8004534:	6965      	ldr	r5, [r4, #20]
 8004536:	432b      	orrs	r3, r5
 8004538:	69e5      	ldr	r5, [r4, #28]
 800453a:	432b      	orrs	r3, r5
 800453c:	6a25      	ldr	r5, [r4, #32]
 800453e:	432b      	orrs	r3, r5
 8004540:	2580      	movs	r5, #128	; 0x80
 8004542:	00ad      	lsls	r5, r5, #2
 8004544:	4005      	ands	r5, r0
 8004546:	432b      	orrs	r3, r5
 8004548:	4333      	orrs	r3, r6
 800454a:	6013      	str	r3, [r2, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800454c:	2304      	movs	r3, #4
 800454e:	0c00      	lsrs	r0, r0, #16
 8004550:	4003      	ands	r3, r0
 8004552:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004554:	4303      	orrs	r3, r0
 8004556:	6053      	str	r3, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004558:	69d3      	ldr	r3, [r2, #28]
 800455a:	4808      	ldr	r0, [pc, #32]	; (800457c <HAL_SPI_Init+0x7c>)
 800455c:	4003      	ands	r3, r0
 800455e:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004560:	2300      	movs	r3, #0
  hspi->State     = HAL_SPI_STATE_READY;

  return HAL_OK;
 8004562:	2000      	movs	r0, #0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004564:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004566:	3301      	adds	r3, #1
 8004568:	5463      	strb	r3, [r4, r1]
}
 800456a:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 800456c:	3350      	adds	r3, #80	; 0x50
 800456e:	54c6      	strb	r6, [r0, r3]
    HAL_SPI_MspInit(hspi);
 8004570:	f001 fb4c 	bl	8005c0c <HAL_SPI_MspInit>
 8004574:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004576:	e7cd      	b.n	8004514 <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 8004578:	2001      	movs	r0, #1
 800457a:	e7f6      	b.n	800456a <HAL_SPI_Init+0x6a>
 800457c:	fffff7ff 	.word	0xfffff7ff

08004580 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004580:	b510      	push	{r4, lr}
 8004582:	1e04      	subs	r4, r0, #0
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004584:	d02f      	beq.n	80045e6 <HAL_TIM_PWM_Init+0x66>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004586:	2339      	movs	r3, #57	; 0x39
 8004588:	5cc3      	ldrb	r3, [r0, r3]
 800458a:	b2da      	uxtb	r2, r3
 800458c:	2b00      	cmp	r3, #0
 800458e:	d025      	beq.n	80045dc <HAL_TIM_PWM_Init+0x5c>
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004590:	2339      	movs	r3, #57	; 0x39
 8004592:	2202      	movs	r2, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004594:	2180      	movs	r1, #128	; 0x80
  htim->State = HAL_TIM_STATE_BUSY;
 8004596:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004598:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800459a:	05c9      	lsls	r1, r1, #23
  tmpcr1 = TIMx->CR1;
 800459c:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800459e:	428a      	cmp	r2, r1
 80045a0:	d005      	beq.n	80045ae <HAL_TIM_PWM_Init+0x2e>
 80045a2:	4912      	ldr	r1, [pc, #72]	; (80045ec <HAL_TIM_PWM_Init+0x6c>)
 80045a4:	428a      	cmp	r2, r1
 80045a6:	d002      	beq.n	80045ae <HAL_TIM_PWM_Init+0x2e>
 80045a8:	4911      	ldr	r1, [pc, #68]	; (80045f0 <HAL_TIM_PWM_Init+0x70>)
 80045aa:	428a      	cmp	r2, r1
 80045ac:	d107      	bne.n	80045be <HAL_TIM_PWM_Init+0x3e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045ae:	2170      	movs	r1, #112	; 0x70
 80045b0:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 80045b2:	68a1      	ldr	r1, [r4, #8]
 80045b4:	430b      	orrs	r3, r1
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045b6:	490f      	ldr	r1, [pc, #60]	; (80045f4 <HAL_TIM_PWM_Init+0x74>)
 80045b8:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045ba:	6921      	ldr	r1, [r4, #16]
 80045bc:	430b      	orrs	r3, r1
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045be:	2180      	movs	r1, #128	; 0x80
 80045c0:	438b      	bics	r3, r1
 80045c2:	6961      	ldr	r1, [r4, #20]
  return HAL_OK;
 80045c4:	2000      	movs	r0, #0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045c6:	430b      	orrs	r3, r1

  TIMx->CR1 = tmpcr1;
 80045c8:	6013      	str	r3, [r2, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045ca:	68e3      	ldr	r3, [r4, #12]
 80045cc:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045ce:	6863      	ldr	r3, [r4, #4]
 80045d0:	6293      	str	r3, [r2, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045d2:	2301      	movs	r3, #1
 80045d4:	6153      	str	r3, [r2, #20]
  htim->State = HAL_TIM_STATE_READY;
 80045d6:	2239      	movs	r2, #57	; 0x39
 80045d8:	54a3      	strb	r3, [r4, r2]
}
 80045da:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80045dc:	3338      	adds	r3, #56	; 0x38
 80045de:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 80045e0:	f001 fcb4 	bl	8005f4c <HAL_TIM_PWM_MspInit>
 80045e4:	e7d4      	b.n	8004590 <HAL_TIM_PWM_Init+0x10>
    return HAL_ERROR;
 80045e6:	2001      	movs	r0, #1
 80045e8:	e7f7      	b.n	80045da <HAL_TIM_PWM_Init+0x5a>
 80045ea:	46c0      	nop			; (mov r8, r8)
 80045ec:	40010800 	.word	0x40010800
 80045f0:	40011400 	.word	0x40011400
 80045f4:	fffffcff 	.word	0xfffffcff

080045f8 <HAL_TIM_PWM_Start>:
 80045f8:	6803      	ldr	r3, [r0, #0]
 80045fa:	221f      	movs	r2, #31
 80045fc:	2001      	movs	r0, #1
 80045fe:	400a      	ands	r2, r1
 8004600:	0001      	movs	r1, r0
 8004602:	4091      	lsls	r1, r2
 8004604:	000a      	movs	r2, r1
 8004606:	6a19      	ldr	r1, [r3, #32]
 8004608:	4391      	bics	r1, r2
 800460a:	6219      	str	r1, [r3, #32]
 800460c:	6a19      	ldr	r1, [r3, #32]
 800460e:	430a      	orrs	r2, r1
 8004610:	621a      	str	r2, [r3, #32]
 8004612:	2207      	movs	r2, #7
 8004614:	6899      	ldr	r1, [r3, #8]
 8004616:	400a      	ands	r2, r1
 8004618:	2a06      	cmp	r2, #6
 800461a:	d002      	beq.n	8004622 <HAL_TIM_PWM_Start+0x2a>
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	4310      	orrs	r0, r2
 8004620:	6018      	str	r0, [r3, #0]
 8004622:	2000      	movs	r0, #0
 8004624:	4770      	bx	lr
 8004626:	46c0      	nop			; (mov r8, r8)

08004628 <HAL_TIM_PWM_Stop>:
{
 8004628:	b530      	push	{r4, r5, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800462a:	241f      	movs	r4, #31
 800462c:	400c      	ands	r4, r1
 800462e:	2101      	movs	r1, #1
 8004630:	000d      	movs	r5, r1
 8004632:	40a5      	lsls	r5, r4
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004634:	6803      	ldr	r3, [r0, #0]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004636:	6a1a      	ldr	r2, [r3, #32]
 8004638:	43aa      	bics	r2, r5
 800463a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800463c:	6a1a      	ldr	r2, [r3, #32]
 800463e:	621a      	str	r2, [r3, #32]
  __HAL_TIM_DISABLE(htim);
 8004640:	6a1c      	ldr	r4, [r3, #32]
 8004642:	4a05      	ldr	r2, [pc, #20]	; (8004658 <HAL_TIM_PWM_Stop+0x30>)
 8004644:	4214      	tst	r4, r2
 8004646:	d102      	bne.n	800464e <HAL_TIM_PWM_Stop+0x26>
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	438a      	bics	r2, r1
 800464c:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800464e:	2339      	movs	r3, #57	; 0x39
 8004650:	2201      	movs	r2, #1
 8004652:	54c2      	strb	r2, [r0, r3]
}
 8004654:	2000      	movs	r0, #0
 8004656:	bd30      	pop	{r4, r5, pc}
 8004658:	00001111 	.word	0x00001111

0800465c <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 800465c:	2338      	movs	r3, #56	; 0x38
{
 800465e:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8004660:	5cc4      	ldrb	r4, [r0, r3]
 8004662:	2c01      	cmp	r4, #1
 8004664:	d100      	bne.n	8004668 <HAL_TIM_PWM_ConfigChannel+0xc>
 8004666:	e0a4      	b.n	80047b2 <HAL_TIM_PWM_ConfigChannel+0x156>
 8004668:	2501      	movs	r5, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800466a:	2402      	movs	r4, #2
  __HAL_LOCK(htim);
 800466c:	54c5      	strb	r5, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 800466e:	3301      	adds	r3, #1
 8004670:	54c4      	strb	r4, [r0, r3]
  switch (Channel)
 8004672:	2a08      	cmp	r2, #8
 8004674:	d05b      	beq.n	800472e <HAL_TIM_PWM_ConfigChannel+0xd2>
 8004676:	d832      	bhi.n	80046de <HAL_TIM_PWM_ConfigChannel+0x82>
 8004678:	2a00      	cmp	r2, #0
 800467a:	d100      	bne.n	800467e <HAL_TIM_PWM_ConfigChannel+0x22>
 800467c:	e079      	b.n	8004772 <HAL_TIM_PWM_ConfigChannel+0x116>
 800467e:	2a04      	cmp	r2, #4
 8004680:	d125      	bne.n	80046ce <HAL_TIM_PWM_ConfigChannel+0x72>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004682:	2410      	movs	r4, #16
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004684:	6803      	ldr	r3, [r0, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004686:	4d4c      	ldr	r5, [pc, #304]	; (80047b8 <HAL_TIM_PWM_ConfigChannel+0x15c>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004688:	6a1a      	ldr	r2, [r3, #32]
 800468a:	43a2      	bics	r2, r4
 800468c:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800468e:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004690:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8004692:	699c      	ldr	r4, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004694:	4025      	ands	r5, r4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004696:	680c      	ldr	r4, [r1, #0]
 8004698:	0224      	lsls	r4, r4, #8
 800469a:	432c      	orrs	r4, r5
  tmpccer &= ~TIM_CCER_CC2P;
 800469c:	2520      	movs	r5, #32
 800469e:	43aa      	bics	r2, r5
 80046a0:	0015      	movs	r5, r2
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046a2:	688a      	ldr	r2, [r1, #8]
  TIMx->CR2 = tmpcr2;
 80046a4:	605e      	str	r6, [r3, #4]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046a6:	0112      	lsls	r2, r2, #4
  TIMx->CCMR1 = tmpccmrx;
 80046a8:	619c      	str	r4, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80046aa:	684c      	ldr	r4, [r1, #4]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046ac:	432a      	orrs	r2, r5
  TIMx->CCR2 = OC_Config->Pulse;
 80046ae:	639c      	str	r4, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80046b0:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046b2:	2280      	movs	r2, #128	; 0x80
 80046b4:	699c      	ldr	r4, [r3, #24]
 80046b6:	0112      	lsls	r2, r2, #4
 80046b8:	4322      	orrs	r2, r4
 80046ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80046bc:	699a      	ldr	r2, [r3, #24]
 80046be:	4c3f      	ldr	r4, [pc, #252]	; (80047bc <HAL_TIM_PWM_ConfigChannel+0x160>)
 80046c0:	4022      	ands	r2, r4
 80046c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80046c4:	68ca      	ldr	r2, [r1, #12]
 80046c6:	699c      	ldr	r4, [r3, #24]
 80046c8:	0212      	lsls	r2, r2, #8
 80046ca:	4322      	orrs	r2, r4
 80046cc:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80046ce:	2339      	movs	r3, #57	; 0x39
 80046d0:	2201      	movs	r2, #1
 80046d2:	54c2      	strb	r2, [r0, r3]
  __HAL_UNLOCK(htim);
 80046d4:	2200      	movs	r2, #0
 80046d6:	3b01      	subs	r3, #1
 80046d8:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 80046da:	2000      	movs	r0, #0
}
 80046dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (Channel)
 80046de:	2a0c      	cmp	r2, #12
 80046e0:	d1f5      	bne.n	80046ce <HAL_TIM_PWM_ConfigChannel+0x72>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80046e2:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046e4:	4c36      	ldr	r4, [pc, #216]	; (80047c0 <HAL_TIM_PWM_ConfigChannel+0x164>)
 80046e6:	6a1a      	ldr	r2, [r3, #32]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046e8:	4d33      	ldr	r5, [pc, #204]	; (80047b8 <HAL_TIM_PWM_ConfigChannel+0x15c>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046ea:	4022      	ands	r2, r4
 80046ec:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80046ee:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80046f0:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80046f2:	69dc      	ldr	r4, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046f4:	4025      	ands	r5, r4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046f6:	680c      	ldr	r4, [r1, #0]
 80046f8:	0224      	lsls	r4, r4, #8
 80046fa:	432c      	orrs	r4, r5
  tmpccer &= ~TIM_CCER_CC4P;
 80046fc:	4d31      	ldr	r5, [pc, #196]	; (80047c4 <HAL_TIM_PWM_ConfigChannel+0x168>)
 80046fe:	4015      	ands	r5, r2
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004700:	688a      	ldr	r2, [r1, #8]
  TIMx->CR2 = tmpcr2;
 8004702:	605e      	str	r6, [r3, #4]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004704:	0312      	lsls	r2, r2, #12
  TIMx->CCMR2 = tmpccmrx;
 8004706:	61dc      	str	r4, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8004708:	684c      	ldr	r4, [r1, #4]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800470a:	432a      	orrs	r2, r5
  TIMx->CCR4 = OC_Config->Pulse;
 800470c:	641c      	str	r4, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 800470e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004710:	2280      	movs	r2, #128	; 0x80
 8004712:	69dc      	ldr	r4, [r3, #28]
 8004714:	0112      	lsls	r2, r2, #4
 8004716:	4322      	orrs	r2, r4
 8004718:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800471a:	69da      	ldr	r2, [r3, #28]
 800471c:	4c27      	ldr	r4, [pc, #156]	; (80047bc <HAL_TIM_PWM_ConfigChannel+0x160>)
 800471e:	4022      	ands	r2, r4
 8004720:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004722:	68ca      	ldr	r2, [r1, #12]
 8004724:	69dc      	ldr	r4, [r3, #28]
 8004726:	0212      	lsls	r2, r2, #8
 8004728:	4322      	orrs	r2, r4
 800472a:	61da      	str	r2, [r3, #28]
      break;
 800472c:	e7cf      	b.n	80046ce <HAL_TIM_PWM_ConfigChannel+0x72>
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800472e:	2673      	movs	r6, #115	; 0x73
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004730:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004732:	4d25      	ldr	r5, [pc, #148]	; (80047c8 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8004734:	6a1c      	ldr	r4, [r3, #32]
 8004736:	402c      	ands	r4, r5
 8004738:	621c      	str	r4, [r3, #32]
  tmpccer = TIMx->CCER;
 800473a:	6a1c      	ldr	r4, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800473c:	685f      	ldr	r7, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800473e:	69dd      	ldr	r5, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004740:	43b5      	bics	r5, r6
  tmpccmrx |= OC_Config->OCMode;
 8004742:	680e      	ldr	r6, [r1, #0]
 8004744:	4335      	orrs	r5, r6
  tmpccer &= ~TIM_CCER_CC3P;
 8004746:	4e21      	ldr	r6, [pc, #132]	; (80047cc <HAL_TIM_PWM_ConfigChannel+0x170>)
 8004748:	4026      	ands	r6, r4
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800474a:	688c      	ldr	r4, [r1, #8]
  TIMx->CR2 = tmpcr2;
 800474c:	605f      	str	r7, [r3, #4]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800474e:	0224      	lsls	r4, r4, #8
  TIMx->CCMR2 = tmpccmrx;
 8004750:	61dd      	str	r5, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8004752:	684d      	ldr	r5, [r1, #4]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004754:	4334      	orrs	r4, r6
  TIMx->CCR3 = OC_Config->Pulse;
 8004756:	63dd      	str	r5, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8004758:	621c      	str	r4, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800475a:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800475c:	68c9      	ldr	r1, [r1, #12]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800475e:	4322      	orrs	r2, r4
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004760:	2404      	movs	r4, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004762:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004764:	69da      	ldr	r2, [r3, #28]
 8004766:	43a2      	bics	r2, r4
 8004768:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800476a:	69da      	ldr	r2, [r3, #28]
 800476c:	430a      	orrs	r2, r1
 800476e:	61da      	str	r2, [r3, #28]
      break;
 8004770:	e7ad      	b.n	80046ce <HAL_TIM_PWM_ConfigChannel+0x72>
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004772:	2773      	movs	r7, #115	; 0x73
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004774:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004776:	6a1a      	ldr	r2, [r3, #32]
 8004778:	43aa      	bics	r2, r5
 800477a:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800477c:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800477e:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8004780:	699d      	ldr	r5, [r3, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 8004782:	43a2      	bics	r2, r4
  tmpccer |= OC_Config->OCPolarity;
 8004784:	688c      	ldr	r4, [r1, #8]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004786:	43bd      	bics	r5, r7
  tmpccmrx |= OC_Config->OCMode;
 8004788:	680f      	ldr	r7, [r1, #0]
  tmpccer |= OC_Config->OCPolarity;
 800478a:	4322      	orrs	r2, r4
  TIMx->CCR1 = OC_Config->Pulse;
 800478c:	684c      	ldr	r4, [r1, #4]
  tmpccmrx |= OC_Config->OCMode;
 800478e:	433d      	orrs	r5, r7
  TIMx->CR2 = tmpcr2;
 8004790:	605e      	str	r6, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004792:	619d      	str	r5, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8004794:	635c      	str	r4, [r3, #52]	; 0x34
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004796:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 8004798:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800479a:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800479c:	68c9      	ldr	r1, [r1, #12]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800479e:	4322      	orrs	r2, r4
 80047a0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047a2:	699a      	ldr	r2, [r3, #24]
 80047a4:	3c04      	subs	r4, #4
 80047a6:	43a2      	bics	r2, r4
 80047a8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047aa:	699a      	ldr	r2, [r3, #24]
 80047ac:	430a      	orrs	r2, r1
 80047ae:	619a      	str	r2, [r3, #24]
      break;
 80047b0:	e78d      	b.n	80046ce <HAL_TIM_PWM_ConfigChannel+0x72>
  __HAL_LOCK(htim);
 80047b2:	2002      	movs	r0, #2
 80047b4:	e792      	b.n	80046dc <HAL_TIM_PWM_ConfigChannel+0x80>
 80047b6:	46c0      	nop			; (mov r8, r8)
 80047b8:	ffff8cff 	.word	0xffff8cff
 80047bc:	fffffbff 	.word	0xfffffbff
 80047c0:	ffffefff 	.word	0xffffefff
 80047c4:	ffffdfff 	.word	0xffffdfff
 80047c8:	fffffeff 	.word	0xfffffeff
 80047cc:	fffffdff 	.word	0xfffffdff

080047d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047d2:	2538      	movs	r5, #56	; 0x38
 80047d4:	5d43      	ldrb	r3, [r0, r5]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d015      	beq.n	8004806 <HAL_TIMEx_MasterConfigSynchronization+0x36>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047da:	2639      	movs	r6, #57	; 0x39
 80047dc:	2302      	movs	r3, #2

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047de:	2770      	movs	r7, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 80047e0:	5583      	strb	r3, [r0, r6]
  tmpcr2 = htim->Instance->CR2;
 80047e2:	6804      	ldr	r4, [r0, #0]
 80047e4:	6862      	ldr	r2, [r4, #4]
  tmpsmcr = htim->Instance->SMCR;
 80047e6:	68a3      	ldr	r3, [r4, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80047e8:	43ba      	bics	r2, r7
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047ea:	680f      	ldr	r7, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047ec:	6849      	ldr	r1, [r1, #4]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047ee:	433a      	orrs	r2, r7
  tmpsmcr &= ~TIM_SMCR_MSM;
 80047f0:	2780      	movs	r7, #128	; 0x80
 80047f2:	43bb      	bics	r3, r7
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047f4:	430b      	orrs	r3, r1

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047f6:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80047f8:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047fa:	2301      	movs	r3, #1
 80047fc:	5583      	strb	r3, [r0, r6]

  __HAL_UNLOCK(htim);
 80047fe:	2300      	movs	r3, #0
 8004800:	5543      	strb	r3, [r0, r5]

  return HAL_OK;
 8004802:	2000      	movs	r0, #0
}
 8004804:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 8004806:	2002      	movs	r0, #2
 8004808:	e7fc      	b.n	8004804 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 800480a:	46c0      	nop			; (mov r8, r8)

0800480c <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800480c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800480e:	464f      	mov	r7, r9
 8004810:	4646      	mov	r6, r8
 8004812:	46d6      	mov	lr, sl
 8004814:	b5c0      	push	{r6, r7, lr}
 8004816:	001e      	movs	r6, r3
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004818:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 800481a:	0004      	movs	r4, r0
 800481c:	000d      	movs	r5, r1
 800481e:	0017      	movs	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8004820:	2b20      	cmp	r3, #32
 8004822:	d000      	beq.n	8004826 <HAL_UART_Transmit+0x1a>
 8004824:	e06b      	b.n	80048fe <HAL_UART_Transmit+0xf2>
  {
    if ((pData == NULL) || (Size == 0U))
 8004826:	2900      	cmp	r1, #0
 8004828:	d04c      	beq.n	80048c4 <HAL_UART_Transmit+0xb8>
 800482a:	2a00      	cmp	r2, #0
 800482c:	d04a      	beq.n	80048c4 <HAL_UART_Transmit+0xb8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800482e:	2380      	movs	r3, #128	; 0x80
 8004830:	6882      	ldr	r2, [r0, #8]
 8004832:	015b      	lsls	r3, r3, #5
 8004834:	429a      	cmp	r2, r3
 8004836:	d040      	beq.n	80048ba <HAL_UART_Transmit+0xae>
        return  HAL_ERROR;
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004838:	2370      	movs	r3, #112	; 0x70
 800483a:	5ce2      	ldrb	r2, [r4, r3]
 800483c:	2a01      	cmp	r2, #1
 800483e:	d05e      	beq.n	80048fe <HAL_UART_Transmit+0xf2>
 8004840:	2201      	movs	r2, #1
 8004842:	54e2      	strb	r2, [r4, r3]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004844:	2300      	movs	r3, #0
 8004846:	67e3      	str	r3, [r4, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004848:	3321      	adds	r3, #33	; 0x21
 800484a:	6763      	str	r3, [r4, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800484c:	f7fd fe86 	bl	800255c <HAL_GetTick>

    huart->TxXferSize  = Size;
 8004850:	2350      	movs	r3, #80	; 0x50
      pdata16bits = (uint16_t *) pData;
    }
    else
    {
      pdata8bits  = pData;
      pdata16bits = NULL;
 8004852:	2200      	movs	r2, #0
    huart->TxXferSize  = Size;
 8004854:	52e7      	strh	r7, [r4, r3]
    huart->TxXferCount = Size;
 8004856:	3302      	adds	r3, #2
 8004858:	52e7      	strh	r7, [r4, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800485a:	2380      	movs	r3, #128	; 0x80
      pdata16bits = NULL;
 800485c:	4692      	mov	sl, r2
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800485e:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8004860:	4681      	mov	r9, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004862:	015b      	lsls	r3, r3, #5
 8004864:	429a      	cmp	r2, r3
 8004866:	d04c      	beq.n	8004902 <HAL_UART_Transmit+0xf6>
    }

    while (huart->TxXferCount > 0U)
 8004868:	2352      	movs	r3, #82	; 0x52
 800486a:	5ae3      	ldrh	r3, [r4, r3]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d100      	bne.n	8004872 <HAL_UART_Transmit+0x66>
 8004870:	e06c      	b.n	800494c <HAL_UART_Transmit+0x140>
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004872:	2380      	movs	r3, #128	; 0x80
      huart->TxXferCount--;
 8004874:	2752      	movs	r7, #82	; 0x52
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004876:	4698      	mov	r8, r3
 8004878:	6822      	ldr	r2, [r4, #0]
 800487a:	1c73      	adds	r3, r6, #1
 800487c:	d128      	bne.n	80048d0 <HAL_UART_Transmit+0xc4>
 800487e:	4641      	mov	r1, r8
 8004880:	69d3      	ldr	r3, [r2, #28]
 8004882:	4219      	tst	r1, r3
 8004884:	d0fb      	beq.n	800487e <HAL_UART_Transmit+0x72>
      if (pdata8bits == NULL)
 8004886:	2d00      	cmp	r5, #0
 8004888:	d030      	beq.n	80048ec <HAL_UART_Transmit+0xe0>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800488a:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 800488c:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800488e:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8004890:	5be3      	ldrh	r3, [r4, r7]
 8004892:	3b01      	subs	r3, #1
 8004894:	b29b      	uxth	r3, r3
 8004896:	53e3      	strh	r3, [r4, r7]
    while (huart->TxXferCount > 0U)
 8004898:	5be3      	ldrh	r3, [r4, r7]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1ed      	bne.n	800487a <HAL_UART_Transmit+0x6e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800489e:	2540      	movs	r5, #64	; 0x40
 80048a0:	1c73      	adds	r3, r6, #1
 80048a2:	d146      	bne.n	8004932 <HAL_UART_Transmit+0x126>
 80048a4:	2140      	movs	r1, #64	; 0x40
 80048a6:	69d3      	ldr	r3, [r2, #28]
 80048a8:	4219      	tst	r1, r3
 80048aa:	d0fc      	beq.n	80048a6 <HAL_UART_Transmit+0x9a>
    huart->gState = HAL_UART_STATE_READY;
 80048ac:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80048ae:	2200      	movs	r2, #0
    huart->gState = HAL_UART_STATE_READY;
 80048b0:	6763      	str	r3, [r4, #116]	; 0x74
    __HAL_UNLOCK(huart);
 80048b2:	3350      	adds	r3, #80	; 0x50
    return HAL_OK;
 80048b4:	2000      	movs	r0, #0
    __HAL_UNLOCK(huart);
 80048b6:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 80048b8:	e005      	b.n	80048c6 <HAL_UART_Transmit+0xba>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048ba:	6903      	ldr	r3, [r0, #16]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1bb      	bne.n	8004838 <HAL_UART_Transmit+0x2c>
      if ((((uint32_t)pData) & 1) != 0)
 80048c0:	07cb      	lsls	r3, r1, #31
 80048c2:	d5b9      	bpl.n	8004838 <HAL_UART_Transmit+0x2c>
      return  HAL_ERROR;
 80048c4:	2001      	movs	r0, #1
}
 80048c6:	bce0      	pop	{r5, r6, r7}
 80048c8:	46ba      	mov	sl, r7
 80048ca:	46b1      	mov	r9, r6
 80048cc:	46a8      	mov	r8, r5
 80048ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048d0:	4641      	mov	r1, r8
 80048d2:	69d3      	ldr	r3, [r2, #28]
 80048d4:	4219      	tst	r1, r3
 80048d6:	d1d6      	bne.n	8004886 <HAL_UART_Transmit+0x7a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048d8:	f7fd fe40 	bl	800255c <HAL_GetTick>
 80048dc:	464b      	mov	r3, r9
 80048de:	1ac0      	subs	r0, r0, r3
 80048e0:	4286      	cmp	r6, r0
 80048e2:	d314      	bcc.n	800490e <HAL_UART_Transmit+0x102>
 80048e4:	2e00      	cmp	r6, #0
 80048e6:	d012      	beq.n	800490e <HAL_UART_Transmit+0x102>
 80048e8:	6822      	ldr	r2, [r4, #0]
 80048ea:	e7c6      	b.n	800487a <HAL_UART_Transmit+0x6e>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048ec:	4653      	mov	r3, sl
 80048ee:	881b      	ldrh	r3, [r3, #0]
 80048f0:	05db      	lsls	r3, r3, #23
 80048f2:	0ddb      	lsrs	r3, r3, #23
 80048f4:	6293      	str	r3, [r2, #40]	; 0x28
        pdata16bits++;
 80048f6:	2302      	movs	r3, #2
 80048f8:	469c      	mov	ip, r3
 80048fa:	44e2      	add	sl, ip
      huart->TxXferCount--;
 80048fc:	e7c8      	b.n	8004890 <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 80048fe:	2002      	movs	r0, #2
 8004900:	e7e1      	b.n	80048c6 <HAL_UART_Transmit+0xba>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004902:	6923      	ldr	r3, [r4, #16]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1af      	bne.n	8004868 <HAL_UART_Transmit+0x5c>
 8004908:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 800490a:	2500      	movs	r5, #0
 800490c:	e7ac      	b.n	8004868 <HAL_UART_Transmit+0x5c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800490e:	6823      	ldr	r3, [r4, #0]
 8004910:	490f      	ldr	r1, [pc, #60]	; (8004950 <HAL_UART_Transmit+0x144>)
 8004912:	681a      	ldr	r2, [r3, #0]
      return HAL_TIMEOUT;
 8004914:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004916:	400a      	ands	r2, r1
 8004918:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800491a:	689a      	ldr	r2, [r3, #8]
 800491c:	31a3      	adds	r1, #163	; 0xa3
 800491e:	31ff      	adds	r1, #255	; 0xff
 8004920:	438a      	bics	r2, r1
 8004922:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004924:	2320      	movs	r3, #32
        huart->RxState = HAL_UART_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004926:	2200      	movs	r2, #0
        huart->gState = HAL_UART_STATE_READY;
 8004928:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800492a:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 800492c:	3350      	adds	r3, #80	; 0x50
 800492e:	54e2      	strb	r2, [r4, r3]

        return HAL_TIMEOUT;
 8004930:	e7c9      	b.n	80048c6 <HAL_UART_Transmit+0xba>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004932:	69d3      	ldr	r3, [r2, #28]
 8004934:	421d      	tst	r5, r3
 8004936:	d1b9      	bne.n	80048ac <HAL_UART_Transmit+0xa0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004938:	f7fd fe10 	bl	800255c <HAL_GetTick>
 800493c:	464b      	mov	r3, r9
 800493e:	1ac0      	subs	r0, r0, r3
 8004940:	4286      	cmp	r6, r0
 8004942:	d3e4      	bcc.n	800490e <HAL_UART_Transmit+0x102>
 8004944:	2e00      	cmp	r6, #0
 8004946:	d0e2      	beq.n	800490e <HAL_UART_Transmit+0x102>
 8004948:	6822      	ldr	r2, [r4, #0]
 800494a:	e7a9      	b.n	80048a0 <HAL_UART_Transmit+0x94>
 800494c:	6822      	ldr	r2, [r4, #0]
 800494e:	e7a6      	b.n	800489e <HAL_UART_Transmit+0x92>
 8004950:	fffffe5f 	.word	0xfffffe5f

08004954 <HAL_UART_TxCpltCallback>:
 8004954:	4770      	bx	lr
 8004956:	46c0      	nop			; (mov r8, r8)

08004958 <HAL_UART_ErrorCallback>:
 8004958:	4770      	bx	lr
 800495a:	46c0      	nop			; (mov r8, r8)

0800495c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800495c:	6802      	ldr	r2, [r0, #0]
{
 800495e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004960:	69d3      	ldr	r3, [r2, #28]
{
 8004962:	0004      	movs	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004964:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004966:	6895      	ldr	r5, [r2, #8]
  if (errorflags == 0U)
 8004968:	0719      	lsls	r1, r3, #28
 800496a:	d11e      	bne.n	80049aa <HAL_UART_IRQHandler+0x4e>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800496c:	2120      	movs	r1, #32
 800496e:	4219      	tst	r1, r3
 8004970:	d002      	beq.n	8004978 <HAL_UART_IRQHandler+0x1c>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004972:	4201      	tst	r1, r0
 8004974:	d000      	beq.n	8004978 <HAL_UART_IRQHandler+0x1c>
 8004976:	e07a      	b.n	8004a6e <HAL_UART_IRQHandler+0x112>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004978:	2180      	movs	r1, #128	; 0x80
 800497a:	0349      	lsls	r1, r1, #13
 800497c:	420b      	tst	r3, r1
 800497e:	d002      	beq.n	8004986 <HAL_UART_IRQHandler+0x2a>
 8004980:	026d      	lsls	r5, r5, #9
 8004982:	d500      	bpl.n	8004986 <HAL_UART_IRQHandler+0x2a>
 8004984:	e077      	b.n	8004a76 <HAL_UART_IRQHandler+0x11a>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004986:	2180      	movs	r1, #128	; 0x80
 8004988:	4219      	tst	r1, r3
 800498a:	d106      	bne.n	800499a <HAL_UART_IRQHandler+0x3e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800498c:	2140      	movs	r1, #64	; 0x40
 800498e:	4219      	tst	r1, r3
 8004990:	d002      	beq.n	8004998 <HAL_UART_IRQHandler+0x3c>
 8004992:	4201      	tst	r1, r0
 8004994:	d000      	beq.n	8004998 <HAL_UART_IRQHandler+0x3c>
 8004996:	e077      	b.n	8004a88 <HAL_UART_IRQHandler+0x12c>
}
 8004998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800499a:	4201      	tst	r1, r0
 800499c:	d0f6      	beq.n	800498c <HAL_UART_IRQHandler+0x30>
    if (huart->TxISR != NULL)
 800499e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d0f9      	beq.n	8004998 <HAL_UART_IRQHandler+0x3c>
      huart->TxISR(huart);
 80049a4:	0020      	movs	r0, r4
 80049a6:	4798      	blx	r3
 80049a8:	e7f6      	b.n	8004998 <HAL_UART_IRQHandler+0x3c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80049aa:	2601      	movs	r6, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80049ac:	2190      	movs	r1, #144	; 0x90
      && (((cr3its & USART_CR3_EIE) != 0U)
 80049ae:	0037      	movs	r7, r6
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80049b0:	0049      	lsls	r1, r1, #1
      && (((cr3its & USART_CR3_EIE) != 0U)
 80049b2:	402f      	ands	r7, r5
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80049b4:	4001      	ands	r1, r0
 80049b6:	4339      	orrs	r1, r7
 80049b8:	d0de      	beq.n	8004978 <HAL_UART_IRQHandler+0x1c>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80049ba:	421e      	tst	r6, r3
 80049bc:	d005      	beq.n	80049ca <HAL_UART_IRQHandler+0x6e>
 80049be:	05c1      	lsls	r1, r0, #23
 80049c0:	d503      	bpl.n	80049ca <HAL_UART_IRQHandler+0x6e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80049c2:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049c4:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80049c6:	430e      	orrs	r6, r1
 80049c8:	67e6      	str	r6, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049ca:	2102      	movs	r1, #2
 80049cc:	4219      	tst	r1, r3
 80049ce:	d043      	beq.n	8004a58 <HAL_UART_IRQHandler+0xfc>
 80049d0:	2f00      	cmp	r7, #0
 80049d2:	d006      	beq.n	80049e2 <HAL_UART_IRQHandler+0x86>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049d4:	2504      	movs	r5, #4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80049d6:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049d8:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80049da:	4329      	orrs	r1, r5
 80049dc:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049de:	421d      	tst	r5, r3
 80049e0:	d13e      	bne.n	8004a60 <HAL_UART_IRQHandler+0x104>
    if (((isrflags & USART_ISR_ORE) != 0U)
 80049e2:	2508      	movs	r5, #8
 80049e4:	421d      	tst	r5, r3
 80049e6:	d007      	beq.n	80049f8 <HAL_UART_IRQHandler+0x9c>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80049e8:	2120      	movs	r1, #32
 80049ea:	4001      	ands	r1, r0
 80049ec:	430f      	orrs	r7, r1
 80049ee:	d003      	beq.n	80049f8 <HAL_UART_IRQHandler+0x9c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80049f0:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049f2:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80049f4:	430d      	orrs	r5, r1
 80049f6:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049f8:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80049fa:	2900      	cmp	r1, #0
 80049fc:	d0cc      	beq.n	8004998 <HAL_UART_IRQHandler+0x3c>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80049fe:	2120      	movs	r1, #32
 8004a00:	4219      	tst	r1, r3
 8004a02:	d001      	beq.n	8004a08 <HAL_UART_IRQHandler+0xac>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004a04:	4201      	tst	r1, r0
 8004a06:	d14a      	bne.n	8004a9e <HAL_UART_IRQHandler+0x142>
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a08:	2140      	movs	r1, #64	; 0x40
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8004a0a:	2308      	movs	r3, #8
      errorcode = huart->ErrorCode;
 8004a0c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a0e:	6895      	ldr	r5, [r2, #8]
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8004a10:	4003      	ands	r3, r0
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a12:	400d      	ands	r5, r1
 8004a14:	431d      	orrs	r5, r3
 8004a16:	d049      	beq.n	8004aac <HAL_UART_IRQHandler+0x150>
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a18:	6813      	ldr	r3, [r2, #0]
 8004a1a:	4827      	ldr	r0, [pc, #156]	; (8004ab8 <HAL_UART_IRQHandler+0x15c>)
 8004a1c:	4003      	ands	r3, r0
 8004a1e:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a20:	6893      	ldr	r3, [r2, #8]
 8004a22:	3023      	adds	r0, #35	; 0x23
 8004a24:	30ff      	adds	r0, #255	; 0xff
 8004a26:	4383      	bics	r3, r0
 8004a28:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a2a:	2320      	movs	r3, #32
 8004a2c:	67a3      	str	r3, [r4, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	6623      	str	r3, [r4, #96]	; 0x60
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a32:	6893      	ldr	r3, [r2, #8]
 8004a34:	4219      	tst	r1, r3
 8004a36:	d023      	beq.n	8004a80 <HAL_UART_IRQHandler+0x124>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a38:	6893      	ldr	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 8004a3a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a3c:	438b      	bics	r3, r1
 8004a3e:	6093      	str	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 8004a40:	2800      	cmp	r0, #0
 8004a42:	d01d      	beq.n	8004a80 <HAL_UART_IRQHandler+0x124>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a44:	4b1d      	ldr	r3, [pc, #116]	; (8004abc <HAL_UART_IRQHandler+0x160>)
 8004a46:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a48:	f7fe f9e2 	bl	8002e10 <HAL_DMA_Abort_IT>
 8004a4c:	2800      	cmp	r0, #0
 8004a4e:	d0a3      	beq.n	8004998 <HAL_UART_IRQHandler+0x3c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a50:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8004a52:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004a54:	4798      	blx	r3
 8004a56:	e79f      	b.n	8004998 <HAL_UART_IRQHandler+0x3c>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a58:	0759      	lsls	r1, r3, #29
 8004a5a:	d5c2      	bpl.n	80049e2 <HAL_UART_IRQHandler+0x86>
 8004a5c:	2f00      	cmp	r7, #0
 8004a5e:	d0c0      	beq.n	80049e2 <HAL_UART_IRQHandler+0x86>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004a60:	2104      	movs	r1, #4
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a62:	2502      	movs	r5, #2
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004a64:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a66:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8004a68:	4329      	orrs	r1, r5
 8004a6a:	67e1      	str	r1, [r4, #124]	; 0x7c
 8004a6c:	e7b9      	b.n	80049e2 <HAL_UART_IRQHandler+0x86>
      if (huart->RxISR != NULL)
 8004a6e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d197      	bne.n	80049a4 <HAL_UART_IRQHandler+0x48>
 8004a74:	e790      	b.n	8004998 <HAL_UART_IRQHandler+0x3c>
    HAL_UARTEx_WakeupCallback(huart);
 8004a76:	0020      	movs	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004a78:	6211      	str	r1, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8004a7a:	f000 fa53 	bl	8004f24 <HAL_UARTEx_WakeupCallback>
    return;
 8004a7e:	e78b      	b.n	8004998 <HAL_UART_IRQHandler+0x3c>
            HAL_UART_ErrorCallback(huart);
 8004a80:	0020      	movs	r0, r4
 8004a82:	f7ff ff69 	bl	8004958 <HAL_UART_ErrorCallback>
 8004a86:	e787      	b.n	8004998 <HAL_UART_IRQHandler+0x3c>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a88:	6813      	ldr	r3, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a8a:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a8c:	438b      	bics	r3, r1
 8004a8e:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004a90:	2320      	movs	r3, #32
 8004a92:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 8004a94:	2300      	movs	r3, #0
 8004a96:	6663      	str	r3, [r4, #100]	; 0x64
  HAL_UART_TxCpltCallback(huart);
 8004a98:	f7ff ff5c 	bl	8004954 <HAL_UART_TxCpltCallback>
    return;
 8004a9c:	e77c      	b.n	8004998 <HAL_UART_IRQHandler+0x3c>
        if (huart->RxISR != NULL)
 8004a9e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d0b1      	beq.n	8004a08 <HAL_UART_IRQHandler+0xac>
          huart->RxISR(huart);
 8004aa4:	0020      	movs	r0, r4
 8004aa6:	4798      	blx	r3
 8004aa8:	6822      	ldr	r2, [r4, #0]
 8004aaa:	e7ad      	b.n	8004a08 <HAL_UART_IRQHandler+0xac>
        HAL_UART_ErrorCallback(huart);
 8004aac:	0020      	movs	r0, r4
 8004aae:	f7ff ff53 	bl	8004958 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ab2:	67e5      	str	r5, [r4, #124]	; 0x7c
 8004ab4:	e770      	b.n	8004998 <HAL_UART_IRQHandler+0x3c>
 8004ab6:	46c0      	nop			; (mov r8, r8)
 8004ab8:	fffffedf 	.word	0xfffffedf
 8004abc:	08004ac1 	.word	0x08004ac1

08004ac0 <UART_DMAAbortOnError>:
  huart->RxXferCount = 0U;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	225a      	movs	r2, #90	; 0x5a
{
 8004ac4:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ac6:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8004ac8:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 8004aca:	3a08      	subs	r2, #8
 8004acc:	5283      	strh	r3, [r0, r2]
  HAL_UART_ErrorCallback(huart);
 8004ace:	f7ff ff43 	bl	8004958 <HAL_UART_ErrorCallback>
}
 8004ad2:	bd10      	pop	{r4, pc}

08004ad4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ad4:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8004ad6:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ad8:	07da      	lsls	r2, r3, #31
 8004ada:	d506      	bpl.n	8004aea <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004adc:	6801      	ldr	r1, [r0, #0]
 8004ade:	4c28      	ldr	r4, [pc, #160]	; (8004b80 <UART_AdvFeatureConfig+0xac>)
 8004ae0:	684a      	ldr	r2, [r1, #4]
 8004ae2:	4022      	ands	r2, r4
 8004ae4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8004ae6:	4322      	orrs	r2, r4
 8004ae8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004aea:	079a      	lsls	r2, r3, #30
 8004aec:	d506      	bpl.n	8004afc <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004aee:	6801      	ldr	r1, [r0, #0]
 8004af0:	4c24      	ldr	r4, [pc, #144]	; (8004b84 <UART_AdvFeatureConfig+0xb0>)
 8004af2:	684a      	ldr	r2, [r1, #4]
 8004af4:	4022      	ands	r2, r4
 8004af6:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8004af8:	4322      	orrs	r2, r4
 8004afa:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004afc:	075a      	lsls	r2, r3, #29
 8004afe:	d506      	bpl.n	8004b0e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b00:	6801      	ldr	r1, [r0, #0]
 8004b02:	4c21      	ldr	r4, [pc, #132]	; (8004b88 <UART_AdvFeatureConfig+0xb4>)
 8004b04:	684a      	ldr	r2, [r1, #4]
 8004b06:	4022      	ands	r2, r4
 8004b08:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8004b0a:	4322      	orrs	r2, r4
 8004b0c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b0e:	071a      	lsls	r2, r3, #28
 8004b10:	d506      	bpl.n	8004b20 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b12:	6801      	ldr	r1, [r0, #0]
 8004b14:	4c1d      	ldr	r4, [pc, #116]	; (8004b8c <UART_AdvFeatureConfig+0xb8>)
 8004b16:	684a      	ldr	r2, [r1, #4]
 8004b18:	4022      	ands	r2, r4
 8004b1a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8004b1c:	4322      	orrs	r2, r4
 8004b1e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b20:	06da      	lsls	r2, r3, #27
 8004b22:	d506      	bpl.n	8004b32 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b24:	6801      	ldr	r1, [r0, #0]
 8004b26:	4c1a      	ldr	r4, [pc, #104]	; (8004b90 <UART_AdvFeatureConfig+0xbc>)
 8004b28:	688a      	ldr	r2, [r1, #8]
 8004b2a:	4022      	ands	r2, r4
 8004b2c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8004b2e:	4322      	orrs	r2, r4
 8004b30:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b32:	069a      	lsls	r2, r3, #26
 8004b34:	d506      	bpl.n	8004b44 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b36:	6801      	ldr	r1, [r0, #0]
 8004b38:	4c16      	ldr	r4, [pc, #88]	; (8004b94 <UART_AdvFeatureConfig+0xc0>)
 8004b3a:	688a      	ldr	r2, [r1, #8]
 8004b3c:	4022      	ands	r2, r4
 8004b3e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8004b40:	4322      	orrs	r2, r4
 8004b42:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b44:	065a      	lsls	r2, r3, #25
 8004b46:	d50a      	bpl.n	8004b5e <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b48:	6801      	ldr	r1, [r0, #0]
 8004b4a:	4d13      	ldr	r5, [pc, #76]	; (8004b98 <UART_AdvFeatureConfig+0xc4>)
 8004b4c:	684a      	ldr	r2, [r1, #4]
 8004b4e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8004b50:	402a      	ands	r2, r5
 8004b52:	4322      	orrs	r2, r4
 8004b54:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b56:	2280      	movs	r2, #128	; 0x80
 8004b58:	0352      	lsls	r2, r2, #13
 8004b5a:	4294      	cmp	r4, r2
 8004b5c:	d009      	beq.n	8004b72 <UART_AdvFeatureConfig+0x9e>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b5e:	061b      	lsls	r3, r3, #24
 8004b60:	d506      	bpl.n	8004b70 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b62:	6802      	ldr	r2, [r0, #0]
 8004b64:	490d      	ldr	r1, [pc, #52]	; (8004b9c <UART_AdvFeatureConfig+0xc8>)
 8004b66:	6853      	ldr	r3, [r2, #4]
 8004b68:	400b      	ands	r3, r1
 8004b6a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004b6c:	430b      	orrs	r3, r1
 8004b6e:	6053      	str	r3, [r2, #4]
}
 8004b70:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b72:	684a      	ldr	r2, [r1, #4]
 8004b74:	4c0a      	ldr	r4, [pc, #40]	; (8004ba0 <UART_AdvFeatureConfig+0xcc>)
 8004b76:	4022      	ands	r2, r4
 8004b78:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8004b7a:	4322      	orrs	r2, r4
 8004b7c:	604a      	str	r2, [r1, #4]
 8004b7e:	e7ee      	b.n	8004b5e <UART_AdvFeatureConfig+0x8a>
 8004b80:	fffdffff 	.word	0xfffdffff
 8004b84:	fffeffff 	.word	0xfffeffff
 8004b88:	fffbffff 	.word	0xfffbffff
 8004b8c:	ffff7fff 	.word	0xffff7fff
 8004b90:	ffffefff 	.word	0xffffefff
 8004b94:	ffffdfff 	.word	0xffffdfff
 8004b98:	ffefffff 	.word	0xffefffff
 8004b9c:	fff7ffff 	.word	0xfff7ffff
 8004ba0:	ff9fffff 	.word	0xff9fffff

08004ba4 <UART_CheckIdleState>:
{
 8004ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ba6:	2300      	movs	r3, #0
{
 8004ba8:	46c6      	mov	lr, r8
 8004baa:	0004      	movs	r4, r0
 8004bac:	b500      	push	{lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bae:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8004bb0:	f7fd fcd4 	bl	800255c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bb4:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8004bb6:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	0712      	lsls	r2, r2, #28
 8004bbc:	d40c      	bmi.n	8004bd8 <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	0752      	lsls	r2, r2, #29
 8004bc2:	d42a      	bmi.n	8004c1a <UART_CheckIdleState+0x76>
  huart->gState = HAL_UART_STATE_READY;
 8004bc4:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8004bc6:	2200      	movs	r2, #0
  return HAL_OK;
 8004bc8:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8004bca:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004bcc:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8004bce:	3350      	adds	r3, #80	; 0x50
 8004bd0:	54e2      	strb	r2, [r4, r3]
}
 8004bd2:	bc80      	pop	{r7}
 8004bd4:	46b8      	mov	r8, r7
 8004bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bd8:	2680      	movs	r6, #128	; 0x80
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bda:	2780      	movs	r7, #128	; 0x80
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bdc:	03b6      	lsls	r6, r6, #14
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bde:	04bf      	lsls	r7, r7, #18
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004be0:	69da      	ldr	r2, [r3, #28]
 8004be2:	0011      	movs	r1, r2
 8004be4:	4031      	ands	r1, r6
 8004be6:	4688      	mov	r8, r1
 8004be8:	4232      	tst	r2, r6
 8004bea:	d1e8      	bne.n	8004bbe <UART_CheckIdleState+0x1a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bec:	f7fd fcb6 	bl	800255c <HAL_GetTick>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bf0:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bf2:	1b40      	subs	r0, r0, r5
 8004bf4:	42b8      	cmp	r0, r7
 8004bf6:	d3f3      	bcc.n	8004be0 <UART_CheckIdleState+0x3c>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	4910      	ldr	r1, [pc, #64]	; (8004c3c <UART_CheckIdleState+0x98>)
      return HAL_TIMEOUT;
 8004bfc:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bfe:	400a      	ands	r2, r1
 8004c00:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c02:	689a      	ldr	r2, [r3, #8]
 8004c04:	31a3      	adds	r1, #163	; 0xa3
 8004c06:	31ff      	adds	r1, #255	; 0xff
 8004c08:	438a      	bics	r2, r1
 8004c0a:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8004c0c:	2320      	movs	r3, #32
        __HAL_UNLOCK(huart);
 8004c0e:	4642      	mov	r2, r8
        huart->gState = HAL_UART_STATE_READY;
 8004c10:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004c12:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8004c14:	3350      	adds	r3, #80	; 0x50
 8004c16:	54e2      	strb	r2, [r4, r3]
        return HAL_TIMEOUT;
 8004c18:	e7db      	b.n	8004bd2 <UART_CheckIdleState+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c1a:	2680      	movs	r6, #128	; 0x80
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c1c:	2780      	movs	r7, #128	; 0x80
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c1e:	03f6      	lsls	r6, r6, #15
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c20:	04bf      	lsls	r7, r7, #18
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c22:	69db      	ldr	r3, [r3, #28]
 8004c24:	001a      	movs	r2, r3
 8004c26:	4032      	ands	r2, r6
 8004c28:	4690      	mov	r8, r2
 8004c2a:	4233      	tst	r3, r6
 8004c2c:	d1ca      	bne.n	8004bc4 <UART_CheckIdleState+0x20>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c2e:	f7fd fc95 	bl	800255c <HAL_GetTick>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c32:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c34:	1b40      	subs	r0, r0, r5
 8004c36:	42b8      	cmp	r0, r7
 8004c38:	d3f3      	bcc.n	8004c22 <UART_CheckIdleState+0x7e>
 8004c3a:	e7dd      	b.n	8004bf8 <UART_CheckIdleState+0x54>
 8004c3c:	fffffe5f 	.word	0xfffffe5f

08004c40 <HAL_UART_Init>:
{
 8004c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c42:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8004c44:	d030      	beq.n	8004ca8 <HAL_UART_Init+0x68>
  if (huart->gState == HAL_UART_STATE_RESET)
 8004c46:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d044      	beq.n	8004cd6 <HAL_UART_Init+0x96>
  huart->gState = HAL_UART_STATE_BUSY;
 8004c4c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8004c4e:	2101      	movs	r1, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8004c50:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8004c52:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c54:	6925      	ldr	r5, [r4, #16]
  __HAL_UART_DISABLE(huart);
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	438a      	bics	r2, r1
 8004c5a:	601a      	str	r2, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c5c:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c5e:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c60:	432a      	orrs	r2, r5
 8004c62:	6965      	ldr	r5, [r4, #20]
 8004c64:	69e1      	ldr	r1, [r4, #28]
 8004c66:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c68:	4d9a      	ldr	r5, [pc, #616]	; (8004ed4 <HAL_UART_Init+0x294>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c6a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c6c:	4028      	ands	r0, r5
 8004c6e:	4302      	orrs	r2, r0
 8004c70:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c72:	685a      	ldr	r2, [r3, #4]
 8004c74:	4898      	ldr	r0, [pc, #608]	; (8004ed8 <HAL_UART_Init+0x298>)
 8004c76:	4002      	ands	r2, r0
 8004c78:	68e0      	ldr	r0, [r4, #12]
 8004c7a:	4302      	orrs	r2, r0
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c7c:	4897      	ldr	r0, [pc, #604]	; (8004edc <HAL_UART_Init+0x29c>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c7e:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c80:	69a2      	ldr	r2, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c82:	4283      	cmp	r3, r0
 8004c84:	d02c      	beq.n	8004ce0 <HAL_UART_Init+0xa0>
    tmpreg |= huart->Init.OneBitSampling;
 8004c86:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c88:	6898      	ldr	r0, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8004c8a:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c8c:	4d94      	ldr	r5, [pc, #592]	; (8004ee0 <HAL_UART_Init+0x2a0>)
 8004c8e:	4028      	ands	r0, r5
 8004c90:	4302      	orrs	r2, r0
 8004c92:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c94:	4a93      	ldr	r2, [pc, #588]	; (8004ee4 <HAL_UART_Init+0x2a4>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d008      	beq.n	8004cac <HAL_UART_Init+0x6c>
 8004c9a:	4a93      	ldr	r2, [pc, #588]	; (8004ee8 <HAL_UART_Init+0x2a8>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d100      	bne.n	8004ca2 <HAL_UART_Init+0x62>
 8004ca0:	e0ca      	b.n	8004e38 <HAL_UART_Init+0x1f8>
  huart->RxISR = NULL;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8004ca6:	6663      	str	r3, [r4, #100]	; 0x64
    return HAL_ERROR;
 8004ca8:	2001      	movs	r0, #1
}
 8004caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cac:	4b8f      	ldr	r3, [pc, #572]	; (8004eec <HAL_UART_Init+0x2ac>)
 8004cae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d900      	bls.n	8004cbc <HAL_UART_Init+0x7c>
 8004cba:	e089      	b.n	8004dd0 <HAL_UART_Init+0x190>
 8004cbc:	4a8c      	ldr	r2, [pc, #560]	; (8004ef0 <HAL_UART_Init+0x2b0>)
 8004cbe:	5cd5      	ldrb	r5, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cc0:	2380      	movs	r3, #128	; 0x80
 8004cc2:	021b      	lsls	r3, r3, #8
 8004cc4:	4299      	cmp	r1, r3
 8004cc6:	d100      	bne.n	8004cca <HAL_UART_Init+0x8a>
 8004cc8:	e092      	b.n	8004df0 <HAL_UART_Init+0x1b0>
    switch (clocksource)
 8004cca:	2d08      	cmp	r5, #8
 8004ccc:	d8e9      	bhi.n	8004ca2 <HAL_UART_Init+0x62>
 8004cce:	4b89      	ldr	r3, [pc, #548]	; (8004ef4 <HAL_UART_Init+0x2b4>)
 8004cd0:	00ad      	lsls	r5, r5, #2
 8004cd2:	595b      	ldr	r3, [r3, r5]
 8004cd4:	469f      	mov	pc, r3
    huart->Lock = HAL_UNLOCKED;
 8004cd6:	2270      	movs	r2, #112	; 0x70
 8004cd8:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 8004cda:	f001 f99d 	bl	8006018 <HAL_UART_MspInit>
 8004cde:	e7b5      	b.n	8004c4c <HAL_UART_Init+0xc>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ce0:	6899      	ldr	r1, [r3, #8]
 8004ce2:	487f      	ldr	r0, [pc, #508]	; (8004ee0 <HAL_UART_Init+0x2a0>)
 8004ce4:	4001      	ands	r1, r0
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cea:	22c0      	movs	r2, #192	; 0xc0
 8004cec:	2180      	movs	r1, #128	; 0x80
 8004cee:	487f      	ldr	r0, [pc, #508]	; (8004eec <HAL_UART_Init+0x2ac>)
 8004cf0:	0112      	lsls	r2, r2, #4
 8004cf2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004cf4:	0109      	lsls	r1, r1, #4
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	428b      	cmp	r3, r1
 8004cfa:	d100      	bne.n	8004cfe <HAL_UART_Init+0xbe>
 8004cfc:	e0d5      	b.n	8004eaa <HAL_UART_Init+0x26a>
 8004cfe:	d80d      	bhi.n	8004d1c <HAL_UART_Init+0xdc>
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d100      	bne.n	8004d06 <HAL_UART_Init+0xc6>
 8004d04:	e0ce      	b.n	8004ea4 <HAL_UART_Init+0x264>
 8004d06:	2280      	movs	r2, #128	; 0x80
 8004d08:	00d2      	lsls	r2, r2, #3
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d1c9      	bne.n	8004ca2 <HAL_UART_Init+0x62>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8004d0e:	f7fe fecd 	bl	8003aac <HAL_RCC_GetSysClockFreq>
    if (lpuart_ker_ck_pres != 0U)
 8004d12:	2800      	cmp	r0, #0
 8004d14:	d106      	bne.n	8004d24 <HAL_UART_Init+0xe4>
  huart->RxISR = NULL;
 8004d16:	6620      	str	r0, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8004d18:	6660      	str	r0, [r4, #100]	; 0x64
  return ret;
 8004d1a:	e037      	b.n	8004d8c <HAL_UART_Init+0x14c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d1c0      	bne.n	8004ca2 <HAL_UART_Init+0x62>
 8004d20:	2080      	movs	r0, #128	; 0x80
 8004d22:	0200      	lsls	r0, r0, #8
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d24:	6865      	ldr	r5, [r4, #4]
 8004d26:	006b      	lsls	r3, r5, #1
 8004d28:	195b      	adds	r3, r3, r5
 8004d2a:	4283      	cmp	r3, r0
 8004d2c:	d8b9      	bhi.n	8004ca2 <HAL_UART_Init+0x62>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004d2e:	032b      	lsls	r3, r5, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d30:	4298      	cmp	r0, r3
 8004d32:	d8b6      	bhi.n	8004ca2 <HAL_UART_Init+0x62>
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8004d34:	2700      	movs	r7, #0
 8004d36:	0e03      	lsrs	r3, r0, #24
 8004d38:	0202      	lsls	r2, r0, #8
 8004d3a:	086e      	lsrs	r6, r5, #1
 8004d3c:	1992      	adds	r2, r2, r6
 8004d3e:	417b      	adcs	r3, r7
 8004d40:	0010      	movs	r0, r2
 8004d42:	0019      	movs	r1, r3
 8004d44:	002a      	movs	r2, r5
 8004d46:	2300      	movs	r3, #0
 8004d48:	f7fb fbae 	bl	80004a8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d4c:	4b6a      	ldr	r3, [pc, #424]	; (8004ef8 <HAL_UART_Init+0x2b8>)
 8004d4e:	18c2      	adds	r2, r0, r3
 8004d50:	4b6a      	ldr	r3, [pc, #424]	; (8004efc <HAL_UART_Init+0x2bc>)
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d8a5      	bhi.n	8004ca2 <HAL_UART_Init+0x62>
          huart->Instance->BRR = usartdiv;
 8004d56:	6823      	ldr	r3, [r4, #0]
 8004d58:	60d8      	str	r0, [r3, #12]
  huart->RxISR = NULL;
 8004d5a:	6627      	str	r7, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8004d5c:	6667      	str	r7, [r4, #100]	; 0x64
  return ret;
 8004d5e:	e015      	b.n	8004d8c <HAL_UART_Init+0x14c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004d60:	6863      	ldr	r3, [r4, #4]
 8004d62:	0858      	lsrs	r0, r3, #1
 8004d64:	2380      	movs	r3, #128	; 0x80
 8004d66:	021b      	lsls	r3, r3, #8
 8004d68:	469c      	mov	ip, r3
 8004d6a:	4460      	add	r0, ip
 8004d6c:	6861      	ldr	r1, [r4, #4]
 8004d6e:	f7fb f9e7 	bl	8000140 <__udivsi3>
 8004d72:	0400      	lsls	r0, r0, #16
 8004d74:	0c00      	lsrs	r0, r0, #16
        break;
 8004d76:	0003      	movs	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d78:	4a61      	ldr	r2, [pc, #388]	; (8004f00 <HAL_UART_Init+0x2c0>)
 8004d7a:	3b10      	subs	r3, #16
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d900      	bls.n	8004d82 <HAL_UART_Init+0x142>
 8004d80:	e78f      	b.n	8004ca2 <HAL_UART_Init+0x62>
      huart->Instance->BRR = usartdiv;
 8004d82:	6823      	ldr	r3, [r4, #0]
 8004d84:	60d8      	str	r0, [r3, #12]
  huart->RxISR = NULL;
 8004d86:	2300      	movs	r3, #0
 8004d88:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8004d8a:	6663      	str	r3, [r4, #100]	; 0x64
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d14e      	bne.n	8004e30 <HAL_UART_Init+0x1f0>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d92:	6823      	ldr	r3, [r4, #0]
 8004d94:	495b      	ldr	r1, [pc, #364]	; (8004f04 <HAL_UART_Init+0x2c4>)
 8004d96:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8004d98:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d9a:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d9c:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004da0:	689a      	ldr	r2, [r3, #8]
 8004da2:	438a      	bics	r2, r1
 8004da4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	3929      	subs	r1, #41	; 0x29
 8004daa:	430a      	orrs	r2, r1
 8004dac:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8004dae:	f7ff fef9 	bl	8004ba4 <UART_CheckIdleState>
 8004db2:	e77a      	b.n	8004caa <HAL_UART_Init+0x6a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004db4:	f7fe fe7a 	bl	8003aac <HAL_RCC_GetSysClockFreq>
 8004db8:	6863      	ldr	r3, [r4, #4]
 8004dba:	085b      	lsrs	r3, r3, #1
 8004dbc:	1818      	adds	r0, r3, r0
 8004dbe:	e7d5      	b.n	8004d6c <HAL_UART_Init+0x12c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004dc0:	4b4a      	ldr	r3, [pc, #296]	; (8004eec <HAL_UART_Init+0x2ac>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	06db      	lsls	r3, r3, #27
 8004dc6:	d57c      	bpl.n	8004ec2 <HAL_UART_Init+0x282>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8004dc8:	6863      	ldr	r3, [r4, #4]
 8004dca:	0858      	lsrs	r0, r3, #1
 8004dcc:	4b4e      	ldr	r3, [pc, #312]	; (8004f08 <HAL_UART_Init+0x2c8>)
 8004dce:	e7cb      	b.n	8004d68 <HAL_UART_Init+0x128>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dd0:	2380      	movs	r3, #128	; 0x80
 8004dd2:	021b      	lsls	r3, r3, #8
 8004dd4:	4299      	cmp	r1, r3
 8004dd6:	d05e      	beq.n	8004e96 <HAL_UART_Init+0x256>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004dd8:	f7ff fa84 	bl	80042e4 <HAL_RCC_GetPCLK2Freq>
 8004ddc:	6863      	ldr	r3, [r4, #4]
 8004dde:	085b      	lsrs	r3, r3, #1
 8004de0:	1818      	adds	r0, r3, r0
 8004de2:	e7c3      	b.n	8004d6c <HAL_UART_Init+0x12c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004de4:	f7ff fa6e 	bl	80042c4 <HAL_RCC_GetPCLK1Freq>
 8004de8:	6863      	ldr	r3, [r4, #4]
 8004dea:	085b      	lsrs	r3, r3, #1
 8004dec:	1818      	adds	r0, r3, r0
 8004dee:	e7bd      	b.n	8004d6c <HAL_UART_Init+0x12c>
    switch (clocksource)
 8004df0:	2d08      	cmp	r5, #8
 8004df2:	d803      	bhi.n	8004dfc <HAL_UART_Init+0x1bc>
 8004df4:	4a45      	ldr	r2, [pc, #276]	; (8004f0c <HAL_UART_Init+0x2cc>)
 8004df6:	00ab      	lsls	r3, r5, #2
 8004df8:	58d3      	ldr	r3, [r2, r3]
 8004dfa:	469f      	mov	pc, r3
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dfc:	2501      	movs	r5, #1
 8004dfe:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e00:	0003      	movs	r3, r0
 8004e02:	4a3f      	ldr	r2, [pc, #252]	; (8004f00 <HAL_UART_Init+0x2c0>)
 8004e04:	3b10      	subs	r3, #16
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d900      	bls.n	8004e0c <HAL_UART_Init+0x1cc>
 8004e0a:	e74a      	b.n	8004ca2 <HAL_UART_Init+0x62>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e0c:	230f      	movs	r3, #15
 8004e0e:	0002      	movs	r2, r0
 8004e10:	439a      	bics	r2, r3
 8004e12:	0013      	movs	r3, r2
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e14:	0700      	lsls	r0, r0, #28
 8004e16:	0f40      	lsrs	r0, r0, #29
      huart->Instance->BRR = brrtemp;
 8004e18:	4318      	orrs	r0, r3
  huart->RxISR = NULL;
 8004e1a:	2300      	movs	r3, #0
      huart->Instance->BRR = brrtemp;
 8004e1c:	6822      	ldr	r2, [r4, #0]
 8004e1e:	60d0      	str	r0, [r2, #12]
  huart->RxISR = NULL;
 8004e20:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8004e22:	6663      	str	r3, [r4, #100]	; 0x64
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e24:	2d01      	cmp	r5, #1
 8004e26:	d100      	bne.n	8004e2a <HAL_UART_Init+0x1ea>
 8004e28:	e73e      	b.n	8004ca8 <HAL_UART_Init+0x68>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d0b0      	beq.n	8004d92 <HAL_UART_Init+0x152>
    UART_AdvFeatureConfig(huart);
 8004e30:	0020      	movs	r0, r4
 8004e32:	f7ff fe4f 	bl	8004ad4 <UART_AdvFeatureConfig>
 8004e36:	e7ac      	b.n	8004d92 <HAL_UART_Init+0x152>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e38:	4b2c      	ldr	r3, [pc, #176]	; (8004eec <HAL_UART_Init+0x2ac>)
 8004e3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e3c:	230c      	movs	r3, #12
 8004e3e:	4013      	ands	r3, r2
 8004e40:	4a33      	ldr	r2, [pc, #204]	; (8004f10 <HAL_UART_Init+0x2d0>)
 8004e42:	5cd5      	ldrb	r5, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e44:	e73c      	b.n	8004cc0 <HAL_UART_Init+0x80>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004e46:	6863      	ldr	r3, [r4, #4]
 8004e48:	0858      	lsrs	r0, r3, #1
 8004e4a:	2380      	movs	r3, #128	; 0x80
 8004e4c:	025b      	lsls	r3, r3, #9
 8004e4e:	469c      	mov	ip, r3
 8004e50:	4460      	add	r0, ip
 8004e52:	6861      	ldr	r1, [r4, #4]
 8004e54:	f7fb f974 	bl	8000140 <__udivsi3>
 8004e58:	0400      	lsls	r0, r0, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e5a:	2500      	movs	r5, #0
 8004e5c:	0c00      	lsrs	r0, r0, #16
        break;
 8004e5e:	e7cf      	b.n	8004e00 <HAL_UART_Init+0x1c0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004e60:	f7fe fe24 	bl	8003aac <HAL_RCC_GetSysClockFreq>
 8004e64:	6863      	ldr	r3, [r4, #4]
 8004e66:	0040      	lsls	r0, r0, #1
 8004e68:	085b      	lsrs	r3, r3, #1
 8004e6a:	18c0      	adds	r0, r0, r3
 8004e6c:	e7f1      	b.n	8004e52 <HAL_UART_Init+0x212>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e6e:	4b1f      	ldr	r3, [pc, #124]	; (8004eec <HAL_UART_Init+0x2ac>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	06db      	lsls	r3, r3, #27
 8004e74:	d529      	bpl.n	8004eca <HAL_UART_Init+0x28a>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8004e76:	6863      	ldr	r3, [r4, #4]
 8004e78:	0858      	lsrs	r0, r3, #1
 8004e7a:	4b26      	ldr	r3, [pc, #152]	; (8004f14 <HAL_UART_Init+0x2d4>)
 8004e7c:	e7e7      	b.n	8004e4e <HAL_UART_Init+0x20e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004e7e:	f7ff fa21 	bl	80042c4 <HAL_RCC_GetPCLK1Freq>
 8004e82:	6863      	ldr	r3, [r4, #4]
 8004e84:	0040      	lsls	r0, r0, #1
 8004e86:	085b      	lsrs	r3, r3, #1
 8004e88:	6861      	ldr	r1, [r4, #4]
 8004e8a:	18c0      	adds	r0, r0, r3
 8004e8c:	f7fb f958 	bl	8000140 <__udivsi3>
 8004e90:	0400      	lsls	r0, r0, #16
 8004e92:	0c00      	lsrs	r0, r0, #16
        break;
 8004e94:	e7b4      	b.n	8004e00 <HAL_UART_Init+0x1c0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004e96:	f7ff fa25 	bl	80042e4 <HAL_RCC_GetPCLK2Freq>
 8004e9a:	6863      	ldr	r3, [r4, #4]
 8004e9c:	0040      	lsls	r0, r0, #1
 8004e9e:	085b      	lsrs	r3, r3, #1
 8004ea0:	18c0      	adds	r0, r0, r3
 8004ea2:	e7d6      	b.n	8004e52 <HAL_UART_Init+0x212>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8004ea4:	f7ff fa0e 	bl	80042c4 <HAL_RCC_GetPCLK1Freq>
        break;
 8004ea8:	e733      	b.n	8004d12 <HAL_UART_Init+0xd2>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004eaa:	6803      	ldr	r3, [r0, #0]
 8004eac:	2010      	movs	r0, #16
 8004eae:	4018      	ands	r0, r3
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8004eb0:	4243      	negs	r3, r0
 8004eb2:	4158      	adcs	r0, r3
 8004eb4:	4b18      	ldr	r3, [pc, #96]	; (8004f18 <HAL_UART_Init+0x2d8>)
 8004eb6:	4240      	negs	r0, r0
 8004eb8:	4018      	ands	r0, r3
 8004eba:	4b13      	ldr	r3, [pc, #76]	; (8004f08 <HAL_UART_Init+0x2c8>)
 8004ebc:	469c      	mov	ip, r3
 8004ebe:	4460      	add	r0, ip
 8004ec0:	e730      	b.n	8004d24 <HAL_UART_Init+0xe4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004ec2:	6863      	ldr	r3, [r4, #4]
 8004ec4:	0858      	lsrs	r0, r3, #1
 8004ec6:	4b15      	ldr	r3, [pc, #84]	; (8004f1c <HAL_UART_Init+0x2dc>)
 8004ec8:	e74e      	b.n	8004d68 <HAL_UART_Init+0x128>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004eca:	6863      	ldr	r3, [r4, #4]
 8004ecc:	0858      	lsrs	r0, r3, #1
 8004ece:	4b14      	ldr	r3, [pc, #80]	; (8004f20 <HAL_UART_Init+0x2e0>)
 8004ed0:	e7bd      	b.n	8004e4e <HAL_UART_Init+0x20e>
 8004ed2:	46c0      	nop			; (mov r8, r8)
 8004ed4:	efff69f3 	.word	0xefff69f3
 8004ed8:	ffffcfff 	.word	0xffffcfff
 8004edc:	40004800 	.word	0x40004800
 8004ee0:	fffff4ff 	.word	0xfffff4ff
 8004ee4:	40013800 	.word	0x40013800
 8004ee8:	40004400 	.word	0x40004400
 8004eec:	40021000 	.word	0x40021000
 8004ef0:	0800ad50 	.word	0x0800ad50
 8004ef4:	0800ad08 	.word	0x0800ad08
 8004ef8:	fffffd00 	.word	0xfffffd00
 8004efc:	000ffcff 	.word	0x000ffcff
 8004f00:	0000ffef 	.word	0x0000ffef
 8004f04:	ffffb7ff 	.word	0xffffb7ff
 8004f08:	003d0900 	.word	0x003d0900
 8004f0c:	0800ad2c 	.word	0x0800ad2c
 8004f10:	0800ad54 	.word	0x0800ad54
 8004f14:	007a1200 	.word	0x007a1200
 8004f18:	00b71b00 	.word	0x00b71b00
 8004f1c:	00f42400 	.word	0x00f42400
 8004f20:	01e84800 	.word	0x01e84800

08004f24 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004f24:	4770      	bx	lr
 8004f26:	46c0      	nop			; (mov r8, r8)

08004f28 <l70_init>:

/*
 * init gps
 */
void l70_init() {
	l70 = &l70_info;
 8004f28:	4b05      	ldr	r3, [pc, #20]	; (8004f40 <l70_init+0x18>)
 8004f2a:	4a06      	ldr	r2, [pc, #24]	; (8004f44 <l70_init+0x1c>)
 8004f2c:	6013      	str	r3, [r2, #0]

	l70->time = 0;
 8004f2e:	2200      	movs	r2, #0
 8004f30:	601a      	str	r2, [r3, #0]
	l70->lat = 0;
 8004f32:	605a      	str	r2, [r3, #4]
	l70->lat_ns = 0;
 8004f34:	721a      	strb	r2, [r3, #8]
	l70->lng = 0;
 8004f36:	60da      	str	r2, [r3, #12]
	l70->lng_ew = 0;
 8004f38:	821a      	strh	r2, [r3, #16]
	l70->speed = 0;
	l70->date = 0;
 8004f3a:	615a      	str	r2, [r3, #20]
}
 8004f3c:	4770      	bx	lr
 8004f3e:	46c0      	nop			; (mov r8, r8)
 8004f40:	20000214 	.word	0x20000214
 8004f44:	200002ac 	.word	0x200002ac

08004f48 <l70_mode>:
}

/*
 * gps nmea sentence output mode
 */
void l70_mode(uint8_t mode) {
 8004f48:	b510      	push	{r4, lr}
	//__HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);
	if (mode == 0) {
		usart_puts(&huart2, (char*) NMEA_NONE);
 8004f4a:	4c0d      	ldr	r4, [pc, #52]	; (8004f80 <l70_mode+0x38>)
	if (mode == 0) {
 8004f4c:	2800      	cmp	r0, #0
 8004f4e:	d008      	beq.n	8004f62 <l70_mode+0x1a>
	} else if (mode == 1) {
 8004f50:	2801      	cmp	r0, #1
 8004f52:	d010      	beq.n	8004f76 <l70_mode+0x2e>
		usart_puts(&huart2, (char*) RMC_1_PFIX);
	} else if (mode == 2) {
 8004f54:	2802      	cmp	r0, #2
 8004f56:	d009      	beq.n	8004f6c <l70_mode+0x24>
		usart_puts(&huart2, (char*) NMEA_ALL);
	}
	usart_puts(&huart2, (char*)"\r\n");
 8004f58:	0020      	movs	r0, r4
 8004f5a:	490a      	ldr	r1, [pc, #40]	; (8004f84 <l70_mode+0x3c>)
 8004f5c:	f001 f906 	bl	800616c <usart_puts>
	//__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
}
 8004f60:	bd10      	pop	{r4, pc}
		usart_puts(&huart2, (char*) NMEA_NONE);
 8004f62:	0020      	movs	r0, r4
 8004f64:	4908      	ldr	r1, [pc, #32]	; (8004f88 <l70_mode+0x40>)
 8004f66:	f001 f901 	bl	800616c <usart_puts>
 8004f6a:	e7f5      	b.n	8004f58 <l70_mode+0x10>
		usart_puts(&huart2, (char*) NMEA_ALL);
 8004f6c:	0020      	movs	r0, r4
 8004f6e:	4907      	ldr	r1, [pc, #28]	; (8004f8c <l70_mode+0x44>)
 8004f70:	f001 f8fc 	bl	800616c <usart_puts>
 8004f74:	e7f0      	b.n	8004f58 <l70_mode+0x10>
		usart_puts(&huart2, (char*) RMC_1_PFIX);
 8004f76:	0020      	movs	r0, r4
 8004f78:	4905      	ldr	r1, [pc, #20]	; (8004f90 <l70_mode+0x48>)
 8004f7a:	f001 f8f7 	bl	800616c <usart_puts>
 8004f7e:	e7eb      	b.n	8004f58 <l70_mode+0x10>
 8004f80:	20000808 	.word	0x20000808
 8004f84:	0800ad74 	.word	0x0800ad74
 8004f88:	0800ad78 	.word	0x0800ad78
 8004f8c:	0800ade0 	.word	0x0800ade0
 8004f90:	0800adac 	.word	0x0800adac

08004f94 <l70_parse>:
/*
 * parse gps nmea sentence, GPRMC
 */
uint8_t l70_parse(uint8_t *nmea, uint16_t len) {
 8004f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f96:	46d6      	mov	lr, sl
 8004f98:	464f      	mov	r7, r9
 8004f9a:	4646      	mov	r6, r8
	uint16_t size = len;
	double result;
	buf_cur_pos = 0;
 8004f9c:	2300      	movs	r3, #0
uint8_t l70_parse(uint8_t *nmea, uint16_t len) {
 8004f9e:	b5c0      	push	{r6, r7, lr}
	buf_cur_pos = 0;
 8004fa0:	4a71      	ldr	r2, [pc, #452]	; (8005168 <l70_parse+0x1d4>)
uint8_t l70_parse(uint8_t *nmea, uint16_t len) {
 8004fa2:	b084      	sub	sp, #16
	buf_cur_pos = 0;
 8004fa4:	8013      	strh	r3, [r2, #0]
uint8_t l70_parse(uint8_t *nmea, uint16_t len) {
 8004fa6:	0004      	movs	r4, r0
 8004fa8:	000f      	movs	r7, r1
	uint8_t x = 0;
	uint8_t y = 0;

	char buf[12] = { 0 };
 8004faa:	2208      	movs	r2, #8
 8004fac:	2100      	movs	r1, #0
 8004fae:	a802      	add	r0, sp, #8
 8004fb0:	9301      	str	r3, [sp, #4]
 8004fb2:	f001 f941 	bl	8006238 <memset>
	//char ut[40];

	p_gps = &gpsbuf[0];
 8004fb6:	4b6d      	ldr	r3, [pc, #436]	; (800516c <l70_parse+0x1d8>)
 8004fb8:	4d6d      	ldr	r5, [pc, #436]	; (8005170 <l70_parse+0x1dc>)
 8004fba:	4698      	mov	r8, r3
 8004fbc:	601d      	str	r5, [r3, #0]

	for (size = 0; size < len; size++) {
 8004fbe:	2f00      	cmp	r7, #0
 8004fc0:	d100      	bne.n	8004fc4 <l70_parse+0x30>
 8004fc2:	e0ca      	b.n	800515a <l70_parse+0x1c6>
		*(p_gps + size) = *(nmea + size);
 8004fc4:	7823      	ldrb	r3, [r4, #0]
 8004fc6:	702b      	strb	r3, [r5, #0]
	for (size = 0; size < len; size++) {
 8004fc8:	2301      	movs	r3, #1
 8004fca:	2f01      	cmp	r7, #1
 8004fcc:	d907      	bls.n	8004fde <l70_parse+0x4a>
		*(p_gps + size) = *(nmea + size);
 8004fce:	4641      	mov	r1, r8
 8004fd0:	5ce2      	ldrb	r2, [r4, r3]
 8004fd2:	6809      	ldr	r1, [r1, #0]
 8004fd4:	54ca      	strb	r2, [r1, r3]
	for (size = 0; size < len; size++) {
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	b29a      	uxth	r2, r3
 8004fda:	4297      	cmp	r7, r2
 8004fdc:	d8f7      	bhi.n	8004fce <l70_parse+0x3a>
 8004fde:	4643      	mov	r3, r8
 8004fe0:	6819      	ldr	r1, [r3, #0]
 8004fe2:	1c7a      	adds	r2, r7, #1
	}
	*(p_gps + size + 1) = 0;
 8004fe4:	2300      	movs	r3, #0

	if (strstr((char*) gpsbuf, "$GPRMC") && strstr((char*) gpsbuf, "*")) {
 8004fe6:	0028      	movs	r0, r5
	*(p_gps + size + 1) = 0;
 8004fe8:	548b      	strb	r3, [r1, r2]
	if (strstr((char*) gpsbuf, "$GPRMC") && strstr((char*) gpsbuf, "*")) {
 8004fea:	4962      	ldr	r1, [pc, #392]	; (8005174 <l70_parse+0x1e0>)
 8004fec:	f001 ffe0 	bl	8006fb0 <strstr>
 8004ff0:	2800      	cmp	r0, #0
 8004ff2:	d020      	beq.n	8005036 <l70_parse+0xa2>
 8004ff4:	212a      	movs	r1, #42	; 0x2a
 8004ff6:	0028      	movs	r0, r5
 8004ff8:	f001 ffcc 	bl	8006f94 <strchr>
 8004ffc:	2800      	cmp	r0, #0
 8004ffe:	d01a      	beq.n	8005036 <l70_parse+0xa2>
		/*usart_puts(&huart1, (char*) gpsbuf);
		 usart_puts(&huart1, (char*) "\r\n");*/

		//strtok((char*) gpsbuf, ","); //nmea msg
		//p_gps = &gpsbuf[0];
		for (size = 0; size < len; size++) {
 8005000:	2f00      	cmp	r7, #0
 8005002:	d018      	beq.n	8005036 <l70_parse+0xa2>
 8005004:	2600      	movs	r6, #0
	uint8_t y = 0;
 8005006:	2500      	movs	r5, #0
	uint8_t x = 0;
 8005008:	2300      	movs	r3, #0
 800500a:	e007      	b.n	800501c <l70_parse+0x88>
				memset(buf, 0, 12);
				x = 0;
				y++;
				//size++;
			} else {
				buf[x++] = *(p_gps + size); //*p_gps++;
 800500c:	1c59      	adds	r1, r3, #1
 800500e:	ac01      	add	r4, sp, #4
 8005010:	54e2      	strb	r2, [r4, r3]
 8005012:	b2cb      	uxtb	r3, r1
		for (size = 0; size < len; size++) {
 8005014:	3601      	adds	r6, #1
 8005016:	b2b2      	uxth	r2, r6
 8005018:	4297      	cmp	r7, r2
 800501a:	d90c      	bls.n	8005036 <l70_parse+0xa2>
			if (*(p_gps + size) == ',') {
 800501c:	4642      	mov	r2, r8
 800501e:	6812      	ldr	r2, [r2, #0]
 8005020:	5d92      	ldrb	r2, [r2, r6]
 8005022:	2a2c      	cmp	r2, #44	; 0x2c
 8005024:	d1f2      	bne.n	800500c <l70_parse+0x78>
				if (x > 2) {
 8005026:	2b02      	cmp	r3, #2
 8005028:	d837      	bhi.n	800509a <l70_parse+0x106>
				switch (y) {
 800502a:	2d09      	cmp	r5, #9
 800502c:	d831      	bhi.n	8005092 <l70_parse+0xfe>
 800502e:	4a52      	ldr	r2, [pc, #328]	; (8005178 <l70_parse+0x1e4>)
 8005030:	00ab      	lsls	r3, r5, #2
 8005032:	58d3      	ldr	r3, [r2, r3]
 8005034:	469f      	mov	pc, r3
			}
		}
	}
	return 0;
 8005036:	2000      	movs	r0, #0
}
 8005038:	b004      	add	sp, #16
 800503a:	bce0      	pop	{r5, r6, r7}
 800503c:	46ba      	mov	sl, r7
 800503e:	46b1      	mov	r9, r6
 8005040:	46a8      	mov	r8, r5
 8005042:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (x > 2) {
 8005044:	2000      	movs	r0, #0
					l70->date = (uint32_t) result;
 8005046:	4b4d      	ldr	r3, [pc, #308]	; (800517c <l70_parse+0x1e8>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	6158      	str	r0, [r3, #20]
					return 1;
 800504c:	2001      	movs	r0, #1
 800504e:	e7f3      	b.n	8005038 <l70_parse+0xa4>
				if (x > 2) {
 8005050:	2000      	movs	r0, #0
 8005052:	ac01      	add	r4, sp, #4
					l70->speed = (uint8_t) (result * 1.852); // * 100.0);
 8005054:	4b49      	ldr	r3, [pc, #292]	; (800517c <l70_parse+0x1e8>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	7458      	strb	r0, [r3, #17]
				memset(buf, 0, 12);
 800505a:	220c      	movs	r2, #12
 800505c:	2100      	movs	r1, #0
 800505e:	0020      	movs	r0, r4
				y++;
 8005060:	3501      	adds	r5, #1
				memset(buf, 0, 12);
 8005062:	f001 f8e9 	bl	8006238 <memset>
				y++;
 8005066:	b2ed      	uxtb	r5, r5
				x = 0;
 8005068:	2300      	movs	r3, #0
 800506a:	e7d3      	b.n	8005014 <l70_parse+0x80>
				if (x > 2) {
 800506c:	2000      	movs	r0, #0
 800506e:	ac01      	add	r4, sp, #4
					l70->lng = convertRawCoords((uint32_t) (result * 10000.0));
 8005070:	4b42      	ldr	r3, [pc, #264]	; (800517c <l70_parse+0x1e8>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	60d8      	str	r0, [r3, #12]
					break;
 8005076:	e7f0      	b.n	800505a <l70_parse+0xc6>
				if (x > 2) {
 8005078:	2000      	movs	r0, #0
 800507a:	ac01      	add	r4, sp, #4
					l70->lat = convertRawCoords((uint32_t) (result * 10000.0));
 800507c:	4b3f      	ldr	r3, [pc, #252]	; (800517c <l70_parse+0x1e8>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	6058      	str	r0, [r3, #4]
					break;
 8005082:	e7ea      	b.n	800505a <l70_parse+0xc6>
 8005084:	ac01      	add	r4, sp, #4
					l70->lat_ns = buf[0];
 8005086:	4b3d      	ldr	r3, [pc, #244]	; (800517c <l70_parse+0x1e8>)
 8005088:	7822      	ldrb	r2, [r4, #0]
 800508a:	6819      	ldr	r1, [r3, #0]
 800508c:	720a      	strb	r2, [r1, #8]
					l70->lng_ew = buf[0];
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	741a      	strb	r2, [r3, #16]
				if (y >= 9)
 8005092:	2d08      	cmp	r5, #8
 8005094:	d866      	bhi.n	8005164 <l70_parse+0x1d0>
 8005096:	ac01      	add	r4, sp, #4
 8005098:	e7df      	b.n	800505a <l70_parse+0xc6>
					result = strtod(buf, NULL);
 800509a:	ac01      	add	r4, sp, #4
 800509c:	2100      	movs	r1, #0
 800509e:	0020      	movs	r0, r4
 80050a0:	f002 fde0 	bl	8007c64 <strtod>
				switch (y) {
 80050a4:	2d09      	cmp	r5, #9
 80050a6:	d8f4      	bhi.n	8005092 <l70_parse+0xfe>
 80050a8:	4a35      	ldr	r2, [pc, #212]	; (8005180 <l70_parse+0x1ec>)
 80050aa:	00ab      	lsls	r3, r5, #2
 80050ac:	58d3      	ldr	r3, [r2, r3]
 80050ae:	469f      	mov	pc, r3
 80050b0:	ac01      	add	r4, sp, #4
 80050b2:	7822      	ldrb	r2, [r4, #0]
 80050b4:	4b31      	ldr	r3, [pc, #196]	; (800517c <l70_parse+0x1e8>)
 80050b6:	e7ea      	b.n	800508e <l70_parse+0xfa>
					l70->time = ((uint32_t) result) + 30000;
 80050b8:	4b30      	ldr	r3, [pc, #192]	; (800517c <l70_parse+0x1e8>)
 80050ba:	4a32      	ldr	r2, [pc, #200]	; (8005184 <l70_parse+0x1f0>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	ac01      	add	r4, sp, #4
 80050c0:	601a      	str	r2, [r3, #0]
					if (l70->time > 240000)
 80050c2:	e7ca      	b.n	800505a <l70_parse+0xc6>
					l70->time = ((uint32_t) result) + 30000;
 80050c4:	f7fb fa10 	bl	80004e8 <__aeabi_d2uiz>
 80050c8:	4a2e      	ldr	r2, [pc, #184]	; (8005184 <l70_parse+0x1f0>)
 80050ca:	4b2c      	ldr	r3, [pc, #176]	; (800517c <l70_parse+0x1e8>)
					if (l70->time > 240000)
 80050cc:	492e      	ldr	r1, [pc, #184]	; (8005188 <l70_parse+0x1f4>)
					l70->time = ((uint32_t) result) + 30000;
 80050ce:	1882      	adds	r2, r0, r2
 80050d0:	681b      	ldr	r3, [r3, #0]
					if (l70->time > 240000)
 80050d2:	428a      	cmp	r2, r1
 80050d4:	d944      	bls.n	8005160 <l70_parse+0x1cc>
						l70->time = l70->time - 240000;
 80050d6:	4a2d      	ldr	r2, [pc, #180]	; (800518c <l70_parse+0x1f8>)
 80050d8:	4694      	mov	ip, r2
 80050da:	4460      	add	r0, ip
 80050dc:	6018      	str	r0, [r3, #0]
 80050de:	e7bc      	b.n	800505a <l70_parse+0xc6>
 80050e0:	f7fb fa02 	bl	80004e8 <__aeabi_d2uiz>
 80050e4:	e7af      	b.n	8005046 <l70_parse+0xb2>
 80050e6:	4a2a      	ldr	r2, [pc, #168]	; (8005190 <l70_parse+0x1fc>)
 80050e8:	4b2a      	ldr	r3, [pc, #168]	; (8005194 <l70_parse+0x200>)
 80050ea:	f7fc faa9 	bl	8001640 <__aeabi_dmul>
 80050ee:	f7fb f9fb 	bl	80004e8 <__aeabi_d2uiz>
 80050f2:	b2c0      	uxtb	r0, r0
 80050f4:	e7ae      	b.n	8005054 <l70_parse+0xc0>
 80050f6:	4b28      	ldr	r3, [pc, #160]	; (8005198 <l70_parse+0x204>)
 80050f8:	2200      	movs	r2, #0
 80050fa:	f7fc faa1 	bl	8001640 <__aeabi_dmul>
 80050fe:	f7fb f9f3 	bl	80004e8 <__aeabi_d2uiz>
 8005102:	4926      	ldr	r1, [pc, #152]	; (800519c <l70_parse+0x208>)
 8005104:	4682      	mov	sl, r0
 8005106:	f7fb f8a1 	bl	800024c <__aeabi_uidivmod>
 800510a:	0088      	lsls	r0, r1, #2
 800510c:	1840      	adds	r0, r0, r1
 800510e:	0040      	lsls	r0, r0, #1
 8005110:	213c      	movs	r1, #60	; 0x3c
 8005112:	f7fb f815 	bl	8000140 <__udivsi3>
 8005116:	4921      	ldr	r1, [pc, #132]	; (800519c <l70_parse+0x208>)
 8005118:	4681      	mov	r9, r0
 800511a:	4650      	mov	r0, sl
 800511c:	f7fb f810 	bl	8000140 <__udivsi3>
 8005120:	4b1f      	ldr	r3, [pc, #124]	; (80051a0 <l70_parse+0x20c>)
 8005122:	4358      	muls	r0, r3
 8005124:	4448      	add	r0, r9
 8005126:	e7a3      	b.n	8005070 <l70_parse+0xdc>
 8005128:	4b1b      	ldr	r3, [pc, #108]	; (8005198 <l70_parse+0x204>)
 800512a:	2200      	movs	r2, #0
 800512c:	f7fc fa88 	bl	8001640 <__aeabi_dmul>
 8005130:	f7fb f9da 	bl	80004e8 <__aeabi_d2uiz>
 8005134:	4919      	ldr	r1, [pc, #100]	; (800519c <l70_parse+0x208>)
 8005136:	4682      	mov	sl, r0
 8005138:	f7fb f888 	bl	800024c <__aeabi_uidivmod>
 800513c:	0088      	lsls	r0, r1, #2
 800513e:	1840      	adds	r0, r0, r1
 8005140:	0040      	lsls	r0, r0, #1
 8005142:	213c      	movs	r1, #60	; 0x3c
 8005144:	f7fa fffc 	bl	8000140 <__udivsi3>
 8005148:	4914      	ldr	r1, [pc, #80]	; (800519c <l70_parse+0x208>)
 800514a:	4681      	mov	r9, r0
 800514c:	4650      	mov	r0, sl
 800514e:	f7fa fff7 	bl	8000140 <__udivsi3>
 8005152:	4b13      	ldr	r3, [pc, #76]	; (80051a0 <l70_parse+0x20c>)
 8005154:	4358      	muls	r0, r3
 8005156:	4448      	add	r0, r9
 8005158:	e790      	b.n	800507c <l70_parse+0xe8>
	for (size = 0; size < len; size++) {
 800515a:	2201      	movs	r2, #1
 800515c:	0029      	movs	r1, r5
 800515e:	e741      	b.n	8004fe4 <l70_parse+0x50>
					l70->time = ((uint32_t) result) + 30000;
 8005160:	601a      	str	r2, [r3, #0]
 8005162:	e77a      	b.n	800505a <l70_parse+0xc6>
					return 1;
 8005164:	2001      	movs	r0, #1
 8005166:	e767      	b.n	8005038 <l70_parse+0xa4>
 8005168:	200004b4 	.word	0x200004b4
 800516c:	200004b0 	.word	0x200004b0
 8005170:	2000022c 	.word	0x2000022c
 8005174:	0800ae14 	.word	0x0800ae14
 8005178:	0800ae1c 	.word	0x0800ae1c
 800517c:	200002ac 	.word	0x200002ac
 8005180:	0800ae44 	.word	0x0800ae44
 8005184:	00007530 	.word	0x00007530
 8005188:	0003a980 	.word	0x0003a980
 800518c:	fffccbb0 	.word	0xfffccbb0
 8005190:	c083126f 	.word	0xc083126f
 8005194:	3ffda1ca 	.word	0x3ffda1ca
 8005198:	40c38800 	.word	0x40c38800
 800519c:	000f4240 	.word	0x000f4240
 80051a0:	000186a0 	.word	0x000186a0

080051a4 <Lis2dh12_setMode>:
	HAL_Delay(1);

	return 1;
}

uint8_t Lis2dh12_setMode(enum Mode_ mode) {
 80051a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051a6:	46ce      	mov	lr, r9
 80051a8:	4647      	mov	r7, r8
	/*HAL_I2C_Mem_Read(&hi2c1, Lis2dh12->address, WHO_AM_I, 1, &config,
	 1, 1500);*/
	//HAL_I2C_Mem_Read(hi2c, DevAddress, MemAddress, MemAddSize, pData, Size, Timeout)
	uint8_t retVal = 0;

	retVal = HAL_I2C_Mem_Read(&hi2c1, Lis2dh12->address, regAddr, 1, buff,
 80051aa:	4b32      	ldr	r3, [pc, #200]	; (8005274 <Lis2dh12_setMode+0xd0>)
uint8_t Lis2dh12_setMode(enum Mode_ mode) {
 80051ac:	b580      	push	{r7, lr}
	retVal = HAL_I2C_Mem_Read(&hi2c1, Lis2dh12->address, regAddr, 1, buff,
 80051ae:	4698      	mov	r8, r3
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2716      	movs	r7, #22
 80051b4:	7819      	ldrb	r1, [r3, #0]
 80051b6:	23fa      	movs	r3, #250	; 0xfa
 80051b8:	2601      	movs	r6, #1
uint8_t Lis2dh12_setMode(enum Mode_ mode) {
 80051ba:	b087      	sub	sp, #28
	retVal = HAL_I2C_Mem_Read(&hi2c1, Lis2dh12->address, regAddr, 1, buff,
 80051bc:	4d2e      	ldr	r5, [pc, #184]	; (8005278 <Lis2dh12_setMode+0xd4>)
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	446f      	add	r7, sp
uint8_t Lis2dh12_setMode(enum Mode_ mode) {
 80051c2:	0004      	movs	r4, r0
	retVal = HAL_I2C_Mem_Read(&hi2c1, Lis2dh12->address, regAddr, 1, buff,
 80051c4:	4699      	mov	r9, r3
 80051c6:	2220      	movs	r2, #32
 80051c8:	9302      	str	r3, [sp, #8]
 80051ca:	9601      	str	r6, [sp, #4]
 80051cc:	2301      	movs	r3, #1
 80051ce:	0028      	movs	r0, r5
 80051d0:	9700      	str	r7, [sp, #0]
 80051d2:	f7fe f9f7 	bl	80035c4 <HAL_I2C_Mem_Read>
 80051d6:	4643      	mov	r3, r8
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2223      	movs	r2, #35	; 0x23
 80051dc:	7819      	ldrb	r1, [r3, #0]
 80051de:	464b      	mov	r3, r9
 80051e0:	9601      	str	r6, [sp, #4]
 80051e2:	3616      	adds	r6, #22
 80051e4:	446e      	add	r6, sp
 80051e6:	9302      	str	r3, [sp, #8]
 80051e8:	0028      	movs	r0, r5
 80051ea:	2301      	movs	r3, #1
 80051ec:	9600      	str	r6, [sp, #0]
 80051ee:	f7fe f9e9 	bl	80035c4 <HAL_I2C_Mem_Read>
	switch (mode) {
 80051f2:	2c01      	cmp	r4, #1
 80051f4:	d009      	beq.n	800520a <Lis2dh12_setMode+0x66>
 80051f6:	2c02      	cmp	r4, #2
 80051f8:	d032      	beq.n	8005260 <Lis2dh12_setMode+0xbc>
 80051fa:	2000      	movs	r0, #0
 80051fc:	2c00      	cmp	r4, #0
 80051fe:	d027      	beq.n	8005250 <Lis2dh12_setMode+0xac>
}
 8005200:	b007      	add	sp, #28
 8005202:	bcc0      	pop	{r6, r7}
 8005204:	46b9      	mov	r9, r7
 8005206:	46b0      	mov	r8, r6
 8005208:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ctrl1Copy &= 0xF7;
 800520a:	2208      	movs	r2, #8
 800520c:	783b      	ldrb	r3, [r7, #0]
 800520e:	4393      	bics	r3, r2
 8005210:	703b      	strb	r3, [r7, #0]
		ctrl4Copy &= 0xF7;
 8005212:	7833      	ldrb	r3, [r6, #0]
 8005214:	4393      	bics	r3, r2
 8005216:	7033      	strb	r3, [r6, #0]
uint8_t Lis2dh12_writeToReg(uint8_t regAddr, uint8_t *buff, uint8_t buffSize) {
	uint8_t retVal = 0;

	//HAL_I2C_Mem_Write(hi2c, DevAddress, MemAddress, MemAddSize, pData, Size, Timeout)

	retVal = HAL_I2C_Mem_Write(&hi2c1, Lis2dh12->address, regAddr, 1, buff,
 8005218:	4643      	mov	r3, r8
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2401      	movs	r4, #1
 800521e:	7819      	ldrb	r1, [r3, #0]
 8005220:	23fa      	movs	r3, #250	; 0xfa
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	4699      	mov	r9, r3
 8005226:	9302      	str	r3, [sp, #8]
 8005228:	2220      	movs	r2, #32
 800522a:	2301      	movs	r3, #1
 800522c:	0028      	movs	r0, r5
 800522e:	9401      	str	r4, [sp, #4]
 8005230:	9700      	str	r7, [sp, #0]
 8005232:	f7fe f895 	bl	8003360 <HAL_I2C_Mem_Write>
 8005236:	4643      	mov	r3, r8
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2223      	movs	r2, #35	; 0x23
 800523c:	7819      	ldrb	r1, [r3, #0]
 800523e:	464b      	mov	r3, r9
 8005240:	0028      	movs	r0, r5
 8005242:	9302      	str	r3, [sp, #8]
 8005244:	9401      	str	r4, [sp, #4]
 8005246:	2301      	movs	r3, #1
 8005248:	9600      	str	r6, [sp, #0]
 800524a:	f7fe f889 	bl	8003360 <HAL_I2C_Mem_Write>
	return success;
 800524e:	e7d7      	b.n	8005200 <Lis2dh12_setMode+0x5c>
		ctrl1Copy &= 0xF7;
 8005250:	2208      	movs	r2, #8
 8005252:	783b      	ldrb	r3, [r7, #0]
 8005254:	4393      	bics	r3, r2
 8005256:	703b      	strb	r3, [r7, #0]
		ctrl4Copy |= 0x08;
 8005258:	7833      	ldrb	r3, [r6, #0]
 800525a:	4313      	orrs	r3, r2
 800525c:	7033      	strb	r3, [r6, #0]
		break;
 800525e:	e7db      	b.n	8005218 <Lis2dh12_setMode+0x74>
		ctrl1Copy |= 0x08;
 8005260:	2208      	movs	r2, #8
 8005262:	783b      	ldrb	r3, [r7, #0]
 8005264:	4313      	orrs	r3, r2
		ctrl4Copy &= 0xF7;
 8005266:	2208      	movs	r2, #8
		ctrl1Copy |= 0x08;
 8005268:	703b      	strb	r3, [r7, #0]
		ctrl4Copy &= 0xF7;
 800526a:	7833      	ldrb	r3, [r6, #0]
 800526c:	4393      	bics	r3, r2
 800526e:	7033      	strb	r3, [r6, #0]
		break;
 8005270:	e7d2      	b.n	8005218 <Lis2dh12_setMode+0x74>
 8005272:	46c0      	nop			; (mov r8, r8)
 8005274:	200004c0 	.word	0x200004c0
 8005278:	20000568 	.word	0x20000568

0800527c <Lis2dh12_init>:
void Lis2dh12_init(uint8_t address) {
 800527c:	b5f0      	push	{r4, r5, r6, r7, lr}
	Lis2dh12->x = 0;
 800527e:	2200      	movs	r2, #0
void Lis2dh12_init(uint8_t address) {
 8005280:	46ce      	mov	lr, r9
 8005282:	4647      	mov	r7, r8
	Lis2dh12 = &Lis2dh12_info;
 8005284:	4b60      	ldr	r3, [pc, #384]	; (8005408 <Lis2dh12_init+0x18c>)
 8005286:	4e61      	ldr	r6, [pc, #388]	; (800540c <Lis2dh12_init+0x190>)
	Lis2dh12->address = address << 1;
 8005288:	0040      	lsls	r0, r0, #1
 800528a:	b2c0      	uxtb	r0, r0
void Lis2dh12_init(uint8_t address) {
 800528c:	b580      	push	{r7, lr}
	Lis2dh12->address = address << 1;
 800528e:	7018      	strb	r0, [r3, #0]
	Lis2dh12->x = 0;
 8005290:	805a      	strh	r2, [r3, #2]
	Lis2dh12->y = 0;
 8005292:	809a      	strh	r2, [r3, #4]
	Lis2dh12->z = 0;
 8005294:	80da      	strh	r2, [r3, #6]
	Lis2dh12 = &Lis2dh12_info;
 8005296:	6033      	str	r3, [r6, #0]
	state = HAL_I2C_IsDeviceReady(&hi2c1, Lis2dh12->address, 2, 2000);
 8005298:	23fa      	movs	r3, #250	; 0xfa
 800529a:	4d5d      	ldr	r5, [pc, #372]	; (8005410 <Lis2dh12_init+0x194>)
void Lis2dh12_init(uint8_t address) {
 800529c:	b087      	sub	sp, #28
	state = HAL_I2C_IsDeviceReady(&hi2c1, Lis2dh12->address, 2, 2000);
 800529e:	b281      	uxth	r1, r0
 80052a0:	00db      	lsls	r3, r3, #3
 80052a2:	0028      	movs	r0, r5
 80052a4:	3202      	adds	r2, #2
 80052a6:	f7fe fad7 	bl	8003858 <HAL_I2C_IsDeviceReady>
	if (state != HAL_OK) {
 80052aa:	2800      	cmp	r0, #0
 80052ac:	d004      	beq.n	80052b8 <Lis2dh12_init+0x3c>
}
 80052ae:	b007      	add	sp, #28
 80052b0:	bcc0      	pop	{r6, r7}
 80052b2:	46b9      	mov	r9, r7
 80052b4:	46b0      	mov	r8, r6
 80052b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	state = HAL_I2C_Mem_Read(&hi2c1, Lis2dh12->address, WHO_AM_I, 1, &config, 1,
 80052b8:	2417      	movs	r4, #23
 80052ba:	2701      	movs	r7, #1
 80052bc:	6833      	ldr	r3, [r6, #0]
 80052be:	446c      	add	r4, sp
 80052c0:	7819      	ldrb	r1, [r3, #0]
 80052c2:	4b54      	ldr	r3, [pc, #336]	; (8005414 <Lis2dh12_init+0x198>)
 80052c4:	220f      	movs	r2, #15
 80052c6:	9302      	str	r3, [sp, #8]
 80052c8:	0028      	movs	r0, r5
 80052ca:	2301      	movs	r3, #1
 80052cc:	9701      	str	r7, [sp, #4]
 80052ce:	9400      	str	r4, [sp, #0]
 80052d0:	f7fe f978 	bl	80035c4 <HAL_I2C_Mem_Read>
	if (config != 0x33) {
 80052d4:	7823      	ldrb	r3, [r4, #0]
 80052d6:	2b33      	cmp	r3, #51	; 0x33
 80052d8:	d1e9      	bne.n	80052ae <Lis2dh12_init+0x32>
	char data = setup;
 80052da:	3b03      	subs	r3, #3
 80052dc:	7023      	strb	r3, [r4, #0]
	retVal = HAL_I2C_Mem_Write(&hi2c1, Lis2dh12->address, regAddr, 1, buff,
 80052de:	6833      	ldr	r3, [r6, #0]
 80052e0:	2222      	movs	r2, #34	; 0x22
 80052e2:	7819      	ldrb	r1, [r3, #0]
 80052e4:	23fa      	movs	r3, #250	; 0xfa
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	4698      	mov	r8, r3
 80052ea:	9302      	str	r3, [sp, #8]
 80052ec:	0028      	movs	r0, r5
 80052ee:	2301      	movs	r3, #1
 80052f0:	9701      	str	r7, [sp, #4]
 80052f2:	9400      	str	r4, [sp, #0]
 80052f4:	f7fe f834 	bl	8003360 <HAL_I2C_Mem_Write>
		Lis2dh12_setMode(HIGH_RES);
 80052f8:	2000      	movs	r0, #0
 80052fa:	f7ff ff53 	bl	80051a4 <Lis2dh12_setMode>
	retVal = HAL_I2C_Mem_Read(&hi2c1, Lis2dh12->address, regAddr, 1, buff,
 80052fe:	6833      	ldr	r3, [r6, #0]
 8005300:	2223      	movs	r2, #35	; 0x23
 8005302:	7819      	ldrb	r1, [r3, #0]
 8005304:	4643      	mov	r3, r8
 8005306:	0028      	movs	r0, r5
 8005308:	9302      	str	r3, [sp, #8]
 800530a:	9701      	str	r7, [sp, #4]
 800530c:	2301      	movs	r3, #1
 800530e:	9400      	str	r4, [sp, #0]
 8005310:	f7fe f958 	bl	80035c4 <HAL_I2C_Mem_Read>
	ctrl4Copy |= (scale << 4);
 8005314:	2320      	movs	r3, #32
 8005316:	4699      	mov	r9, r3
 8005318:	464a      	mov	r2, r9
 800531a:	7823      	ldrb	r3, [r4, #0]
	retVal = HAL_I2C_Mem_Write(&hi2c1, Lis2dh12->address, regAddr, 1, buff,
 800531c:	0028      	movs	r0, r5
	ctrl4Copy |= (scale << 4);
 800531e:	4313      	orrs	r3, r2
 8005320:	7023      	strb	r3, [r4, #0]
	retVal = HAL_I2C_Mem_Write(&hi2c1, Lis2dh12->address, regAddr, 1, buff,
 8005322:	6833      	ldr	r3, [r6, #0]
 8005324:	2223      	movs	r2, #35	; 0x23
 8005326:	7819      	ldrb	r1, [r3, #0]
 8005328:	4643      	mov	r3, r8
 800532a:	9701      	str	r7, [sp, #4]
 800532c:	9302      	str	r3, [sp, #8]
 800532e:	9400      	str	r4, [sp, #0]
 8005330:	2301      	movs	r3, #1
 8005332:	f7fe f815 	bl	8003360 <HAL_I2C_Mem_Write>
	retVal = HAL_I2C_Mem_Read(&hi2c1, Lis2dh12->address, regAddr, 1, buff,
 8005336:	6833      	ldr	r3, [r6, #0]
 8005338:	2220      	movs	r2, #32
 800533a:	7819      	ldrb	r1, [r3, #0]
 800533c:	4643      	mov	r3, r8
 800533e:	0028      	movs	r0, r5
 8005340:	9302      	str	r3, [sp, #8]
 8005342:	9701      	str	r7, [sp, #4]
 8005344:	2301      	movs	r3, #1
 8005346:	9400      	str	r4, [sp, #0]
 8005348:	f7fe f93c 	bl	80035c4 <HAL_I2C_Mem_Read>
	ctrl1Copy |= (odr << 4);
 800534c:	464a      	mov	r2, r9
 800534e:	7823      	ldrb	r3, [r4, #0]
	retVal = HAL_I2C_Mem_Write(&hi2c1, Lis2dh12->address, regAddr, 1, buff,
 8005350:	0028      	movs	r0, r5
	ctrl1Copy |= (odr << 4);
 8005352:	4313      	orrs	r3, r2
 8005354:	7023      	strb	r3, [r4, #0]
	retVal = HAL_I2C_Mem_Write(&hi2c1, Lis2dh12->address, regAddr, 1, buff,
 8005356:	6833      	ldr	r3, [r6, #0]
 8005358:	2220      	movs	r2, #32
 800535a:	7819      	ldrb	r1, [r3, #0]
 800535c:	4643      	mov	r3, r8
 800535e:	9701      	str	r7, [sp, #4]
 8005360:	9302      	str	r3, [sp, #8]
 8005362:	9400      	str	r4, [sp, #0]
 8005364:	2301      	movs	r3, #1
 8005366:	f7fd fffb 	bl	8003360 <HAL_I2C_Mem_Write>
	retVal = HAL_I2C_Mem_Read(&hi2c1, Lis2dh12->address, regAddr, 1, buff,
 800536a:	6833      	ldr	r3, [r6, #0]
 800536c:	2220      	movs	r2, #32
 800536e:	7819      	ldrb	r1, [r3, #0]
 8005370:	4643      	mov	r3, r8
 8005372:	0028      	movs	r0, r5
 8005374:	9302      	str	r3, [sp, #8]
 8005376:	9701      	str	r7, [sp, #4]
 8005378:	2301      	movs	r3, #1
 800537a:	9400      	str	r4, [sp, #0]
 800537c:	f7fe f922 	bl	80035c4 <HAL_I2C_Mem_Read>
	ctrl1Copy |= axis;
 8005380:	2201      	movs	r2, #1
 8005382:	7823      	ldrb	r3, [r4, #0]
	retVal = HAL_I2C_Mem_Write(&hi2c1, Lis2dh12->address, regAddr, 1, buff,
 8005384:	0028      	movs	r0, r5
	ctrl1Copy |= axis;
 8005386:	4313      	orrs	r3, r2
 8005388:	7023      	strb	r3, [r4, #0]
	retVal = HAL_I2C_Mem_Write(&hi2c1, Lis2dh12->address, regAddr, 1, buff,
 800538a:	6833      	ldr	r3, [r6, #0]
 800538c:	2220      	movs	r2, #32
 800538e:	7819      	ldrb	r1, [r3, #0]
 8005390:	4643      	mov	r3, r8
 8005392:	9701      	str	r7, [sp, #4]
 8005394:	9302      	str	r3, [sp, #8]
 8005396:	9400      	str	r4, [sp, #0]
 8005398:	2301      	movs	r3, #1
 800539a:	f7fd ffe1 	bl	8003360 <HAL_I2C_Mem_Write>
	retVal = HAL_I2C_Mem_Read(&hi2c1, Lis2dh12->address, regAddr, 1, buff,
 800539e:	6833      	ldr	r3, [r6, #0]
 80053a0:	2220      	movs	r2, #32
 80053a2:	7819      	ldrb	r1, [r3, #0]
 80053a4:	4643      	mov	r3, r8
 80053a6:	0028      	movs	r0, r5
 80053a8:	9302      	str	r3, [sp, #8]
 80053aa:	9701      	str	r7, [sp, #4]
 80053ac:	2301      	movs	r3, #1
 80053ae:	9400      	str	r4, [sp, #0]
 80053b0:	f7fe f908 	bl	80035c4 <HAL_I2C_Mem_Read>
	ctrl1Copy |= axis;
 80053b4:	2202      	movs	r2, #2
 80053b6:	7823      	ldrb	r3, [r4, #0]
	retVal = HAL_I2C_Mem_Write(&hi2c1, Lis2dh12->address, regAddr, 1, buff,
 80053b8:	0028      	movs	r0, r5
	ctrl1Copy |= axis;
 80053ba:	4313      	orrs	r3, r2
 80053bc:	7023      	strb	r3, [r4, #0]
	retVal = HAL_I2C_Mem_Write(&hi2c1, Lis2dh12->address, regAddr, 1, buff,
 80053be:	6833      	ldr	r3, [r6, #0]
 80053c0:	2220      	movs	r2, #32
 80053c2:	7819      	ldrb	r1, [r3, #0]
 80053c4:	4643      	mov	r3, r8
 80053c6:	9701      	str	r7, [sp, #4]
 80053c8:	9302      	str	r3, [sp, #8]
 80053ca:	9400      	str	r4, [sp, #0]
 80053cc:	2301      	movs	r3, #1
 80053ce:	f7fd ffc7 	bl	8003360 <HAL_I2C_Mem_Write>
	retVal = HAL_I2C_Mem_Read(&hi2c1, Lis2dh12->address, regAddr, 1, buff,
 80053d2:	6833      	ldr	r3, [r6, #0]
 80053d4:	2220      	movs	r2, #32
 80053d6:	7819      	ldrb	r1, [r3, #0]
 80053d8:	4643      	mov	r3, r8
 80053da:	0028      	movs	r0, r5
 80053dc:	9302      	str	r3, [sp, #8]
 80053de:	9701      	str	r7, [sp, #4]
 80053e0:	2301      	movs	r3, #1
 80053e2:	9400      	str	r4, [sp, #0]
 80053e4:	f7fe f8ee 	bl	80035c4 <HAL_I2C_Mem_Read>
	ctrl1Copy |= axis;
 80053e8:	2204      	movs	r2, #4
 80053ea:	7823      	ldrb	r3, [r4, #0]
	retVal = HAL_I2C_Mem_Write(&hi2c1, Lis2dh12->address, regAddr, 1, buff,
 80053ec:	0028      	movs	r0, r5
	ctrl1Copy |= axis;
 80053ee:	4313      	orrs	r3, r2
 80053f0:	7023      	strb	r3, [r4, #0]
	retVal = HAL_I2C_Mem_Write(&hi2c1, Lis2dh12->address, regAddr, 1, buff,
 80053f2:	6833      	ldr	r3, [r6, #0]
 80053f4:	2220      	movs	r2, #32
 80053f6:	7819      	ldrb	r1, [r3, #0]
 80053f8:	4643      	mov	r3, r8
 80053fa:	9701      	str	r7, [sp, #4]
 80053fc:	9302      	str	r3, [sp, #8]
 80053fe:	9400      	str	r4, [sp, #0]
 8005400:	2301      	movs	r3, #1
 8005402:	f7fd ffad 	bl	8003360 <HAL_I2C_Mem_Write>
}
 8005406:	e752      	b.n	80052ae <Lis2dh12_init+0x32>
 8005408:	200004b8 	.word	0x200004b8
 800540c:	200004c0 	.word	0x200004c0
 8005410:	20000568 	.word	0x20000568
 8005414:	000005dc 	.word	0x000005dc

08005418 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8005418:	b510      	push	{r4, lr}
 800541a:	b082      	sub	sp, #8
  ADC_ChannelConfTypeDef sConfig = {0};
 800541c:	2208      	movs	r2, #8
 800541e:	2100      	movs	r1, #0
 8005420:	4668      	mov	r0, sp
 8005422:	f000 ff09 	bl	8006238 <memset>
  */
  hadc.Instance = ADC1;
  hadc.Init.OversamplingMode = DISABLE;
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 8005426:	2207      	movs	r2, #7
  hadc.Init.OversamplingMode = DISABLE;
 8005428:	4c1e      	ldr	r4, [pc, #120]	; (80054a4 <MX_ADC_Init+0x8c>)
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc.Init.ContinuousConvMode = ENABLE;
  hadc.Init.DiscontinuousConvMode = DISABLE;
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc.Init.DMAContinuousRequests = ENABLE;
 800542a:	212c      	movs	r1, #44	; 0x2c
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 800542c:	63a2      	str	r2, [r4, #56]	; 0x38
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800542e:	22c2      	movs	r2, #194	; 0xc2
 8005430:	32ff      	adds	r2, #255	; 0xff
 8005432:	6262      	str	r2, [r4, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 8005434:	3ac1      	subs	r2, #193	; 0xc1
 8005436:	3aff      	subs	r2, #255	; 0xff
 8005438:	5462      	strb	r2, [r4, r1]
  hadc.Instance = ADC1;
 800543a:	491b      	ldr	r1, [pc, #108]	; (80054a8 <MX_ADC_Init+0x90>)
  hadc.Init.OversamplingMode = DISABLE;
 800543c:	2300      	movs	r3, #0
  hadc.Instance = ADC1;
 800543e:	6021      	str	r1, [r4, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8005440:	2180      	movs	r1, #128	; 0x80
 8005442:	05c9      	lsls	r1, r1, #23
 8005444:	6061      	str	r1, [r4, #4]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8005446:	2108      	movs	r1, #8
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc.Init.LowPowerAutoWait = DISABLE;
  hadc.Init.LowPowerFrequencyMode = DISABLE;
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8005448:	0020      	movs	r0, r4
  hadc.Init.ContinuousConvMode = ENABLE;
 800544a:	8422      	strh	r2, [r4, #32]
  hadc.Init.OversamplingMode = DISABLE;
 800544c:	63e3      	str	r3, [r4, #60]	; 0x3c
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800544e:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8005450:	6323      	str	r3, [r4, #48]	; 0x30
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8005452:	6363      	str	r3, [r4, #52]	; 0x34
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8005454:	60a3      	str	r3, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005456:	60e3      	str	r3, [r4, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8005458:	6122      	str	r2, [r4, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800545a:	6161      	str	r1, [r4, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800545c:	61a3      	str	r3, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800545e:	61e3      	str	r3, [r4, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8005460:	f7fd f91c 	bl	800269c <HAL_ADC_Init>
 8005464:	2800      	cmp	r0, #0
 8005466:	d114      	bne.n	8005492 <MX_ADC_Init+0x7a>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8005468:	2380      	movs	r3, #128	; 0x80
 800546a:	4a10      	ldr	r2, [pc, #64]	; (80054ac <MX_ADC_Init+0x94>)
 800546c:	015b      	lsls	r3, r3, #5
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800546e:	4669      	mov	r1, sp
 8005470:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_8;
 8005472:	9200      	str	r2, [sp, #0]
 8005474:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005476:	f7fd fb7d 	bl	8002b74 <HAL_ADC_ConfigChannel>
 800547a:	2800      	cmp	r0, #0
 800547c:	d10f      	bne.n	800549e <MX_ADC_Init+0x86>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800547e:	4b0c      	ldr	r3, [pc, #48]	; (80054b0 <MX_ADC_Init+0x98>)
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005480:	4669      	mov	r1, sp
 8005482:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_9;
 8005484:	9300      	str	r3, [sp, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005486:	f7fd fb75 	bl	8002b74 <HAL_ADC_ConfigChannel>
 800548a:	2800      	cmp	r0, #0
 800548c:	d104      	bne.n	8005498 <MX_ADC_Init+0x80>
  {
    Error_Handler();
  }

}
 800548e:	b002      	add	sp, #8
 8005490:	bd10      	pop	{r4, pc}
    Error_Handler();
 8005492:	f000 fb35 	bl	8005b00 <Error_Handler>
 8005496:	e7e7      	b.n	8005468 <MX_ADC_Init+0x50>
    Error_Handler();
 8005498:	f000 fb32 	bl	8005b00 <Error_Handler>
}
 800549c:	e7f7      	b.n	800548e <MX_ADC_Init+0x76>
    Error_Handler();
 800549e:	f000 fb2f 	bl	8005b00 <Error_Handler>
 80054a2:	e7ec      	b.n	800547e <MX_ADC_Init+0x66>
 80054a4:	2000050c 	.word	0x2000050c
 80054a8:	40012400 	.word	0x40012400
 80054ac:	20000100 	.word	0x20000100
 80054b0:	24000200 	.word	0x24000200

080054b4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80054b4:	b570      	push	{r4, r5, r6, lr}
 80054b6:	0004      	movs	r4, r0
 80054b8:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054ba:	2214      	movs	r2, #20
 80054bc:	2100      	movs	r1, #0
 80054be:	a802      	add	r0, sp, #8
 80054c0:	f000 feba 	bl	8006238 <memset>
  if(adcHandle->Instance==ADC1)
 80054c4:	4b20      	ldr	r3, [pc, #128]	; (8005548 <HAL_ADC_MspInit+0x94>)
 80054c6:	6822      	ldr	r2, [r4, #0]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d001      	beq.n	80054d0 <HAL_ADC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */
    //HAL_ADC_Start_IT(&hadc);
  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80054cc:	b008      	add	sp, #32
 80054ce:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 80054d0:	2280      	movs	r2, #128	; 0x80
 80054d2:	4b1e      	ldr	r3, [pc, #120]	; (800554c <HAL_ADC_MspInit+0x98>)
 80054d4:	0092      	lsls	r2, r2, #2
 80054d6:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054d8:	2600      	movs	r6, #0
    __HAL_RCC_ADC1_CLK_ENABLE();
 80054da:	430a      	orrs	r2, r1
 80054dc:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054de:	2202      	movs	r2, #2
 80054e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054e2:	481b      	ldr	r0, [pc, #108]	; (8005550 <HAL_ADC_MspInit+0x9c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054e4:	4311      	orrs	r1, r2
 80054e6:	62d9      	str	r1, [r3, #44]	; 0x2c
 80054e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054ea:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054ec:	401a      	ands	r2, r3
 80054ee:	9201      	str	r2, [sp, #4]
 80054f0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = LDR_Pin|MIC_Pin;
 80054f2:	2203      	movs	r2, #3
 80054f4:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054f6:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pin = LDR_Pin|MIC_Pin;
 80054f8:	9202      	str	r2, [sp, #8]
 80054fa:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054fc:	f7fd fcfe 	bl	8002efc <HAL_GPIO_Init>
    hdma_adc.Instance = DMA1_Channel1;
 8005500:	4d14      	ldr	r5, [pc, #80]	; (8005554 <HAL_ADC_MspInit+0xa0>)
 8005502:	4b15      	ldr	r3, [pc, #84]	; (8005558 <HAL_ADC_MspInit+0xa4>)
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8005504:	0028      	movs	r0, r5
    hdma_adc.Instance = DMA1_Channel1;
 8005506:	602b      	str	r3, [r5, #0]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8005508:	2380      	movs	r3, #128	; 0x80
 800550a:	612b      	str	r3, [r5, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800550c:	3380      	adds	r3, #128	; 0x80
 800550e:	616b      	str	r3, [r5, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005510:	2380      	movs	r3, #128	; 0x80
 8005512:	011b      	lsls	r3, r3, #4
 8005514:	61ab      	str	r3, [r5, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8005516:	2320      	movs	r3, #32
    hdma_adc.Init.Request = DMA_REQUEST_0;
 8005518:	606e      	str	r6, [r5, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800551a:	60ae      	str	r6, [r5, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800551c:	60ee      	str	r6, [r5, #12]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 800551e:	61eb      	str	r3, [r5, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8005520:	622e      	str	r6, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8005522:	f7fd fbe9 	bl	8002cf8 <HAL_DMA_Init>
 8005526:	2800      	cmp	r0, #0
 8005528:	d10a      	bne.n	8005540 <HAL_ADC_MspInit+0x8c>
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 800552a:	2200      	movs	r2, #0
 800552c:	2100      	movs	r1, #0
 800552e:	200c      	movs	r0, #12
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 8005530:	64e5      	str	r5, [r4, #76]	; 0x4c
 8005532:	62ac      	str	r4, [r5, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8005534:	f7fd fb8a 	bl	8002c4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8005538:	200c      	movs	r0, #12
 800553a:	f7fd fbb9 	bl	8002cb0 <HAL_NVIC_EnableIRQ>
}
 800553e:	e7c5      	b.n	80054cc <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8005540:	f000 fade 	bl	8005b00 <Error_Handler>
 8005544:	e7f1      	b.n	800552a <HAL_ADC_MspInit+0x76>
 8005546:	46c0      	nop			; (mov r8, r8)
 8005548:	40012400 	.word	0x40012400
 800554c:	40021000 	.word	0x40021000
 8005550:	50000400 	.word	0x50000400
 8005554:	200004c4 	.word	0x200004c4
 8005558:	40020008 	.word	0x40020008

0800555c <setBuzzerFreq>:
 * @retval none
 */
void setBuzzerFreq(uint16_t freq) {
	uint16_t period, pulse;

	if(freq < 50) freq = 50;
 800555c:	23fa      	movs	r3, #250	; 0xfa
void setBuzzerFreq(uint16_t freq) {
 800555e:	b570      	push	{r4, r5, r6, lr}
 8005560:	00db      	lsls	r3, r3, #3
 8005562:	b086      	sub	sp, #24
 8005564:	1c04      	adds	r4, r0, #0
 8005566:	4298      	cmp	r0, r3
 8005568:	d900      	bls.n	800556c <setBuzzerFreq+0x10>
 800556a:	1c1c      	adds	r4, r3, #0
	else if (freq > 2000) freq = 2000;

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800556c:	2208      	movs	r2, #8
 800556e:	2100      	movs	r1, #0
 8005570:	4668      	mov	r0, sp
 8005572:	f000 fe61 	bl	8006238 <memset>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8005576:	2210      	movs	r2, #16
 8005578:	2100      	movs	r1, #0
 800557a:	a802      	add	r0, sp, #8
 800557c:	f000 fe5c 	bl	8006238 <memset>

	period = (BUZZER_TIM_FREQ / freq) - 1;
 8005580:	b2a3      	uxth	r3, r4
 8005582:	2b32      	cmp	r3, #50	; 0x32
 8005584:	d200      	bcs.n	8005588 <setBuzzerFreq+0x2c>
 8005586:	2432      	movs	r4, #50	; 0x32
 8005588:	b2a1      	uxth	r1, r4
 800558a:	4821      	ldr	r0, [pc, #132]	; (8005610 <setBuzzerFreq+0xb4>)
 800558c:	f7fa fe62 	bl	8000254 <__divsi3>
	pulse = period / 2;

	htim2.Instance = TIM2;
 8005590:	2380      	movs	r3, #128	; 0x80
 8005592:	4c20      	ldr	r4, [pc, #128]	; (8005614 <setBuzzerFreq+0xb8>)
 8005594:	05db      	lsls	r3, r3, #23
 8005596:	6023      	str	r3, [r4, #0]
	htim2.Init.Prescaler = (SystemCoreClock / BUZZER_TIM_FREQ)  - 1;
 8005598:	4b1f      	ldr	r3, [pc, #124]	; (8005618 <setBuzzerFreq+0xbc>)
	period = (BUZZER_TIM_FREQ / freq) - 1;
 800559a:	3801      	subs	r0, #1
 800559c:	b285      	uxth	r5, r0
	htim2.Init.Prescaler = (SystemCoreClock / BUZZER_TIM_FREQ)  - 1;
 800559e:	491c      	ldr	r1, [pc, #112]	; (8005610 <setBuzzerFreq+0xb4>)
 80055a0:	6818      	ldr	r0, [r3, #0]
 80055a2:	f7fa fdcd 	bl	8000140 <__udivsi3>
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80055a6:	2300      	movs	r3, #0
	htim2.Init.Prescaler = (SystemCoreClock / BUZZER_TIM_FREQ)  - 1;
 80055a8:	3801      	subs	r0, #1
 80055aa:	6060      	str	r0, [r4, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80055ac:	60a3      	str	r3, [r4, #8]
	htim2.Init.Period = period;
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80055ae:	6123      	str	r3, [r4, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 80055b0:	0020      	movs	r0, r4
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80055b2:	3380      	adds	r3, #128	; 0x80
	pulse = period / 2;
 80055b4:	086e      	lsrs	r6, r5, #1
	htim2.Init.Period = period;
 80055b6:	60e5      	str	r5, [r4, #12]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80055b8:	6163      	str	r3, [r4, #20]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 80055ba:	f7fe ffe1 	bl	8004580 <HAL_TIM_PWM_Init>
 80055be:	2800      	cmp	r0, #0
 80055c0:	d11c      	bne.n	80055fc <setBuzzerFreq+0xa0>
		Error_Handler();
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80055c2:	2200      	movs	r2, #0
 80055c4:	2300      	movs	r3, #0
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80055c6:	4669      	mov	r1, sp
 80055c8:	0020      	movs	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80055ca:	9200      	str	r2, [sp, #0]
 80055cc:	9301      	str	r3, [sp, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80055ce:	f7ff f8ff 	bl	80047d0 <HAL_TIMEx_MasterConfigSynchronization>
 80055d2:	2800      	cmp	r0, #0
 80055d4:	d118      	bne.n	8005608 <setBuzzerFreq+0xac>
			!= HAL_OK) {
		Error_Handler();
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80055d6:	2360      	movs	r3, #96	; 0x60
 80055d8:	9302      	str	r3, [sp, #8]
	sConfigOC.Pulse = pulse;
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80055da:	2300      	movs	r3, #0
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 80055dc:	2200      	movs	r2, #0
 80055de:	0020      	movs	r0, r4
 80055e0:	a902      	add	r1, sp, #8
	sConfigOC.Pulse = pulse;
 80055e2:	9603      	str	r6, [sp, #12]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80055e4:	9304      	str	r3, [sp, #16]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80055e6:	9305      	str	r3, [sp, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 80055e8:	f7ff f838 	bl	800465c <HAL_TIM_PWM_ConfigChannel>
 80055ec:	2800      	cmp	r0, #0
 80055ee:	d108      	bne.n	8005602 <setBuzzerFreq+0xa6>
			!= HAL_OK) {
		Error_Handler();
	}

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80055f0:	2100      	movs	r1, #0
 80055f2:	0020      	movs	r0, r4
 80055f4:	f7ff f800 	bl	80045f8 <HAL_TIM_PWM_Start>
}
 80055f8:	b006      	add	sp, #24
 80055fa:	bd70      	pop	{r4, r5, r6, pc}
		Error_Handler();
 80055fc:	f000 fa80 	bl	8005b00 <Error_Handler>
 8005600:	e7df      	b.n	80055c2 <setBuzzerFreq+0x66>
		Error_Handler();
 8005602:	f000 fa7d 	bl	8005b00 <Error_Handler>
 8005606:	e7f3      	b.n	80055f0 <setBuzzerFreq+0x94>
		Error_Handler();
 8005608:	f000 fa7a 	bl	8005b00 <Error_Handler>
 800560c:	e7e3      	b.n	80055d6 <setBuzzerFreq+0x7a>
 800560e:	46c0      	nop			; (mov r8, r8)
 8005610:	000186a0 	.word	0x000186a0
 8005614:	200006cc 	.word	0x200006cc
 8005618:	20000010 	.word	0x20000010

0800561c <stopBuzzer>:

void stopBuzzer(){
 800561c:	b510      	push	{r4, lr}
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 800561e:	2100      	movs	r1, #0
 8005620:	4801      	ldr	r0, [pc, #4]	; (8005628 <stopBuzzer+0xc>)
 8005622:	f7ff f801 	bl	8004628 <HAL_TIM_PWM_Stop>
}
 8005626:	bd10      	pop	{r4, pc}
 8005628:	200006cc 	.word	0x200006cc

0800562c <MX_DMA_Init>:
  */
void MX_DMA_Init(void) 
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800562c:	2301      	movs	r3, #1
 800562e:	4a0a      	ldr	r2, [pc, #40]	; (8005658 <MX_DMA_Init+0x2c>)
{
 8005630:	b500      	push	{lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005632:	6b11      	ldr	r1, [r2, #48]	; 0x30
{
 8005634:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005636:	4319      	orrs	r1, r3
 8005638:	6311      	str	r1, [r2, #48]	; 0x30
 800563a:	6b12      	ldr	r2, [r2, #48]	; 0x30

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800563c:	2100      	movs	r1, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 800563e:	4013      	ands	r3, r2
 8005640:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8005642:	2200      	movs	r2, #0
 8005644:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005646:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8005648:	f7fd fb00 	bl	8002c4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800564c:	2009      	movs	r0, #9
 800564e:	f7fd fb2f 	bl	8002cb0 <HAL_NVIC_EnableIRQ>

}
 8005652:	b003      	add	sp, #12
 8005654:	bd00      	pop	{pc}
 8005656:	46c0      	nop			; (mov r8, r8)
 8005658:	40021000 	.word	0x40021000

0800565c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800565c:	b530      	push	{r4, r5, lr}
 800565e:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005660:	2214      	movs	r2, #20
 8005662:	2100      	movs	r1, #0
 8005664:	a804      	add	r0, sp, #16
 8005666:	f000 fde7 	bl	8006238 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800566a:	2204      	movs	r2, #4
 800566c:	4b38      	ldr	r3, [pc, #224]	; (8005750 <MX_GPIO_Init+0xf4>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SFX_RST_Pin|LED_B_Pin|LED_G_Pin|LED_R_Pin, GPIO_PIN_RESET);
 800566e:	4c39      	ldr	r4, [pc, #228]	; (8005754 <MX_GPIO_Init+0xf8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005670:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOB, SFX_RST_Pin|LED_B_Pin|LED_G_Pin|LED_R_Pin, GPIO_PIN_RESET);
 8005672:	0020      	movs	r0, r4
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005674:	4311      	orrs	r1, r2
 8005676:	62d9      	str	r1, [r3, #44]	; 0x2c
 8005678:	6ad9      	ldr	r1, [r3, #44]	; 0x2c

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800567a:	2500      	movs	r5, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800567c:	400a      	ands	r2, r1
 800567e:	9200      	str	r2, [sp, #0]
 8005680:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005682:	2280      	movs	r2, #128	; 0x80
 8005684:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005686:	4311      	orrs	r1, r2
 8005688:	62d9      	str	r1, [r3, #44]	; 0x2c
 800568a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800568c:	400a      	ands	r2, r1
 800568e:	9201      	str	r2, [sp, #4]
 8005690:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005692:	2201      	movs	r2, #1
 8005694:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005696:	4311      	orrs	r1, r2
 8005698:	62d9      	str	r1, [r3, #44]	; 0x2c
 800569a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800569c:	400a      	ands	r2, r1
 800569e:	9202      	str	r2, [sp, #8]
 80056a0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80056a2:	2202      	movs	r2, #2
 80056a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80056a6:	4311      	orrs	r1, r2
 80056a8:	62d9      	str	r1, [r3, #44]	; 0x2c
 80056aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOB, SFX_RST_Pin|LED_B_Pin|LED_G_Pin|LED_R_Pin, GPIO_PIN_RESET);
 80056ac:	213c      	movs	r1, #60	; 0x3c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80056ae:	401a      	ands	r2, r3
 80056b0:	9203      	str	r2, [sp, #12]
  HAL_GPIO_WritePin(GPIOB, SFX_RST_Pin|LED_B_Pin|LED_G_Pin|LED_R_Pin, GPIO_PIN_RESET);
 80056b2:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80056b4:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOB, SFX_RST_Pin|LED_B_Pin|LED_G_Pin|LED_R_Pin, GPIO_PIN_RESET);
 80056b6:	f7fd fd1d 	bl	80030f4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80056ba:	22e0      	movs	r2, #224	; 0xe0
 80056bc:	2303      	movs	r3, #3
 80056be:	0212      	lsls	r2, r2, #8
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80056c0:	a904      	add	r1, sp, #16
 80056c2:	4825      	ldr	r0, [pc, #148]	; (8005758 <MX_GPIO_Init+0xfc>)
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80056c4:	9204      	str	r2, [sp, #16]
 80056c6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056c8:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80056ca:	f7fd fc17 	bl	8002efc <HAL_GPIO_Init>
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_11 
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056ce:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_11 
 80056d0:	2303      	movs	r3, #3
 80056d2:	4a22      	ldr	r2, [pc, #136]	; (800575c <MX_GPIO_Init+0x100>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056d4:	a904      	add	r1, sp, #16
 80056d6:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_11 
 80056d8:	9204      	str	r2, [sp, #16]
 80056da:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056dc:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056de:	f7fd fc0d 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SFX_RST_Pin;
 80056e2:	2204      	movs	r2, #4
 80056e4:	2301      	movs	r3, #1
 80056e6:	9204      	str	r2, [sp, #16]
 80056e8:	9305      	str	r3, [sp, #20]
 80056ea:	2201      	movs	r2, #1
 80056ec:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(SFX_RST_GPIO_Port, &GPIO_InitStruct);
 80056ee:	0020      	movs	r0, r4
 80056f0:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = SFX_RST_Pin;
 80056f2:	9206      	str	r2, [sp, #24]
 80056f4:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(SFX_RST_GPIO_Port, &GPIO_InitStruct);
 80056f6:	f7fd fc01 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80056fa:	22f0      	movs	r2, #240	; 0xf0
 80056fc:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056fe:	0020      	movs	r0, r4
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005700:	0212      	lsls	r2, r2, #8
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005702:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005704:	9204      	str	r2, [sp, #16]
 8005706:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005708:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800570a:	f7fd fbf7 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_B_Pin|LED_G_Pin|LED_R_Pin;
 800570e:	2238      	movs	r2, #56	; 0x38
 8005710:	2301      	movs	r3, #1
 8005712:	9204      	str	r2, [sp, #16]
 8005714:	9305      	str	r3, [sp, #20]
 8005716:	2200      	movs	r2, #0
 8005718:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800571a:	0020      	movs	r0, r4
 800571c:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = LED_B_Pin|LED_G_Pin|LED_R_Pin;
 800571e:	9206      	str	r2, [sp, #24]
 8005720:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005722:	f7fd fbeb 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin;
 8005726:	22c0      	movs	r2, #192	; 0xc0
 8005728:	4b0d      	ldr	r3, [pc, #52]	; (8005760 <MX_GPIO_Init+0x104>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800572a:	0020      	movs	r0, r4
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin;
 800572c:	0092      	lsls	r2, r2, #2
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800572e:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin;
 8005730:	9204      	str	r2, [sp, #16]
 8005732:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005734:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005736:	f7fd fbe1 	bl	8002efc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800573a:	2200      	movs	r2, #0
 800573c:	2100      	movs	r1, #0
 800573e:	2007      	movs	r0, #7
 8005740:	f7fd fa84 	bl	8002c4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8005744:	2007      	movs	r0, #7
 8005746:	f7fd fab3 	bl	8002cb0 <HAL_NVIC_EnableIRQ>

}
 800574a:	b00b      	add	sp, #44	; 0x2c
 800574c:	bd30      	pop	{r4, r5, pc}
 800574e:	46c0      	nop			; (mov r8, r8)
 8005750:	40021000 	.word	0x40021000
 8005754:	50000400 	.word	0x50000400
 8005758:	50000800 	.word	0x50000800
 800575c:	00001903 	.word	0x00001903
 8005760:	10210000 	.word	0x10210000

08005764 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005764:	b510      	push	{r4, lr}

  hi2c1.Instance = I2C1;
 8005766:	4b1a      	ldr	r3, [pc, #104]	; (80057d0 <MX_I2C1_Init+0x6c>)
 8005768:	4c1a      	ldr	r4, [pc, #104]	; (80057d4 <MX_I2C1_Init+0x70>)
 800576a:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800576c:	4b1a      	ldr	r3, [pc, #104]	; (80057d8 <MX_I2C1_Init+0x74>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800576e:	0020      	movs	r0, r4
  hi2c1.Init.Timing = 0x00707CBB;
 8005770:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 216;
 8005772:	23d8      	movs	r3, #216	; 0xd8
 8005774:	60a3      	str	r3, [r4, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005776:	3bd7      	subs	r3, #215	; 0xd7
 8005778:	60e3      	str	r3, [r4, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800577a:	2300      	movs	r3, #0
 800577c:	6123      	str	r3, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800577e:	6163      	str	r3, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005780:	61a3      	str	r3, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005782:	61e3      	str	r3, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005784:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005786:	f7fd fd91 	bl	80032ac <HAL_I2C_Init>
 800578a:	2800      	cmp	r0, #0
 800578c:	d10c      	bne.n	80057a8 <MX_I2C1_Init+0x44>
  {
    Error_Handler();
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800578e:	2100      	movs	r1, #0
 8005790:	0020      	movs	r0, r4
 8005792:	f7fe f93d 	bl	8003a10 <HAL_I2CEx_ConfigAnalogFilter>
 8005796:	2800      	cmp	r0, #0
 8005798:	d10e      	bne.n	80057b8 <MX_I2C1_Init+0x54>
  {
    Error_Handler();
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800579a:	2100      	movs	r1, #0
 800579c:	0020      	movs	r0, r4
 800579e:	f7fe f95f 	bl	8003a60 <HAL_I2CEx_ConfigDigitalFilter>
 80057a2:	2800      	cmp	r0, #0
 80057a4:	d110      	bne.n	80057c8 <MX_I2C1_Init+0x64>
  {
    Error_Handler();
  }

}
 80057a6:	bd10      	pop	{r4, pc}
    Error_Handler();
 80057a8:	f000 f9aa 	bl	8005b00 <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80057ac:	2100      	movs	r1, #0
 80057ae:	0020      	movs	r0, r4
 80057b0:	f7fe f92e 	bl	8003a10 <HAL_I2CEx_ConfigAnalogFilter>
 80057b4:	2800      	cmp	r0, #0
 80057b6:	d0f0      	beq.n	800579a <MX_I2C1_Init+0x36>
    Error_Handler();
 80057b8:	f000 f9a2 	bl	8005b00 <Error_Handler>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80057bc:	2100      	movs	r1, #0
 80057be:	0020      	movs	r0, r4
 80057c0:	f7fe f94e 	bl	8003a60 <HAL_I2CEx_ConfigDigitalFilter>
 80057c4:	2800      	cmp	r0, #0
 80057c6:	d0ee      	beq.n	80057a6 <MX_I2C1_Init+0x42>
    Error_Handler();
 80057c8:	f000 f99a 	bl	8005b00 <Error_Handler>
}
 80057cc:	e7eb      	b.n	80057a6 <MX_I2C1_Init+0x42>
 80057ce:	46c0      	nop			; (mov r8, r8)
 80057d0:	40005400 	.word	0x40005400
 80057d4:	20000568 	.word	0x20000568
 80057d8:	00707cbb 	.word	0x00707cbb

080057dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80057dc:	b530      	push	{r4, r5, lr}
 80057de:	0004      	movs	r4, r0
 80057e0:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057e2:	2214      	movs	r2, #20
 80057e4:	2100      	movs	r1, #0
 80057e6:	a802      	add	r0, sp, #8
 80057e8:	f000 fd26 	bl	8006238 <memset>
  if(i2cHandle->Instance==I2C1)
 80057ec:	4b13      	ldr	r3, [pc, #76]	; (800583c <HAL_I2C_MspInit+0x60>)
 80057ee:	6822      	ldr	r2, [r4, #0]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d001      	beq.n	80057f8 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */
	__HAL_I2C_ENABLE(&hi2c1);
  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80057f4:	b009      	add	sp, #36	; 0x24
 80057f6:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057f8:	2302      	movs	r3, #2
 80057fa:	4c11      	ldr	r4, [pc, #68]	; (8005840 <HAL_I2C_MspInit+0x64>)
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80057fc:	2501      	movs	r5, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057fe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005800:	4810      	ldr	r0, [pc, #64]	; (8005844 <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005802:	431a      	orrs	r2, r3
 8005804:	62e2      	str	r2, [r4, #44]	; 0x2c
 8005806:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005808:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800580a:	4013      	ands	r3, r2
 800580c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800580e:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005810:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005812:	2312      	movs	r3, #18
 8005814:	9202      	str	r2, [sp, #8]
 8005816:	9303      	str	r3, [sp, #12]
 8005818:	2201      	movs	r2, #1
 800581a:	2303      	movs	r3, #3
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800581c:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800581e:	9204      	str	r2, [sp, #16]
 8005820:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005822:	f7fd fb6b 	bl	8002efc <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005826:	2380      	movs	r3, #128	; 0x80
 8005828:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800582a:	039b      	lsls	r3, r3, #14
 800582c:	4313      	orrs	r3, r2
 800582e:	63a3      	str	r3, [r4, #56]	; 0x38
	__HAL_I2C_ENABLE(&hi2c1);
 8005830:	4b05      	ldr	r3, [pc, #20]	; (8005848 <HAL_I2C_MspInit+0x6c>)
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	6813      	ldr	r3, [r2, #0]
 8005836:	432b      	orrs	r3, r5
 8005838:	6013      	str	r3, [r2, #0]
}
 800583a:	e7db      	b.n	80057f4 <HAL_I2C_MspInit+0x18>
 800583c:	40005400 	.word	0x40005400
 8005840:	40021000 	.word	0x40021000
 8005844:	50000400 	.word	0x50000400
 8005848:	20000568 	.word	0x20000568

0800584c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800584c:	b530      	push	{r4, r5, lr}
 800584e:	b09d      	sub	sp, #116	; 0x74
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8005850:	2220      	movs	r2, #32
 8005852:	2100      	movs	r1, #0
 8005854:	a810      	add	r0, sp, #64	; 0x40
 8005856:	f000 fcef 	bl	8006238 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800585a:	2214      	movs	r2, #20
 800585c:	2100      	movs	r1, #0
 800585e:	4668      	mov	r0, sp
 8005860:	f000 fcea 	bl	8006238 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8005864:	2220      	movs	r2, #32
 8005866:	2100      	movs	r1, #0
 8005868:	a806      	add	r0, sp, #24
 800586a:	f000 fce5 	bl	8006238 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800586e:	491a      	ldr	r1, [pc, #104]	; (80058d8 <SystemClock_Config+0x8c>)
 8005870:	4a1a      	ldr	r2, [pc, #104]	; (80058dc <SystemClock_Config+0x90>)
 8005872:	680b      	ldr	r3, [r1, #0]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8005874:	a80e      	add	r0, sp, #56	; 0x38
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005876:	401a      	ands	r2, r3
 8005878:	2380      	movs	r3, #128	; 0x80
 800587a:	011b      	lsls	r3, r3, #4
 800587c:	4313      	orrs	r3, r2
 800587e:	600b      	str	r3, [r1, #0]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005880:	2380      	movs	r3, #128	; 0x80
 8005882:	2201      	movs	r2, #1
 8005884:	025b      	lsls	r3, r3, #9
 8005886:	920e      	str	r2, [sp, #56]	; 0x38
 8005888:	930f      	str	r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800588a:	2380      	movs	r3, #128	; 0x80
 800588c:	2202      	movs	r2, #2
 800588e:	025b      	lsls	r3, r3, #9
 8005890:	9218      	str	r2, [sp, #96]	; 0x60
 8005892:	9319      	str	r3, [sp, #100]	; 0x64
 8005894:	2280      	movs	r2, #128	; 0x80
 8005896:	2380      	movs	r3, #128	; 0x80
 8005898:	02d2      	lsls	r2, r2, #11
 800589a:	03db      	lsls	r3, r3, #15
 800589c:	921a      	str	r2, [sp, #104]	; 0x68
 800589e:	931b      	str	r3, [sp, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80058a0:	f7fe f956 	bl	8003b50 <HAL_RCC_OscConfig>
		Error_Handler();
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80058a4:	220f      	movs	r2, #15
 80058a6:	2303      	movs	r3, #3
 80058a8:	2400      	movs	r4, #0
 80058aa:	2500      	movs	r5, #0
 80058ac:	9200      	str	r2, [sp, #0]
 80058ae:	9301      	str	r3, [sp, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80058b0:	2300      	movs	r3, #0

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80058b2:	2101      	movs	r1, #1
 80058b4:	4668      	mov	r0, sp
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80058b6:	9304      	str	r3, [sp, #16]
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80058b8:	9402      	str	r4, [sp, #8]
 80058ba:	9503      	str	r5, [sp, #12]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80058bc:	f7fe fc3a 	bl	8004134 <HAL_RCC_ClockConfig>
		Error_Handler();
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 80058c0:	230f      	movs	r3, #15
			| RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_LPUART1 | RCC_PERIPHCLK_I2C1;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
	PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80058c2:	a806      	add	r0, sp, #24
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80058c4:	9408      	str	r4, [sp, #32]
 80058c6:	9509      	str	r5, [sp, #36]	; 0x24
 80058c8:	940a      	str	r4, [sp, #40]	; 0x28
 80058ca:	950b      	str	r5, [sp, #44]	; 0x2c
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 80058cc:	9306      	str	r3, [sp, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80058ce:	f7fe fd19 	bl	8004304 <HAL_RCCEx_PeriphCLKConfig>
		Error_Handler();
	}
}
 80058d2:	b01d      	add	sp, #116	; 0x74
 80058d4:	bd30      	pop	{r4, r5, pc}
 80058d6:	46c0      	nop			; (mov r8, r8)
 80058d8:	40007000 	.word	0x40007000
 80058dc:	ffffe7ff 	.word	0xffffe7ff

080058e0 <main>:
int main(void) {
 80058e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	gps_tick_ = 0;
 80058e2:	2300      	movs	r3, #0
int main(void) {
 80058e4:	46c6      	mov	lr, r8
	sigfox_flag = 1;
 80058e6:	2101      	movs	r1, #1
	gps_tick_ = 0;
 80058e8:	4a3e      	ldr	r2, [pc, #248]	; (80059e4 <main+0x104>)
int main(void) {
 80058ea:	b500      	push	{lr}
	gps_tick_ = 0;
 80058ec:	6013      	str	r3, [r2, #0]
	gps_flag = 0;
 80058ee:	4a3e      	ldr	r2, [pc, #248]	; (80059e8 <main+0x108>)
 80058f0:	7013      	strb	r3, [r2, #0]
	sigfox_tick_ = 0;
 80058f2:	4a3e      	ldr	r2, [pc, #248]	; (80059ec <main+0x10c>)
 80058f4:	6013      	str	r3, [r2, #0]
	sigfox_flag = 1;
 80058f6:	4a3e      	ldr	r2, [pc, #248]	; (80059f0 <main+0x110>)
 80058f8:	7011      	strb	r1, [r2, #0]
	sigfox_delay = 0;
 80058fa:	4a3e      	ldr	r2, [pc, #248]	; (80059f4 <main+0x114>)
 80058fc:	7013      	strb	r3, [r2, #0]
	mic_output = 0;
 80058fe:	4a3e      	ldr	r2, [pc, #248]	; (80059f8 <main+0x118>)
 8005900:	8013      	strh	r3, [r2, #0]
	buf_cur_pos = 0;
 8005902:	4a3e      	ldr	r2, [pc, #248]	; (80059fc <main+0x11c>)
 8005904:	8013      	strh	r3, [r2, #0]
	HAL_Init();
 8005906:	f7fc fe0d 	bl	8002524 <HAL_Init>
	SystemClock_Config();
 800590a:	f7ff ff9f 	bl	800584c <SystemClock_Config>
	l70_init();
 800590e:	f7ff fb0b 	bl	8004f28 <l70_init>
	MX_GPIO_Init();
 8005912:	f7ff fea3 	bl	800565c <MX_GPIO_Init>
	MX_LPUART1_UART_Init();
 8005916:	f000 fb27 	bl	8005f68 <MX_LPUART1_UART_Init>
	MX_USART1_UART_Init();
 800591a:	f000 fb41 	bl	8005fa0 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 800591e:	f000 fb5d 	bl	8005fdc <MX_USART2_UART_Init>
	MX_TIM2_Init();
 8005922:	f000 faa5 	bl	8005e70 <MX_TIM2_Init>
	MX_DMA_Init();
 8005926:	f7ff fe81 	bl	800562c <MX_DMA_Init>
	MX_ADC_Init();
 800592a:	f7ff fd75 	bl	8005418 <MX_ADC_Init>
	MX_I2C1_Init();
 800592e:	f7ff ff19 	bl	8005764 <MX_I2C1_Init>
	MX_SPI1_Init();
 8005932:	f000 f949 	bl	8005bc8 <MX_SPI1_Init>
	setBuzzerFreq(200);
 8005936:	20c8      	movs	r0, #200	; 0xc8
 8005938:	f7ff fe10 	bl	800555c <setBuzzerFreq>
	sht30x_init(0x44);
 800593c:	2044      	movs	r0, #68	; 0x44
 800593e:	f000 f8e1 	bl	8005b04 <sht30x_init>
	Lis2dh12_init(0x19);
 8005942:	2019      	movs	r0, #25
 8005944:	f7ff fc9a 	bl	800527c <Lis2dh12_init>
	HAL_Delay(500);
 8005948:	20fa      	movs	r0, #250	; 0xfa
 800594a:	0040      	lsls	r0, r0, #1
 800594c:	f7fc fe0c 	bl	8002568 <HAL_Delay>
	setBuzzerFreq(400);
 8005950:	20c8      	movs	r0, #200	; 0xc8
 8005952:	0040      	lsls	r0, r0, #1
 8005954:	f7ff fe02 	bl	800555c <setBuzzerFreq>
	resetSigfoxModule();
 8005958:	f000 f920 	bl	8005b9c <resetSigfoxModule>
	l70_mode(1);
 800595c:	2001      	movs	r0, #1
 800595e:	f7ff faf3 	bl	8004f48 <l70_mode>
	setBuzzerFreq(600);
 8005962:	2096      	movs	r0, #150	; 0x96
 8005964:	0080      	lsls	r0, r0, #2
 8005966:	f7ff fdf9 	bl	800555c <setBuzzerFreq>
	getSigfoxPACID();
 800596a:	f000 f8d9 	bl	8005b20 <getSigfoxPACID>
	setBuzzerFreq(800);
 800596e:	20c8      	movs	r0, #200	; 0xc8
 8005970:	0080      	lsls	r0, r0, #2
 8005972:	f7ff fdf3 	bl	800555c <setBuzzerFreq>
	HAL_ADC_Start_DMA(&hadc, adc_data, adc_buf_len);
 8005976:	4c22      	ldr	r4, [pc, #136]	; (8005a00 <main+0x120>)
 8005978:	2208      	movs	r2, #8
 800597a:	4922      	ldr	r1, [pc, #136]	; (8005a04 <main+0x124>)
 800597c:	0020      	movs	r0, r4
 800597e:	f7fc ffe1 	bl	8002944 <HAL_ADC_Start_DMA>
	HAL_Delay(500);
 8005982:	20fa      	movs	r0, #250	; 0xfa
 8005984:	0040      	lsls	r0, r0, #1
 8005986:	f7fc fdef 	bl	8002568 <HAL_Delay>
	stopBuzzer();
 800598a:	f7ff fe47 	bl	800561c <stopBuzzer>
 800598e:	4b1e      	ldr	r3, [pc, #120]	; (8005a08 <main+0x128>)
 8005990:	4e1e      	ldr	r6, [pc, #120]	; (8005a0c <main+0x12c>)
 8005992:	4698      	mov	r8, r3
 8005994:	4d1e      	ldr	r5, [pc, #120]	; (8005a10 <main+0x130>)
 8005996:	4f1f      	ldr	r7, [pc, #124]	; (8005a14 <main+0x134>)
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 8005998:	2201      	movs	r2, #1
 800599a:	2110      	movs	r1, #16
 800599c:	481e      	ldr	r0, [pc, #120]	; (8005a18 <main+0x138>)
 800599e:	f7fd fba9 	bl	80030f4 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 80059a2:	20c8      	movs	r0, #200	; 0xc8
 80059a4:	f7fc fde0 	bl	8002568 <HAL_Delay>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 80059a8:	2200      	movs	r2, #0
 80059aa:	2110      	movs	r1, #16
 80059ac:	481a      	ldr	r0, [pc, #104]	; (8005a18 <main+0x138>)
 80059ae:	f7fd fba1 	bl	80030f4 <HAL_GPIO_WritePin>
		HAL_ADC_Start(&hadc); // start the adc
 80059b2:	0020      	movs	r0, r4
 80059b4:	f7fc ff54 	bl	8002860 <HAL_ADC_Start>
		geophone_analog_value = HAL_ADC_GetValue(&hadc); // get the adc value
 80059b8:	0020      	movs	r0, r4
 80059ba:	f7fd f80d 	bl	80029d8 <HAL_ADC_GetValue>
 80059be:	b2c0      	uxtb	r0, r0
 80059c0:	7030      	strb	r0, [r6, #0]
		sprintf(buffer, "Geophone sensor value is : %d\r\n", geophone_analog_value);
 80059c2:	7832      	ldrb	r2, [r6, #0]
 80059c4:	4641      	mov	r1, r8
 80059c6:	b2d2      	uxtb	r2, r2
 80059c8:	0028      	movs	r0, r5
 80059ca:	f001 fac3 	bl	8006f54 <siprintf>
		usart_puts(&huart1, buffer);
 80059ce:	0029      	movs	r1, r5
 80059d0:	0038      	movs	r0, r7
 80059d2:	f000 fbcb 	bl	800616c <usart_puts>
		HAL_ADC_Stop(&hadc); // stop adc
 80059d6:	0020      	movs	r0, r4
 80059d8:	f7fc ff6e 	bl	80028b8 <HAL_ADC_Stop>
		HAL_Delay(5000);
 80059dc:	480f      	ldr	r0, [pc, #60]	; (8005a1c <main+0x13c>)
 80059de:	f7fc fdc3 	bl	8002568 <HAL_Delay>
	while (1) {
 80059e2:	e7d9      	b.n	8005998 <main+0xb8>
 80059e4:	200005b4 	.word	0x200005b4
 80059e8:	200005b8 	.word	0x200005b8
 80059ec:	20000640 	.word	0x20000640
 80059f0:	2000066e 	.word	0x2000066e
 80059f4:	2000066f 	.word	0x2000066f
 80059f8:	200005ba 	.word	0x200005ba
 80059fc:	200004b4 	.word	0x200004b4
 8005a00:	2000050c 	.word	0x2000050c
 8005a04:	20000644 	.word	0x20000644
 8005a08:	0800ae6c 	.word	0x0800ae6c
 8005a0c:	200005bc 	.word	0x200005bc
 8005a10:	200005c0 	.word	0x200005c0
 8005a14:	20000788 	.word	0x20000788
 8005a18:	50000400 	.word	0x50000400
 8005a1c:	00001388 	.word	0x00001388

08005a20 <HAL_GPIO_EXTI_Callback>:
	}
	return mic_ptp;
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
	if (GPIO_Pin == BTN1_Pin) {
 8005a20:	2380      	movs	r3, #128	; 0x80
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8005a22:	b570      	push	{r4, r5, r6, lr}
	if (GPIO_Pin == BTN1_Pin) {
 8005a24:	005b      	lsls	r3, r3, #1
 8005a26:	4298      	cmp	r0, r3
 8005a28:	d004      	beq.n	8005a34 <HAL_GPIO_EXTI_Callback+0x14>
			HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, gps_flag);
			//l70_standby(gps_flag);
			l70_mode(!gps_flag);
			gps_tick_ = HAL_GetTick();
		}
	} else if (GPIO_Pin == BTN2_Pin) {
 8005a2a:	2380      	movs	r3, #128	; 0x80
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	4298      	cmp	r0, r3
 8005a30:	d01d      	beq.n	8005a6e <HAL_GPIO_EXTI_Callback+0x4e>
			HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, sigfox_flag);
			sigfox_delay = 0;
			gps_tick_ = HAL_GetTick();
		}
	}
}
 8005a32:	bd70      	pop	{r4, r5, r6, pc}
		if ((HAL_GetTick() - gps_tick_) > 2000) {
 8005a34:	f7fc fd92 	bl	800255c <HAL_GetTick>
 8005a38:	4c1a      	ldr	r4, [pc, #104]	; (8005aa4 <HAL_GPIO_EXTI_Callback+0x84>)
 8005a3a:	6823      	ldr	r3, [r4, #0]
 8005a3c:	1ac0      	subs	r0, r0, r3
 8005a3e:	23fa      	movs	r3, #250	; 0xfa
 8005a40:	00db      	lsls	r3, r3, #3
 8005a42:	4298      	cmp	r0, r3
 8005a44:	d9f5      	bls.n	8005a32 <HAL_GPIO_EXTI_Callback+0x12>
			(gps_flag == 0) ? (gps_flag = 1) : (gps_flag = 0);
 8005a46:	4d18      	ldr	r5, [pc, #96]	; (8005aa8 <HAL_GPIO_EXTI_Callback+0x88>)
			HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, gps_flag);
 8005a48:	2120      	movs	r1, #32
			(gps_flag == 0) ? (gps_flag = 1) : (gps_flag = 0);
 8005a4a:	782a      	ldrb	r2, [r5, #0]
			HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, gps_flag);
 8005a4c:	4817      	ldr	r0, [pc, #92]	; (8005aac <HAL_GPIO_EXTI_Callback+0x8c>)
			(gps_flag == 0) ? (gps_flag = 1) : (gps_flag = 0);
 8005a4e:	4253      	negs	r3, r2
 8005a50:	415a      	adcs	r2, r3
 8005a52:	b2d2      	uxtb	r2, r2
 8005a54:	702a      	strb	r2, [r5, #0]
			HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, gps_flag);
 8005a56:	f7fd fb4d 	bl	80030f4 <HAL_GPIO_WritePin>
			l70_mode(!gps_flag);
 8005a5a:	7828      	ldrb	r0, [r5, #0]
 8005a5c:	4243      	negs	r3, r0
 8005a5e:	4158      	adcs	r0, r3
 8005a60:	b2c0      	uxtb	r0, r0
 8005a62:	f7ff fa71 	bl	8004f48 <l70_mode>
			gps_tick_ = HAL_GetTick();
 8005a66:	f7fc fd79 	bl	800255c <HAL_GetTick>
 8005a6a:	6020      	str	r0, [r4, #0]
 8005a6c:	e7e1      	b.n	8005a32 <HAL_GPIO_EXTI_Callback+0x12>
		if ((HAL_GetTick() - gps_tick_) > 2000) {
 8005a6e:	f7fc fd75 	bl	800255c <HAL_GetTick>
 8005a72:	4c0c      	ldr	r4, [pc, #48]	; (8005aa4 <HAL_GPIO_EXTI_Callback+0x84>)
 8005a74:	6823      	ldr	r3, [r4, #0]
 8005a76:	1ac0      	subs	r0, r0, r3
 8005a78:	23fa      	movs	r3, #250	; 0xfa
 8005a7a:	00db      	lsls	r3, r3, #3
 8005a7c:	4298      	cmp	r0, r3
 8005a7e:	d9d8      	bls.n	8005a32 <HAL_GPIO_EXTI_Callback+0x12>
			(sigfox_flag == 0) ? (sigfox_flag = 1) : (sigfox_flag = 0);
 8005a80:	4b0b      	ldr	r3, [pc, #44]	; (8005ab0 <HAL_GPIO_EXTI_Callback+0x90>)
			HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, sigfox_flag);
 8005a82:	480a      	ldr	r0, [pc, #40]	; (8005aac <HAL_GPIO_EXTI_Callback+0x8c>)
			(sigfox_flag == 0) ? (sigfox_flag = 1) : (sigfox_flag = 0);
 8005a84:	781a      	ldrb	r2, [r3, #0]
 8005a86:	4251      	negs	r1, r2
 8005a88:	414a      	adcs	r2, r1
			HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, sigfox_flag);
 8005a8a:	2108      	movs	r1, #8
			(sigfox_flag == 0) ? (sigfox_flag = 1) : (sigfox_flag = 0);
 8005a8c:	b2d2      	uxtb	r2, r2
 8005a8e:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, sigfox_flag);
 8005a90:	f7fd fb30 	bl	80030f4 <HAL_GPIO_WritePin>
			sigfox_delay = 0;
 8005a94:	2200      	movs	r2, #0
 8005a96:	4b07      	ldr	r3, [pc, #28]	; (8005ab4 <HAL_GPIO_EXTI_Callback+0x94>)
 8005a98:	701a      	strb	r2, [r3, #0]
			gps_tick_ = HAL_GetTick();
 8005a9a:	f7fc fd5f 	bl	800255c <HAL_GetTick>
 8005a9e:	6020      	str	r0, [r4, #0]
}
 8005aa0:	e7c7      	b.n	8005a32 <HAL_GPIO_EXTI_Callback+0x12>
 8005aa2:	46c0      	nop			; (mov r8, r8)
 8005aa4:	200005b4 	.word	0x200005b4
 8005aa8:	200005b8 	.word	0x200005b8
 8005aac:	50000400 	.word	0x50000400
 8005ab0:	2000066e 	.word	0x2000066e
 8005ab4:	2000066f 	.word	0x2000066f

08005ab8 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
	uint8_t x;
	uint32_t adc_m = 0;
	uint32_t adc_l = 0;
	for (x = 0; x < adc_buf_len; x++) {
		adc_l += adc_data[x];
 8005ab8:	490e      	ldr	r1, [pc, #56]	; (8005af4 <HAL_ADC_ConvCpltCallback+0x3c>)
 8005aba:	6888      	ldr	r0, [r1, #8]
 8005abc:	680b      	ldr	r3, [r1, #0]
 8005abe:	4684      	mov	ip, r0
		adc_m += adc_data[x + 1];
 8005ac0:	68c8      	ldr	r0, [r1, #12]
		adc_l += adc_data[x];
 8005ac2:	4463      	add	r3, ip
		adc_m += adc_data[x + 1];
 8005ac4:	4684      	mov	ip, r0
		adc_l += adc_data[x];
 8005ac6:	001a      	movs	r2, r3
 8005ac8:	6908      	ldr	r0, [r1, #16]
		adc_m += adc_data[x + 1];
 8005aca:	684b      	ldr	r3, [r1, #4]
 8005acc:	4463      	add	r3, ip
		adc_l += adc_data[x];
 8005ace:	4684      	mov	ip, r0
		adc_m += adc_data[x + 1];
 8005ad0:	6948      	ldr	r0, [r1, #20]
		adc_l += adc_data[x];
 8005ad2:	4462      	add	r2, ip
		adc_m += adc_data[x + 1];
 8005ad4:	4684      	mov	ip, r0
 8005ad6:	69c8      	ldr	r0, [r1, #28]
 8005ad8:	4463      	add	r3, ip
 8005ada:	4684      	mov	ip, r0
		adc_l += adc_data[x];
 8005adc:	6989      	ldr	r1, [r1, #24]
		adc_m += adc_data[x + 1];
 8005ade:	4463      	add	r3, ip
		adc_l += adc_data[x];
 8005ae0:	1852      	adds	r2, r2, r1
		x++;
	}
	ldr_output = (uint16_t) (adc_l / (adc_buf_len / 2));
 8005ae2:	0892      	lsrs	r2, r2, #2
 8005ae4:	4904      	ldr	r1, [pc, #16]	; (8005af8 <HAL_ADC_ConvCpltCallback+0x40>)
 8005ae6:	b292      	uxth	r2, r2
 8005ae8:	800a      	strh	r2, [r1, #0]
	mic_output = (uint16_t) (adc_m / (adc_buf_len / 2));
 8005aea:	089b      	lsrs	r3, r3, #2
 8005aec:	4a03      	ldr	r2, [pc, #12]	; (8005afc <HAL_ADC_ConvCpltCallback+0x44>)
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	8013      	strh	r3, [r2, #0]
}
 8005af2:	4770      	bx	lr
 8005af4:	20000644 	.word	0x20000644
 8005af8:	20000664 	.word	0x20000664
 8005afc:	200005ba 	.word	0x200005ba

08005b00 <Error_Handler>:
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8005b00:	4770      	bx	lr
 8005b02:	46c0      	nop			; (mov r8, r8)

08005b04 <sht30x_init>:
#include "usart.h"
#include "i2c.h"
#include "sht30x.h"

void sht30x_init(uint8_t address) {
	sht30x = &sht30x_info;
 8005b04:	4b04      	ldr	r3, [pc, #16]	; (8005b18 <sht30x_init+0x14>)
 8005b06:	4a05      	ldr	r2, [pc, #20]	; (8005b1c <sht30x_init+0x18>)

	sht30x->address = address << 1;
 8005b08:	0040      	lsls	r0, r0, #1
	sht30x = &sht30x_info;
 8005b0a:	6013      	str	r3, [r2, #0]
	sht30x->cTemp = 0;
 8005b0c:	2200      	movs	r2, #0
	sht30x->address = address << 1;
 8005b0e:	7018      	strb	r0, [r3, #0]
	sht30x->cTemp = 0;
 8005b10:	705a      	strb	r2, [r3, #1]
	sht30x->fTemp = 0;
 8005b12:	805a      	strh	r2, [r3, #2]
	sht30x->humidity = 0;
 8005b14:	711a      	strb	r2, [r3, #4]
}
 8005b16:	4770      	bx	lr
 8005b18:	20000668 	.word	0x20000668
 8005b1c:	20000670 	.word	0x20000670

08005b20 <getSigfoxPACID>:

/*
 * get sigfox wisol module ID and PAC
 * logged to debug serial port, usart1
 */
void getSigfoxPACID() {
 8005b20:	b570      	push	{r4, r5, r6, lr}
		usart_puts(&huart1, (char*) "\nVER - ");
 8005b22:	4e18      	ldr	r6, [pc, #96]	; (8005b84 <getSigfoxPACID+0x64>)
 8005b24:	4918      	ldr	r1, [pc, #96]	; (8005b88 <getSigfoxPACID+0x68>)
 8005b26:	0030      	movs	r0, r6
 8005b28:	f000 fb20 	bl	800616c <usart_puts>
	usart_puts(&hlpuart1, (char*) at_messages[type_]); //get pac
 8005b2c:	4c17      	ldr	r4, [pc, #92]	; (8005b8c <getSigfoxPACID+0x6c>)
 8005b2e:	4d18      	ldr	r5, [pc, #96]	; (8005b90 <getSigfoxPACID+0x70>)
 8005b30:	0020      	movs	r0, r4
 8005b32:	6829      	ldr	r1, [r5, #0]
 8005b34:	f000 fb1a 	bl	800616c <usart_puts>
	usart_send(&hlpuart1, '\r');
 8005b38:	210d      	movs	r1, #13
 8005b3a:	0020      	movs	r0, r4
 8005b3c:	f000 fb0a 	bl	8006154 <usart_send>
	CheckSigfoxVersion(DV_VERSION);
	HAL_Delay(200);
 8005b40:	20c8      	movs	r0, #200	; 0xc8
 8005b42:	f7fc fd11 	bl	8002568 <HAL_Delay>
		usart_puts(&huart1, (char*) "ID - ");
 8005b46:	0030      	movs	r0, r6
 8005b48:	4912      	ldr	r1, [pc, #72]	; (8005b94 <getSigfoxPACID+0x74>)
 8005b4a:	f000 fb0f 	bl	800616c <usart_puts>
	usart_puts(&hlpuart1, (char*) at_messages[type_]); //get pac
 8005b4e:	6869      	ldr	r1, [r5, #4]
 8005b50:	0020      	movs	r0, r4
 8005b52:	f000 fb0b 	bl	800616c <usart_puts>
	usart_send(&hlpuart1, '\r');
 8005b56:	210d      	movs	r1, #13
 8005b58:	0020      	movs	r0, r4
 8005b5a:	f000 fafb 	bl	8006154 <usart_send>
	CheckSigfoxVersion(DV_ID);
	HAL_Delay(200);
 8005b5e:	20c8      	movs	r0, #200	; 0xc8
 8005b60:	f7fc fd02 	bl	8002568 <HAL_Delay>
		usart_puts(&huart1, (char*) "PAC - ");
 8005b64:	0030      	movs	r0, r6
 8005b66:	490c      	ldr	r1, [pc, #48]	; (8005b98 <getSigfoxPACID+0x78>)
 8005b68:	f000 fb00 	bl	800616c <usart_puts>
	usart_puts(&hlpuart1, (char*) at_messages[type_]); //get pac
 8005b6c:	68a9      	ldr	r1, [r5, #8]
 8005b6e:	0020      	movs	r0, r4
 8005b70:	f000 fafc 	bl	800616c <usart_puts>
	usart_send(&hlpuart1, '\r');
 8005b74:	210d      	movs	r1, #13
 8005b76:	0020      	movs	r0, r4
 8005b78:	f000 faec 	bl	8006154 <usart_send>
	CheckSigfoxVersion(DV_PAC);
	HAL_Delay(200);
 8005b7c:	20c8      	movs	r0, #200	; 0xc8
 8005b7e:	f7fc fcf3 	bl	8002568 <HAL_Delay>
}
 8005b82:	bd70      	pop	{r4, r5, r6, pc}
 8005b84:	20000788 	.word	0x20000788
 8005b88:	0800ae8c 	.word	0x0800ae8c
 8005b8c:	20000708 	.word	0x20000708
 8005b90:	20000000 	.word	0x20000000
 8005b94:	0800ae94 	.word	0x0800ae94
 8005b98:	0800ae9c 	.word	0x0800ae9c

08005b9c <resetSigfoxModule>:

/*
 * reset sigfox module
 */
void resetSigfoxModule() {
 8005b9c:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(SFX_RST_GPIO_Port, SFX_RST_Pin, GPIO_PIN_RESET);
 8005b9e:	4c09      	ldr	r4, [pc, #36]	; (8005bc4 <resetSigfoxModule+0x28>)
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	2104      	movs	r1, #4
 8005ba4:	0020      	movs	r0, r4
 8005ba6:	f7fd faa5 	bl	80030f4 <HAL_GPIO_WritePin>
	HAL_Delay(250);
 8005baa:	20fa      	movs	r0, #250	; 0xfa
 8005bac:	f7fc fcdc 	bl	8002568 <HAL_Delay>
	HAL_GPIO_WritePin(SFX_RST_GPIO_Port, SFX_RST_Pin, GPIO_PIN_SET);
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	2104      	movs	r1, #4
 8005bb4:	0020      	movs	r0, r4
 8005bb6:	f7fd fa9d 	bl	80030f4 <HAL_GPIO_WritePin>
	HAL_Delay(250);
 8005bba:	20fa      	movs	r0, #250	; 0xfa
 8005bbc:	f7fc fcd4 	bl	8002568 <HAL_Delay>
}
 8005bc0:	bd10      	pop	{r4, pc}
 8005bc2:	46c0      	nop			; (mov r8, r8)
 8005bc4:	50000400 	.word	0x50000400

08005bc8 <MX_SPI1_Init>:

/* SPI1 init function */
void MX_SPI1_Init(void)
{

  hspi1.Instance = SPI1;
 8005bc8:	480e      	ldr	r0, [pc, #56]	; (8005c04 <MX_SPI1_Init+0x3c>)
 8005bca:	4b0f      	ldr	r3, [pc, #60]	; (8005c08 <MX_SPI1_Init+0x40>)
{
 8005bcc:	b510      	push	{r4, lr}
  hspi1.Instance = SPI1;
 8005bce:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005bd0:	2382      	movs	r3, #130	; 0x82
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8005bd2:	2280      	movs	r2, #128	; 0x80
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005bd4:	005b      	lsls	r3, r3, #1
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8005bd6:	02d2      	lsls	r2, r2, #11
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005bd8:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005bda:	2300      	movs	r3, #0
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8005bdc:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8005bde:	2208      	movs	r2, #8
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005be0:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005be2:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005be4:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005be6:	6143      	str	r3, [r0, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005be8:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005bea:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005bec:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8005bee:	3307      	adds	r3, #7
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8005bf0:	61c2      	str	r2, [r0, #28]
  hspi1.Init.CRCPolynomial = 7;
 8005bf2:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005bf4:	f7fe fc84 	bl	8004500 <HAL_SPI_Init>
 8005bf8:	2800      	cmp	r0, #0
 8005bfa:	d100      	bne.n	8005bfe <MX_SPI1_Init+0x36>
  {
    Error_Handler();
  }

}
 8005bfc:	bd10      	pop	{r4, pc}
    Error_Handler();
 8005bfe:	f7ff ff7f 	bl	8005b00 <Error_Handler>
}
 8005c02:	e7fb      	b.n	8005bfc <MX_SPI1_Init+0x34>
 8005c04:	20000674 	.word	0x20000674
 8005c08:	40013000 	.word	0x40013000

08005c0c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005c0c:	b510      	push	{r4, lr}
 8005c0e:	0004      	movs	r4, r0
 8005c10:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c12:	2214      	movs	r2, #20
 8005c14:	2100      	movs	r1, #0
 8005c16:	a802      	add	r0, sp, #8
 8005c18:	f000 fb0e 	bl	8006238 <memset>
  if(spiHandle->Instance==SPI1)
 8005c1c:	4b11      	ldr	r3, [pc, #68]	; (8005c64 <HAL_SPI_MspInit+0x58>)
 8005c1e:	6822      	ldr	r2, [r4, #0]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d001      	beq.n	8005c28 <HAL_SPI_MspInit+0x1c>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8005c24:	b008      	add	sp, #32
 8005c26:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005c28:	2280      	movs	r2, #128	; 0x80
 8005c2a:	4b0f      	ldr	r3, [pc, #60]	; (8005c68 <HAL_SPI_MspInit+0x5c>)
 8005c2c:	0152      	lsls	r2, r2, #5
 8005c2e:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c30:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005c32:	430a      	orrs	r2, r1
 8005c34:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c36:	2201      	movs	r2, #1
 8005c38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c3a:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c3c:	4311      	orrs	r1, r2
 8005c3e:	62d9      	str	r1, [r3, #44]	; 0x2c
 8005c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c42:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c44:	401a      	ands	r2, r3
 8005c46:	9201      	str	r2, [sp, #4]
 8005c48:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = MEM_CS_Pin|MEM_CLK_Pin|MEM_DO_Pin|MEM_DI_Pin;
 8005c4a:	22f0      	movs	r2, #240	; 0xf0
 8005c4c:	2302      	movs	r3, #2
 8005c4e:	9202      	str	r2, [sp, #8]
 8005c50:	9303      	str	r3, [sp, #12]
 8005c52:	2200      	movs	r2, #0
 8005c54:	2303      	movs	r3, #3
 8005c56:	9204      	str	r2, [sp, #16]
 8005c58:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c5e:	f7fd f94d 	bl	8002efc <HAL_GPIO_Init>
}
 8005c62:	e7df      	b.n	8005c24 <HAL_SPI_MspInit+0x18>
 8005c64:	40013000 	.word	0x40013000
 8005c68:	40021000 	.word	0x40021000

08005c6c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c6c:	2101      	movs	r1, #1
 8005c6e:	4b05      	ldr	r3, [pc, #20]	; (8005c84 <HAL_MspInit+0x18>)
 8005c70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c72:	430a      	orrs	r2, r1
 8005c74:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8005c76:	2280      	movs	r2, #128	; 0x80
 8005c78:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005c7a:	0552      	lsls	r2, r2, #21
 8005c7c:	430a      	orrs	r2, r1
 8005c7e:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005c80:	4770      	bx	lr
 8005c82:	46c0      	nop			; (mov r8, r8)
 8005c84:	40021000 	.word	0x40021000

08005c88 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005c88:	4770      	bx	lr
 8005c8a:	46c0      	nop			; (mov r8, r8)

08005c8c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005c8c:	e7fe      	b.n	8005c8c <HardFault_Handler>
 8005c8e:	46c0      	nop			; (mov r8, r8)

08005c90 <SVC_Handler>:
 8005c90:	4770      	bx	lr
 8005c92:	46c0      	nop			; (mov r8, r8)

08005c94 <PendSV_Handler>:
 8005c94:	4770      	bx	lr
 8005c96:	46c0      	nop			; (mov r8, r8)

08005c98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005c98:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005c9a:	f7fc fc57 	bl	800254c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005c9e:	bd10      	pop	{r4, pc}

08005ca0 <EXTI4_15_IRQHandler>:
void EXTI4_15_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8005ca0:	2080      	movs	r0, #128	; 0x80
{
 8005ca2:	b510      	push	{r4, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8005ca4:	0040      	lsls	r0, r0, #1
 8005ca6:	f7fd fa2b 	bl	8003100 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8005caa:	2080      	movs	r0, #128	; 0x80
 8005cac:	0080      	lsls	r0, r0, #2
 8005cae:	f7fd fa27 	bl	8003100 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8005cb2:	bd10      	pop	{r4, pc}

08005cb4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005cb4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8005cb6:	4802      	ldr	r0, [pc, #8]	; (8005cc0 <DMA1_Channel1_IRQHandler+0xc>)
 8005cb8:	f7fd f8d0 	bl	8002e5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005cbc:	bd10      	pop	{r4, pc}
 8005cbe:	46c0      	nop			; (mov r8, r8)
 8005cc0:	200004c4 	.word	0x200004c4

08005cc4 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8005cc4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8005cc6:	4802      	ldr	r0, [pc, #8]	; (8005cd0 <ADC1_COMP_IRQHandler+0xc>)
 8005cc8:	f7fc fede 	bl	8002a88 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8005ccc:	bd10      	pop	{r4, pc}
 8005cce:	46c0      	nop			; (mov r8, r8)
 8005cd0:	2000050c 	.word	0x2000050c

08005cd4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8005cd4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005cd6:	4802      	ldr	r0, [pc, #8]	; (8005ce0 <USART1_IRQHandler+0xc>)
 8005cd8:	f7fe fe40 	bl	800495c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005cdc:	bd10      	pop	{r4, pc}
 8005cde:	46c0      	nop			; (mov r8, r8)
 8005ce0:	20000788 	.word	0x20000788

08005ce4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8005ce4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */
	//uint16_t size;
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005ce6:	4c0f      	ldr	r4, [pc, #60]	; (8005d24 <USART2_IRQHandler+0x40>)
 8005ce8:	0020      	movs	r0, r4
 8005cea:	f7fe fe37 	bl	800495c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
	if (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_RXNE)) {
 8005cee:	6823      	ldr	r3, [r4, #0]
 8005cf0:	69db      	ldr	r3, [r3, #28]
 8005cf2:	069b      	lsls	r3, r3, #26
 8005cf4:	d50d      	bpl.n	8005d12 <USART2_IRQHandler+0x2e>
		uint16_t u2_rx = (uint16_t) (USART2->RDR & 0x01FF);
 8005cf6:	4b0c      	ldr	r3, [pc, #48]	; (8005d28 <USART2_IRQHandler+0x44>)
 8005cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfa:	05db      	lsls	r3, r3, #23
 8005cfc:	0ddb      	lsrs	r3, r3, #23

		if (u2_rx == '\n' || u2_rx == '\r') {
 8005cfe:	2b0a      	cmp	r3, #10
 8005d00:	d008      	beq.n	8005d14 <USART2_IRQHandler+0x30>
 8005d02:	2b0d      	cmp	r3, #13
 8005d04:	d006      	beq.n	8005d14 <USART2_IRQHandler+0x30>
			l70_parse(&uart_buf[0], buf_cur_pos);
			buf_cur_pos = 0;
		} else {
			uart_buf[buf_cur_pos++] = u2_rx;
 8005d06:	4909      	ldr	r1, [pc, #36]	; (8005d2c <USART2_IRQHandler+0x48>)
 8005d08:	880a      	ldrh	r2, [r1, #0]
 8005d0a:	1c50      	adds	r0, r2, #1
 8005d0c:	8008      	strh	r0, [r1, #0]
 8005d0e:	4908      	ldr	r1, [pc, #32]	; (8005d30 <USART2_IRQHandler+0x4c>)
 8005d10:	548b      	strb	r3, [r1, r2]
		}
	}
  /* USER CODE END USART2_IRQn 1 */
}
 8005d12:	bd10      	pop	{r4, pc}
			l70_parse(&uart_buf[0], buf_cur_pos);
 8005d14:	4c05      	ldr	r4, [pc, #20]	; (8005d2c <USART2_IRQHandler+0x48>)
 8005d16:	4806      	ldr	r0, [pc, #24]	; (8005d30 <USART2_IRQHandler+0x4c>)
 8005d18:	8821      	ldrh	r1, [r4, #0]
 8005d1a:	f7ff f93b 	bl	8004f94 <l70_parse>
			buf_cur_pos = 0;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	8023      	strh	r3, [r4, #0]
 8005d22:	e7f6      	b.n	8005d12 <USART2_IRQHandler+0x2e>
 8005d24:	20000808 	.word	0x20000808
 8005d28:	40004400 	.word	0x40004400
 8005d2c:	200004b4 	.word	0x200004b4
 8005d30:	200002b0 	.word	0x200002b0

08005d34 <RNG_LPUART1_IRQHandler>:

/**
  * @brief This function handles RNG and LPUART1 Interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void RNG_LPUART1_IRQHandler(void)
{
 8005d34:	b510      	push	{r4, lr}
  /* USER CODE BEGIN RNG_LPUART1_IRQn 0 */

  /* USER CODE END RNG_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8005d36:	4c08      	ldr	r4, [pc, #32]	; (8005d58 <RNG_LPUART1_IRQHandler+0x24>)
 8005d38:	0020      	movs	r0, r4
 8005d3a:	f7fe fe0f 	bl	800495c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN RNG_LPUART1_IRQn 1 */
	if (__HAL_UART_GET_FLAG(&hlpuart1, UART_FLAG_RXNE)) {
 8005d3e:	6823      	ldr	r3, [r4, #0]
 8005d40:	69db      	ldr	r3, [r3, #28]
 8005d42:	069b      	lsls	r3, r3, #26
 8005d44:	d400      	bmi.n	8005d48 <RNG_LPUART1_IRQHandler+0x14>
		uint16_t lpu1_rx = (uint16_t) (LPUART1->RDR & 0x01FF);
		usart_send(&huart1, lpu1_rx);
	}
  /* USER CODE END RNG_LPUART1_IRQn 1 */
}
 8005d46:	bd10      	pop	{r4, pc}
		uint16_t lpu1_rx = (uint16_t) (LPUART1->RDR & 0x01FF);
 8005d48:	4b04      	ldr	r3, [pc, #16]	; (8005d5c <RNG_LPUART1_IRQHandler+0x28>)
		usart_send(&huart1, lpu1_rx);
 8005d4a:	4805      	ldr	r0, [pc, #20]	; (8005d60 <RNG_LPUART1_IRQHandler+0x2c>)
		uint16_t lpu1_rx = (uint16_t) (LPUART1->RDR & 0x01FF);
 8005d4c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005d4e:	05c9      	lsls	r1, r1, #23
		usart_send(&huart1, lpu1_rx);
 8005d50:	0dc9      	lsrs	r1, r1, #23
 8005d52:	f000 f9ff 	bl	8006154 <usart_send>
}
 8005d56:	e7f6      	b.n	8005d46 <RNG_LPUART1_IRQHandler+0x12>
 8005d58:	20000708 	.word	0x20000708
 8005d5c:	40004800 	.word	0x40004800
 8005d60:	20000788 	.word	0x20000788

08005d64 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8005d64:	2001      	movs	r0, #1
 8005d66:	4770      	bx	lr

08005d68 <_kill>:

int _kill(int pid, int sig)
{
 8005d68:	b510      	push	{r4, lr}
	errno = EINVAL;
 8005d6a:	f000 fa3b 	bl	80061e4 <__errno>
 8005d6e:	2316      	movs	r3, #22
 8005d70:	6003      	str	r3, [r0, #0]
	return -1;
 8005d72:	2001      	movs	r0, #1
}
 8005d74:	4240      	negs	r0, r0
 8005d76:	bd10      	pop	{r4, pc}

08005d78 <_exit>:

void _exit (int status)
{
 8005d78:	b510      	push	{r4, lr}
	errno = EINVAL;
 8005d7a:	f000 fa33 	bl	80061e4 <__errno>
 8005d7e:	2316      	movs	r3, #22
 8005d80:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8005d82:	e7fe      	b.n	8005d82 <_exit+0xa>

08005d84 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005d84:	b570      	push	{r4, r5, r6, lr}
 8005d86:	1e16      	subs	r6, r2, #0
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d88:	dd07      	ble.n	8005d9a <_read+0x16>
 8005d8a:	000c      	movs	r4, r1
 8005d8c:	188d      	adds	r5, r1, r2
	{
		*ptr++ = __io_getchar();
 8005d8e:	e000      	b.n	8005d92 <_read+0xe>
 8005d90:	bf00      	nop
 8005d92:	7020      	strb	r0, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d94:	3401      	adds	r4, #1
 8005d96:	42ac      	cmp	r4, r5
 8005d98:	d1f9      	bne.n	8005d8e <_read+0xa>
	}

return len;
}
 8005d9a:	0030      	movs	r0, r6
 8005d9c:	bd70      	pop	{r4, r5, r6, pc}
 8005d9e:	46c0      	nop			; (mov r8, r8)

08005da0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005da0:	b570      	push	{r4, r5, r6, lr}
 8005da2:	1e16      	subs	r6, r2, #0
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005da4:	dd07      	ble.n	8005db6 <_write+0x16>
 8005da6:	000c      	movs	r4, r1
 8005da8:	188d      	adds	r5, r1, r2
	{
		__io_putchar(*ptr++);
 8005daa:	7820      	ldrb	r0, [r4, #0]
 8005dac:	3401      	adds	r4, #1
 8005dae:	e000      	b.n	8005db2 <_write+0x12>
 8005db0:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005db2:	42ac      	cmp	r4, r5
 8005db4:	d1f9      	bne.n	8005daa <_write+0xa>
	}
	return len;
}
 8005db6:	0030      	movs	r0, r6
 8005db8:	bd70      	pop	{r4, r5, r6, pc}
 8005dba:	46c0      	nop			; (mov r8, r8)

08005dbc <_close>:

int _close(int file)
{
	return -1;
 8005dbc:	2001      	movs	r0, #1
}
 8005dbe:	4240      	negs	r0, r0
 8005dc0:	4770      	bx	lr
 8005dc2:	46c0      	nop			; (mov r8, r8)

08005dc4 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8005dc4:	2380      	movs	r3, #128	; 0x80
 8005dc6:	019b      	lsls	r3, r3, #6
	return 0;
}
 8005dc8:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8005dca:	604b      	str	r3, [r1, #4]
}
 8005dcc:	4770      	bx	lr
 8005dce:	46c0      	nop			; (mov r8, r8)

08005dd0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8005dd0:	2001      	movs	r0, #1
 8005dd2:	4770      	bx	lr

08005dd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8005dd4:	2000      	movs	r0, #0
 8005dd6:	4770      	bx	lr

08005dd8 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005dd8:	4a0c      	ldr	r2, [pc, #48]	; (8005e0c <_sbrk+0x34>)
{
 8005dda:	0003      	movs	r3, r0
	if (heap_end == 0)
 8005ddc:	6810      	ldr	r0, [r2, #0]
{
 8005dde:	b510      	push	{r4, lr}
	if (heap_end == 0)
 8005de0:	2800      	cmp	r0, #0
 8005de2:	d005      	beq.n	8005df0 <_sbrk+0x18>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8005de4:	4669      	mov	r1, sp
 8005de6:	18c3      	adds	r3, r0, r3
 8005de8:	428b      	cmp	r3, r1
 8005dea:	d807      	bhi.n	8005dfc <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8005dec:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8005dee:	bd10      	pop	{r4, pc}
	if (heap_end + incr > stack_ptr)
 8005df0:	4669      	mov	r1, sp
		heap_end = &end;
 8005df2:	4807      	ldr	r0, [pc, #28]	; (8005e10 <_sbrk+0x38>)
	if (heap_end + incr > stack_ptr)
 8005df4:	18c3      	adds	r3, r0, r3
		heap_end = &end;
 8005df6:	6010      	str	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8005df8:	428b      	cmp	r3, r1
 8005dfa:	d9f7      	bls.n	8005dec <_sbrk+0x14>
		errno = ENOMEM;
 8005dfc:	f000 f9f2 	bl	80061e4 <__errno>
 8005e00:	230c      	movs	r3, #12
 8005e02:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8005e04:	2001      	movs	r0, #1
 8005e06:	4240      	negs	r0, r0
 8005e08:	e7f1      	b.n	8005dee <_sbrk+0x16>
 8005e0a:	46c0      	nop			; (mov r8, r8)
 8005e0c:	20000204 	.word	0x20000204
 8005e10:	20000898 	.word	0x20000898

08005e14 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8005e14:	2280      	movs	r2, #128	; 0x80
 8005e16:	4b10      	ldr	r3, [pc, #64]	; (8005e58 <SystemInit+0x44>)
 8005e18:	0052      	lsls	r2, r2, #1
 8005e1a:	6819      	ldr	r1, [r3, #0]
 8005e1c:	430a      	orrs	r2, r1
 8005e1e:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8005e20:	68da      	ldr	r2, [r3, #12]
 8005e22:	490e      	ldr	r1, [pc, #56]	; (8005e5c <SystemInit+0x48>)
 8005e24:	400a      	ands	r2, r1
 8005e26:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	490d      	ldr	r1, [pc, #52]	; (8005e60 <SystemInit+0x4c>)
 8005e2c:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8005e2e:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8005e30:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8005e32:	689a      	ldr	r2, [r3, #8]
 8005e34:	438a      	bics	r2, r1
 8005e36:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	490a      	ldr	r1, [pc, #40]	; (8005e64 <SystemInit+0x50>)
 8005e3c:	400a      	ands	r2, r1
 8005e3e:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8005e40:	68da      	ldr	r2, [r3, #12]
 8005e42:	4909      	ldr	r1, [pc, #36]	; (8005e68 <SystemInit+0x54>)
 8005e44:	400a      	ands	r2, r1
 8005e46:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8005e48:	2200      	movs	r2, #0
 8005e4a:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005e4c:	2280      	movs	r2, #128	; 0x80
 8005e4e:	4b07      	ldr	r3, [pc, #28]	; (8005e6c <SystemInit+0x58>)
 8005e50:	0512      	lsls	r2, r2, #20
 8005e52:	609a      	str	r2, [r3, #8]
#endif
}
 8005e54:	4770      	bx	lr
 8005e56:	46c0      	nop			; (mov r8, r8)
 8005e58:	40021000 	.word	0x40021000
 8005e5c:	88ff400c 	.word	0x88ff400c
 8005e60:	fef6fff6 	.word	0xfef6fff6
 8005e64:	fffbffff 	.word	0xfffbffff
 8005e68:	ff02ffff 	.word	0xff02ffff
 8005e6c:	e000ed00 	.word	0xe000ed00

08005e70 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005e70:	b510      	push	{r4, lr}
 8005e72:	b08e      	sub	sp, #56	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005e74:	2208      	movs	r2, #8
 8005e76:	2100      	movs	r1, #0
 8005e78:	a802      	add	r0, sp, #8
 8005e7a:	f000 f9dd 	bl	8006238 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005e7e:	2210      	movs	r2, #16
 8005e80:	2100      	movs	r1, #0
 8005e82:	a804      	add	r0, sp, #16
 8005e84:	f000 f9d8 	bl	8006238 <memset>

  htim2.Instance = TIM2;
 8005e88:	2380      	movs	r3, #128	; 0x80
 8005e8a:	4c2e      	ldr	r4, [pc, #184]	; (8005f44 <MX_TIM2_Init+0xd4>)
 8005e8c:	05db      	lsls	r3, r3, #23
 8005e8e:	6023      	str	r3, [r4, #0]
  htim2.Init.Prescaler = 320-1;
 8005e90:	2340      	movs	r3, #64	; 0x40
 8005e92:	33ff      	adds	r3, #255	; 0xff
 8005e94:	6063      	str	r3, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e96:	2300      	movs	r3, #0
  htim2.Init.Period = 200-1;
 8005e98:	22c7      	movs	r2, #199	; 0xc7
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e9a:	60a3      	str	r3, [r4, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005e9c:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005e9e:	0020      	movs	r0, r4
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005ea0:	3380      	adds	r3, #128	; 0x80
  htim2.Init.Period = 200-1;
 8005ea2:	60e2      	str	r2, [r4, #12]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005ea4:	6163      	str	r3, [r4, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005ea6:	f7fe fb6b 	bl	8004580 <HAL_TIM_PWM_Init>
 8005eaa:	2800      	cmp	r0, #0
 8005eac:	d123      	bne.n	8005ef6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005eae:	2200      	movs	r2, #0
 8005eb0:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005eb2:	0020      	movs	r0, r4
 8005eb4:	a902      	add	r1, sp, #8
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005eb6:	9202      	str	r2, [sp, #8]
 8005eb8:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005eba:	f7fe fc89 	bl	80047d0 <HAL_TIMEx_MasterConfigSynchronization>
 8005ebe:	2800      	cmp	r0, #0
 8005ec0:	d11f      	bne.n	8005f02 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005ec2:	2260      	movs	r2, #96	; 0x60
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	9204      	str	r2, [sp, #16]
 8005ec8:	9305      	str	r3, [sp, #20]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	2300      	movs	r3, #0
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005ece:	0020      	movs	r0, r4
 8005ed0:	a904      	add	r1, sp, #16
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005ed2:	9206      	str	r2, [sp, #24]
 8005ed4:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005ed6:	f7fe fbc1 	bl	800465c <HAL_TIM_PWM_ConfigChannel>
 8005eda:	2800      	cmp	r0, #0
 8005edc:	d10e      	bne.n	8005efc <MX_TIM2_Init+0x8c>
  }
}
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ede:	2214      	movs	r2, #20
 8005ee0:	2100      	movs	r1, #0
 8005ee2:	a808      	add	r0, sp, #32
 8005ee4:	f000 f9a8 	bl	8006238 <memset>
  if(timHandle->Instance==TIM2)
 8005ee8:	2380      	movs	r3, #128	; 0x80
 8005eea:	6822      	ldr	r2, [r4, #0]
 8005eec:	05db      	lsls	r3, r3, #23
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d00a      	beq.n	8005f08 <MX_TIM2_Init+0x98>
}
 8005ef2:	b00e      	add	sp, #56	; 0x38
 8005ef4:	bd10      	pop	{r4, pc}
    Error_Handler();
 8005ef6:	f7ff fe03 	bl	8005b00 <Error_Handler>
 8005efa:	e7d8      	b.n	8005eae <MX_TIM2_Init+0x3e>
    Error_Handler();
 8005efc:	f7ff fe00 	bl	8005b00 <Error_Handler>
 8005f00:	e7ed      	b.n	8005ede <MX_TIM2_Init+0x6e>
    Error_Handler();
 8005f02:	f7ff fdfd 	bl	8005b00 <Error_Handler>
 8005f06:	e7dc      	b.n	8005ec2 <MX_TIM2_Init+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8005f08:	2100      	movs	r1, #0
 8005f0a:	0020      	movs	r0, r4
 8005f0c:	f7fe fb8c 	bl	8004628 <HAL_TIM_PWM_Stop>
  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f10:	2301      	movs	r3, #1
 8005f12:	4a0d      	ldr	r2, [pc, #52]	; (8005f48 <MX_TIM2_Init+0xd8>)
    GPIO_InitStruct.Pin = BUZZER_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8005f14:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f16:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8005f18:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f1a:	4319      	orrs	r1, r3
 8005f1c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005f1e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8005f20:	a908      	add	r1, sp, #32
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f22:	4013      	ands	r3, r2
 8005f24:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8005f26:	2280      	movs	r2, #128	; 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f28:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8005f2a:	2302      	movs	r3, #2
 8005f2c:	0212      	lsls	r2, r2, #8
 8005f2e:	9208      	str	r2, [sp, #32]
 8005f30:	9309      	str	r3, [sp, #36]	; 0x24
 8005f32:	2200      	movs	r2, #0
 8005f34:	2300      	movs	r3, #0
 8005f36:	920a      	str	r2, [sp, #40]	; 0x28
 8005f38:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 8005f3a:	2305      	movs	r3, #5
 8005f3c:	930c      	str	r3, [sp, #48]	; 0x30
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8005f3e:	f7fc ffdd 	bl	8002efc <HAL_GPIO_Init>
}
 8005f42:	e7d6      	b.n	8005ef2 <MX_TIM2_Init+0x82>
 8005f44:	200006cc 	.word	0x200006cc
 8005f48:	40021000 	.word	0x40021000

08005f4c <HAL_TIM_PWM_MspInit>:
  if(tim_pwmHandle->Instance==TIM2)
 8005f4c:	2380      	movs	r3, #128	; 0x80
 8005f4e:	6802      	ldr	r2, [r0, #0]
 8005f50:	05db      	lsls	r3, r3, #23
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d000      	beq.n	8005f58 <HAL_TIM_PWM_MspInit+0xc>
}
 8005f56:	4770      	bx	lr
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005f58:	2101      	movs	r1, #1
 8005f5a:	4a02      	ldr	r2, [pc, #8]	; (8005f64 <HAL_TIM_PWM_MspInit+0x18>)
 8005f5c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005f5e:	430b      	orrs	r3, r1
 8005f60:	6393      	str	r3, [r2, #56]	; 0x38
}
 8005f62:	e7f8      	b.n	8005f56 <HAL_TIM_PWM_MspInit+0xa>
 8005f64:	40021000 	.word	0x40021000

08005f68 <MX_LPUART1_UART_Init>:
/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{

  hlpuart1.Instance = LPUART1;
 8005f68:	480b      	ldr	r0, [pc, #44]	; (8005f98 <MX_LPUART1_UART_Init+0x30>)
 8005f6a:	4b0c      	ldr	r3, [pc, #48]	; (8005f9c <MX_LPUART1_UART_Init+0x34>)
{
 8005f6c:	b510      	push	{r4, lr}
  hlpuart1.Instance = LPUART1;
 8005f6e:	6003      	str	r3, [r0, #0]
  hlpuart1.Init.BaudRate = 9600;
 8005f70:	2396      	movs	r3, #150	; 0x96
 8005f72:	019b      	lsls	r3, r3, #6
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
  hlpuart1.Init.Parity = UART_PARITY_NONE;
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8005f74:	220c      	movs	r2, #12
  hlpuart1.Init.BaudRate = 9600;
 8005f76:	6043      	str	r3, [r0, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005f78:	2300      	movs	r3, #0
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8005f7a:	6142      	str	r2, [r0, #20]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005f7c:	6083      	str	r3, [r0, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8005f7e:	60c3      	str	r3, [r0, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8005f80:	6103      	str	r3, [r0, #16]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005f82:	6183      	str	r3, [r0, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005f84:	6203      	str	r3, [r0, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005f86:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8005f88:	f7fe fe5a 	bl	8004c40 <HAL_UART_Init>
 8005f8c:	2800      	cmp	r0, #0
 8005f8e:	d100      	bne.n	8005f92 <MX_LPUART1_UART_Init+0x2a>
  {
    Error_Handler();
  }

}
 8005f90:	bd10      	pop	{r4, pc}
    Error_Handler();
 8005f92:	f7ff fdb5 	bl	8005b00 <Error_Handler>
}
 8005f96:	e7fb      	b.n	8005f90 <MX_LPUART1_UART_Init+0x28>
 8005f98:	20000708 	.word	0x20000708
 8005f9c:	40004800 	.word	0x40004800

08005fa0 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
 8005fa0:	480c      	ldr	r0, [pc, #48]	; (8005fd4 <MX_USART1_UART_Init+0x34>)
 8005fa2:	4b0d      	ldr	r3, [pc, #52]	; (8005fd8 <MX_USART1_UART_Init+0x38>)
{
 8005fa4:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 8005fa6:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8005fa8:	23e1      	movs	r3, #225	; 0xe1
 8005faa:	025b      	lsls	r3, r3, #9
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005fac:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 115200;
 8005fae:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005fb0:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005fb2:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005fb4:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005fb6:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005fb8:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005fba:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005fbc:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005fbe:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005fc0:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005fc2:	f7fe fe3d 	bl	8004c40 <HAL_UART_Init>
 8005fc6:	2800      	cmp	r0, #0
 8005fc8:	d100      	bne.n	8005fcc <MX_USART1_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8005fca:	bd10      	pop	{r4, pc}
    Error_Handler();
 8005fcc:	f7ff fd98 	bl	8005b00 <Error_Handler>
}
 8005fd0:	e7fb      	b.n	8005fca <MX_USART1_UART_Init+0x2a>
 8005fd2:	46c0      	nop			; (mov r8, r8)
 8005fd4:	20000788 	.word	0x20000788
 8005fd8:	40013800 	.word	0x40013800

08005fdc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
 8005fdc:	480c      	ldr	r0, [pc, #48]	; (8006010 <MX_USART2_UART_Init+0x34>)
 8005fde:	4b0d      	ldr	r3, [pc, #52]	; (8006014 <MX_USART2_UART_Init+0x38>)
{
 8005fe0:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 8005fe2:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 9600;
 8005fe4:	2396      	movs	r3, #150	; 0x96
 8005fe6:	019b      	lsls	r3, r3, #6
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005fe8:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 9600;
 8005fea:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005fec:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005fee:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005ff0:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005ff2:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005ff4:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005ff6:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005ff8:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005ffa:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005ffc:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005ffe:	f7fe fe1f 	bl	8004c40 <HAL_UART_Init>
 8006002:	2800      	cmp	r0, #0
 8006004:	d100      	bne.n	8006008 <MX_USART2_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8006006:	bd10      	pop	{r4, pc}
    Error_Handler();
 8006008:	f7ff fd7a 	bl	8005b00 <Error_Handler>
}
 800600c:	e7fb      	b.n	8006006 <MX_USART2_UART_Init+0x2a>
 800600e:	46c0      	nop			; (mov r8, r8)
 8006010:	20000808 	.word	0x20000808
 8006014:	40004400 	.word	0x40004400

08006018 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006018:	b510      	push	{r4, lr}
 800601a:	0004      	movs	r4, r0
 800601c:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800601e:	2214      	movs	r2, #20
 8006020:	2100      	movs	r1, #0
 8006022:	a804      	add	r0, sp, #16
 8006024:	f000 f908 	bl	8006238 <memset>
  if(uartHandle->Instance==LPUART1)
 8006028:	6823      	ldr	r3, [r4, #0]
 800602a:	4a44      	ldr	r2, [pc, #272]	; (800613c <HAL_UART_MspInit+0x124>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d007      	beq.n	8006040 <HAL_UART_MspInit+0x28>
  /* USER CODE BEGIN LPUART1_MspInit 1 */
    memset(uart_buf, 0, 512);
	__HAL_UART_ENABLE_IT(uartHandle, UART_IT_RXNE);
  /* USER CODE END LPUART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART1)
 8006030:	4a43      	ldr	r2, [pc, #268]	; (8006140 <HAL_UART_MspInit+0x128>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d035      	beq.n	80060a2 <HAL_UART_MspInit+0x8a>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8006036:	4a43      	ldr	r2, [pc, #268]	; (8006144 <HAL_UART_MspInit+0x12c>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d059      	beq.n	80060f0 <HAL_UART_MspInit+0xd8>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */
		__HAL_UART_ENABLE_IT(uartHandle, UART_IT_RXNE);
  /* USER CODE END USART2_MspInit 1 */
  }
}
 800603c:	b00a      	add	sp, #40	; 0x28
 800603e:	bd10      	pop	{r4, pc}
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8006040:	2280      	movs	r2, #128	; 0x80
 8006042:	4b41      	ldr	r3, [pc, #260]	; (8006148 <HAL_UART_MspInit+0x130>)
 8006044:	02d2      	lsls	r2, r2, #11
 8006046:	6b99      	ldr	r1, [r3, #56]	; 0x38
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006048:	4840      	ldr	r0, [pc, #256]	; (800614c <HAL_UART_MspInit+0x134>)
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800604a:	430a      	orrs	r2, r1
 800604c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800604e:	2202      	movs	r2, #2
 8006050:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006052:	4311      	orrs	r1, r2
 8006054:	62d9      	str	r1, [r3, #44]	; 0x2c
 8006056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006058:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800605a:	401a      	ands	r2, r3
 800605c:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Pin = SFX_RX_Pin|SFX_TX_Pin;
 800605e:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006060:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = SFX_RX_Pin|SFX_TX_Pin;
 8006062:	2302      	movs	r3, #2
 8006064:	0112      	lsls	r2, r2, #4
 8006066:	9204      	str	r2, [sp, #16]
 8006068:	9305      	str	r3, [sp, #20]
 800606a:	2200      	movs	r2, #0
 800606c:	2303      	movs	r3, #3
 800606e:	9206      	str	r2, [sp, #24]
 8006070:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_LPUART1;
 8006072:	2304      	movs	r3, #4
 8006074:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006076:	f7fc ff41 	bl	8002efc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(RNG_LPUART1_IRQn, 0, 0);
 800607a:	2200      	movs	r2, #0
 800607c:	2100      	movs	r1, #0
 800607e:	201d      	movs	r0, #29
 8006080:	f7fc fde4 	bl	8002c4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_LPUART1_IRQn);
 8006084:	201d      	movs	r0, #29
 8006086:	f7fc fe13 	bl	8002cb0 <HAL_NVIC_EnableIRQ>
    memset(uart_buf, 0, 512);
 800608a:	2280      	movs	r2, #128	; 0x80
 800608c:	2100      	movs	r1, #0
 800608e:	4830      	ldr	r0, [pc, #192]	; (8006150 <HAL_UART_MspInit+0x138>)
 8006090:	0092      	lsls	r2, r2, #2
 8006092:	f000 f8d1 	bl	8006238 <memset>
		__HAL_UART_ENABLE_IT(uartHandle, UART_IT_RXNE);
 8006096:	2120      	movs	r1, #32
 8006098:	6822      	ldr	r2, [r4, #0]
 800609a:	6813      	ldr	r3, [r2, #0]
 800609c:	430b      	orrs	r3, r1
 800609e:	6013      	str	r3, [r2, #0]
}
 80060a0:	e7cc      	b.n	800603c <HAL_UART_MspInit+0x24>
    __HAL_RCC_USART1_CLK_ENABLE();
 80060a2:	2280      	movs	r2, #128	; 0x80
 80060a4:	4b28      	ldr	r3, [pc, #160]	; (8006148 <HAL_UART_MspInit+0x130>)
 80060a6:	01d2      	lsls	r2, r2, #7
 80060a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060aa:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART1_CLK_ENABLE();
 80060ac:	430a      	orrs	r2, r1
 80060ae:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060b0:	2201      	movs	r2, #1
 80060b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060b4:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060b6:	4311      	orrs	r1, r2
 80060b8:	62d9      	str	r1, [r3, #44]	; 0x2c
 80060ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060bc:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060be:	401a      	ands	r2, r3
 80060c0:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Pin = DBG_TX_Pin|DBG_RX_Pin;
 80060c2:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060c4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = DBG_TX_Pin|DBG_RX_Pin;
 80060c6:	2302      	movs	r3, #2
 80060c8:	00d2      	lsls	r2, r2, #3
 80060ca:	9204      	str	r2, [sp, #16]
 80060cc:	9305      	str	r3, [sp, #20]
 80060ce:	2200      	movs	r2, #0
 80060d0:	2303      	movs	r3, #3
 80060d2:	9206      	str	r2, [sp, #24]
 80060d4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80060d6:	2304      	movs	r3, #4
 80060d8:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060da:	f7fc ff0f 	bl	8002efc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80060de:	2200      	movs	r2, #0
 80060e0:	2100      	movs	r1, #0
 80060e2:	201b      	movs	r0, #27
 80060e4:	f7fc fdb2 	bl	8002c4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80060e8:	201b      	movs	r0, #27
 80060ea:	f7fc fde1 	bl	8002cb0 <HAL_NVIC_EnableIRQ>
 80060ee:	e7a5      	b.n	800603c <HAL_UART_MspInit+0x24>
    __HAL_RCC_USART2_CLK_ENABLE();
 80060f0:	2280      	movs	r2, #128	; 0x80
 80060f2:	4b15      	ldr	r3, [pc, #84]	; (8006148 <HAL_UART_MspInit+0x130>)
 80060f4:	0292      	lsls	r2, r2, #10
 80060f6:	6b99      	ldr	r1, [r3, #56]	; 0x38
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060f8:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART2_CLK_ENABLE();
 80060fa:	430a      	orrs	r2, r1
 80060fc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060fe:	2201      	movs	r2, #1
 8006100:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006102:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006104:	4311      	orrs	r1, r2
 8006106:	62d9      	str	r1, [r3, #44]	; 0x2c
 8006108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800610a:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800610c:	401a      	ands	r2, r3
 800610e:	9203      	str	r2, [sp, #12]
 8006110:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPS_RXD_Pin|GPS_TXD_Pin;
 8006112:	220c      	movs	r2, #12
 8006114:	2302      	movs	r3, #2
 8006116:	9204      	str	r2, [sp, #16]
 8006118:	9305      	str	r3, [sp, #20]
 800611a:	2200      	movs	r2, #0
 800611c:	2303      	movs	r3, #3
 800611e:	9206      	str	r2, [sp, #24]
 8006120:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8006122:	2304      	movs	r3, #4
 8006124:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006126:	f7fc fee9 	bl	8002efc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800612a:	2200      	movs	r2, #0
 800612c:	2100      	movs	r1, #0
 800612e:	201c      	movs	r0, #28
 8006130:	f7fc fd8c 	bl	8002c4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006134:	201c      	movs	r0, #28
 8006136:	f7fc fdbb 	bl	8002cb0 <HAL_NVIC_EnableIRQ>
 800613a:	e7ac      	b.n	8006096 <HAL_UART_MspInit+0x7e>
 800613c:	40004800 	.word	0x40004800
 8006140:	40013800 	.word	0x40013800
 8006144:	40004400 	.word	0x40004400
 8006148:	40021000 	.word	0x40021000
 800614c:	50000400 	.word	0x50000400
 8006150:	200002b0 	.word	0x200002b0

08006154 <usart_send>:

	return (uint16_t) (uartHandle->Instance->RDR & (uint16_t) 0x01FF);

}

void usart_send(UART_HandleTypeDef *uartHandle, uint16_t Data) {
 8006154:	b500      	push	{lr}
 8006156:	b083      	sub	sp, #12
 8006158:	466a      	mov	r2, sp
 800615a:	000b      	movs	r3, r1
 800615c:	1d91      	adds	r1, r2, #6
 800615e:	800b      	strh	r3, [r1, #0]
	/*uartHandle->Instance->TDR = (Data & (uint16_t) 0x01FF);

	 while ((uartHandle->Instance->ISR & UART_FLAG_TXE) != (uint16_t) RESET) {
	 }*/
	HAL_UART_Transmit(uartHandle, (uint8_t*) &Data, 1, 100);
 8006160:	2201      	movs	r2, #1
 8006162:	2364      	movs	r3, #100	; 0x64
 8006164:	f7fe fb52 	bl	800480c <HAL_UART_Transmit>
}
 8006168:	b003      	add	sp, #12
 800616a:	bd00      	pop	{pc}

0800616c <usart_puts>:

void usart_puts(UART_HandleTypeDef *uartHandle, char *str) {
 800616c:	b570      	push	{r4, r5, r6, lr}
	while (*str) {
 800616e:	780b      	ldrb	r3, [r1, #0]
void usart_puts(UART_HandleTypeDef *uartHandle, char *str) {
 8006170:	0005      	movs	r5, r0
 8006172:	000c      	movs	r4, r1
	while (*str) {
 8006174:	2b00      	cmp	r3, #0
 8006176:	d009      	beq.n	800618c <usart_puts+0x20>
		/*while ((uartHandle->Instance->ISR & UART_FLAG_TXE) != (uint16_t) RESET) {

		 uartHandle->Instance->TDR = (uint16_t) (*str++ & 0x01FF);
		 }*/
		HAL_UART_Transmit(uartHandle, (uint8_t*) str++, 1, 100);
 8006178:	0021      	movs	r1, r4
 800617a:	2364      	movs	r3, #100	; 0x64
 800617c:	2201      	movs	r2, #1
 800617e:	0028      	movs	r0, r5
 8006180:	3401      	adds	r4, #1
 8006182:	f7fe fb43 	bl	800480c <HAL_UART_Transmit>
	while (*str) {
 8006186:	7823      	ldrb	r3, [r4, #0]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d1f5      	bne.n	8006178 <usart_puts+0xc>
	}
}
 800618c:	bd70      	pop	{r4, r5, r6, pc}
 800618e:	46c0      	nop			; (mov r8, r8)

08006190 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8006190:	480d      	ldr	r0, [pc, #52]	; (80061c8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8006192:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8006194:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006196:	e003      	b.n	80061a0 <LoopCopyDataInit>

08006198 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006198:	4b0c      	ldr	r3, [pc, #48]	; (80061cc <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 800619a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800619c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800619e:	3104      	adds	r1, #4

080061a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80061a0:	480b      	ldr	r0, [pc, #44]	; (80061d0 <LoopForever+0xa>)
  ldr  r3, =_edata
 80061a2:	4b0c      	ldr	r3, [pc, #48]	; (80061d4 <LoopForever+0xe>)
  adds  r2, r0, r1
 80061a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80061a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80061a8:	d3f6      	bcc.n	8006198 <CopyDataInit>
  ldr  r2, =_sbss
 80061aa:	4a0b      	ldr	r2, [pc, #44]	; (80061d8 <LoopForever+0x12>)
  b  LoopFillZerobss
 80061ac:	e002      	b.n	80061b4 <LoopFillZerobss>

080061ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80061ae:	2300      	movs	r3, #0
  str  r3, [r2]
 80061b0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80061b2:	3204      	adds	r2, #4

080061b4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 80061b4:	4b09      	ldr	r3, [pc, #36]	; (80061dc <LoopForever+0x16>)
  cmp  r2, r3
 80061b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80061b8:	d3f9      	bcc.n	80061ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80061ba:	f7ff fe2b 	bl	8005e14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80061be:	f000 f817 	bl	80061f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80061c2:	f7ff fb8d 	bl	80058e0 <main>

080061c6 <LoopForever>:

LoopForever:
    b LoopForever
 80061c6:	e7fe      	b.n	80061c6 <LoopForever>
   ldr   r0, =_estack
 80061c8:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 80061cc:	0800b3ac 	.word	0x0800b3ac
  ldr  r0, =_sdata
 80061d0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80061d4:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 80061d8:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 80061dc:	20000898 	.word	0x20000898

080061e0 <DMA1_Channel2_3_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80061e0:	e7fe      	b.n	80061e0 <DMA1_Channel2_3_IRQHandler>
	...

080061e4 <__errno>:
 80061e4:	4b01      	ldr	r3, [pc, #4]	; (80061ec <__errno+0x8>)
 80061e6:	6818      	ldr	r0, [r3, #0]
 80061e8:	4770      	bx	lr
 80061ea:	46c0      	nop			; (mov r8, r8)
 80061ec:	20000014 	.word	0x20000014

080061f0 <__libc_init_array>:
 80061f0:	b570      	push	{r4, r5, r6, lr}
 80061f2:	2600      	movs	r6, #0
 80061f4:	4d0c      	ldr	r5, [pc, #48]	; (8006228 <__libc_init_array+0x38>)
 80061f6:	4c0d      	ldr	r4, [pc, #52]	; (800622c <__libc_init_array+0x3c>)
 80061f8:	1b64      	subs	r4, r4, r5
 80061fa:	10a4      	asrs	r4, r4, #2
 80061fc:	42a6      	cmp	r6, r4
 80061fe:	d109      	bne.n	8006214 <__libc_init_array+0x24>
 8006200:	2600      	movs	r6, #0
 8006202:	f004 fd35 	bl	800ac70 <_init>
 8006206:	4d0a      	ldr	r5, [pc, #40]	; (8006230 <__libc_init_array+0x40>)
 8006208:	4c0a      	ldr	r4, [pc, #40]	; (8006234 <__libc_init_array+0x44>)
 800620a:	1b64      	subs	r4, r4, r5
 800620c:	10a4      	asrs	r4, r4, #2
 800620e:	42a6      	cmp	r6, r4
 8006210:	d105      	bne.n	800621e <__libc_init_array+0x2e>
 8006212:	bd70      	pop	{r4, r5, r6, pc}
 8006214:	00b3      	lsls	r3, r6, #2
 8006216:	58eb      	ldr	r3, [r5, r3]
 8006218:	4798      	blx	r3
 800621a:	3601      	adds	r6, #1
 800621c:	e7ee      	b.n	80061fc <__libc_init_array+0xc>
 800621e:	00b3      	lsls	r3, r6, #2
 8006220:	58eb      	ldr	r3, [r5, r3]
 8006222:	4798      	blx	r3
 8006224:	3601      	adds	r6, #1
 8006226:	e7f2      	b.n	800620e <__libc_init_array+0x1e>
 8006228:	0800b3a4 	.word	0x0800b3a4
 800622c:	0800b3a4 	.word	0x0800b3a4
 8006230:	0800b3a4 	.word	0x0800b3a4
 8006234:	0800b3a8 	.word	0x0800b3a8

08006238 <memset>:
 8006238:	0003      	movs	r3, r0
 800623a:	1882      	adds	r2, r0, r2
 800623c:	4293      	cmp	r3, r2
 800623e:	d100      	bne.n	8006242 <memset+0xa>
 8006240:	4770      	bx	lr
 8006242:	7019      	strb	r1, [r3, #0]
 8006244:	3301      	adds	r3, #1
 8006246:	e7f9      	b.n	800623c <memset+0x4>

08006248 <__cvt>:
 8006248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800624a:	001e      	movs	r6, r3
 800624c:	2300      	movs	r3, #0
 800624e:	0014      	movs	r4, r2
 8006250:	b08b      	sub	sp, #44	; 0x2c
 8006252:	429e      	cmp	r6, r3
 8006254:	da04      	bge.n	8006260 <__cvt+0x18>
 8006256:	2180      	movs	r1, #128	; 0x80
 8006258:	0609      	lsls	r1, r1, #24
 800625a:	1873      	adds	r3, r6, r1
 800625c:	001e      	movs	r6, r3
 800625e:	232d      	movs	r3, #45	; 0x2d
 8006260:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006262:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006264:	7013      	strb	r3, [r2, #0]
 8006266:	2320      	movs	r3, #32
 8006268:	2203      	movs	r2, #3
 800626a:	439f      	bics	r7, r3
 800626c:	2f46      	cmp	r7, #70	; 0x46
 800626e:	d007      	beq.n	8006280 <__cvt+0x38>
 8006270:	003b      	movs	r3, r7
 8006272:	3b45      	subs	r3, #69	; 0x45
 8006274:	4259      	negs	r1, r3
 8006276:	414b      	adcs	r3, r1
 8006278:	9910      	ldr	r1, [sp, #64]	; 0x40
 800627a:	3a01      	subs	r2, #1
 800627c:	18cb      	adds	r3, r1, r3
 800627e:	9310      	str	r3, [sp, #64]	; 0x40
 8006280:	ab09      	add	r3, sp, #36	; 0x24
 8006282:	9304      	str	r3, [sp, #16]
 8006284:	ab08      	add	r3, sp, #32
 8006286:	9303      	str	r3, [sp, #12]
 8006288:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800628a:	9200      	str	r2, [sp, #0]
 800628c:	9302      	str	r3, [sp, #8]
 800628e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006290:	0022      	movs	r2, r4
 8006292:	9301      	str	r3, [sp, #4]
 8006294:	0033      	movs	r3, r6
 8006296:	f001 fe11 	bl	8007ebc <_dtoa_r>
 800629a:	0005      	movs	r5, r0
 800629c:	2f47      	cmp	r7, #71	; 0x47
 800629e:	d102      	bne.n	80062a6 <__cvt+0x5e>
 80062a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80062a2:	07db      	lsls	r3, r3, #31
 80062a4:	d528      	bpl.n	80062f8 <__cvt+0xb0>
 80062a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80062a8:	18eb      	adds	r3, r5, r3
 80062aa:	9307      	str	r3, [sp, #28]
 80062ac:	2f46      	cmp	r7, #70	; 0x46
 80062ae:	d114      	bne.n	80062da <__cvt+0x92>
 80062b0:	782b      	ldrb	r3, [r5, #0]
 80062b2:	2b30      	cmp	r3, #48	; 0x30
 80062b4:	d10c      	bne.n	80062d0 <__cvt+0x88>
 80062b6:	2200      	movs	r2, #0
 80062b8:	2300      	movs	r3, #0
 80062ba:	0020      	movs	r0, r4
 80062bc:	0031      	movs	r1, r6
 80062be:	f7fa f8c5 	bl	800044c <__aeabi_dcmpeq>
 80062c2:	2800      	cmp	r0, #0
 80062c4:	d104      	bne.n	80062d0 <__cvt+0x88>
 80062c6:	2301      	movs	r3, #1
 80062c8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80062ca:	1a9b      	subs	r3, r3, r2
 80062cc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80062ce:	6013      	str	r3, [r2, #0]
 80062d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80062d2:	9a07      	ldr	r2, [sp, #28]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	18d3      	adds	r3, r2, r3
 80062d8:	9307      	str	r3, [sp, #28]
 80062da:	2200      	movs	r2, #0
 80062dc:	2300      	movs	r3, #0
 80062de:	0020      	movs	r0, r4
 80062e0:	0031      	movs	r1, r6
 80062e2:	f7fa f8b3 	bl	800044c <__aeabi_dcmpeq>
 80062e6:	2800      	cmp	r0, #0
 80062e8:	d001      	beq.n	80062ee <__cvt+0xa6>
 80062ea:	9b07      	ldr	r3, [sp, #28]
 80062ec:	9309      	str	r3, [sp, #36]	; 0x24
 80062ee:	2230      	movs	r2, #48	; 0x30
 80062f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062f2:	9907      	ldr	r1, [sp, #28]
 80062f4:	428b      	cmp	r3, r1
 80062f6:	d306      	bcc.n	8006306 <__cvt+0xbe>
 80062f8:	0028      	movs	r0, r5
 80062fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062fc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80062fe:	1b5b      	subs	r3, r3, r5
 8006300:	6013      	str	r3, [r2, #0]
 8006302:	b00b      	add	sp, #44	; 0x2c
 8006304:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006306:	1c59      	adds	r1, r3, #1
 8006308:	9109      	str	r1, [sp, #36]	; 0x24
 800630a:	701a      	strb	r2, [r3, #0]
 800630c:	e7f0      	b.n	80062f0 <__cvt+0xa8>

0800630e <__exponent>:
 800630e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006310:	1c83      	adds	r3, r0, #2
 8006312:	b087      	sub	sp, #28
 8006314:	9303      	str	r3, [sp, #12]
 8006316:	0005      	movs	r5, r0
 8006318:	000c      	movs	r4, r1
 800631a:	232b      	movs	r3, #43	; 0x2b
 800631c:	7002      	strb	r2, [r0, #0]
 800631e:	2900      	cmp	r1, #0
 8006320:	da01      	bge.n	8006326 <__exponent+0x18>
 8006322:	424c      	negs	r4, r1
 8006324:	3302      	adds	r3, #2
 8006326:	706b      	strb	r3, [r5, #1]
 8006328:	2c09      	cmp	r4, #9
 800632a:	dd31      	ble.n	8006390 <__exponent+0x82>
 800632c:	270a      	movs	r7, #10
 800632e:	ab04      	add	r3, sp, #16
 8006330:	1dde      	adds	r6, r3, #7
 8006332:	0020      	movs	r0, r4
 8006334:	0039      	movs	r1, r7
 8006336:	9601      	str	r6, [sp, #4]
 8006338:	f7fa f872 	bl	8000420 <__aeabi_idivmod>
 800633c:	3e01      	subs	r6, #1
 800633e:	3130      	adds	r1, #48	; 0x30
 8006340:	0020      	movs	r0, r4
 8006342:	7031      	strb	r1, [r6, #0]
 8006344:	0039      	movs	r1, r7
 8006346:	9402      	str	r4, [sp, #8]
 8006348:	f7f9 ff84 	bl	8000254 <__divsi3>
 800634c:	9b02      	ldr	r3, [sp, #8]
 800634e:	0004      	movs	r4, r0
 8006350:	2b63      	cmp	r3, #99	; 0x63
 8006352:	dcee      	bgt.n	8006332 <__exponent+0x24>
 8006354:	9b01      	ldr	r3, [sp, #4]
 8006356:	3430      	adds	r4, #48	; 0x30
 8006358:	1e9a      	subs	r2, r3, #2
 800635a:	0013      	movs	r3, r2
 800635c:	9903      	ldr	r1, [sp, #12]
 800635e:	7014      	strb	r4, [r2, #0]
 8006360:	a804      	add	r0, sp, #16
 8006362:	3007      	adds	r0, #7
 8006364:	4298      	cmp	r0, r3
 8006366:	d80e      	bhi.n	8006386 <__exponent+0x78>
 8006368:	ab04      	add	r3, sp, #16
 800636a:	3307      	adds	r3, #7
 800636c:	2000      	movs	r0, #0
 800636e:	429a      	cmp	r2, r3
 8006370:	d804      	bhi.n	800637c <__exponent+0x6e>
 8006372:	ab04      	add	r3, sp, #16
 8006374:	3009      	adds	r0, #9
 8006376:	18c0      	adds	r0, r0, r3
 8006378:	9b01      	ldr	r3, [sp, #4]
 800637a:	1ac0      	subs	r0, r0, r3
 800637c:	9b03      	ldr	r3, [sp, #12]
 800637e:	1818      	adds	r0, r3, r0
 8006380:	1b40      	subs	r0, r0, r5
 8006382:	b007      	add	sp, #28
 8006384:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006386:	7818      	ldrb	r0, [r3, #0]
 8006388:	3301      	adds	r3, #1
 800638a:	7008      	strb	r0, [r1, #0]
 800638c:	3101      	adds	r1, #1
 800638e:	e7e7      	b.n	8006360 <__exponent+0x52>
 8006390:	2330      	movs	r3, #48	; 0x30
 8006392:	18e4      	adds	r4, r4, r3
 8006394:	70ab      	strb	r3, [r5, #2]
 8006396:	1d28      	adds	r0, r5, #4
 8006398:	70ec      	strb	r4, [r5, #3]
 800639a:	e7f1      	b.n	8006380 <__exponent+0x72>

0800639c <_printf_float>:
 800639c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800639e:	b095      	sub	sp, #84	; 0x54
 80063a0:	000c      	movs	r4, r1
 80063a2:	9208      	str	r2, [sp, #32]
 80063a4:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80063a6:	9309      	str	r3, [sp, #36]	; 0x24
 80063a8:	0007      	movs	r7, r0
 80063aa:	f002 ff17 	bl	80091dc <_localeconv_r>
 80063ae:	6803      	ldr	r3, [r0, #0]
 80063b0:	0018      	movs	r0, r3
 80063b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80063b4:	f7f9 fea8 	bl	8000108 <strlen>
 80063b8:	2300      	movs	r3, #0
 80063ba:	9312      	str	r3, [sp, #72]	; 0x48
 80063bc:	7e23      	ldrb	r3, [r4, #24]
 80063be:	2207      	movs	r2, #7
 80063c0:	001e      	movs	r6, r3
 80063c2:	6823      	ldr	r3, [r4, #0]
 80063c4:	900d      	str	r0, [sp, #52]	; 0x34
 80063c6:	930c      	str	r3, [sp, #48]	; 0x30
 80063c8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80063ca:	682b      	ldr	r3, [r5, #0]
 80063cc:	05c9      	lsls	r1, r1, #23
 80063ce:	d547      	bpl.n	8006460 <_printf_float+0xc4>
 80063d0:	189b      	adds	r3, r3, r2
 80063d2:	4393      	bics	r3, r2
 80063d4:	001a      	movs	r2, r3
 80063d6:	3208      	adds	r2, #8
 80063d8:	602a      	str	r2, [r5, #0]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	64a2      	str	r2, [r4, #72]	; 0x48
 80063e0:	64e3      	str	r3, [r4, #76]	; 0x4c
 80063e2:	2201      	movs	r2, #1
 80063e4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80063e6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80063e8:	930a      	str	r3, [sp, #40]	; 0x28
 80063ea:	006b      	lsls	r3, r5, #1
 80063ec:	085b      	lsrs	r3, r3, #1
 80063ee:	930e      	str	r3, [sp, #56]	; 0x38
 80063f0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80063f2:	4ba8      	ldr	r3, [pc, #672]	; (8006694 <_printf_float+0x2f8>)
 80063f4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80063f6:	4252      	negs	r2, r2
 80063f8:	f7fb ff20 	bl	800223c <__aeabi_dcmpun>
 80063fc:	2800      	cmp	r0, #0
 80063fe:	d131      	bne.n	8006464 <_printf_float+0xc8>
 8006400:	2201      	movs	r2, #1
 8006402:	4ba4      	ldr	r3, [pc, #656]	; (8006694 <_printf_float+0x2f8>)
 8006404:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006406:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006408:	4252      	negs	r2, r2
 800640a:	f7fa f82f 	bl	800046c <__aeabi_dcmple>
 800640e:	2800      	cmp	r0, #0
 8006410:	d128      	bne.n	8006464 <_printf_float+0xc8>
 8006412:	2200      	movs	r2, #0
 8006414:	2300      	movs	r3, #0
 8006416:	0029      	movs	r1, r5
 8006418:	980a      	ldr	r0, [sp, #40]	; 0x28
 800641a:	f7fa f81d 	bl	8000458 <__aeabi_dcmplt>
 800641e:	2800      	cmp	r0, #0
 8006420:	d003      	beq.n	800642a <_printf_float+0x8e>
 8006422:	0023      	movs	r3, r4
 8006424:	222d      	movs	r2, #45	; 0x2d
 8006426:	3343      	adds	r3, #67	; 0x43
 8006428:	701a      	strb	r2, [r3, #0]
 800642a:	4d9b      	ldr	r5, [pc, #620]	; (8006698 <_printf_float+0x2fc>)
 800642c:	2e47      	cmp	r6, #71	; 0x47
 800642e:	d900      	bls.n	8006432 <_printf_float+0x96>
 8006430:	4d9a      	ldr	r5, [pc, #616]	; (800669c <_printf_float+0x300>)
 8006432:	2303      	movs	r3, #3
 8006434:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006436:	6123      	str	r3, [r4, #16]
 8006438:	3301      	adds	r3, #1
 800643a:	439a      	bics	r2, r3
 800643c:	2300      	movs	r3, #0
 800643e:	6022      	str	r2, [r4, #0]
 8006440:	930a      	str	r3, [sp, #40]	; 0x28
 8006442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006444:	0021      	movs	r1, r4
 8006446:	9300      	str	r3, [sp, #0]
 8006448:	0038      	movs	r0, r7
 800644a:	9b08      	ldr	r3, [sp, #32]
 800644c:	aa13      	add	r2, sp, #76	; 0x4c
 800644e:	f000 f9f3 	bl	8006838 <_printf_common>
 8006452:	1c43      	adds	r3, r0, #1
 8006454:	d000      	beq.n	8006458 <_printf_float+0xbc>
 8006456:	e09e      	b.n	8006596 <_printf_float+0x1fa>
 8006458:	2001      	movs	r0, #1
 800645a:	4240      	negs	r0, r0
 800645c:	b015      	add	sp, #84	; 0x54
 800645e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006460:	3307      	adds	r3, #7
 8006462:	e7b6      	b.n	80063d2 <_printf_float+0x36>
 8006464:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006466:	002b      	movs	r3, r5
 8006468:	0010      	movs	r0, r2
 800646a:	0029      	movs	r1, r5
 800646c:	f7fb fee6 	bl	800223c <__aeabi_dcmpun>
 8006470:	2800      	cmp	r0, #0
 8006472:	d00a      	beq.n	800648a <_printf_float+0xee>
 8006474:	2d00      	cmp	r5, #0
 8006476:	da03      	bge.n	8006480 <_printf_float+0xe4>
 8006478:	0023      	movs	r3, r4
 800647a:	222d      	movs	r2, #45	; 0x2d
 800647c:	3343      	adds	r3, #67	; 0x43
 800647e:	701a      	strb	r2, [r3, #0]
 8006480:	4d87      	ldr	r5, [pc, #540]	; (80066a0 <_printf_float+0x304>)
 8006482:	2e47      	cmp	r6, #71	; 0x47
 8006484:	d9d5      	bls.n	8006432 <_printf_float+0x96>
 8006486:	4d87      	ldr	r5, [pc, #540]	; (80066a4 <_printf_float+0x308>)
 8006488:	e7d3      	b.n	8006432 <_printf_float+0x96>
 800648a:	2220      	movs	r2, #32
 800648c:	0031      	movs	r1, r6
 800648e:	6863      	ldr	r3, [r4, #4]
 8006490:	4391      	bics	r1, r2
 8006492:	910e      	str	r1, [sp, #56]	; 0x38
 8006494:	1c5a      	adds	r2, r3, #1
 8006496:	d147      	bne.n	8006528 <_printf_float+0x18c>
 8006498:	3307      	adds	r3, #7
 800649a:	6063      	str	r3, [r4, #4]
 800649c:	2380      	movs	r3, #128	; 0x80
 800649e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80064a0:	00db      	lsls	r3, r3, #3
 80064a2:	4313      	orrs	r3, r2
 80064a4:	2200      	movs	r2, #0
 80064a6:	9206      	str	r2, [sp, #24]
 80064a8:	aa12      	add	r2, sp, #72	; 0x48
 80064aa:	9205      	str	r2, [sp, #20]
 80064ac:	aa11      	add	r2, sp, #68	; 0x44
 80064ae:	9203      	str	r2, [sp, #12]
 80064b0:	2223      	movs	r2, #35	; 0x23
 80064b2:	a908      	add	r1, sp, #32
 80064b4:	6023      	str	r3, [r4, #0]
 80064b6:	9301      	str	r3, [sp, #4]
 80064b8:	6863      	ldr	r3, [r4, #4]
 80064ba:	1852      	adds	r2, r2, r1
 80064bc:	9202      	str	r2, [sp, #8]
 80064be:	9300      	str	r3, [sp, #0]
 80064c0:	0038      	movs	r0, r7
 80064c2:	002b      	movs	r3, r5
 80064c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064c6:	9604      	str	r6, [sp, #16]
 80064c8:	f7ff febe 	bl	8006248 <__cvt>
 80064cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064ce:	0005      	movs	r5, r0
 80064d0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80064d2:	2b47      	cmp	r3, #71	; 0x47
 80064d4:	d108      	bne.n	80064e8 <_printf_float+0x14c>
 80064d6:	1ccb      	adds	r3, r1, #3
 80064d8:	db02      	blt.n	80064e0 <_printf_float+0x144>
 80064da:	6863      	ldr	r3, [r4, #4]
 80064dc:	4299      	cmp	r1, r3
 80064de:	dd46      	ble.n	800656e <_printf_float+0x1d2>
 80064e0:	0033      	movs	r3, r6
 80064e2:	3b02      	subs	r3, #2
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	001e      	movs	r6, r3
 80064e8:	2e65      	cmp	r6, #101	; 0x65
 80064ea:	d824      	bhi.n	8006536 <_printf_float+0x19a>
 80064ec:	0020      	movs	r0, r4
 80064ee:	0032      	movs	r2, r6
 80064f0:	3901      	subs	r1, #1
 80064f2:	3050      	adds	r0, #80	; 0x50
 80064f4:	9111      	str	r1, [sp, #68]	; 0x44
 80064f6:	f7ff ff0a 	bl	800630e <__exponent>
 80064fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80064fc:	900a      	str	r0, [sp, #40]	; 0x28
 80064fe:	1813      	adds	r3, r2, r0
 8006500:	6123      	str	r3, [r4, #16]
 8006502:	2a01      	cmp	r2, #1
 8006504:	dc02      	bgt.n	800650c <_printf_float+0x170>
 8006506:	6822      	ldr	r2, [r4, #0]
 8006508:	07d2      	lsls	r2, r2, #31
 800650a:	d501      	bpl.n	8006510 <_printf_float+0x174>
 800650c:	3301      	adds	r3, #1
 800650e:	6123      	str	r3, [r4, #16]
 8006510:	2323      	movs	r3, #35	; 0x23
 8006512:	aa08      	add	r2, sp, #32
 8006514:	189b      	adds	r3, r3, r2
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d100      	bne.n	800651e <_printf_float+0x182>
 800651c:	e791      	b.n	8006442 <_printf_float+0xa6>
 800651e:	0023      	movs	r3, r4
 8006520:	222d      	movs	r2, #45	; 0x2d
 8006522:	3343      	adds	r3, #67	; 0x43
 8006524:	701a      	strb	r2, [r3, #0]
 8006526:	e78c      	b.n	8006442 <_printf_float+0xa6>
 8006528:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800652a:	2a47      	cmp	r2, #71	; 0x47
 800652c:	d1b6      	bne.n	800649c <_printf_float+0x100>
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1b4      	bne.n	800649c <_printf_float+0x100>
 8006532:	3301      	adds	r3, #1
 8006534:	e7b1      	b.n	800649a <_printf_float+0xfe>
 8006536:	2e66      	cmp	r6, #102	; 0x66
 8006538:	d11b      	bne.n	8006572 <_printf_float+0x1d6>
 800653a:	6863      	ldr	r3, [r4, #4]
 800653c:	2900      	cmp	r1, #0
 800653e:	dd0d      	ble.n	800655c <_printf_float+0x1c0>
 8006540:	6121      	str	r1, [r4, #16]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d102      	bne.n	800654c <_printf_float+0x1b0>
 8006546:	6822      	ldr	r2, [r4, #0]
 8006548:	07d2      	lsls	r2, r2, #31
 800654a:	d502      	bpl.n	8006552 <_printf_float+0x1b6>
 800654c:	3301      	adds	r3, #1
 800654e:	1859      	adds	r1, r3, r1
 8006550:	6121      	str	r1, [r4, #16]
 8006552:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006554:	65a3      	str	r3, [r4, #88]	; 0x58
 8006556:	2300      	movs	r3, #0
 8006558:	930a      	str	r3, [sp, #40]	; 0x28
 800655a:	e7d9      	b.n	8006510 <_printf_float+0x174>
 800655c:	2b00      	cmp	r3, #0
 800655e:	d103      	bne.n	8006568 <_printf_float+0x1cc>
 8006560:	2201      	movs	r2, #1
 8006562:	6821      	ldr	r1, [r4, #0]
 8006564:	4211      	tst	r1, r2
 8006566:	d000      	beq.n	800656a <_printf_float+0x1ce>
 8006568:	1c9a      	adds	r2, r3, #2
 800656a:	6122      	str	r2, [r4, #16]
 800656c:	e7f1      	b.n	8006552 <_printf_float+0x1b6>
 800656e:	2367      	movs	r3, #103	; 0x67
 8006570:	001e      	movs	r6, r3
 8006572:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006574:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006576:	4293      	cmp	r3, r2
 8006578:	db06      	blt.n	8006588 <_printf_float+0x1ec>
 800657a:	6822      	ldr	r2, [r4, #0]
 800657c:	6123      	str	r3, [r4, #16]
 800657e:	07d2      	lsls	r2, r2, #31
 8006580:	d5e7      	bpl.n	8006552 <_printf_float+0x1b6>
 8006582:	3301      	adds	r3, #1
 8006584:	6123      	str	r3, [r4, #16]
 8006586:	e7e4      	b.n	8006552 <_printf_float+0x1b6>
 8006588:	2101      	movs	r1, #1
 800658a:	2b00      	cmp	r3, #0
 800658c:	dc01      	bgt.n	8006592 <_printf_float+0x1f6>
 800658e:	1849      	adds	r1, r1, r1
 8006590:	1ac9      	subs	r1, r1, r3
 8006592:	1852      	adds	r2, r2, r1
 8006594:	e7e9      	b.n	800656a <_printf_float+0x1ce>
 8006596:	6822      	ldr	r2, [r4, #0]
 8006598:	0553      	lsls	r3, r2, #21
 800659a:	d408      	bmi.n	80065ae <_printf_float+0x212>
 800659c:	6923      	ldr	r3, [r4, #16]
 800659e:	002a      	movs	r2, r5
 80065a0:	0038      	movs	r0, r7
 80065a2:	9908      	ldr	r1, [sp, #32]
 80065a4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80065a6:	47a8      	blx	r5
 80065a8:	1c43      	adds	r3, r0, #1
 80065aa:	d129      	bne.n	8006600 <_printf_float+0x264>
 80065ac:	e754      	b.n	8006458 <_printf_float+0xbc>
 80065ae:	2e65      	cmp	r6, #101	; 0x65
 80065b0:	d800      	bhi.n	80065b4 <_printf_float+0x218>
 80065b2:	e0ec      	b.n	800678e <_printf_float+0x3f2>
 80065b4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80065b6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80065b8:	2200      	movs	r2, #0
 80065ba:	2300      	movs	r3, #0
 80065bc:	f7f9 ff46 	bl	800044c <__aeabi_dcmpeq>
 80065c0:	2800      	cmp	r0, #0
 80065c2:	d034      	beq.n	800662e <_printf_float+0x292>
 80065c4:	2301      	movs	r3, #1
 80065c6:	0038      	movs	r0, r7
 80065c8:	4a37      	ldr	r2, [pc, #220]	; (80066a8 <_printf_float+0x30c>)
 80065ca:	9908      	ldr	r1, [sp, #32]
 80065cc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80065ce:	47a8      	blx	r5
 80065d0:	1c43      	adds	r3, r0, #1
 80065d2:	d100      	bne.n	80065d6 <_printf_float+0x23a>
 80065d4:	e740      	b.n	8006458 <_printf_float+0xbc>
 80065d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80065d8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80065da:	4293      	cmp	r3, r2
 80065dc:	db02      	blt.n	80065e4 <_printf_float+0x248>
 80065de:	6823      	ldr	r3, [r4, #0]
 80065e0:	07db      	lsls	r3, r3, #31
 80065e2:	d50d      	bpl.n	8006600 <_printf_float+0x264>
 80065e4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80065e6:	0038      	movs	r0, r7
 80065e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80065ec:	9908      	ldr	r1, [sp, #32]
 80065ee:	47a8      	blx	r5
 80065f0:	2500      	movs	r5, #0
 80065f2:	1c43      	adds	r3, r0, #1
 80065f4:	d100      	bne.n	80065f8 <_printf_float+0x25c>
 80065f6:	e72f      	b.n	8006458 <_printf_float+0xbc>
 80065f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80065fa:	3b01      	subs	r3, #1
 80065fc:	42ab      	cmp	r3, r5
 80065fe:	dc0a      	bgt.n	8006616 <_printf_float+0x27a>
 8006600:	6823      	ldr	r3, [r4, #0]
 8006602:	079b      	lsls	r3, r3, #30
 8006604:	d500      	bpl.n	8006608 <_printf_float+0x26c>
 8006606:	e114      	b.n	8006832 <_printf_float+0x496>
 8006608:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800660a:	68e0      	ldr	r0, [r4, #12]
 800660c:	4298      	cmp	r0, r3
 800660e:	db00      	blt.n	8006612 <_printf_float+0x276>
 8006610:	e724      	b.n	800645c <_printf_float+0xc0>
 8006612:	0018      	movs	r0, r3
 8006614:	e722      	b.n	800645c <_printf_float+0xc0>
 8006616:	0022      	movs	r2, r4
 8006618:	2301      	movs	r3, #1
 800661a:	0038      	movs	r0, r7
 800661c:	9908      	ldr	r1, [sp, #32]
 800661e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006620:	321a      	adds	r2, #26
 8006622:	47b0      	blx	r6
 8006624:	1c43      	adds	r3, r0, #1
 8006626:	d100      	bne.n	800662a <_printf_float+0x28e>
 8006628:	e716      	b.n	8006458 <_printf_float+0xbc>
 800662a:	3501      	adds	r5, #1
 800662c:	e7e4      	b.n	80065f8 <_printf_float+0x25c>
 800662e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006630:	2b00      	cmp	r3, #0
 8006632:	dc3b      	bgt.n	80066ac <_printf_float+0x310>
 8006634:	2301      	movs	r3, #1
 8006636:	0038      	movs	r0, r7
 8006638:	4a1b      	ldr	r2, [pc, #108]	; (80066a8 <_printf_float+0x30c>)
 800663a:	9908      	ldr	r1, [sp, #32]
 800663c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800663e:	47b0      	blx	r6
 8006640:	1c43      	adds	r3, r0, #1
 8006642:	d100      	bne.n	8006646 <_printf_float+0x2aa>
 8006644:	e708      	b.n	8006458 <_printf_float+0xbc>
 8006646:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006648:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800664a:	4313      	orrs	r3, r2
 800664c:	d102      	bne.n	8006654 <_printf_float+0x2b8>
 800664e:	6823      	ldr	r3, [r4, #0]
 8006650:	07db      	lsls	r3, r3, #31
 8006652:	d5d5      	bpl.n	8006600 <_printf_float+0x264>
 8006654:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006656:	0038      	movs	r0, r7
 8006658:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800665a:	9908      	ldr	r1, [sp, #32]
 800665c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800665e:	47b0      	blx	r6
 8006660:	1c43      	adds	r3, r0, #1
 8006662:	d100      	bne.n	8006666 <_printf_float+0x2ca>
 8006664:	e6f8      	b.n	8006458 <_printf_float+0xbc>
 8006666:	2300      	movs	r3, #0
 8006668:	930a      	str	r3, [sp, #40]	; 0x28
 800666a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800666c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800666e:	425b      	negs	r3, r3
 8006670:	4293      	cmp	r3, r2
 8006672:	dc01      	bgt.n	8006678 <_printf_float+0x2dc>
 8006674:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006676:	e792      	b.n	800659e <_printf_float+0x202>
 8006678:	0022      	movs	r2, r4
 800667a:	2301      	movs	r3, #1
 800667c:	0038      	movs	r0, r7
 800667e:	9908      	ldr	r1, [sp, #32]
 8006680:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006682:	321a      	adds	r2, #26
 8006684:	47b0      	blx	r6
 8006686:	1c43      	adds	r3, r0, #1
 8006688:	d100      	bne.n	800668c <_printf_float+0x2f0>
 800668a:	e6e5      	b.n	8006458 <_printf_float+0xbc>
 800668c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800668e:	3301      	adds	r3, #1
 8006690:	e7ea      	b.n	8006668 <_printf_float+0x2cc>
 8006692:	46c0      	nop			; (mov r8, r8)
 8006694:	7fefffff 	.word	0x7fefffff
 8006698:	0800aeec 	.word	0x0800aeec
 800669c:	0800aef0 	.word	0x0800aef0
 80066a0:	0800aef4 	.word	0x0800aef4
 80066a4:	0800aef8 	.word	0x0800aef8
 80066a8:	0800aefc 	.word	0x0800aefc
 80066ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80066ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80066b0:	920a      	str	r2, [sp, #40]	; 0x28
 80066b2:	429a      	cmp	r2, r3
 80066b4:	dd00      	ble.n	80066b8 <_printf_float+0x31c>
 80066b6:	930a      	str	r3, [sp, #40]	; 0x28
 80066b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	dc3d      	bgt.n	800673a <_printf_float+0x39e>
 80066be:	2300      	movs	r3, #0
 80066c0:	930e      	str	r3, [sp, #56]	; 0x38
 80066c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066c4:	43db      	mvns	r3, r3
 80066c6:	17db      	asrs	r3, r3, #31
 80066c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80066ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80066cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80066ce:	930c      	str	r3, [sp, #48]	; 0x30
 80066d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066d2:	4013      	ands	r3, r2
 80066d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80066d6:	1ad3      	subs	r3, r2, r3
 80066d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80066da:	4293      	cmp	r3, r2
 80066dc:	dc36      	bgt.n	800674c <_printf_float+0x3b0>
 80066de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80066e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80066e2:	4293      	cmp	r3, r2
 80066e4:	db40      	blt.n	8006768 <_printf_float+0x3cc>
 80066e6:	6823      	ldr	r3, [r4, #0]
 80066e8:	07db      	lsls	r3, r3, #31
 80066ea:	d43d      	bmi.n	8006768 <_printf_float+0x3cc>
 80066ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80066ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80066f0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80066f2:	1ad3      	subs	r3, r2, r3
 80066f4:	1a52      	subs	r2, r2, r1
 80066f6:	920a      	str	r2, [sp, #40]	; 0x28
 80066f8:	429a      	cmp	r2, r3
 80066fa:	dd00      	ble.n	80066fe <_printf_float+0x362>
 80066fc:	930a      	str	r3, [sp, #40]	; 0x28
 80066fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006700:	2b00      	cmp	r3, #0
 8006702:	dc3a      	bgt.n	800677a <_printf_float+0x3de>
 8006704:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006706:	2500      	movs	r5, #0
 8006708:	43db      	mvns	r3, r3
 800670a:	17db      	asrs	r3, r3, #31
 800670c:	930b      	str	r3, [sp, #44]	; 0x2c
 800670e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006710:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006712:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006714:	1a9b      	subs	r3, r3, r2
 8006716:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006718:	400a      	ands	r2, r1
 800671a:	1a9b      	subs	r3, r3, r2
 800671c:	42ab      	cmp	r3, r5
 800671e:	dc00      	bgt.n	8006722 <_printf_float+0x386>
 8006720:	e76e      	b.n	8006600 <_printf_float+0x264>
 8006722:	0022      	movs	r2, r4
 8006724:	2301      	movs	r3, #1
 8006726:	0038      	movs	r0, r7
 8006728:	9908      	ldr	r1, [sp, #32]
 800672a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800672c:	321a      	adds	r2, #26
 800672e:	47b0      	blx	r6
 8006730:	1c43      	adds	r3, r0, #1
 8006732:	d100      	bne.n	8006736 <_printf_float+0x39a>
 8006734:	e690      	b.n	8006458 <_printf_float+0xbc>
 8006736:	3501      	adds	r5, #1
 8006738:	e7e9      	b.n	800670e <_printf_float+0x372>
 800673a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800673c:	002a      	movs	r2, r5
 800673e:	0038      	movs	r0, r7
 8006740:	9908      	ldr	r1, [sp, #32]
 8006742:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006744:	47b0      	blx	r6
 8006746:	1c43      	adds	r3, r0, #1
 8006748:	d1b9      	bne.n	80066be <_printf_float+0x322>
 800674a:	e685      	b.n	8006458 <_printf_float+0xbc>
 800674c:	0022      	movs	r2, r4
 800674e:	2301      	movs	r3, #1
 8006750:	0038      	movs	r0, r7
 8006752:	9908      	ldr	r1, [sp, #32]
 8006754:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006756:	321a      	adds	r2, #26
 8006758:	47b0      	blx	r6
 800675a:	1c43      	adds	r3, r0, #1
 800675c:	d100      	bne.n	8006760 <_printf_float+0x3c4>
 800675e:	e67b      	b.n	8006458 <_printf_float+0xbc>
 8006760:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006762:	3301      	adds	r3, #1
 8006764:	930e      	str	r3, [sp, #56]	; 0x38
 8006766:	e7b0      	b.n	80066ca <_printf_float+0x32e>
 8006768:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800676a:	0038      	movs	r0, r7
 800676c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800676e:	9908      	ldr	r1, [sp, #32]
 8006770:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006772:	47b0      	blx	r6
 8006774:	1c43      	adds	r3, r0, #1
 8006776:	d1b9      	bne.n	80066ec <_printf_float+0x350>
 8006778:	e66e      	b.n	8006458 <_printf_float+0xbc>
 800677a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800677c:	0038      	movs	r0, r7
 800677e:	18ea      	adds	r2, r5, r3
 8006780:	9908      	ldr	r1, [sp, #32]
 8006782:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006784:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006786:	47a8      	blx	r5
 8006788:	1c43      	adds	r3, r0, #1
 800678a:	d1bb      	bne.n	8006704 <_printf_float+0x368>
 800678c:	e664      	b.n	8006458 <_printf_float+0xbc>
 800678e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006790:	2b01      	cmp	r3, #1
 8006792:	dc02      	bgt.n	800679a <_printf_float+0x3fe>
 8006794:	2301      	movs	r3, #1
 8006796:	421a      	tst	r2, r3
 8006798:	d038      	beq.n	800680c <_printf_float+0x470>
 800679a:	2301      	movs	r3, #1
 800679c:	002a      	movs	r2, r5
 800679e:	0038      	movs	r0, r7
 80067a0:	9908      	ldr	r1, [sp, #32]
 80067a2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80067a4:	47b0      	blx	r6
 80067a6:	1c43      	adds	r3, r0, #1
 80067a8:	d100      	bne.n	80067ac <_printf_float+0x410>
 80067aa:	e655      	b.n	8006458 <_printf_float+0xbc>
 80067ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067ae:	0038      	movs	r0, r7
 80067b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80067b2:	9908      	ldr	r1, [sp, #32]
 80067b4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80067b6:	47b0      	blx	r6
 80067b8:	1c43      	adds	r3, r0, #1
 80067ba:	d100      	bne.n	80067be <_printf_float+0x422>
 80067bc:	e64c      	b.n	8006458 <_printf_float+0xbc>
 80067be:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80067c0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80067c2:	2200      	movs	r2, #0
 80067c4:	2300      	movs	r3, #0
 80067c6:	f7f9 fe41 	bl	800044c <__aeabi_dcmpeq>
 80067ca:	2800      	cmp	r0, #0
 80067cc:	d11c      	bne.n	8006808 <_printf_float+0x46c>
 80067ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80067d0:	1c6a      	adds	r2, r5, #1
 80067d2:	3b01      	subs	r3, #1
 80067d4:	0038      	movs	r0, r7
 80067d6:	9908      	ldr	r1, [sp, #32]
 80067d8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80067da:	47a8      	blx	r5
 80067dc:	1c43      	adds	r3, r0, #1
 80067de:	d10f      	bne.n	8006800 <_printf_float+0x464>
 80067e0:	e63a      	b.n	8006458 <_printf_float+0xbc>
 80067e2:	0022      	movs	r2, r4
 80067e4:	2301      	movs	r3, #1
 80067e6:	0038      	movs	r0, r7
 80067e8:	9908      	ldr	r1, [sp, #32]
 80067ea:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80067ec:	321a      	adds	r2, #26
 80067ee:	47b0      	blx	r6
 80067f0:	1c43      	adds	r3, r0, #1
 80067f2:	d100      	bne.n	80067f6 <_printf_float+0x45a>
 80067f4:	e630      	b.n	8006458 <_printf_float+0xbc>
 80067f6:	3501      	adds	r5, #1
 80067f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80067fa:	3b01      	subs	r3, #1
 80067fc:	42ab      	cmp	r3, r5
 80067fe:	dcf0      	bgt.n	80067e2 <_printf_float+0x446>
 8006800:	0022      	movs	r2, r4
 8006802:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006804:	3250      	adds	r2, #80	; 0x50
 8006806:	e6cb      	b.n	80065a0 <_printf_float+0x204>
 8006808:	2500      	movs	r5, #0
 800680a:	e7f5      	b.n	80067f8 <_printf_float+0x45c>
 800680c:	002a      	movs	r2, r5
 800680e:	e7e1      	b.n	80067d4 <_printf_float+0x438>
 8006810:	0022      	movs	r2, r4
 8006812:	2301      	movs	r3, #1
 8006814:	0038      	movs	r0, r7
 8006816:	9908      	ldr	r1, [sp, #32]
 8006818:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800681a:	3219      	adds	r2, #25
 800681c:	47b0      	blx	r6
 800681e:	1c43      	adds	r3, r0, #1
 8006820:	d100      	bne.n	8006824 <_printf_float+0x488>
 8006822:	e619      	b.n	8006458 <_printf_float+0xbc>
 8006824:	3501      	adds	r5, #1
 8006826:	68e3      	ldr	r3, [r4, #12]
 8006828:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800682a:	1a9b      	subs	r3, r3, r2
 800682c:	42ab      	cmp	r3, r5
 800682e:	dcef      	bgt.n	8006810 <_printf_float+0x474>
 8006830:	e6ea      	b.n	8006608 <_printf_float+0x26c>
 8006832:	2500      	movs	r5, #0
 8006834:	e7f7      	b.n	8006826 <_printf_float+0x48a>
 8006836:	46c0      	nop			; (mov r8, r8)

08006838 <_printf_common>:
 8006838:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800683a:	0015      	movs	r5, r2
 800683c:	9301      	str	r3, [sp, #4]
 800683e:	688a      	ldr	r2, [r1, #8]
 8006840:	690b      	ldr	r3, [r1, #16]
 8006842:	000c      	movs	r4, r1
 8006844:	9000      	str	r0, [sp, #0]
 8006846:	4293      	cmp	r3, r2
 8006848:	da00      	bge.n	800684c <_printf_common+0x14>
 800684a:	0013      	movs	r3, r2
 800684c:	0022      	movs	r2, r4
 800684e:	602b      	str	r3, [r5, #0]
 8006850:	3243      	adds	r2, #67	; 0x43
 8006852:	7812      	ldrb	r2, [r2, #0]
 8006854:	2a00      	cmp	r2, #0
 8006856:	d001      	beq.n	800685c <_printf_common+0x24>
 8006858:	3301      	adds	r3, #1
 800685a:	602b      	str	r3, [r5, #0]
 800685c:	6823      	ldr	r3, [r4, #0]
 800685e:	069b      	lsls	r3, r3, #26
 8006860:	d502      	bpl.n	8006868 <_printf_common+0x30>
 8006862:	682b      	ldr	r3, [r5, #0]
 8006864:	3302      	adds	r3, #2
 8006866:	602b      	str	r3, [r5, #0]
 8006868:	6822      	ldr	r2, [r4, #0]
 800686a:	2306      	movs	r3, #6
 800686c:	0017      	movs	r7, r2
 800686e:	401f      	ands	r7, r3
 8006870:	421a      	tst	r2, r3
 8006872:	d027      	beq.n	80068c4 <_printf_common+0x8c>
 8006874:	0023      	movs	r3, r4
 8006876:	3343      	adds	r3, #67	; 0x43
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	1e5a      	subs	r2, r3, #1
 800687c:	4193      	sbcs	r3, r2
 800687e:	6822      	ldr	r2, [r4, #0]
 8006880:	0692      	lsls	r2, r2, #26
 8006882:	d430      	bmi.n	80068e6 <_printf_common+0xae>
 8006884:	0022      	movs	r2, r4
 8006886:	9901      	ldr	r1, [sp, #4]
 8006888:	9800      	ldr	r0, [sp, #0]
 800688a:	9e08      	ldr	r6, [sp, #32]
 800688c:	3243      	adds	r2, #67	; 0x43
 800688e:	47b0      	blx	r6
 8006890:	1c43      	adds	r3, r0, #1
 8006892:	d025      	beq.n	80068e0 <_printf_common+0xa8>
 8006894:	2306      	movs	r3, #6
 8006896:	6820      	ldr	r0, [r4, #0]
 8006898:	682a      	ldr	r2, [r5, #0]
 800689a:	68e1      	ldr	r1, [r4, #12]
 800689c:	2500      	movs	r5, #0
 800689e:	4003      	ands	r3, r0
 80068a0:	2b04      	cmp	r3, #4
 80068a2:	d103      	bne.n	80068ac <_printf_common+0x74>
 80068a4:	1a8d      	subs	r5, r1, r2
 80068a6:	43eb      	mvns	r3, r5
 80068a8:	17db      	asrs	r3, r3, #31
 80068aa:	401d      	ands	r5, r3
 80068ac:	68a3      	ldr	r3, [r4, #8]
 80068ae:	6922      	ldr	r2, [r4, #16]
 80068b0:	4293      	cmp	r3, r2
 80068b2:	dd01      	ble.n	80068b8 <_printf_common+0x80>
 80068b4:	1a9b      	subs	r3, r3, r2
 80068b6:	18ed      	adds	r5, r5, r3
 80068b8:	2700      	movs	r7, #0
 80068ba:	42bd      	cmp	r5, r7
 80068bc:	d120      	bne.n	8006900 <_printf_common+0xc8>
 80068be:	2000      	movs	r0, #0
 80068c0:	e010      	b.n	80068e4 <_printf_common+0xac>
 80068c2:	3701      	adds	r7, #1
 80068c4:	68e3      	ldr	r3, [r4, #12]
 80068c6:	682a      	ldr	r2, [r5, #0]
 80068c8:	1a9b      	subs	r3, r3, r2
 80068ca:	42bb      	cmp	r3, r7
 80068cc:	ddd2      	ble.n	8006874 <_printf_common+0x3c>
 80068ce:	0022      	movs	r2, r4
 80068d0:	2301      	movs	r3, #1
 80068d2:	9901      	ldr	r1, [sp, #4]
 80068d4:	9800      	ldr	r0, [sp, #0]
 80068d6:	9e08      	ldr	r6, [sp, #32]
 80068d8:	3219      	adds	r2, #25
 80068da:	47b0      	blx	r6
 80068dc:	1c43      	adds	r3, r0, #1
 80068de:	d1f0      	bne.n	80068c2 <_printf_common+0x8a>
 80068e0:	2001      	movs	r0, #1
 80068e2:	4240      	negs	r0, r0
 80068e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80068e6:	2030      	movs	r0, #48	; 0x30
 80068e8:	18e1      	adds	r1, r4, r3
 80068ea:	3143      	adds	r1, #67	; 0x43
 80068ec:	7008      	strb	r0, [r1, #0]
 80068ee:	0021      	movs	r1, r4
 80068f0:	1c5a      	adds	r2, r3, #1
 80068f2:	3145      	adds	r1, #69	; 0x45
 80068f4:	7809      	ldrb	r1, [r1, #0]
 80068f6:	18a2      	adds	r2, r4, r2
 80068f8:	3243      	adds	r2, #67	; 0x43
 80068fa:	3302      	adds	r3, #2
 80068fc:	7011      	strb	r1, [r2, #0]
 80068fe:	e7c1      	b.n	8006884 <_printf_common+0x4c>
 8006900:	0022      	movs	r2, r4
 8006902:	2301      	movs	r3, #1
 8006904:	9901      	ldr	r1, [sp, #4]
 8006906:	9800      	ldr	r0, [sp, #0]
 8006908:	9e08      	ldr	r6, [sp, #32]
 800690a:	321a      	adds	r2, #26
 800690c:	47b0      	blx	r6
 800690e:	1c43      	adds	r3, r0, #1
 8006910:	d0e6      	beq.n	80068e0 <_printf_common+0xa8>
 8006912:	3701      	adds	r7, #1
 8006914:	e7d1      	b.n	80068ba <_printf_common+0x82>
	...

08006918 <_printf_i>:
 8006918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800691a:	b08b      	sub	sp, #44	; 0x2c
 800691c:	9206      	str	r2, [sp, #24]
 800691e:	000a      	movs	r2, r1
 8006920:	3243      	adds	r2, #67	; 0x43
 8006922:	9307      	str	r3, [sp, #28]
 8006924:	9005      	str	r0, [sp, #20]
 8006926:	9204      	str	r2, [sp, #16]
 8006928:	7e0a      	ldrb	r2, [r1, #24]
 800692a:	000c      	movs	r4, r1
 800692c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800692e:	2a78      	cmp	r2, #120	; 0x78
 8006930:	d806      	bhi.n	8006940 <_printf_i+0x28>
 8006932:	2a62      	cmp	r2, #98	; 0x62
 8006934:	d808      	bhi.n	8006948 <_printf_i+0x30>
 8006936:	2a00      	cmp	r2, #0
 8006938:	d100      	bne.n	800693c <_printf_i+0x24>
 800693a:	e0c0      	b.n	8006abe <_printf_i+0x1a6>
 800693c:	2a58      	cmp	r2, #88	; 0x58
 800693e:	d052      	beq.n	80069e6 <_printf_i+0xce>
 8006940:	0026      	movs	r6, r4
 8006942:	3642      	adds	r6, #66	; 0x42
 8006944:	7032      	strb	r2, [r6, #0]
 8006946:	e022      	b.n	800698e <_printf_i+0x76>
 8006948:	0010      	movs	r0, r2
 800694a:	3863      	subs	r0, #99	; 0x63
 800694c:	2815      	cmp	r0, #21
 800694e:	d8f7      	bhi.n	8006940 <_printf_i+0x28>
 8006950:	f7f9 fbec 	bl	800012c <__gnu_thumb1_case_shi>
 8006954:	001f0016 	.word	0x001f0016
 8006958:	fff6fff6 	.word	0xfff6fff6
 800695c:	fff6fff6 	.word	0xfff6fff6
 8006960:	fff6001f 	.word	0xfff6001f
 8006964:	fff6fff6 	.word	0xfff6fff6
 8006968:	00a8fff6 	.word	0x00a8fff6
 800696c:	009a0036 	.word	0x009a0036
 8006970:	fff6fff6 	.word	0xfff6fff6
 8006974:	fff600b9 	.word	0xfff600b9
 8006978:	fff60036 	.word	0xfff60036
 800697c:	009efff6 	.word	0x009efff6
 8006980:	0026      	movs	r6, r4
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	3642      	adds	r6, #66	; 0x42
 8006986:	1d11      	adds	r1, r2, #4
 8006988:	6019      	str	r1, [r3, #0]
 800698a:	6813      	ldr	r3, [r2, #0]
 800698c:	7033      	strb	r3, [r6, #0]
 800698e:	2301      	movs	r3, #1
 8006990:	e0a7      	b.n	8006ae2 <_printf_i+0x1ca>
 8006992:	6808      	ldr	r0, [r1, #0]
 8006994:	6819      	ldr	r1, [r3, #0]
 8006996:	1d0a      	adds	r2, r1, #4
 8006998:	0605      	lsls	r5, r0, #24
 800699a:	d50b      	bpl.n	80069b4 <_printf_i+0x9c>
 800699c:	680d      	ldr	r5, [r1, #0]
 800699e:	601a      	str	r2, [r3, #0]
 80069a0:	2d00      	cmp	r5, #0
 80069a2:	da03      	bge.n	80069ac <_printf_i+0x94>
 80069a4:	232d      	movs	r3, #45	; 0x2d
 80069a6:	9a04      	ldr	r2, [sp, #16]
 80069a8:	426d      	negs	r5, r5
 80069aa:	7013      	strb	r3, [r2, #0]
 80069ac:	4b61      	ldr	r3, [pc, #388]	; (8006b34 <_printf_i+0x21c>)
 80069ae:	270a      	movs	r7, #10
 80069b0:	9303      	str	r3, [sp, #12]
 80069b2:	e032      	b.n	8006a1a <_printf_i+0x102>
 80069b4:	680d      	ldr	r5, [r1, #0]
 80069b6:	601a      	str	r2, [r3, #0]
 80069b8:	0641      	lsls	r1, r0, #25
 80069ba:	d5f1      	bpl.n	80069a0 <_printf_i+0x88>
 80069bc:	b22d      	sxth	r5, r5
 80069be:	e7ef      	b.n	80069a0 <_printf_i+0x88>
 80069c0:	680d      	ldr	r5, [r1, #0]
 80069c2:	6819      	ldr	r1, [r3, #0]
 80069c4:	1d08      	adds	r0, r1, #4
 80069c6:	6018      	str	r0, [r3, #0]
 80069c8:	062e      	lsls	r6, r5, #24
 80069ca:	d501      	bpl.n	80069d0 <_printf_i+0xb8>
 80069cc:	680d      	ldr	r5, [r1, #0]
 80069ce:	e003      	b.n	80069d8 <_printf_i+0xc0>
 80069d0:	066d      	lsls	r5, r5, #25
 80069d2:	d5fb      	bpl.n	80069cc <_printf_i+0xb4>
 80069d4:	680d      	ldr	r5, [r1, #0]
 80069d6:	b2ad      	uxth	r5, r5
 80069d8:	4b56      	ldr	r3, [pc, #344]	; (8006b34 <_printf_i+0x21c>)
 80069da:	270a      	movs	r7, #10
 80069dc:	9303      	str	r3, [sp, #12]
 80069de:	2a6f      	cmp	r2, #111	; 0x6f
 80069e0:	d117      	bne.n	8006a12 <_printf_i+0xfa>
 80069e2:	2708      	movs	r7, #8
 80069e4:	e015      	b.n	8006a12 <_printf_i+0xfa>
 80069e6:	3145      	adds	r1, #69	; 0x45
 80069e8:	700a      	strb	r2, [r1, #0]
 80069ea:	4a52      	ldr	r2, [pc, #328]	; (8006b34 <_printf_i+0x21c>)
 80069ec:	9203      	str	r2, [sp, #12]
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	6821      	ldr	r1, [r4, #0]
 80069f2:	ca20      	ldmia	r2!, {r5}
 80069f4:	601a      	str	r2, [r3, #0]
 80069f6:	0608      	lsls	r0, r1, #24
 80069f8:	d550      	bpl.n	8006a9c <_printf_i+0x184>
 80069fa:	07cb      	lsls	r3, r1, #31
 80069fc:	d502      	bpl.n	8006a04 <_printf_i+0xec>
 80069fe:	2320      	movs	r3, #32
 8006a00:	4319      	orrs	r1, r3
 8006a02:	6021      	str	r1, [r4, #0]
 8006a04:	2710      	movs	r7, #16
 8006a06:	2d00      	cmp	r5, #0
 8006a08:	d103      	bne.n	8006a12 <_printf_i+0xfa>
 8006a0a:	2320      	movs	r3, #32
 8006a0c:	6822      	ldr	r2, [r4, #0]
 8006a0e:	439a      	bics	r2, r3
 8006a10:	6022      	str	r2, [r4, #0]
 8006a12:	0023      	movs	r3, r4
 8006a14:	2200      	movs	r2, #0
 8006a16:	3343      	adds	r3, #67	; 0x43
 8006a18:	701a      	strb	r2, [r3, #0]
 8006a1a:	6863      	ldr	r3, [r4, #4]
 8006a1c:	60a3      	str	r3, [r4, #8]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	db03      	blt.n	8006a2a <_printf_i+0x112>
 8006a22:	2204      	movs	r2, #4
 8006a24:	6821      	ldr	r1, [r4, #0]
 8006a26:	4391      	bics	r1, r2
 8006a28:	6021      	str	r1, [r4, #0]
 8006a2a:	2d00      	cmp	r5, #0
 8006a2c:	d102      	bne.n	8006a34 <_printf_i+0x11c>
 8006a2e:	9e04      	ldr	r6, [sp, #16]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d00c      	beq.n	8006a4e <_printf_i+0x136>
 8006a34:	9e04      	ldr	r6, [sp, #16]
 8006a36:	0028      	movs	r0, r5
 8006a38:	0039      	movs	r1, r7
 8006a3a:	f7f9 fc07 	bl	800024c <__aeabi_uidivmod>
 8006a3e:	9b03      	ldr	r3, [sp, #12]
 8006a40:	3e01      	subs	r6, #1
 8006a42:	5c5b      	ldrb	r3, [r3, r1]
 8006a44:	7033      	strb	r3, [r6, #0]
 8006a46:	002b      	movs	r3, r5
 8006a48:	0005      	movs	r5, r0
 8006a4a:	429f      	cmp	r7, r3
 8006a4c:	d9f3      	bls.n	8006a36 <_printf_i+0x11e>
 8006a4e:	2f08      	cmp	r7, #8
 8006a50:	d109      	bne.n	8006a66 <_printf_i+0x14e>
 8006a52:	6823      	ldr	r3, [r4, #0]
 8006a54:	07db      	lsls	r3, r3, #31
 8006a56:	d506      	bpl.n	8006a66 <_printf_i+0x14e>
 8006a58:	6863      	ldr	r3, [r4, #4]
 8006a5a:	6922      	ldr	r2, [r4, #16]
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	dc02      	bgt.n	8006a66 <_printf_i+0x14e>
 8006a60:	2330      	movs	r3, #48	; 0x30
 8006a62:	3e01      	subs	r6, #1
 8006a64:	7033      	strb	r3, [r6, #0]
 8006a66:	9b04      	ldr	r3, [sp, #16]
 8006a68:	1b9b      	subs	r3, r3, r6
 8006a6a:	6123      	str	r3, [r4, #16]
 8006a6c:	9b07      	ldr	r3, [sp, #28]
 8006a6e:	0021      	movs	r1, r4
 8006a70:	9300      	str	r3, [sp, #0]
 8006a72:	9805      	ldr	r0, [sp, #20]
 8006a74:	9b06      	ldr	r3, [sp, #24]
 8006a76:	aa09      	add	r2, sp, #36	; 0x24
 8006a78:	f7ff fede 	bl	8006838 <_printf_common>
 8006a7c:	1c43      	adds	r3, r0, #1
 8006a7e:	d135      	bne.n	8006aec <_printf_i+0x1d4>
 8006a80:	2001      	movs	r0, #1
 8006a82:	4240      	negs	r0, r0
 8006a84:	b00b      	add	sp, #44	; 0x2c
 8006a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a88:	2220      	movs	r2, #32
 8006a8a:	6809      	ldr	r1, [r1, #0]
 8006a8c:	430a      	orrs	r2, r1
 8006a8e:	6022      	str	r2, [r4, #0]
 8006a90:	0022      	movs	r2, r4
 8006a92:	2178      	movs	r1, #120	; 0x78
 8006a94:	3245      	adds	r2, #69	; 0x45
 8006a96:	7011      	strb	r1, [r2, #0]
 8006a98:	4a27      	ldr	r2, [pc, #156]	; (8006b38 <_printf_i+0x220>)
 8006a9a:	e7a7      	b.n	80069ec <_printf_i+0xd4>
 8006a9c:	0648      	lsls	r0, r1, #25
 8006a9e:	d5ac      	bpl.n	80069fa <_printf_i+0xe2>
 8006aa0:	b2ad      	uxth	r5, r5
 8006aa2:	e7aa      	b.n	80069fa <_printf_i+0xe2>
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	680d      	ldr	r5, [r1, #0]
 8006aa8:	1d10      	adds	r0, r2, #4
 8006aaa:	6949      	ldr	r1, [r1, #20]
 8006aac:	6018      	str	r0, [r3, #0]
 8006aae:	6813      	ldr	r3, [r2, #0]
 8006ab0:	062e      	lsls	r6, r5, #24
 8006ab2:	d501      	bpl.n	8006ab8 <_printf_i+0x1a0>
 8006ab4:	6019      	str	r1, [r3, #0]
 8006ab6:	e002      	b.n	8006abe <_printf_i+0x1a6>
 8006ab8:	066d      	lsls	r5, r5, #25
 8006aba:	d5fb      	bpl.n	8006ab4 <_printf_i+0x19c>
 8006abc:	8019      	strh	r1, [r3, #0]
 8006abe:	2300      	movs	r3, #0
 8006ac0:	9e04      	ldr	r6, [sp, #16]
 8006ac2:	6123      	str	r3, [r4, #16]
 8006ac4:	e7d2      	b.n	8006a6c <_printf_i+0x154>
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	1d11      	adds	r1, r2, #4
 8006aca:	6019      	str	r1, [r3, #0]
 8006acc:	6816      	ldr	r6, [r2, #0]
 8006ace:	2100      	movs	r1, #0
 8006ad0:	0030      	movs	r0, r6
 8006ad2:	6862      	ldr	r2, [r4, #4]
 8006ad4:	f002 fba2 	bl	800921c <memchr>
 8006ad8:	2800      	cmp	r0, #0
 8006ada:	d001      	beq.n	8006ae0 <_printf_i+0x1c8>
 8006adc:	1b80      	subs	r0, r0, r6
 8006ade:	6060      	str	r0, [r4, #4]
 8006ae0:	6863      	ldr	r3, [r4, #4]
 8006ae2:	6123      	str	r3, [r4, #16]
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	9a04      	ldr	r2, [sp, #16]
 8006ae8:	7013      	strb	r3, [r2, #0]
 8006aea:	e7bf      	b.n	8006a6c <_printf_i+0x154>
 8006aec:	6923      	ldr	r3, [r4, #16]
 8006aee:	0032      	movs	r2, r6
 8006af0:	9906      	ldr	r1, [sp, #24]
 8006af2:	9805      	ldr	r0, [sp, #20]
 8006af4:	9d07      	ldr	r5, [sp, #28]
 8006af6:	47a8      	blx	r5
 8006af8:	1c43      	adds	r3, r0, #1
 8006afa:	d0c1      	beq.n	8006a80 <_printf_i+0x168>
 8006afc:	6823      	ldr	r3, [r4, #0]
 8006afe:	079b      	lsls	r3, r3, #30
 8006b00:	d415      	bmi.n	8006b2e <_printf_i+0x216>
 8006b02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b04:	68e0      	ldr	r0, [r4, #12]
 8006b06:	4298      	cmp	r0, r3
 8006b08:	dabc      	bge.n	8006a84 <_printf_i+0x16c>
 8006b0a:	0018      	movs	r0, r3
 8006b0c:	e7ba      	b.n	8006a84 <_printf_i+0x16c>
 8006b0e:	0022      	movs	r2, r4
 8006b10:	2301      	movs	r3, #1
 8006b12:	9906      	ldr	r1, [sp, #24]
 8006b14:	9805      	ldr	r0, [sp, #20]
 8006b16:	9e07      	ldr	r6, [sp, #28]
 8006b18:	3219      	adds	r2, #25
 8006b1a:	47b0      	blx	r6
 8006b1c:	1c43      	adds	r3, r0, #1
 8006b1e:	d0af      	beq.n	8006a80 <_printf_i+0x168>
 8006b20:	3501      	adds	r5, #1
 8006b22:	68e3      	ldr	r3, [r4, #12]
 8006b24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b26:	1a9b      	subs	r3, r3, r2
 8006b28:	42ab      	cmp	r3, r5
 8006b2a:	dcf0      	bgt.n	8006b0e <_printf_i+0x1f6>
 8006b2c:	e7e9      	b.n	8006b02 <_printf_i+0x1ea>
 8006b2e:	2500      	movs	r5, #0
 8006b30:	e7f7      	b.n	8006b22 <_printf_i+0x20a>
 8006b32:	46c0      	nop			; (mov r8, r8)
 8006b34:	0800aefe 	.word	0x0800aefe
 8006b38:	0800af0f 	.word	0x0800af0f

08006b3c <_scanf_float>:
 8006b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b3e:	b08b      	sub	sp, #44	; 0x2c
 8006b40:	0015      	movs	r5, r2
 8006b42:	9001      	str	r0, [sp, #4]
 8006b44:	22ae      	movs	r2, #174	; 0xae
 8006b46:	2000      	movs	r0, #0
 8006b48:	9306      	str	r3, [sp, #24]
 8006b4a:	688b      	ldr	r3, [r1, #8]
 8006b4c:	000e      	movs	r6, r1
 8006b4e:	1e59      	subs	r1, r3, #1
 8006b50:	0052      	lsls	r2, r2, #1
 8006b52:	9005      	str	r0, [sp, #20]
 8006b54:	4291      	cmp	r1, r2
 8006b56:	d905      	bls.n	8006b64 <_scanf_float+0x28>
 8006b58:	3b5e      	subs	r3, #94	; 0x5e
 8006b5a:	3bff      	subs	r3, #255	; 0xff
 8006b5c:	9305      	str	r3, [sp, #20]
 8006b5e:	235e      	movs	r3, #94	; 0x5e
 8006b60:	33ff      	adds	r3, #255	; 0xff
 8006b62:	60b3      	str	r3, [r6, #8]
 8006b64:	23f0      	movs	r3, #240	; 0xf0
 8006b66:	6832      	ldr	r2, [r6, #0]
 8006b68:	00db      	lsls	r3, r3, #3
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	6033      	str	r3, [r6, #0]
 8006b6e:	0033      	movs	r3, r6
 8006b70:	2400      	movs	r4, #0
 8006b72:	331c      	adds	r3, #28
 8006b74:	001f      	movs	r7, r3
 8006b76:	9303      	str	r3, [sp, #12]
 8006b78:	9402      	str	r4, [sp, #8]
 8006b7a:	9408      	str	r4, [sp, #32]
 8006b7c:	9407      	str	r4, [sp, #28]
 8006b7e:	9400      	str	r4, [sp, #0]
 8006b80:	9404      	str	r4, [sp, #16]
 8006b82:	68b2      	ldr	r2, [r6, #8]
 8006b84:	2a00      	cmp	r2, #0
 8006b86:	d00a      	beq.n	8006b9e <_scanf_float+0x62>
 8006b88:	682b      	ldr	r3, [r5, #0]
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	2b4e      	cmp	r3, #78	; 0x4e
 8006b8e:	d844      	bhi.n	8006c1a <_scanf_float+0xde>
 8006b90:	0018      	movs	r0, r3
 8006b92:	2b40      	cmp	r3, #64	; 0x40
 8006b94:	d82c      	bhi.n	8006bf0 <_scanf_float+0xb4>
 8006b96:	382b      	subs	r0, #43	; 0x2b
 8006b98:	b2c1      	uxtb	r1, r0
 8006b9a:	290e      	cmp	r1, #14
 8006b9c:	d92a      	bls.n	8006bf4 <_scanf_float+0xb8>
 8006b9e:	9b00      	ldr	r3, [sp, #0]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d003      	beq.n	8006bac <_scanf_float+0x70>
 8006ba4:	6832      	ldr	r2, [r6, #0]
 8006ba6:	4ba4      	ldr	r3, [pc, #656]	; (8006e38 <_scanf_float+0x2fc>)
 8006ba8:	4013      	ands	r3, r2
 8006baa:	6033      	str	r3, [r6, #0]
 8006bac:	9b02      	ldr	r3, [sp, #8]
 8006bae:	3b01      	subs	r3, #1
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d900      	bls.n	8006bb6 <_scanf_float+0x7a>
 8006bb4:	e0f9      	b.n	8006daa <_scanf_float+0x26e>
 8006bb6:	24be      	movs	r4, #190	; 0xbe
 8006bb8:	0064      	lsls	r4, r4, #1
 8006bba:	9b03      	ldr	r3, [sp, #12]
 8006bbc:	429f      	cmp	r7, r3
 8006bbe:	d900      	bls.n	8006bc2 <_scanf_float+0x86>
 8006bc0:	e0e9      	b.n	8006d96 <_scanf_float+0x25a>
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	9302      	str	r3, [sp, #8]
 8006bc6:	e185      	b.n	8006ed4 <_scanf_float+0x398>
 8006bc8:	0018      	movs	r0, r3
 8006bca:	3861      	subs	r0, #97	; 0x61
 8006bcc:	280d      	cmp	r0, #13
 8006bce:	d8e6      	bhi.n	8006b9e <_scanf_float+0x62>
 8006bd0:	f7f9 faac 	bl	800012c <__gnu_thumb1_case_shi>
 8006bd4:	ffe50083 	.word	0xffe50083
 8006bd8:	ffe5ffe5 	.word	0xffe5ffe5
 8006bdc:	00a200b6 	.word	0x00a200b6
 8006be0:	ffe5ffe5 	.word	0xffe5ffe5
 8006be4:	ffe50089 	.word	0xffe50089
 8006be8:	ffe5ffe5 	.word	0xffe5ffe5
 8006bec:	0065ffe5 	.word	0x0065ffe5
 8006bf0:	3841      	subs	r0, #65	; 0x41
 8006bf2:	e7eb      	b.n	8006bcc <_scanf_float+0x90>
 8006bf4:	280e      	cmp	r0, #14
 8006bf6:	d8d2      	bhi.n	8006b9e <_scanf_float+0x62>
 8006bf8:	f7f9 fa98 	bl	800012c <__gnu_thumb1_case_shi>
 8006bfc:	ffd1004b 	.word	0xffd1004b
 8006c00:	0098004b 	.word	0x0098004b
 8006c04:	0020ffd1 	.word	0x0020ffd1
 8006c08:	00400040 	.word	0x00400040
 8006c0c:	00400040 	.word	0x00400040
 8006c10:	00400040 	.word	0x00400040
 8006c14:	00400040 	.word	0x00400040
 8006c18:	0040      	.short	0x0040
 8006c1a:	2b6e      	cmp	r3, #110	; 0x6e
 8006c1c:	d809      	bhi.n	8006c32 <_scanf_float+0xf6>
 8006c1e:	2b60      	cmp	r3, #96	; 0x60
 8006c20:	d8d2      	bhi.n	8006bc8 <_scanf_float+0x8c>
 8006c22:	2b54      	cmp	r3, #84	; 0x54
 8006c24:	d07d      	beq.n	8006d22 <_scanf_float+0x1e6>
 8006c26:	2b59      	cmp	r3, #89	; 0x59
 8006c28:	d1b9      	bne.n	8006b9e <_scanf_float+0x62>
 8006c2a:	2c07      	cmp	r4, #7
 8006c2c:	d1b7      	bne.n	8006b9e <_scanf_float+0x62>
 8006c2e:	2408      	movs	r4, #8
 8006c30:	e02c      	b.n	8006c8c <_scanf_float+0x150>
 8006c32:	2b74      	cmp	r3, #116	; 0x74
 8006c34:	d075      	beq.n	8006d22 <_scanf_float+0x1e6>
 8006c36:	2b79      	cmp	r3, #121	; 0x79
 8006c38:	d0f7      	beq.n	8006c2a <_scanf_float+0xee>
 8006c3a:	e7b0      	b.n	8006b9e <_scanf_float+0x62>
 8006c3c:	6831      	ldr	r1, [r6, #0]
 8006c3e:	05c8      	lsls	r0, r1, #23
 8006c40:	d51c      	bpl.n	8006c7c <_scanf_float+0x140>
 8006c42:	2380      	movs	r3, #128	; 0x80
 8006c44:	4399      	bics	r1, r3
 8006c46:	9b00      	ldr	r3, [sp, #0]
 8006c48:	6031      	str	r1, [r6, #0]
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	9300      	str	r3, [sp, #0]
 8006c4e:	9b05      	ldr	r3, [sp, #20]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d003      	beq.n	8006c5c <_scanf_float+0x120>
 8006c54:	3b01      	subs	r3, #1
 8006c56:	3201      	adds	r2, #1
 8006c58:	9305      	str	r3, [sp, #20]
 8006c5a:	60b2      	str	r2, [r6, #8]
 8006c5c:	68b3      	ldr	r3, [r6, #8]
 8006c5e:	3b01      	subs	r3, #1
 8006c60:	60b3      	str	r3, [r6, #8]
 8006c62:	6933      	ldr	r3, [r6, #16]
 8006c64:	3301      	adds	r3, #1
 8006c66:	6133      	str	r3, [r6, #16]
 8006c68:	686b      	ldr	r3, [r5, #4]
 8006c6a:	3b01      	subs	r3, #1
 8006c6c:	606b      	str	r3, [r5, #4]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	dc00      	bgt.n	8006c74 <_scanf_float+0x138>
 8006c72:	e086      	b.n	8006d82 <_scanf_float+0x246>
 8006c74:	682b      	ldr	r3, [r5, #0]
 8006c76:	3301      	adds	r3, #1
 8006c78:	602b      	str	r3, [r5, #0]
 8006c7a:	e782      	b.n	8006b82 <_scanf_float+0x46>
 8006c7c:	9a02      	ldr	r2, [sp, #8]
 8006c7e:	1912      	adds	r2, r2, r4
 8006c80:	2a00      	cmp	r2, #0
 8006c82:	d18c      	bne.n	8006b9e <_scanf_float+0x62>
 8006c84:	4a6d      	ldr	r2, [pc, #436]	; (8006e3c <_scanf_float+0x300>)
 8006c86:	6831      	ldr	r1, [r6, #0]
 8006c88:	400a      	ands	r2, r1
 8006c8a:	6032      	str	r2, [r6, #0]
 8006c8c:	703b      	strb	r3, [r7, #0]
 8006c8e:	3701      	adds	r7, #1
 8006c90:	e7e4      	b.n	8006c5c <_scanf_float+0x120>
 8006c92:	2180      	movs	r1, #128	; 0x80
 8006c94:	6832      	ldr	r2, [r6, #0]
 8006c96:	420a      	tst	r2, r1
 8006c98:	d081      	beq.n	8006b9e <_scanf_float+0x62>
 8006c9a:	438a      	bics	r2, r1
 8006c9c:	e7f5      	b.n	8006c8a <_scanf_float+0x14e>
 8006c9e:	9a02      	ldr	r2, [sp, #8]
 8006ca0:	2a00      	cmp	r2, #0
 8006ca2:	d10f      	bne.n	8006cc4 <_scanf_float+0x188>
 8006ca4:	9a00      	ldr	r2, [sp, #0]
 8006ca6:	2a00      	cmp	r2, #0
 8006ca8:	d10f      	bne.n	8006cca <_scanf_float+0x18e>
 8006caa:	6832      	ldr	r2, [r6, #0]
 8006cac:	21e0      	movs	r1, #224	; 0xe0
 8006cae:	0010      	movs	r0, r2
 8006cb0:	00c9      	lsls	r1, r1, #3
 8006cb2:	4008      	ands	r0, r1
 8006cb4:	4288      	cmp	r0, r1
 8006cb6:	d108      	bne.n	8006cca <_scanf_float+0x18e>
 8006cb8:	4961      	ldr	r1, [pc, #388]	; (8006e40 <_scanf_float+0x304>)
 8006cba:	400a      	ands	r2, r1
 8006cbc:	6032      	str	r2, [r6, #0]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	9202      	str	r2, [sp, #8]
 8006cc2:	e7e3      	b.n	8006c8c <_scanf_float+0x150>
 8006cc4:	9a02      	ldr	r2, [sp, #8]
 8006cc6:	2a02      	cmp	r2, #2
 8006cc8:	d059      	beq.n	8006d7e <_scanf_float+0x242>
 8006cca:	2c01      	cmp	r4, #1
 8006ccc:	d002      	beq.n	8006cd4 <_scanf_float+0x198>
 8006cce:	2c04      	cmp	r4, #4
 8006cd0:	d000      	beq.n	8006cd4 <_scanf_float+0x198>
 8006cd2:	e764      	b.n	8006b9e <_scanf_float+0x62>
 8006cd4:	3401      	adds	r4, #1
 8006cd6:	b2e4      	uxtb	r4, r4
 8006cd8:	e7d8      	b.n	8006c8c <_scanf_float+0x150>
 8006cda:	9a02      	ldr	r2, [sp, #8]
 8006cdc:	2a01      	cmp	r2, #1
 8006cde:	d000      	beq.n	8006ce2 <_scanf_float+0x1a6>
 8006ce0:	e75d      	b.n	8006b9e <_scanf_float+0x62>
 8006ce2:	2202      	movs	r2, #2
 8006ce4:	e7ec      	b.n	8006cc0 <_scanf_float+0x184>
 8006ce6:	2c00      	cmp	r4, #0
 8006ce8:	d110      	bne.n	8006d0c <_scanf_float+0x1d0>
 8006cea:	9a00      	ldr	r2, [sp, #0]
 8006cec:	2a00      	cmp	r2, #0
 8006cee:	d000      	beq.n	8006cf2 <_scanf_float+0x1b6>
 8006cf0:	e758      	b.n	8006ba4 <_scanf_float+0x68>
 8006cf2:	6832      	ldr	r2, [r6, #0]
 8006cf4:	21e0      	movs	r1, #224	; 0xe0
 8006cf6:	0010      	movs	r0, r2
 8006cf8:	00c9      	lsls	r1, r1, #3
 8006cfa:	4008      	ands	r0, r1
 8006cfc:	4288      	cmp	r0, r1
 8006cfe:	d000      	beq.n	8006d02 <_scanf_float+0x1c6>
 8006d00:	e754      	b.n	8006bac <_scanf_float+0x70>
 8006d02:	494f      	ldr	r1, [pc, #316]	; (8006e40 <_scanf_float+0x304>)
 8006d04:	3401      	adds	r4, #1
 8006d06:	400a      	ands	r2, r1
 8006d08:	6032      	str	r2, [r6, #0]
 8006d0a:	e7bf      	b.n	8006c8c <_scanf_float+0x150>
 8006d0c:	21fd      	movs	r1, #253	; 0xfd
 8006d0e:	1ee2      	subs	r2, r4, #3
 8006d10:	420a      	tst	r2, r1
 8006d12:	d000      	beq.n	8006d16 <_scanf_float+0x1da>
 8006d14:	e743      	b.n	8006b9e <_scanf_float+0x62>
 8006d16:	e7dd      	b.n	8006cd4 <_scanf_float+0x198>
 8006d18:	2c02      	cmp	r4, #2
 8006d1a:	d000      	beq.n	8006d1e <_scanf_float+0x1e2>
 8006d1c:	e73f      	b.n	8006b9e <_scanf_float+0x62>
 8006d1e:	2403      	movs	r4, #3
 8006d20:	e7b4      	b.n	8006c8c <_scanf_float+0x150>
 8006d22:	2c06      	cmp	r4, #6
 8006d24:	d000      	beq.n	8006d28 <_scanf_float+0x1ec>
 8006d26:	e73a      	b.n	8006b9e <_scanf_float+0x62>
 8006d28:	2407      	movs	r4, #7
 8006d2a:	e7af      	b.n	8006c8c <_scanf_float+0x150>
 8006d2c:	6832      	ldr	r2, [r6, #0]
 8006d2e:	0591      	lsls	r1, r2, #22
 8006d30:	d400      	bmi.n	8006d34 <_scanf_float+0x1f8>
 8006d32:	e734      	b.n	8006b9e <_scanf_float+0x62>
 8006d34:	4943      	ldr	r1, [pc, #268]	; (8006e44 <_scanf_float+0x308>)
 8006d36:	400a      	ands	r2, r1
 8006d38:	6032      	str	r2, [r6, #0]
 8006d3a:	9a00      	ldr	r2, [sp, #0]
 8006d3c:	9204      	str	r2, [sp, #16]
 8006d3e:	e7a5      	b.n	8006c8c <_scanf_float+0x150>
 8006d40:	21a0      	movs	r1, #160	; 0xa0
 8006d42:	2080      	movs	r0, #128	; 0x80
 8006d44:	6832      	ldr	r2, [r6, #0]
 8006d46:	00c9      	lsls	r1, r1, #3
 8006d48:	4011      	ands	r1, r2
 8006d4a:	00c0      	lsls	r0, r0, #3
 8006d4c:	4281      	cmp	r1, r0
 8006d4e:	d006      	beq.n	8006d5e <_scanf_float+0x222>
 8006d50:	4202      	tst	r2, r0
 8006d52:	d100      	bne.n	8006d56 <_scanf_float+0x21a>
 8006d54:	e723      	b.n	8006b9e <_scanf_float+0x62>
 8006d56:	9900      	ldr	r1, [sp, #0]
 8006d58:	2900      	cmp	r1, #0
 8006d5a:	d100      	bne.n	8006d5e <_scanf_float+0x222>
 8006d5c:	e726      	b.n	8006bac <_scanf_float+0x70>
 8006d5e:	0591      	lsls	r1, r2, #22
 8006d60:	d404      	bmi.n	8006d6c <_scanf_float+0x230>
 8006d62:	9900      	ldr	r1, [sp, #0]
 8006d64:	9804      	ldr	r0, [sp, #16]
 8006d66:	9708      	str	r7, [sp, #32]
 8006d68:	1a09      	subs	r1, r1, r0
 8006d6a:	9107      	str	r1, [sp, #28]
 8006d6c:	4934      	ldr	r1, [pc, #208]	; (8006e40 <_scanf_float+0x304>)
 8006d6e:	400a      	ands	r2, r1
 8006d70:	21c0      	movs	r1, #192	; 0xc0
 8006d72:	0049      	lsls	r1, r1, #1
 8006d74:	430a      	orrs	r2, r1
 8006d76:	6032      	str	r2, [r6, #0]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	9200      	str	r2, [sp, #0]
 8006d7c:	e786      	b.n	8006c8c <_scanf_float+0x150>
 8006d7e:	2203      	movs	r2, #3
 8006d80:	e79e      	b.n	8006cc0 <_scanf_float+0x184>
 8006d82:	23c0      	movs	r3, #192	; 0xc0
 8006d84:	005b      	lsls	r3, r3, #1
 8006d86:	0029      	movs	r1, r5
 8006d88:	58f3      	ldr	r3, [r6, r3]
 8006d8a:	9801      	ldr	r0, [sp, #4]
 8006d8c:	4798      	blx	r3
 8006d8e:	2800      	cmp	r0, #0
 8006d90:	d100      	bne.n	8006d94 <_scanf_float+0x258>
 8006d92:	e6f6      	b.n	8006b82 <_scanf_float+0x46>
 8006d94:	e703      	b.n	8006b9e <_scanf_float+0x62>
 8006d96:	3f01      	subs	r7, #1
 8006d98:	5933      	ldr	r3, [r6, r4]
 8006d9a:	002a      	movs	r2, r5
 8006d9c:	7839      	ldrb	r1, [r7, #0]
 8006d9e:	9801      	ldr	r0, [sp, #4]
 8006da0:	4798      	blx	r3
 8006da2:	6933      	ldr	r3, [r6, #16]
 8006da4:	3b01      	subs	r3, #1
 8006da6:	6133      	str	r3, [r6, #16]
 8006da8:	e707      	b.n	8006bba <_scanf_float+0x7e>
 8006daa:	1e63      	subs	r3, r4, #1
 8006dac:	2b06      	cmp	r3, #6
 8006dae:	d80e      	bhi.n	8006dce <_scanf_float+0x292>
 8006db0:	9702      	str	r7, [sp, #8]
 8006db2:	2c02      	cmp	r4, #2
 8006db4:	d920      	bls.n	8006df8 <_scanf_float+0x2bc>
 8006db6:	1be3      	subs	r3, r4, r7
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	9305      	str	r3, [sp, #20]
 8006dbc:	9b02      	ldr	r3, [sp, #8]
 8006dbe:	9a05      	ldr	r2, [sp, #20]
 8006dc0:	189b      	adds	r3, r3, r2
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	2b03      	cmp	r3, #3
 8006dc6:	d827      	bhi.n	8006e18 <_scanf_float+0x2dc>
 8006dc8:	3c03      	subs	r4, #3
 8006dca:	b2e4      	uxtb	r4, r4
 8006dcc:	1b3f      	subs	r7, r7, r4
 8006dce:	6833      	ldr	r3, [r6, #0]
 8006dd0:	05da      	lsls	r2, r3, #23
 8006dd2:	d554      	bpl.n	8006e7e <_scanf_float+0x342>
 8006dd4:	055b      	lsls	r3, r3, #21
 8006dd6:	d537      	bpl.n	8006e48 <_scanf_float+0x30c>
 8006dd8:	24be      	movs	r4, #190	; 0xbe
 8006dda:	0064      	lsls	r4, r4, #1
 8006ddc:	9b03      	ldr	r3, [sp, #12]
 8006dde:	429f      	cmp	r7, r3
 8006de0:	d800      	bhi.n	8006de4 <_scanf_float+0x2a8>
 8006de2:	e6ee      	b.n	8006bc2 <_scanf_float+0x86>
 8006de4:	3f01      	subs	r7, #1
 8006de6:	5933      	ldr	r3, [r6, r4]
 8006de8:	002a      	movs	r2, r5
 8006dea:	7839      	ldrb	r1, [r7, #0]
 8006dec:	9801      	ldr	r0, [sp, #4]
 8006dee:	4798      	blx	r3
 8006df0:	6933      	ldr	r3, [r6, #16]
 8006df2:	3b01      	subs	r3, #1
 8006df4:	6133      	str	r3, [r6, #16]
 8006df6:	e7f1      	b.n	8006ddc <_scanf_float+0x2a0>
 8006df8:	24be      	movs	r4, #190	; 0xbe
 8006dfa:	0064      	lsls	r4, r4, #1
 8006dfc:	9b03      	ldr	r3, [sp, #12]
 8006dfe:	429f      	cmp	r7, r3
 8006e00:	d800      	bhi.n	8006e04 <_scanf_float+0x2c8>
 8006e02:	e6de      	b.n	8006bc2 <_scanf_float+0x86>
 8006e04:	3f01      	subs	r7, #1
 8006e06:	5933      	ldr	r3, [r6, r4]
 8006e08:	002a      	movs	r2, r5
 8006e0a:	7839      	ldrb	r1, [r7, #0]
 8006e0c:	9801      	ldr	r0, [sp, #4]
 8006e0e:	4798      	blx	r3
 8006e10:	6933      	ldr	r3, [r6, #16]
 8006e12:	3b01      	subs	r3, #1
 8006e14:	6133      	str	r3, [r6, #16]
 8006e16:	e7f1      	b.n	8006dfc <_scanf_float+0x2c0>
 8006e18:	9b02      	ldr	r3, [sp, #8]
 8006e1a:	002a      	movs	r2, r5
 8006e1c:	3b01      	subs	r3, #1
 8006e1e:	7819      	ldrb	r1, [r3, #0]
 8006e20:	9302      	str	r3, [sp, #8]
 8006e22:	23be      	movs	r3, #190	; 0xbe
 8006e24:	005b      	lsls	r3, r3, #1
 8006e26:	58f3      	ldr	r3, [r6, r3]
 8006e28:	9801      	ldr	r0, [sp, #4]
 8006e2a:	9309      	str	r3, [sp, #36]	; 0x24
 8006e2c:	4798      	blx	r3
 8006e2e:	6933      	ldr	r3, [r6, #16]
 8006e30:	3b01      	subs	r3, #1
 8006e32:	6133      	str	r3, [r6, #16]
 8006e34:	e7c2      	b.n	8006dbc <_scanf_float+0x280>
 8006e36:	46c0      	nop			; (mov r8, r8)
 8006e38:	fffffeff 	.word	0xfffffeff
 8006e3c:	fffffe7f 	.word	0xfffffe7f
 8006e40:	fffff87f 	.word	0xfffff87f
 8006e44:	fffffd7f 	.word	0xfffffd7f
 8006e48:	6933      	ldr	r3, [r6, #16]
 8006e4a:	1e7c      	subs	r4, r7, #1
 8006e4c:	7821      	ldrb	r1, [r4, #0]
 8006e4e:	3b01      	subs	r3, #1
 8006e50:	6133      	str	r3, [r6, #16]
 8006e52:	2965      	cmp	r1, #101	; 0x65
 8006e54:	d00c      	beq.n	8006e70 <_scanf_float+0x334>
 8006e56:	2945      	cmp	r1, #69	; 0x45
 8006e58:	d00a      	beq.n	8006e70 <_scanf_float+0x334>
 8006e5a:	23be      	movs	r3, #190	; 0xbe
 8006e5c:	005b      	lsls	r3, r3, #1
 8006e5e:	58f3      	ldr	r3, [r6, r3]
 8006e60:	002a      	movs	r2, r5
 8006e62:	9801      	ldr	r0, [sp, #4]
 8006e64:	4798      	blx	r3
 8006e66:	6933      	ldr	r3, [r6, #16]
 8006e68:	1ebc      	subs	r4, r7, #2
 8006e6a:	3b01      	subs	r3, #1
 8006e6c:	7821      	ldrb	r1, [r4, #0]
 8006e6e:	6133      	str	r3, [r6, #16]
 8006e70:	23be      	movs	r3, #190	; 0xbe
 8006e72:	005b      	lsls	r3, r3, #1
 8006e74:	002a      	movs	r2, r5
 8006e76:	58f3      	ldr	r3, [r6, r3]
 8006e78:	9801      	ldr	r0, [sp, #4]
 8006e7a:	4798      	blx	r3
 8006e7c:	0027      	movs	r7, r4
 8006e7e:	6832      	ldr	r2, [r6, #0]
 8006e80:	2310      	movs	r3, #16
 8006e82:	0011      	movs	r1, r2
 8006e84:	4019      	ands	r1, r3
 8006e86:	9102      	str	r1, [sp, #8]
 8006e88:	421a      	tst	r2, r3
 8006e8a:	d158      	bne.n	8006f3e <_scanf_float+0x402>
 8006e8c:	23c0      	movs	r3, #192	; 0xc0
 8006e8e:	7039      	strb	r1, [r7, #0]
 8006e90:	6832      	ldr	r2, [r6, #0]
 8006e92:	00db      	lsls	r3, r3, #3
 8006e94:	4013      	ands	r3, r2
 8006e96:	2280      	movs	r2, #128	; 0x80
 8006e98:	00d2      	lsls	r2, r2, #3
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d11d      	bne.n	8006eda <_scanf_float+0x39e>
 8006e9e:	9b04      	ldr	r3, [sp, #16]
 8006ea0:	9a00      	ldr	r2, [sp, #0]
 8006ea2:	9900      	ldr	r1, [sp, #0]
 8006ea4:	1a9a      	subs	r2, r3, r2
 8006ea6:	428b      	cmp	r3, r1
 8006ea8:	d124      	bne.n	8006ef4 <_scanf_float+0x3b8>
 8006eaa:	2200      	movs	r2, #0
 8006eac:	9903      	ldr	r1, [sp, #12]
 8006eae:	9801      	ldr	r0, [sp, #4]
 8006eb0:	f000 fed0 	bl	8007c54 <_strtod_r>
 8006eb4:	9b06      	ldr	r3, [sp, #24]
 8006eb6:	000d      	movs	r5, r1
 8006eb8:	6831      	ldr	r1, [r6, #0]
 8006eba:	0004      	movs	r4, r0
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	078a      	lsls	r2, r1, #30
 8006ec0:	d525      	bpl.n	8006f0e <_scanf_float+0x3d2>
 8006ec2:	1d1a      	adds	r2, r3, #4
 8006ec4:	9906      	ldr	r1, [sp, #24]
 8006ec6:	600a      	str	r2, [r1, #0]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	601c      	str	r4, [r3, #0]
 8006ecc:	605d      	str	r5, [r3, #4]
 8006ece:	68f3      	ldr	r3, [r6, #12]
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	60f3      	str	r3, [r6, #12]
 8006ed4:	9802      	ldr	r0, [sp, #8]
 8006ed6:	b00b      	add	sp, #44	; 0x2c
 8006ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006eda:	9b07      	ldr	r3, [sp, #28]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d0e4      	beq.n	8006eaa <_scanf_float+0x36e>
 8006ee0:	9b08      	ldr	r3, [sp, #32]
 8006ee2:	9a02      	ldr	r2, [sp, #8]
 8006ee4:	1c59      	adds	r1, r3, #1
 8006ee6:	9801      	ldr	r0, [sp, #4]
 8006ee8:	230a      	movs	r3, #10
 8006eea:	f000 ff57 	bl	8007d9c <_strtol_r>
 8006eee:	9b07      	ldr	r3, [sp, #28]
 8006ef0:	9f08      	ldr	r7, [sp, #32]
 8006ef2:	1ac2      	subs	r2, r0, r3
 8006ef4:	0033      	movs	r3, r6
 8006ef6:	3370      	adds	r3, #112	; 0x70
 8006ef8:	33ff      	adds	r3, #255	; 0xff
 8006efa:	429f      	cmp	r7, r3
 8006efc:	d302      	bcc.n	8006f04 <_scanf_float+0x3c8>
 8006efe:	0037      	movs	r7, r6
 8006f00:	376f      	adds	r7, #111	; 0x6f
 8006f02:	37ff      	adds	r7, #255	; 0xff
 8006f04:	0038      	movs	r0, r7
 8006f06:	490f      	ldr	r1, [pc, #60]	; (8006f44 <_scanf_float+0x408>)
 8006f08:	f000 f824 	bl	8006f54 <siprintf>
 8006f0c:	e7cd      	b.n	8006eaa <_scanf_float+0x36e>
 8006f0e:	1d1a      	adds	r2, r3, #4
 8006f10:	0749      	lsls	r1, r1, #29
 8006f12:	d4d7      	bmi.n	8006ec4 <_scanf_float+0x388>
 8006f14:	9906      	ldr	r1, [sp, #24]
 8006f16:	0020      	movs	r0, r4
 8006f18:	600a      	str	r2, [r1, #0]
 8006f1a:	681f      	ldr	r7, [r3, #0]
 8006f1c:	0022      	movs	r2, r4
 8006f1e:	002b      	movs	r3, r5
 8006f20:	0029      	movs	r1, r5
 8006f22:	f7fb f98b 	bl	800223c <__aeabi_dcmpun>
 8006f26:	2800      	cmp	r0, #0
 8006f28:	d004      	beq.n	8006f34 <_scanf_float+0x3f8>
 8006f2a:	4807      	ldr	r0, [pc, #28]	; (8006f48 <_scanf_float+0x40c>)
 8006f2c:	f000 f80e 	bl	8006f4c <nanf>
 8006f30:	6038      	str	r0, [r7, #0]
 8006f32:	e7cc      	b.n	8006ece <_scanf_float+0x392>
 8006f34:	0020      	movs	r0, r4
 8006f36:	0029      	movs	r1, r5
 8006f38:	f7fb fa2a 	bl	8002390 <__aeabi_d2f>
 8006f3c:	e7f8      	b.n	8006f30 <_scanf_float+0x3f4>
 8006f3e:	2300      	movs	r3, #0
 8006f40:	e640      	b.n	8006bc4 <_scanf_float+0x88>
 8006f42:	46c0      	nop			; (mov r8, r8)
 8006f44:	0800af20 	.word	0x0800af20
 8006f48:	0800b338 	.word	0x0800b338

08006f4c <nanf>:
 8006f4c:	4800      	ldr	r0, [pc, #0]	; (8006f50 <nanf+0x4>)
 8006f4e:	4770      	bx	lr
 8006f50:	7fc00000 	.word	0x7fc00000

08006f54 <siprintf>:
 8006f54:	b40e      	push	{r1, r2, r3}
 8006f56:	b500      	push	{lr}
 8006f58:	490b      	ldr	r1, [pc, #44]	; (8006f88 <siprintf+0x34>)
 8006f5a:	b09c      	sub	sp, #112	; 0x70
 8006f5c:	ab1d      	add	r3, sp, #116	; 0x74
 8006f5e:	9002      	str	r0, [sp, #8]
 8006f60:	9006      	str	r0, [sp, #24]
 8006f62:	9107      	str	r1, [sp, #28]
 8006f64:	9104      	str	r1, [sp, #16]
 8006f66:	4809      	ldr	r0, [pc, #36]	; (8006f8c <siprintf+0x38>)
 8006f68:	4909      	ldr	r1, [pc, #36]	; (8006f90 <siprintf+0x3c>)
 8006f6a:	cb04      	ldmia	r3!, {r2}
 8006f6c:	9105      	str	r1, [sp, #20]
 8006f6e:	6800      	ldr	r0, [r0, #0]
 8006f70:	a902      	add	r1, sp, #8
 8006f72:	9301      	str	r3, [sp, #4]
 8006f74:	f002 ff48 	bl	8009e08 <_svfiprintf_r>
 8006f78:	2300      	movs	r3, #0
 8006f7a:	9a02      	ldr	r2, [sp, #8]
 8006f7c:	7013      	strb	r3, [r2, #0]
 8006f7e:	b01c      	add	sp, #112	; 0x70
 8006f80:	bc08      	pop	{r3}
 8006f82:	b003      	add	sp, #12
 8006f84:	4718      	bx	r3
 8006f86:	46c0      	nop			; (mov r8, r8)
 8006f88:	7fffffff 	.word	0x7fffffff
 8006f8c:	20000014 	.word	0x20000014
 8006f90:	ffff0208 	.word	0xffff0208

08006f94 <strchr>:
 8006f94:	b2c9      	uxtb	r1, r1
 8006f96:	7803      	ldrb	r3, [r0, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d004      	beq.n	8006fa6 <strchr+0x12>
 8006f9c:	428b      	cmp	r3, r1
 8006f9e:	d100      	bne.n	8006fa2 <strchr+0xe>
 8006fa0:	4770      	bx	lr
 8006fa2:	3001      	adds	r0, #1
 8006fa4:	e7f7      	b.n	8006f96 <strchr+0x2>
 8006fa6:	424b      	negs	r3, r1
 8006fa8:	4159      	adcs	r1, r3
 8006faa:	4249      	negs	r1, r1
 8006fac:	4008      	ands	r0, r1
 8006fae:	e7f7      	b.n	8006fa0 <strchr+0xc>

08006fb0 <strstr>:
 8006fb0:	780a      	ldrb	r2, [r1, #0]
 8006fb2:	b530      	push	{r4, r5, lr}
 8006fb4:	2a00      	cmp	r2, #0
 8006fb6:	d10c      	bne.n	8006fd2 <strstr+0x22>
 8006fb8:	bd30      	pop	{r4, r5, pc}
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d108      	bne.n	8006fd0 <strstr+0x20>
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	5ccc      	ldrb	r4, [r1, r3]
 8006fc2:	2c00      	cmp	r4, #0
 8006fc4:	d0f8      	beq.n	8006fb8 <strstr+0x8>
 8006fc6:	5cc5      	ldrb	r5, [r0, r3]
 8006fc8:	42a5      	cmp	r5, r4
 8006fca:	d101      	bne.n	8006fd0 <strstr+0x20>
 8006fcc:	3301      	adds	r3, #1
 8006fce:	e7f7      	b.n	8006fc0 <strstr+0x10>
 8006fd0:	3001      	adds	r0, #1
 8006fd2:	7803      	ldrb	r3, [r0, #0]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d1f0      	bne.n	8006fba <strstr+0xa>
 8006fd8:	0018      	movs	r0, r3
 8006fda:	e7ed      	b.n	8006fb8 <strstr+0x8>

08006fdc <sulp>:
 8006fdc:	b570      	push	{r4, r5, r6, lr}
 8006fde:	0016      	movs	r6, r2
 8006fe0:	000d      	movs	r5, r1
 8006fe2:	f002 fcb5 	bl	8009950 <__ulp>
 8006fe6:	2e00      	cmp	r6, #0
 8006fe8:	d00d      	beq.n	8007006 <sulp+0x2a>
 8006fea:	236b      	movs	r3, #107	; 0x6b
 8006fec:	006a      	lsls	r2, r5, #1
 8006fee:	0d52      	lsrs	r2, r2, #21
 8006ff0:	1a9b      	subs	r3, r3, r2
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	dd07      	ble.n	8007006 <sulp+0x2a>
 8006ff6:	2400      	movs	r4, #0
 8006ff8:	4a03      	ldr	r2, [pc, #12]	; (8007008 <sulp+0x2c>)
 8006ffa:	051b      	lsls	r3, r3, #20
 8006ffc:	189d      	adds	r5, r3, r2
 8006ffe:	002b      	movs	r3, r5
 8007000:	0022      	movs	r2, r4
 8007002:	f7fa fb1d 	bl	8001640 <__aeabi_dmul>
 8007006:	bd70      	pop	{r4, r5, r6, pc}
 8007008:	3ff00000 	.word	0x3ff00000

0800700c <_strtod_l>:
 800700c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800700e:	001d      	movs	r5, r3
 8007010:	2300      	movs	r3, #0
 8007012:	b0a7      	sub	sp, #156	; 0x9c
 8007014:	9322      	str	r3, [sp, #136]	; 0x88
 8007016:	4bae      	ldr	r3, [pc, #696]	; (80072d0 <_strtod_l+0x2c4>)
 8007018:	9005      	str	r0, [sp, #20]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	9108      	str	r1, [sp, #32]
 800701e:	0018      	movs	r0, r3
 8007020:	9307      	str	r3, [sp, #28]
 8007022:	921d      	str	r2, [sp, #116]	; 0x74
 8007024:	f7f9 f870 	bl	8000108 <strlen>
 8007028:	2600      	movs	r6, #0
 800702a:	0004      	movs	r4, r0
 800702c:	2700      	movs	r7, #0
 800702e:	9b08      	ldr	r3, [sp, #32]
 8007030:	9321      	str	r3, [sp, #132]	; 0x84
 8007032:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007034:	7813      	ldrb	r3, [r2, #0]
 8007036:	2b2b      	cmp	r3, #43	; 0x2b
 8007038:	d058      	beq.n	80070ec <_strtod_l+0xe0>
 800703a:	d844      	bhi.n	80070c6 <_strtod_l+0xba>
 800703c:	2b0d      	cmp	r3, #13
 800703e:	d83d      	bhi.n	80070bc <_strtod_l+0xb0>
 8007040:	2b08      	cmp	r3, #8
 8007042:	d83d      	bhi.n	80070c0 <_strtod_l+0xb4>
 8007044:	2b00      	cmp	r3, #0
 8007046:	d047      	beq.n	80070d8 <_strtod_l+0xcc>
 8007048:	2300      	movs	r3, #0
 800704a:	9310      	str	r3, [sp, #64]	; 0x40
 800704c:	2200      	movs	r2, #0
 800704e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007050:	920a      	str	r2, [sp, #40]	; 0x28
 8007052:	9306      	str	r3, [sp, #24]
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	2b30      	cmp	r3, #48	; 0x30
 8007058:	d000      	beq.n	800705c <_strtod_l+0x50>
 800705a:	e083      	b.n	8007164 <_strtod_l+0x158>
 800705c:	9b06      	ldr	r3, [sp, #24]
 800705e:	3220      	adds	r2, #32
 8007060:	785b      	ldrb	r3, [r3, #1]
 8007062:	4393      	bics	r3, r2
 8007064:	2b58      	cmp	r3, #88	; 0x58
 8007066:	d000      	beq.n	800706a <_strtod_l+0x5e>
 8007068:	e072      	b.n	8007150 <_strtod_l+0x144>
 800706a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800706c:	9502      	str	r5, [sp, #8]
 800706e:	9301      	str	r3, [sp, #4]
 8007070:	ab22      	add	r3, sp, #136	; 0x88
 8007072:	9300      	str	r3, [sp, #0]
 8007074:	4a97      	ldr	r2, [pc, #604]	; (80072d4 <_strtod_l+0x2c8>)
 8007076:	ab23      	add	r3, sp, #140	; 0x8c
 8007078:	9805      	ldr	r0, [sp, #20]
 800707a:	a921      	add	r1, sp, #132	; 0x84
 800707c:	f001 fda6 	bl	8008bcc <__gethex>
 8007080:	2307      	movs	r3, #7
 8007082:	0005      	movs	r5, r0
 8007084:	0004      	movs	r4, r0
 8007086:	401d      	ands	r5, r3
 8007088:	4218      	tst	r0, r3
 800708a:	d006      	beq.n	800709a <_strtod_l+0x8e>
 800708c:	2d06      	cmp	r5, #6
 800708e:	d12f      	bne.n	80070f0 <_strtod_l+0xe4>
 8007090:	9b06      	ldr	r3, [sp, #24]
 8007092:	3301      	adds	r3, #1
 8007094:	9321      	str	r3, [sp, #132]	; 0x84
 8007096:	2300      	movs	r3, #0
 8007098:	9310      	str	r3, [sp, #64]	; 0x40
 800709a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800709c:	2b00      	cmp	r3, #0
 800709e:	d002      	beq.n	80070a6 <_strtod_l+0x9a>
 80070a0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80070a2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80070a4:	601a      	str	r2, [r3, #0]
 80070a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d01c      	beq.n	80070e6 <_strtod_l+0xda>
 80070ac:	2380      	movs	r3, #128	; 0x80
 80070ae:	0032      	movs	r2, r6
 80070b0:	061b      	lsls	r3, r3, #24
 80070b2:	18fb      	adds	r3, r7, r3
 80070b4:	0010      	movs	r0, r2
 80070b6:	0019      	movs	r1, r3
 80070b8:	b027      	add	sp, #156	; 0x9c
 80070ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070bc:	2b20      	cmp	r3, #32
 80070be:	d1c3      	bne.n	8007048 <_strtod_l+0x3c>
 80070c0:	3201      	adds	r2, #1
 80070c2:	9221      	str	r2, [sp, #132]	; 0x84
 80070c4:	e7b5      	b.n	8007032 <_strtod_l+0x26>
 80070c6:	2b2d      	cmp	r3, #45	; 0x2d
 80070c8:	d1be      	bne.n	8007048 <_strtod_l+0x3c>
 80070ca:	3b2c      	subs	r3, #44	; 0x2c
 80070cc:	9310      	str	r3, [sp, #64]	; 0x40
 80070ce:	1c53      	adds	r3, r2, #1
 80070d0:	9321      	str	r3, [sp, #132]	; 0x84
 80070d2:	7853      	ldrb	r3, [r2, #1]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d1b9      	bne.n	800704c <_strtod_l+0x40>
 80070d8:	9b08      	ldr	r3, [sp, #32]
 80070da:	9321      	str	r3, [sp, #132]	; 0x84
 80070dc:	2300      	movs	r3, #0
 80070de:	9310      	str	r3, [sp, #64]	; 0x40
 80070e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d1dc      	bne.n	80070a0 <_strtod_l+0x94>
 80070e6:	0032      	movs	r2, r6
 80070e8:	003b      	movs	r3, r7
 80070ea:	e7e3      	b.n	80070b4 <_strtod_l+0xa8>
 80070ec:	2300      	movs	r3, #0
 80070ee:	e7ed      	b.n	80070cc <_strtod_l+0xc0>
 80070f0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80070f2:	2a00      	cmp	r2, #0
 80070f4:	d007      	beq.n	8007106 <_strtod_l+0xfa>
 80070f6:	2135      	movs	r1, #53	; 0x35
 80070f8:	a824      	add	r0, sp, #144	; 0x90
 80070fa:	f002 fd28 	bl	8009b4e <__copybits>
 80070fe:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007100:	9805      	ldr	r0, [sp, #20]
 8007102:	f002 f8e3 	bl	80092cc <_Bfree>
 8007106:	1e68      	subs	r0, r5, #1
 8007108:	2805      	cmp	r0, #5
 800710a:	d806      	bhi.n	800711a <_strtod_l+0x10e>
 800710c:	f7f9 f804 	bl	8000118 <__gnu_thumb1_case_uqi>
 8007110:	1c190b0e 	.word	0x1c190b0e
 8007114:	030e      	.short	0x030e
 8007116:	2700      	movs	r7, #0
 8007118:	003e      	movs	r6, r7
 800711a:	0723      	lsls	r3, r4, #28
 800711c:	d5bd      	bpl.n	800709a <_strtod_l+0x8e>
 800711e:	2380      	movs	r3, #128	; 0x80
 8007120:	061b      	lsls	r3, r3, #24
 8007122:	431f      	orrs	r7, r3
 8007124:	e7b9      	b.n	800709a <_strtod_l+0x8e>
 8007126:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8007128:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800712a:	e7f6      	b.n	800711a <_strtod_l+0x10e>
 800712c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800712e:	4a6a      	ldr	r2, [pc, #424]	; (80072d8 <_strtod_l+0x2cc>)
 8007130:	496a      	ldr	r1, [pc, #424]	; (80072dc <_strtod_l+0x2d0>)
 8007132:	401a      	ands	r2, r3
 8007134:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007136:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8007138:	185b      	adds	r3, r3, r1
 800713a:	051b      	lsls	r3, r3, #20
 800713c:	431a      	orrs	r2, r3
 800713e:	0017      	movs	r7, r2
 8007140:	e7eb      	b.n	800711a <_strtod_l+0x10e>
 8007142:	2600      	movs	r6, #0
 8007144:	4f66      	ldr	r7, [pc, #408]	; (80072e0 <_strtod_l+0x2d4>)
 8007146:	e7e8      	b.n	800711a <_strtod_l+0x10e>
 8007148:	2601      	movs	r6, #1
 800714a:	4f66      	ldr	r7, [pc, #408]	; (80072e4 <_strtod_l+0x2d8>)
 800714c:	4276      	negs	r6, r6
 800714e:	e7e4      	b.n	800711a <_strtod_l+0x10e>
 8007150:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007152:	1c5a      	adds	r2, r3, #1
 8007154:	9221      	str	r2, [sp, #132]	; 0x84
 8007156:	785b      	ldrb	r3, [r3, #1]
 8007158:	2b30      	cmp	r3, #48	; 0x30
 800715a:	d0f9      	beq.n	8007150 <_strtod_l+0x144>
 800715c:	2b00      	cmp	r3, #0
 800715e:	d09c      	beq.n	800709a <_strtod_l+0x8e>
 8007160:	2301      	movs	r3, #1
 8007162:	930a      	str	r3, [sp, #40]	; 0x28
 8007164:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007166:	220a      	movs	r2, #10
 8007168:	9311      	str	r3, [sp, #68]	; 0x44
 800716a:	2300      	movs	r3, #0
 800716c:	930e      	str	r3, [sp, #56]	; 0x38
 800716e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007170:	9309      	str	r3, [sp, #36]	; 0x24
 8007172:	9821      	ldr	r0, [sp, #132]	; 0x84
 8007174:	7805      	ldrb	r5, [r0, #0]
 8007176:	002b      	movs	r3, r5
 8007178:	3b30      	subs	r3, #48	; 0x30
 800717a:	b2d9      	uxtb	r1, r3
 800717c:	2909      	cmp	r1, #9
 800717e:	d927      	bls.n	80071d0 <_strtod_l+0x1c4>
 8007180:	0022      	movs	r2, r4
 8007182:	9907      	ldr	r1, [sp, #28]
 8007184:	f002 ff58 	bl	800a038 <strncmp>
 8007188:	2800      	cmp	r0, #0
 800718a:	d033      	beq.n	80071f4 <_strtod_l+0x1e8>
 800718c:	2000      	movs	r0, #0
 800718e:	002b      	movs	r3, r5
 8007190:	4684      	mov	ip, r0
 8007192:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007194:	900c      	str	r0, [sp, #48]	; 0x30
 8007196:	9206      	str	r2, [sp, #24]
 8007198:	2220      	movs	r2, #32
 800719a:	0019      	movs	r1, r3
 800719c:	4391      	bics	r1, r2
 800719e:	000a      	movs	r2, r1
 80071a0:	2100      	movs	r1, #0
 80071a2:	9107      	str	r1, [sp, #28]
 80071a4:	2a45      	cmp	r2, #69	; 0x45
 80071a6:	d000      	beq.n	80071aa <_strtod_l+0x19e>
 80071a8:	e0c5      	b.n	8007336 <_strtod_l+0x32a>
 80071aa:	9b06      	ldr	r3, [sp, #24]
 80071ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071ae:	4303      	orrs	r3, r0
 80071b0:	4313      	orrs	r3, r2
 80071b2:	428b      	cmp	r3, r1
 80071b4:	d090      	beq.n	80070d8 <_strtod_l+0xcc>
 80071b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071b8:	9308      	str	r3, [sp, #32]
 80071ba:	3301      	adds	r3, #1
 80071bc:	9321      	str	r3, [sp, #132]	; 0x84
 80071be:	9b08      	ldr	r3, [sp, #32]
 80071c0:	785b      	ldrb	r3, [r3, #1]
 80071c2:	2b2b      	cmp	r3, #43	; 0x2b
 80071c4:	d075      	beq.n	80072b2 <_strtod_l+0x2a6>
 80071c6:	000c      	movs	r4, r1
 80071c8:	2b2d      	cmp	r3, #45	; 0x2d
 80071ca:	d178      	bne.n	80072be <_strtod_l+0x2b2>
 80071cc:	2401      	movs	r4, #1
 80071ce:	e071      	b.n	80072b4 <_strtod_l+0x2a8>
 80071d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80071d2:	2908      	cmp	r1, #8
 80071d4:	dc09      	bgt.n	80071ea <_strtod_l+0x1de>
 80071d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80071d8:	4351      	muls	r1, r2
 80071da:	185b      	adds	r3, r3, r1
 80071dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80071de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071e0:	3001      	adds	r0, #1
 80071e2:	3301      	adds	r3, #1
 80071e4:	9309      	str	r3, [sp, #36]	; 0x24
 80071e6:	9021      	str	r0, [sp, #132]	; 0x84
 80071e8:	e7c3      	b.n	8007172 <_strtod_l+0x166>
 80071ea:	990e      	ldr	r1, [sp, #56]	; 0x38
 80071ec:	4351      	muls	r1, r2
 80071ee:	185b      	adds	r3, r3, r1
 80071f0:	930e      	str	r3, [sp, #56]	; 0x38
 80071f2:	e7f4      	b.n	80071de <_strtod_l+0x1d2>
 80071f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071f8:	191c      	adds	r4, r3, r4
 80071fa:	9421      	str	r4, [sp, #132]	; 0x84
 80071fc:	7823      	ldrb	r3, [r4, #0]
 80071fe:	2a00      	cmp	r2, #0
 8007200:	d039      	beq.n	8007276 <_strtod_l+0x26a>
 8007202:	900c      	str	r0, [sp, #48]	; 0x30
 8007204:	9206      	str	r2, [sp, #24]
 8007206:	001a      	movs	r2, r3
 8007208:	3a30      	subs	r2, #48	; 0x30
 800720a:	2a09      	cmp	r2, #9
 800720c:	d912      	bls.n	8007234 <_strtod_l+0x228>
 800720e:	2201      	movs	r2, #1
 8007210:	4694      	mov	ip, r2
 8007212:	e7c1      	b.n	8007198 <_strtod_l+0x18c>
 8007214:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007216:	3001      	adds	r0, #1
 8007218:	1c5a      	adds	r2, r3, #1
 800721a:	9221      	str	r2, [sp, #132]	; 0x84
 800721c:	785b      	ldrb	r3, [r3, #1]
 800721e:	2b30      	cmp	r3, #48	; 0x30
 8007220:	d0f8      	beq.n	8007214 <_strtod_l+0x208>
 8007222:	001a      	movs	r2, r3
 8007224:	3a31      	subs	r2, #49	; 0x31
 8007226:	2a08      	cmp	r2, #8
 8007228:	d83e      	bhi.n	80072a8 <_strtod_l+0x29c>
 800722a:	900c      	str	r0, [sp, #48]	; 0x30
 800722c:	2000      	movs	r0, #0
 800722e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007230:	9006      	str	r0, [sp, #24]
 8007232:	9211      	str	r2, [sp, #68]	; 0x44
 8007234:	001a      	movs	r2, r3
 8007236:	9906      	ldr	r1, [sp, #24]
 8007238:	1c44      	adds	r4, r0, #1
 800723a:	3a30      	subs	r2, #48	; 0x30
 800723c:	2b30      	cmp	r3, #48	; 0x30
 800723e:	d013      	beq.n	8007268 <_strtod_l+0x25c>
 8007240:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007242:	191b      	adds	r3, r3, r4
 8007244:	930c      	str	r3, [sp, #48]	; 0x30
 8007246:	1844      	adds	r4, r0, r1
 8007248:	000b      	movs	r3, r1
 800724a:	210a      	movs	r1, #10
 800724c:	429c      	cmp	r4, r3
 800724e:	d114      	bne.n	800727a <_strtod_l+0x26e>
 8007250:	9b06      	ldr	r3, [sp, #24]
 8007252:	1c59      	adds	r1, r3, #1
 8007254:	1809      	adds	r1, r1, r0
 8007256:	1818      	adds	r0, r3, r0
 8007258:	2808      	cmp	r0, #8
 800725a:	dc1c      	bgt.n	8007296 <_strtod_l+0x28a>
 800725c:	230a      	movs	r3, #10
 800725e:	2400      	movs	r4, #0
 8007260:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007262:	4343      	muls	r3, r0
 8007264:	18d3      	adds	r3, r2, r3
 8007266:	930b      	str	r3, [sp, #44]	; 0x2c
 8007268:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800726a:	0020      	movs	r0, r4
 800726c:	1c5a      	adds	r2, r3, #1
 800726e:	9221      	str	r2, [sp, #132]	; 0x84
 8007270:	785b      	ldrb	r3, [r3, #1]
 8007272:	9106      	str	r1, [sp, #24]
 8007274:	e7c7      	b.n	8007206 <_strtod_l+0x1fa>
 8007276:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007278:	e7d1      	b.n	800721e <_strtod_l+0x212>
 800727a:	2b08      	cmp	r3, #8
 800727c:	dc04      	bgt.n	8007288 <_strtod_l+0x27c>
 800727e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8007280:	434d      	muls	r5, r1
 8007282:	950b      	str	r5, [sp, #44]	; 0x2c
 8007284:	3301      	adds	r3, #1
 8007286:	e7e1      	b.n	800724c <_strtod_l+0x240>
 8007288:	1c5d      	adds	r5, r3, #1
 800728a:	2d10      	cmp	r5, #16
 800728c:	dcfa      	bgt.n	8007284 <_strtod_l+0x278>
 800728e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8007290:	434d      	muls	r5, r1
 8007292:	950e      	str	r5, [sp, #56]	; 0x38
 8007294:	e7f6      	b.n	8007284 <_strtod_l+0x278>
 8007296:	2400      	movs	r4, #0
 8007298:	2910      	cmp	r1, #16
 800729a:	dce5      	bgt.n	8007268 <_strtod_l+0x25c>
 800729c:	230a      	movs	r3, #10
 800729e:	980e      	ldr	r0, [sp, #56]	; 0x38
 80072a0:	4343      	muls	r3, r0
 80072a2:	18d3      	adds	r3, r2, r3
 80072a4:	930e      	str	r3, [sp, #56]	; 0x38
 80072a6:	e7df      	b.n	8007268 <_strtod_l+0x25c>
 80072a8:	2200      	movs	r2, #0
 80072aa:	920c      	str	r2, [sp, #48]	; 0x30
 80072ac:	9206      	str	r2, [sp, #24]
 80072ae:	3201      	adds	r2, #1
 80072b0:	e7ae      	b.n	8007210 <_strtod_l+0x204>
 80072b2:	2400      	movs	r4, #0
 80072b4:	9b08      	ldr	r3, [sp, #32]
 80072b6:	3302      	adds	r3, #2
 80072b8:	9321      	str	r3, [sp, #132]	; 0x84
 80072ba:	9b08      	ldr	r3, [sp, #32]
 80072bc:	789b      	ldrb	r3, [r3, #2]
 80072be:	001a      	movs	r2, r3
 80072c0:	3a30      	subs	r2, #48	; 0x30
 80072c2:	2a09      	cmp	r2, #9
 80072c4:	d914      	bls.n	80072f0 <_strtod_l+0x2e4>
 80072c6:	9a08      	ldr	r2, [sp, #32]
 80072c8:	9221      	str	r2, [sp, #132]	; 0x84
 80072ca:	2200      	movs	r2, #0
 80072cc:	e032      	b.n	8007334 <_strtod_l+0x328>
 80072ce:	46c0      	nop			; (mov r8, r8)
 80072d0:	0800b178 	.word	0x0800b178
 80072d4:	0800af28 	.word	0x0800af28
 80072d8:	ffefffff 	.word	0xffefffff
 80072dc:	00000433 	.word	0x00000433
 80072e0:	7ff00000 	.word	0x7ff00000
 80072e4:	7fffffff 	.word	0x7fffffff
 80072e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80072ea:	1c5a      	adds	r2, r3, #1
 80072ec:	9221      	str	r2, [sp, #132]	; 0x84
 80072ee:	785b      	ldrb	r3, [r3, #1]
 80072f0:	2b30      	cmp	r3, #48	; 0x30
 80072f2:	d0f9      	beq.n	80072e8 <_strtod_l+0x2dc>
 80072f4:	2200      	movs	r2, #0
 80072f6:	9207      	str	r2, [sp, #28]
 80072f8:	001a      	movs	r2, r3
 80072fa:	3a31      	subs	r2, #49	; 0x31
 80072fc:	2a08      	cmp	r2, #8
 80072fe:	d81a      	bhi.n	8007336 <_strtod_l+0x32a>
 8007300:	3b30      	subs	r3, #48	; 0x30
 8007302:	001a      	movs	r2, r3
 8007304:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007306:	9307      	str	r3, [sp, #28]
 8007308:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800730a:	1c59      	adds	r1, r3, #1
 800730c:	9121      	str	r1, [sp, #132]	; 0x84
 800730e:	785b      	ldrb	r3, [r3, #1]
 8007310:	001d      	movs	r5, r3
 8007312:	3d30      	subs	r5, #48	; 0x30
 8007314:	2d09      	cmp	r5, #9
 8007316:	d939      	bls.n	800738c <_strtod_l+0x380>
 8007318:	9d07      	ldr	r5, [sp, #28]
 800731a:	1b49      	subs	r1, r1, r5
 800731c:	4daf      	ldr	r5, [pc, #700]	; (80075dc <_strtod_l+0x5d0>)
 800731e:	9507      	str	r5, [sp, #28]
 8007320:	2908      	cmp	r1, #8
 8007322:	dc03      	bgt.n	800732c <_strtod_l+0x320>
 8007324:	9207      	str	r2, [sp, #28]
 8007326:	42aa      	cmp	r2, r5
 8007328:	dd00      	ble.n	800732c <_strtod_l+0x320>
 800732a:	9507      	str	r5, [sp, #28]
 800732c:	2c00      	cmp	r4, #0
 800732e:	d002      	beq.n	8007336 <_strtod_l+0x32a>
 8007330:	9a07      	ldr	r2, [sp, #28]
 8007332:	4252      	negs	r2, r2
 8007334:	9207      	str	r2, [sp, #28]
 8007336:	9a06      	ldr	r2, [sp, #24]
 8007338:	2a00      	cmp	r2, #0
 800733a:	d14b      	bne.n	80073d4 <_strtod_l+0x3c8>
 800733c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800733e:	4310      	orrs	r0, r2
 8007340:	d000      	beq.n	8007344 <_strtod_l+0x338>
 8007342:	e6aa      	b.n	800709a <_strtod_l+0x8e>
 8007344:	4662      	mov	r2, ip
 8007346:	2a00      	cmp	r2, #0
 8007348:	d000      	beq.n	800734c <_strtod_l+0x340>
 800734a:	e6c5      	b.n	80070d8 <_strtod_l+0xcc>
 800734c:	2b69      	cmp	r3, #105	; 0x69
 800734e:	d025      	beq.n	800739c <_strtod_l+0x390>
 8007350:	dc21      	bgt.n	8007396 <_strtod_l+0x38a>
 8007352:	2b49      	cmp	r3, #73	; 0x49
 8007354:	d022      	beq.n	800739c <_strtod_l+0x390>
 8007356:	2b4e      	cmp	r3, #78	; 0x4e
 8007358:	d000      	beq.n	800735c <_strtod_l+0x350>
 800735a:	e6bd      	b.n	80070d8 <_strtod_l+0xcc>
 800735c:	49a0      	ldr	r1, [pc, #640]	; (80075e0 <_strtod_l+0x5d4>)
 800735e:	a821      	add	r0, sp, #132	; 0x84
 8007360:	f001 fe82 	bl	8009068 <__match>
 8007364:	2800      	cmp	r0, #0
 8007366:	d100      	bne.n	800736a <_strtod_l+0x35e>
 8007368:	e6b6      	b.n	80070d8 <_strtod_l+0xcc>
 800736a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	2b28      	cmp	r3, #40	; 0x28
 8007370:	d12a      	bne.n	80073c8 <_strtod_l+0x3bc>
 8007372:	499c      	ldr	r1, [pc, #624]	; (80075e4 <_strtod_l+0x5d8>)
 8007374:	aa24      	add	r2, sp, #144	; 0x90
 8007376:	a821      	add	r0, sp, #132	; 0x84
 8007378:	f001 fe8a 	bl	8009090 <__hexnan>
 800737c:	2805      	cmp	r0, #5
 800737e:	d123      	bne.n	80073c8 <_strtod_l+0x3bc>
 8007380:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8007382:	4a99      	ldr	r2, [pc, #612]	; (80075e8 <_strtod_l+0x5dc>)
 8007384:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8007386:	431a      	orrs	r2, r3
 8007388:	0017      	movs	r7, r2
 800738a:	e686      	b.n	800709a <_strtod_l+0x8e>
 800738c:	210a      	movs	r1, #10
 800738e:	434a      	muls	r2, r1
 8007390:	18d2      	adds	r2, r2, r3
 8007392:	3a30      	subs	r2, #48	; 0x30
 8007394:	e7b8      	b.n	8007308 <_strtod_l+0x2fc>
 8007396:	2b6e      	cmp	r3, #110	; 0x6e
 8007398:	d0e0      	beq.n	800735c <_strtod_l+0x350>
 800739a:	e69d      	b.n	80070d8 <_strtod_l+0xcc>
 800739c:	4993      	ldr	r1, [pc, #588]	; (80075ec <_strtod_l+0x5e0>)
 800739e:	a821      	add	r0, sp, #132	; 0x84
 80073a0:	f001 fe62 	bl	8009068 <__match>
 80073a4:	2800      	cmp	r0, #0
 80073a6:	d100      	bne.n	80073aa <_strtod_l+0x39e>
 80073a8:	e696      	b.n	80070d8 <_strtod_l+0xcc>
 80073aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80073ac:	4990      	ldr	r1, [pc, #576]	; (80075f0 <_strtod_l+0x5e4>)
 80073ae:	3b01      	subs	r3, #1
 80073b0:	a821      	add	r0, sp, #132	; 0x84
 80073b2:	9321      	str	r3, [sp, #132]	; 0x84
 80073b4:	f001 fe58 	bl	8009068 <__match>
 80073b8:	2800      	cmp	r0, #0
 80073ba:	d102      	bne.n	80073c2 <_strtod_l+0x3b6>
 80073bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80073be:	3301      	adds	r3, #1
 80073c0:	9321      	str	r3, [sp, #132]	; 0x84
 80073c2:	2600      	movs	r6, #0
 80073c4:	4f88      	ldr	r7, [pc, #544]	; (80075e8 <_strtod_l+0x5dc>)
 80073c6:	e668      	b.n	800709a <_strtod_l+0x8e>
 80073c8:	488a      	ldr	r0, [pc, #552]	; (80075f4 <_strtod_l+0x5e8>)
 80073ca:	f002 fe1d 	bl	800a008 <nan>
 80073ce:	0006      	movs	r6, r0
 80073d0:	000f      	movs	r7, r1
 80073d2:	e662      	b.n	800709a <_strtod_l+0x8e>
 80073d4:	9b07      	ldr	r3, [sp, #28]
 80073d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80073d8:	1a9b      	subs	r3, r3, r2
 80073da:	930a      	str	r3, [sp, #40]	; 0x28
 80073dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d101      	bne.n	80073e6 <_strtod_l+0x3da>
 80073e2:	9b06      	ldr	r3, [sp, #24]
 80073e4:	9309      	str	r3, [sp, #36]	; 0x24
 80073e6:	9c06      	ldr	r4, [sp, #24]
 80073e8:	2c10      	cmp	r4, #16
 80073ea:	dd00      	ble.n	80073ee <_strtod_l+0x3e2>
 80073ec:	2410      	movs	r4, #16
 80073ee:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80073f0:	f7fa ffa8 	bl	8002344 <__aeabi_ui2d>
 80073f4:	9b06      	ldr	r3, [sp, #24]
 80073f6:	0006      	movs	r6, r0
 80073f8:	000f      	movs	r7, r1
 80073fa:	2b09      	cmp	r3, #9
 80073fc:	dd15      	ble.n	800742a <_strtod_l+0x41e>
 80073fe:	0022      	movs	r2, r4
 8007400:	4b7d      	ldr	r3, [pc, #500]	; (80075f8 <_strtod_l+0x5ec>)
 8007402:	3a09      	subs	r2, #9
 8007404:	00d2      	lsls	r2, r2, #3
 8007406:	189b      	adds	r3, r3, r2
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	f7fa f918 	bl	8001640 <__aeabi_dmul>
 8007410:	0006      	movs	r6, r0
 8007412:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007414:	000f      	movs	r7, r1
 8007416:	f7fa ff95 	bl	8002344 <__aeabi_ui2d>
 800741a:	0002      	movs	r2, r0
 800741c:	000b      	movs	r3, r1
 800741e:	0030      	movs	r0, r6
 8007420:	0039      	movs	r1, r7
 8007422:	f7f9 f99d 	bl	8000760 <__aeabi_dadd>
 8007426:	0006      	movs	r6, r0
 8007428:	000f      	movs	r7, r1
 800742a:	9b06      	ldr	r3, [sp, #24]
 800742c:	2b0f      	cmp	r3, #15
 800742e:	dc39      	bgt.n	80074a4 <_strtod_l+0x498>
 8007430:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007432:	2b00      	cmp	r3, #0
 8007434:	d100      	bne.n	8007438 <_strtod_l+0x42c>
 8007436:	e630      	b.n	800709a <_strtod_l+0x8e>
 8007438:	dd24      	ble.n	8007484 <_strtod_l+0x478>
 800743a:	2b16      	cmp	r3, #22
 800743c:	dc09      	bgt.n	8007452 <_strtod_l+0x446>
 800743e:	00dd      	lsls	r5, r3, #3
 8007440:	0032      	movs	r2, r6
 8007442:	003b      	movs	r3, r7
 8007444:	4c6c      	ldr	r4, [pc, #432]	; (80075f8 <_strtod_l+0x5ec>)
 8007446:	1964      	adds	r4, r4, r5
 8007448:	6820      	ldr	r0, [r4, #0]
 800744a:	6861      	ldr	r1, [r4, #4]
 800744c:	f7fa f8f8 	bl	8001640 <__aeabi_dmul>
 8007450:	e7bd      	b.n	80073ce <_strtod_l+0x3c2>
 8007452:	2325      	movs	r3, #37	; 0x25
 8007454:	9a06      	ldr	r2, [sp, #24]
 8007456:	1a9b      	subs	r3, r3, r2
 8007458:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800745a:	4293      	cmp	r3, r2
 800745c:	db22      	blt.n	80074a4 <_strtod_l+0x498>
 800745e:	240f      	movs	r4, #15
 8007460:	9b06      	ldr	r3, [sp, #24]
 8007462:	4d65      	ldr	r5, [pc, #404]	; (80075f8 <_strtod_l+0x5ec>)
 8007464:	1ae4      	subs	r4, r4, r3
 8007466:	00e1      	lsls	r1, r4, #3
 8007468:	1869      	adds	r1, r5, r1
 800746a:	0032      	movs	r2, r6
 800746c:	6808      	ldr	r0, [r1, #0]
 800746e:	6849      	ldr	r1, [r1, #4]
 8007470:	003b      	movs	r3, r7
 8007472:	f7fa f8e5 	bl	8001640 <__aeabi_dmul>
 8007476:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007478:	1b1c      	subs	r4, r3, r4
 800747a:	00e4      	lsls	r4, r4, #3
 800747c:	192c      	adds	r4, r5, r4
 800747e:	6822      	ldr	r2, [r4, #0]
 8007480:	6863      	ldr	r3, [r4, #4]
 8007482:	e7e3      	b.n	800744c <_strtod_l+0x440>
 8007484:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007486:	3316      	adds	r3, #22
 8007488:	db0c      	blt.n	80074a4 <_strtod_l+0x498>
 800748a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800748c:	9a07      	ldr	r2, [sp, #28]
 800748e:	0030      	movs	r0, r6
 8007490:	1a9a      	subs	r2, r3, r2
 8007492:	4b59      	ldr	r3, [pc, #356]	; (80075f8 <_strtod_l+0x5ec>)
 8007494:	00d2      	lsls	r2, r2, #3
 8007496:	189b      	adds	r3, r3, r2
 8007498:	0039      	movs	r1, r7
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	f7f9 fcc9 	bl	8000e34 <__aeabi_ddiv>
 80074a2:	e794      	b.n	80073ce <_strtod_l+0x3c2>
 80074a4:	9b06      	ldr	r3, [sp, #24]
 80074a6:	1b1c      	subs	r4, r3, r4
 80074a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074aa:	18e4      	adds	r4, r4, r3
 80074ac:	2c00      	cmp	r4, #0
 80074ae:	dd70      	ble.n	8007592 <_strtod_l+0x586>
 80074b0:	230f      	movs	r3, #15
 80074b2:	0021      	movs	r1, r4
 80074b4:	4019      	ands	r1, r3
 80074b6:	421c      	tst	r4, r3
 80074b8:	d00a      	beq.n	80074d0 <_strtod_l+0x4c4>
 80074ba:	00cb      	lsls	r3, r1, #3
 80074bc:	494e      	ldr	r1, [pc, #312]	; (80075f8 <_strtod_l+0x5ec>)
 80074be:	0032      	movs	r2, r6
 80074c0:	18c9      	adds	r1, r1, r3
 80074c2:	6808      	ldr	r0, [r1, #0]
 80074c4:	6849      	ldr	r1, [r1, #4]
 80074c6:	003b      	movs	r3, r7
 80074c8:	f7fa f8ba 	bl	8001640 <__aeabi_dmul>
 80074cc:	0006      	movs	r6, r0
 80074ce:	000f      	movs	r7, r1
 80074d0:	230f      	movs	r3, #15
 80074d2:	439c      	bics	r4, r3
 80074d4:	d048      	beq.n	8007568 <_strtod_l+0x55c>
 80074d6:	3326      	adds	r3, #38	; 0x26
 80074d8:	33ff      	adds	r3, #255	; 0xff
 80074da:	429c      	cmp	r4, r3
 80074dc:	dd22      	ble.n	8007524 <_strtod_l+0x518>
 80074de:	2300      	movs	r3, #0
 80074e0:	9306      	str	r3, [sp, #24]
 80074e2:	9307      	str	r3, [sp, #28]
 80074e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80074e6:	9309      	str	r3, [sp, #36]	; 0x24
 80074e8:	2322      	movs	r3, #34	; 0x22
 80074ea:	2600      	movs	r6, #0
 80074ec:	9a05      	ldr	r2, [sp, #20]
 80074ee:	4f3e      	ldr	r7, [pc, #248]	; (80075e8 <_strtod_l+0x5dc>)
 80074f0:	6013      	str	r3, [r2, #0]
 80074f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074f4:	42b3      	cmp	r3, r6
 80074f6:	d100      	bne.n	80074fa <_strtod_l+0x4ee>
 80074f8:	e5cf      	b.n	800709a <_strtod_l+0x8e>
 80074fa:	9922      	ldr	r1, [sp, #136]	; 0x88
 80074fc:	9805      	ldr	r0, [sp, #20]
 80074fe:	f001 fee5 	bl	80092cc <_Bfree>
 8007502:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007504:	9805      	ldr	r0, [sp, #20]
 8007506:	f001 fee1 	bl	80092cc <_Bfree>
 800750a:	9907      	ldr	r1, [sp, #28]
 800750c:	9805      	ldr	r0, [sp, #20]
 800750e:	f001 fedd 	bl	80092cc <_Bfree>
 8007512:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007514:	9805      	ldr	r0, [sp, #20]
 8007516:	f001 fed9 	bl	80092cc <_Bfree>
 800751a:	9906      	ldr	r1, [sp, #24]
 800751c:	9805      	ldr	r0, [sp, #20]
 800751e:	f001 fed5 	bl	80092cc <_Bfree>
 8007522:	e5ba      	b.n	800709a <_strtod_l+0x8e>
 8007524:	2300      	movs	r3, #0
 8007526:	0030      	movs	r0, r6
 8007528:	0039      	movs	r1, r7
 800752a:	001d      	movs	r5, r3
 800752c:	1124      	asrs	r4, r4, #4
 800752e:	2c01      	cmp	r4, #1
 8007530:	dc1d      	bgt.n	800756e <_strtod_l+0x562>
 8007532:	2b00      	cmp	r3, #0
 8007534:	d001      	beq.n	800753a <_strtod_l+0x52e>
 8007536:	0006      	movs	r6, r0
 8007538:	000f      	movs	r7, r1
 800753a:	4b30      	ldr	r3, [pc, #192]	; (80075fc <_strtod_l+0x5f0>)
 800753c:	00ed      	lsls	r5, r5, #3
 800753e:	18ff      	adds	r7, r7, r3
 8007540:	4b2f      	ldr	r3, [pc, #188]	; (8007600 <_strtod_l+0x5f4>)
 8007542:	0032      	movs	r2, r6
 8007544:	195d      	adds	r5, r3, r5
 8007546:	6828      	ldr	r0, [r5, #0]
 8007548:	6869      	ldr	r1, [r5, #4]
 800754a:	003b      	movs	r3, r7
 800754c:	f7fa f878 	bl	8001640 <__aeabi_dmul>
 8007550:	4b25      	ldr	r3, [pc, #148]	; (80075e8 <_strtod_l+0x5dc>)
 8007552:	4a2c      	ldr	r2, [pc, #176]	; (8007604 <_strtod_l+0x5f8>)
 8007554:	0006      	movs	r6, r0
 8007556:	400b      	ands	r3, r1
 8007558:	4293      	cmp	r3, r2
 800755a:	d8c0      	bhi.n	80074de <_strtod_l+0x4d2>
 800755c:	4a2a      	ldr	r2, [pc, #168]	; (8007608 <_strtod_l+0x5fc>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d913      	bls.n	800758a <_strtod_l+0x57e>
 8007562:	2601      	movs	r6, #1
 8007564:	4f29      	ldr	r7, [pc, #164]	; (800760c <_strtod_l+0x600>)
 8007566:	4276      	negs	r6, r6
 8007568:	2300      	movs	r3, #0
 800756a:	9308      	str	r3, [sp, #32]
 800756c:	e087      	b.n	800767e <_strtod_l+0x672>
 800756e:	2201      	movs	r2, #1
 8007570:	4214      	tst	r4, r2
 8007572:	d007      	beq.n	8007584 <_strtod_l+0x578>
 8007574:	4a22      	ldr	r2, [pc, #136]	; (8007600 <_strtod_l+0x5f4>)
 8007576:	00eb      	lsls	r3, r5, #3
 8007578:	189b      	adds	r3, r3, r2
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	f7fa f85f 	bl	8001640 <__aeabi_dmul>
 8007582:	2301      	movs	r3, #1
 8007584:	3501      	adds	r5, #1
 8007586:	1064      	asrs	r4, r4, #1
 8007588:	e7d1      	b.n	800752e <_strtod_l+0x522>
 800758a:	23d4      	movs	r3, #212	; 0xd4
 800758c:	049b      	lsls	r3, r3, #18
 800758e:	18cf      	adds	r7, r1, r3
 8007590:	e7ea      	b.n	8007568 <_strtod_l+0x55c>
 8007592:	2c00      	cmp	r4, #0
 8007594:	d0e8      	beq.n	8007568 <_strtod_l+0x55c>
 8007596:	4264      	negs	r4, r4
 8007598:	220f      	movs	r2, #15
 800759a:	0023      	movs	r3, r4
 800759c:	4013      	ands	r3, r2
 800759e:	4214      	tst	r4, r2
 80075a0:	d00a      	beq.n	80075b8 <_strtod_l+0x5ac>
 80075a2:	00da      	lsls	r2, r3, #3
 80075a4:	4b14      	ldr	r3, [pc, #80]	; (80075f8 <_strtod_l+0x5ec>)
 80075a6:	0030      	movs	r0, r6
 80075a8:	189b      	adds	r3, r3, r2
 80075aa:	0039      	movs	r1, r7
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	f7f9 fc40 	bl	8000e34 <__aeabi_ddiv>
 80075b4:	0006      	movs	r6, r0
 80075b6:	000f      	movs	r7, r1
 80075b8:	1124      	asrs	r4, r4, #4
 80075ba:	d0d5      	beq.n	8007568 <_strtod_l+0x55c>
 80075bc:	2c1f      	cmp	r4, #31
 80075be:	dd27      	ble.n	8007610 <_strtod_l+0x604>
 80075c0:	2300      	movs	r3, #0
 80075c2:	9306      	str	r3, [sp, #24]
 80075c4:	9307      	str	r3, [sp, #28]
 80075c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80075c8:	9309      	str	r3, [sp, #36]	; 0x24
 80075ca:	2322      	movs	r3, #34	; 0x22
 80075cc:	9a05      	ldr	r2, [sp, #20]
 80075ce:	2600      	movs	r6, #0
 80075d0:	6013      	str	r3, [r2, #0]
 80075d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075d4:	2700      	movs	r7, #0
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d18f      	bne.n	80074fa <_strtod_l+0x4ee>
 80075da:	e55e      	b.n	800709a <_strtod_l+0x8e>
 80075dc:	00004e1f 	.word	0x00004e1f
 80075e0:	0800aef9 	.word	0x0800aef9
 80075e4:	0800af3c 	.word	0x0800af3c
 80075e8:	7ff00000 	.word	0x7ff00000
 80075ec:	0800aef1 	.word	0x0800aef1
 80075f0:	0800b07c 	.word	0x0800b07c
 80075f4:	0800b338 	.word	0x0800b338
 80075f8:	0800b218 	.word	0x0800b218
 80075fc:	fcb00000 	.word	0xfcb00000
 8007600:	0800b1f0 	.word	0x0800b1f0
 8007604:	7ca00000 	.word	0x7ca00000
 8007608:	7c900000 	.word	0x7c900000
 800760c:	7fefffff 	.word	0x7fefffff
 8007610:	2310      	movs	r3, #16
 8007612:	0022      	movs	r2, r4
 8007614:	401a      	ands	r2, r3
 8007616:	9208      	str	r2, [sp, #32]
 8007618:	421c      	tst	r4, r3
 800761a:	d001      	beq.n	8007620 <_strtod_l+0x614>
 800761c:	335a      	adds	r3, #90	; 0x5a
 800761e:	9308      	str	r3, [sp, #32]
 8007620:	0030      	movs	r0, r6
 8007622:	0039      	movs	r1, r7
 8007624:	2300      	movs	r3, #0
 8007626:	4dca      	ldr	r5, [pc, #808]	; (8007950 <_strtod_l+0x944>)
 8007628:	2201      	movs	r2, #1
 800762a:	4214      	tst	r4, r2
 800762c:	d004      	beq.n	8007638 <_strtod_l+0x62c>
 800762e:	682a      	ldr	r2, [r5, #0]
 8007630:	686b      	ldr	r3, [r5, #4]
 8007632:	f7fa f805 	bl	8001640 <__aeabi_dmul>
 8007636:	2301      	movs	r3, #1
 8007638:	1064      	asrs	r4, r4, #1
 800763a:	3508      	adds	r5, #8
 800763c:	2c00      	cmp	r4, #0
 800763e:	d1f3      	bne.n	8007628 <_strtod_l+0x61c>
 8007640:	2b00      	cmp	r3, #0
 8007642:	d001      	beq.n	8007648 <_strtod_l+0x63c>
 8007644:	0006      	movs	r6, r0
 8007646:	000f      	movs	r7, r1
 8007648:	9b08      	ldr	r3, [sp, #32]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d00f      	beq.n	800766e <_strtod_l+0x662>
 800764e:	236b      	movs	r3, #107	; 0x6b
 8007650:	0079      	lsls	r1, r7, #1
 8007652:	0d49      	lsrs	r1, r1, #21
 8007654:	003a      	movs	r2, r7
 8007656:	1a5b      	subs	r3, r3, r1
 8007658:	2b00      	cmp	r3, #0
 800765a:	dd08      	ble.n	800766e <_strtod_l+0x662>
 800765c:	2b1f      	cmp	r3, #31
 800765e:	dc00      	bgt.n	8007662 <_strtod_l+0x656>
 8007660:	e126      	b.n	80078b0 <_strtod_l+0x8a4>
 8007662:	2600      	movs	r6, #0
 8007664:	2b34      	cmp	r3, #52	; 0x34
 8007666:	dc00      	bgt.n	800766a <_strtod_l+0x65e>
 8007668:	e11b      	b.n	80078a2 <_strtod_l+0x896>
 800766a:	27dc      	movs	r7, #220	; 0xdc
 800766c:	04bf      	lsls	r7, r7, #18
 800766e:	2200      	movs	r2, #0
 8007670:	2300      	movs	r3, #0
 8007672:	0030      	movs	r0, r6
 8007674:	0039      	movs	r1, r7
 8007676:	f7f8 fee9 	bl	800044c <__aeabi_dcmpeq>
 800767a:	2800      	cmp	r0, #0
 800767c:	d1a0      	bne.n	80075c0 <_strtod_l+0x5b4>
 800767e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007680:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007682:	9300      	str	r3, [sp, #0]
 8007684:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007686:	9b06      	ldr	r3, [sp, #24]
 8007688:	9805      	ldr	r0, [sp, #20]
 800768a:	f001 fe87 	bl	800939c <__s2b>
 800768e:	900b      	str	r0, [sp, #44]	; 0x2c
 8007690:	2800      	cmp	r0, #0
 8007692:	d100      	bne.n	8007696 <_strtod_l+0x68a>
 8007694:	e723      	b.n	80074de <_strtod_l+0x4d2>
 8007696:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007698:	9907      	ldr	r1, [sp, #28]
 800769a:	17da      	asrs	r2, r3, #31
 800769c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800769e:	1a5b      	subs	r3, r3, r1
 80076a0:	401a      	ands	r2, r3
 80076a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076a4:	9215      	str	r2, [sp, #84]	; 0x54
 80076a6:	43db      	mvns	r3, r3
 80076a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076aa:	17db      	asrs	r3, r3, #31
 80076ac:	401a      	ands	r2, r3
 80076ae:	2300      	movs	r3, #0
 80076b0:	921c      	str	r2, [sp, #112]	; 0x70
 80076b2:	9306      	str	r3, [sp, #24]
 80076b4:	9307      	str	r3, [sp, #28]
 80076b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076b8:	9805      	ldr	r0, [sp, #20]
 80076ba:	6859      	ldr	r1, [r3, #4]
 80076bc:	f001 fdc2 	bl	8009244 <_Balloc>
 80076c0:	9009      	str	r0, [sp, #36]	; 0x24
 80076c2:	2800      	cmp	r0, #0
 80076c4:	d100      	bne.n	80076c8 <_strtod_l+0x6bc>
 80076c6:	e70f      	b.n	80074e8 <_strtod_l+0x4dc>
 80076c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	310c      	adds	r1, #12
 80076d0:	1c9a      	adds	r2, r3, #2
 80076d2:	0092      	lsls	r2, r2, #2
 80076d4:	300c      	adds	r0, #12
 80076d6:	930c      	str	r3, [sp, #48]	; 0x30
 80076d8:	f001 fdab 	bl	8009232 <memcpy>
 80076dc:	ab24      	add	r3, sp, #144	; 0x90
 80076de:	9301      	str	r3, [sp, #4]
 80076e0:	ab23      	add	r3, sp, #140	; 0x8c
 80076e2:	9300      	str	r3, [sp, #0]
 80076e4:	0032      	movs	r2, r6
 80076e6:	003b      	movs	r3, r7
 80076e8:	9805      	ldr	r0, [sp, #20]
 80076ea:	960e      	str	r6, [sp, #56]	; 0x38
 80076ec:	970f      	str	r7, [sp, #60]	; 0x3c
 80076ee:	f002 f9a3 	bl	8009a38 <__d2b>
 80076f2:	9022      	str	r0, [sp, #136]	; 0x88
 80076f4:	2800      	cmp	r0, #0
 80076f6:	d100      	bne.n	80076fa <_strtod_l+0x6ee>
 80076f8:	e6f6      	b.n	80074e8 <_strtod_l+0x4dc>
 80076fa:	2101      	movs	r1, #1
 80076fc:	9805      	ldr	r0, [sp, #20]
 80076fe:	f001 fee1 	bl	80094c4 <__i2b>
 8007702:	9007      	str	r0, [sp, #28]
 8007704:	2800      	cmp	r0, #0
 8007706:	d100      	bne.n	800770a <_strtod_l+0x6fe>
 8007708:	e6ee      	b.n	80074e8 <_strtod_l+0x4dc>
 800770a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800770c:	2b00      	cmp	r3, #0
 800770e:	da00      	bge.n	8007712 <_strtod_l+0x706>
 8007710:	e0d3      	b.n	80078ba <_strtod_l+0x8ae>
 8007712:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007714:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8007716:	189d      	adds	r5, r3, r2
 8007718:	9908      	ldr	r1, [sp, #32]
 800771a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800771c:	1a5b      	subs	r3, r3, r1
 800771e:	2136      	movs	r1, #54	; 0x36
 8007720:	189b      	adds	r3, r3, r2
 8007722:	1a8a      	subs	r2, r1, r2
 8007724:	498b      	ldr	r1, [pc, #556]	; (8007954 <_strtod_l+0x948>)
 8007726:	3b01      	subs	r3, #1
 8007728:	2001      	movs	r0, #1
 800772a:	428b      	cmp	r3, r1
 800772c:	db00      	blt.n	8007730 <_strtod_l+0x724>
 800772e:	e0cf      	b.n	80078d0 <_strtod_l+0x8c4>
 8007730:	1ac9      	subs	r1, r1, r3
 8007732:	1a52      	subs	r2, r2, r1
 8007734:	291f      	cmp	r1, #31
 8007736:	dd00      	ble.n	800773a <_strtod_l+0x72e>
 8007738:	e0c3      	b.n	80078c2 <_strtod_l+0x8b6>
 800773a:	4088      	lsls	r0, r1
 800773c:	2300      	movs	r3, #0
 800773e:	9014      	str	r0, [sp, #80]	; 0x50
 8007740:	9312      	str	r3, [sp, #72]	; 0x48
 8007742:	18ab      	adds	r3, r5, r2
 8007744:	930c      	str	r3, [sp, #48]	; 0x30
 8007746:	18a4      	adds	r4, r4, r2
 8007748:	9b08      	ldr	r3, [sp, #32]
 800774a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800774c:	191c      	adds	r4, r3, r4
 800774e:	002b      	movs	r3, r5
 8007750:	4295      	cmp	r5, r2
 8007752:	dd00      	ble.n	8007756 <_strtod_l+0x74a>
 8007754:	0013      	movs	r3, r2
 8007756:	42a3      	cmp	r3, r4
 8007758:	dd00      	ble.n	800775c <_strtod_l+0x750>
 800775a:	0023      	movs	r3, r4
 800775c:	2b00      	cmp	r3, #0
 800775e:	dd04      	ble.n	800776a <_strtod_l+0x75e>
 8007760:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007762:	1ae4      	subs	r4, r4, r3
 8007764:	1ad2      	subs	r2, r2, r3
 8007766:	920c      	str	r2, [sp, #48]	; 0x30
 8007768:	1aed      	subs	r5, r5, r3
 800776a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800776c:	2b00      	cmp	r3, #0
 800776e:	dd17      	ble.n	80077a0 <_strtod_l+0x794>
 8007770:	001a      	movs	r2, r3
 8007772:	9907      	ldr	r1, [sp, #28]
 8007774:	9805      	ldr	r0, [sp, #20]
 8007776:	f001 ff6b 	bl	8009650 <__pow5mult>
 800777a:	9007      	str	r0, [sp, #28]
 800777c:	2800      	cmp	r0, #0
 800777e:	d100      	bne.n	8007782 <_strtod_l+0x776>
 8007780:	e6b2      	b.n	80074e8 <_strtod_l+0x4dc>
 8007782:	0001      	movs	r1, r0
 8007784:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007786:	9805      	ldr	r0, [sp, #20]
 8007788:	f001 feb2 	bl	80094f0 <__multiply>
 800778c:	9011      	str	r0, [sp, #68]	; 0x44
 800778e:	2800      	cmp	r0, #0
 8007790:	d100      	bne.n	8007794 <_strtod_l+0x788>
 8007792:	e6a9      	b.n	80074e8 <_strtod_l+0x4dc>
 8007794:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007796:	9805      	ldr	r0, [sp, #20]
 8007798:	f001 fd98 	bl	80092cc <_Bfree>
 800779c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800779e:	9322      	str	r3, [sp, #136]	; 0x88
 80077a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	dd00      	ble.n	80077a8 <_strtod_l+0x79c>
 80077a6:	e096      	b.n	80078d6 <_strtod_l+0x8ca>
 80077a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	dd08      	ble.n	80077c0 <_strtod_l+0x7b4>
 80077ae:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80077b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80077b2:	9805      	ldr	r0, [sp, #20]
 80077b4:	f001 ff4c 	bl	8009650 <__pow5mult>
 80077b8:	9009      	str	r0, [sp, #36]	; 0x24
 80077ba:	2800      	cmp	r0, #0
 80077bc:	d100      	bne.n	80077c0 <_strtod_l+0x7b4>
 80077be:	e693      	b.n	80074e8 <_strtod_l+0x4dc>
 80077c0:	2c00      	cmp	r4, #0
 80077c2:	dd08      	ble.n	80077d6 <_strtod_l+0x7ca>
 80077c4:	0022      	movs	r2, r4
 80077c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80077c8:	9805      	ldr	r0, [sp, #20]
 80077ca:	f001 ff9d 	bl	8009708 <__lshift>
 80077ce:	9009      	str	r0, [sp, #36]	; 0x24
 80077d0:	2800      	cmp	r0, #0
 80077d2:	d100      	bne.n	80077d6 <_strtod_l+0x7ca>
 80077d4:	e688      	b.n	80074e8 <_strtod_l+0x4dc>
 80077d6:	2d00      	cmp	r5, #0
 80077d8:	dd08      	ble.n	80077ec <_strtod_l+0x7e0>
 80077da:	002a      	movs	r2, r5
 80077dc:	9907      	ldr	r1, [sp, #28]
 80077de:	9805      	ldr	r0, [sp, #20]
 80077e0:	f001 ff92 	bl	8009708 <__lshift>
 80077e4:	9007      	str	r0, [sp, #28]
 80077e6:	2800      	cmp	r0, #0
 80077e8:	d100      	bne.n	80077ec <_strtod_l+0x7e0>
 80077ea:	e67d      	b.n	80074e8 <_strtod_l+0x4dc>
 80077ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077ee:	9922      	ldr	r1, [sp, #136]	; 0x88
 80077f0:	9805      	ldr	r0, [sp, #20]
 80077f2:	f002 f815 	bl	8009820 <__mdiff>
 80077f6:	9006      	str	r0, [sp, #24]
 80077f8:	2800      	cmp	r0, #0
 80077fa:	d100      	bne.n	80077fe <_strtod_l+0x7f2>
 80077fc:	e674      	b.n	80074e8 <_strtod_l+0x4dc>
 80077fe:	2200      	movs	r2, #0
 8007800:	68c3      	ldr	r3, [r0, #12]
 8007802:	9907      	ldr	r1, [sp, #28]
 8007804:	60c2      	str	r2, [r0, #12]
 8007806:	9311      	str	r3, [sp, #68]	; 0x44
 8007808:	f001 ffee 	bl	80097e8 <__mcmp>
 800780c:	2800      	cmp	r0, #0
 800780e:	da6c      	bge.n	80078ea <_strtod_l+0x8de>
 8007810:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007812:	4333      	orrs	r3, r6
 8007814:	d000      	beq.n	8007818 <_strtod_l+0x80c>
 8007816:	e097      	b.n	8007948 <_strtod_l+0x93c>
 8007818:	033b      	lsls	r3, r7, #12
 800781a:	d000      	beq.n	800781e <_strtod_l+0x812>
 800781c:	e094      	b.n	8007948 <_strtod_l+0x93c>
 800781e:	22d6      	movs	r2, #214	; 0xd6
 8007820:	4b4d      	ldr	r3, [pc, #308]	; (8007958 <_strtod_l+0x94c>)
 8007822:	04d2      	lsls	r2, r2, #19
 8007824:	403b      	ands	r3, r7
 8007826:	4293      	cmp	r3, r2
 8007828:	d800      	bhi.n	800782c <_strtod_l+0x820>
 800782a:	e08d      	b.n	8007948 <_strtod_l+0x93c>
 800782c:	9b06      	ldr	r3, [sp, #24]
 800782e:	695b      	ldr	r3, [r3, #20]
 8007830:	930a      	str	r3, [sp, #40]	; 0x28
 8007832:	2b00      	cmp	r3, #0
 8007834:	d105      	bne.n	8007842 <_strtod_l+0x836>
 8007836:	9b06      	ldr	r3, [sp, #24]
 8007838:	691b      	ldr	r3, [r3, #16]
 800783a:	930a      	str	r3, [sp, #40]	; 0x28
 800783c:	2b01      	cmp	r3, #1
 800783e:	dc00      	bgt.n	8007842 <_strtod_l+0x836>
 8007840:	e082      	b.n	8007948 <_strtod_l+0x93c>
 8007842:	9906      	ldr	r1, [sp, #24]
 8007844:	2201      	movs	r2, #1
 8007846:	9805      	ldr	r0, [sp, #20]
 8007848:	f001 ff5e 	bl	8009708 <__lshift>
 800784c:	9907      	ldr	r1, [sp, #28]
 800784e:	9006      	str	r0, [sp, #24]
 8007850:	f001 ffca 	bl	80097e8 <__mcmp>
 8007854:	2800      	cmp	r0, #0
 8007856:	dd77      	ble.n	8007948 <_strtod_l+0x93c>
 8007858:	9908      	ldr	r1, [sp, #32]
 800785a:	003b      	movs	r3, r7
 800785c:	4a3e      	ldr	r2, [pc, #248]	; (8007958 <_strtod_l+0x94c>)
 800785e:	2900      	cmp	r1, #0
 8007860:	d100      	bne.n	8007864 <_strtod_l+0x858>
 8007862:	e09e      	b.n	80079a2 <_strtod_l+0x996>
 8007864:	0011      	movs	r1, r2
 8007866:	20d6      	movs	r0, #214	; 0xd6
 8007868:	4039      	ands	r1, r7
 800786a:	04c0      	lsls	r0, r0, #19
 800786c:	4281      	cmp	r1, r0
 800786e:	dd00      	ble.n	8007872 <_strtod_l+0x866>
 8007870:	e097      	b.n	80079a2 <_strtod_l+0x996>
 8007872:	23dc      	movs	r3, #220	; 0xdc
 8007874:	049b      	lsls	r3, r3, #18
 8007876:	4299      	cmp	r1, r3
 8007878:	dc00      	bgt.n	800787c <_strtod_l+0x870>
 800787a:	e6a6      	b.n	80075ca <_strtod_l+0x5be>
 800787c:	4b37      	ldr	r3, [pc, #220]	; (800795c <_strtod_l+0x950>)
 800787e:	0030      	movs	r0, r6
 8007880:	931b      	str	r3, [sp, #108]	; 0x6c
 8007882:	2300      	movs	r3, #0
 8007884:	931a      	str	r3, [sp, #104]	; 0x68
 8007886:	0039      	movs	r1, r7
 8007888:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800788a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800788c:	f7f9 fed8 	bl	8001640 <__aeabi_dmul>
 8007890:	0006      	movs	r6, r0
 8007892:	000f      	movs	r7, r1
 8007894:	4308      	orrs	r0, r1
 8007896:	d000      	beq.n	800789a <_strtod_l+0x88e>
 8007898:	e62f      	b.n	80074fa <_strtod_l+0x4ee>
 800789a:	2322      	movs	r3, #34	; 0x22
 800789c:	9a05      	ldr	r2, [sp, #20]
 800789e:	6013      	str	r3, [r2, #0]
 80078a0:	e62b      	b.n	80074fa <_strtod_l+0x4ee>
 80078a2:	2101      	movs	r1, #1
 80078a4:	3b20      	subs	r3, #32
 80078a6:	4249      	negs	r1, r1
 80078a8:	4099      	lsls	r1, r3
 80078aa:	400a      	ands	r2, r1
 80078ac:	0017      	movs	r7, r2
 80078ae:	e6de      	b.n	800766e <_strtod_l+0x662>
 80078b0:	2201      	movs	r2, #1
 80078b2:	4252      	negs	r2, r2
 80078b4:	409a      	lsls	r2, r3
 80078b6:	4016      	ands	r6, r2
 80078b8:	e6d9      	b.n	800766e <_strtod_l+0x662>
 80078ba:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80078bc:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80078be:	1ad4      	subs	r4, r2, r3
 80078c0:	e72a      	b.n	8007718 <_strtod_l+0x70c>
 80078c2:	4927      	ldr	r1, [pc, #156]	; (8007960 <_strtod_l+0x954>)
 80078c4:	1acb      	subs	r3, r1, r3
 80078c6:	0001      	movs	r1, r0
 80078c8:	4099      	lsls	r1, r3
 80078ca:	9112      	str	r1, [sp, #72]	; 0x48
 80078cc:	9014      	str	r0, [sp, #80]	; 0x50
 80078ce:	e738      	b.n	8007742 <_strtod_l+0x736>
 80078d0:	2300      	movs	r3, #0
 80078d2:	9312      	str	r3, [sp, #72]	; 0x48
 80078d4:	e7fa      	b.n	80078cc <_strtod_l+0x8c0>
 80078d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80078d8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80078da:	9805      	ldr	r0, [sp, #20]
 80078dc:	f001 ff14 	bl	8009708 <__lshift>
 80078e0:	9022      	str	r0, [sp, #136]	; 0x88
 80078e2:	2800      	cmp	r0, #0
 80078e4:	d000      	beq.n	80078e8 <_strtod_l+0x8dc>
 80078e6:	e75f      	b.n	80077a8 <_strtod_l+0x79c>
 80078e8:	e5fe      	b.n	80074e8 <_strtod_l+0x4dc>
 80078ea:	970c      	str	r7, [sp, #48]	; 0x30
 80078ec:	2800      	cmp	r0, #0
 80078ee:	d176      	bne.n	80079de <_strtod_l+0x9d2>
 80078f0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80078f2:	033b      	lsls	r3, r7, #12
 80078f4:	0b1b      	lsrs	r3, r3, #12
 80078f6:	2a00      	cmp	r2, #0
 80078f8:	d038      	beq.n	800796c <_strtod_l+0x960>
 80078fa:	4a1a      	ldr	r2, [pc, #104]	; (8007964 <_strtod_l+0x958>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d138      	bne.n	8007972 <_strtod_l+0x966>
 8007900:	2201      	movs	r2, #1
 8007902:	9b08      	ldr	r3, [sp, #32]
 8007904:	4252      	negs	r2, r2
 8007906:	0031      	movs	r1, r6
 8007908:	0010      	movs	r0, r2
 800790a:	2b00      	cmp	r3, #0
 800790c:	d00b      	beq.n	8007926 <_strtod_l+0x91a>
 800790e:	24d4      	movs	r4, #212	; 0xd4
 8007910:	4b11      	ldr	r3, [pc, #68]	; (8007958 <_strtod_l+0x94c>)
 8007912:	0010      	movs	r0, r2
 8007914:	403b      	ands	r3, r7
 8007916:	04e4      	lsls	r4, r4, #19
 8007918:	42a3      	cmp	r3, r4
 800791a:	d804      	bhi.n	8007926 <_strtod_l+0x91a>
 800791c:	306c      	adds	r0, #108	; 0x6c
 800791e:	0d1b      	lsrs	r3, r3, #20
 8007920:	1ac3      	subs	r3, r0, r3
 8007922:	409a      	lsls	r2, r3
 8007924:	0010      	movs	r0, r2
 8007926:	4281      	cmp	r1, r0
 8007928:	d123      	bne.n	8007972 <_strtod_l+0x966>
 800792a:	4b0f      	ldr	r3, [pc, #60]	; (8007968 <_strtod_l+0x95c>)
 800792c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800792e:	429a      	cmp	r2, r3
 8007930:	d102      	bne.n	8007938 <_strtod_l+0x92c>
 8007932:	1c4b      	adds	r3, r1, #1
 8007934:	d100      	bne.n	8007938 <_strtod_l+0x92c>
 8007936:	e5d7      	b.n	80074e8 <_strtod_l+0x4dc>
 8007938:	4b07      	ldr	r3, [pc, #28]	; (8007958 <_strtod_l+0x94c>)
 800793a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800793c:	2600      	movs	r6, #0
 800793e:	401a      	ands	r2, r3
 8007940:	0013      	movs	r3, r2
 8007942:	2280      	movs	r2, #128	; 0x80
 8007944:	0352      	lsls	r2, r2, #13
 8007946:	189f      	adds	r7, r3, r2
 8007948:	9b08      	ldr	r3, [sp, #32]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d196      	bne.n	800787c <_strtod_l+0x870>
 800794e:	e5d4      	b.n	80074fa <_strtod_l+0x4ee>
 8007950:	0800af50 	.word	0x0800af50
 8007954:	fffffc02 	.word	0xfffffc02
 8007958:	7ff00000 	.word	0x7ff00000
 800795c:	39500000 	.word	0x39500000
 8007960:	fffffbe2 	.word	0xfffffbe2
 8007964:	000fffff 	.word	0x000fffff
 8007968:	7fefffff 	.word	0x7fefffff
 800796c:	4333      	orrs	r3, r6
 800796e:	d100      	bne.n	8007972 <_strtod_l+0x966>
 8007970:	e772      	b.n	8007858 <_strtod_l+0x84c>
 8007972:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007974:	2b00      	cmp	r3, #0
 8007976:	d01d      	beq.n	80079b4 <_strtod_l+0x9a8>
 8007978:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800797a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800797c:	4213      	tst	r3, r2
 800797e:	d0e3      	beq.n	8007948 <_strtod_l+0x93c>
 8007980:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007982:	0030      	movs	r0, r6
 8007984:	0039      	movs	r1, r7
 8007986:	9a08      	ldr	r2, [sp, #32]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d017      	beq.n	80079bc <_strtod_l+0x9b0>
 800798c:	f7ff fb26 	bl	8006fdc <sulp>
 8007990:	0002      	movs	r2, r0
 8007992:	000b      	movs	r3, r1
 8007994:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007996:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007998:	f7f8 fee2 	bl	8000760 <__aeabi_dadd>
 800799c:	0006      	movs	r6, r0
 800799e:	000f      	movs	r7, r1
 80079a0:	e7d2      	b.n	8007948 <_strtod_l+0x93c>
 80079a2:	2601      	movs	r6, #1
 80079a4:	4013      	ands	r3, r2
 80079a6:	4a9b      	ldr	r2, [pc, #620]	; (8007c14 <_strtod_l+0xc08>)
 80079a8:	4276      	negs	r6, r6
 80079aa:	189b      	adds	r3, r3, r2
 80079ac:	4a9a      	ldr	r2, [pc, #616]	; (8007c18 <_strtod_l+0xc0c>)
 80079ae:	431a      	orrs	r2, r3
 80079b0:	0017      	movs	r7, r2
 80079b2:	e7c9      	b.n	8007948 <_strtod_l+0x93c>
 80079b4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80079b6:	4233      	tst	r3, r6
 80079b8:	d0c6      	beq.n	8007948 <_strtod_l+0x93c>
 80079ba:	e7e1      	b.n	8007980 <_strtod_l+0x974>
 80079bc:	f7ff fb0e 	bl	8006fdc <sulp>
 80079c0:	0002      	movs	r2, r0
 80079c2:	000b      	movs	r3, r1
 80079c4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80079c6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80079c8:	f7fa f8a6 	bl	8001b18 <__aeabi_dsub>
 80079cc:	2200      	movs	r2, #0
 80079ce:	2300      	movs	r3, #0
 80079d0:	0006      	movs	r6, r0
 80079d2:	000f      	movs	r7, r1
 80079d4:	f7f8 fd3a 	bl	800044c <__aeabi_dcmpeq>
 80079d8:	2800      	cmp	r0, #0
 80079da:	d0b5      	beq.n	8007948 <_strtod_l+0x93c>
 80079dc:	e5f5      	b.n	80075ca <_strtod_l+0x5be>
 80079de:	9907      	ldr	r1, [sp, #28]
 80079e0:	9806      	ldr	r0, [sp, #24]
 80079e2:	f002 f88d 	bl	8009b00 <__ratio>
 80079e6:	2380      	movs	r3, #128	; 0x80
 80079e8:	2200      	movs	r2, #0
 80079ea:	05db      	lsls	r3, r3, #23
 80079ec:	0004      	movs	r4, r0
 80079ee:	000d      	movs	r5, r1
 80079f0:	f7f8 fd3c 	bl	800046c <__aeabi_dcmple>
 80079f4:	2800      	cmp	r0, #0
 80079f6:	d079      	beq.n	8007aec <_strtod_l+0xae0>
 80079f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d04b      	beq.n	8007a96 <_strtod_l+0xa8a>
 80079fe:	2300      	movs	r3, #0
 8007a00:	4c86      	ldr	r4, [pc, #536]	; (8007c1c <_strtod_l+0xc10>)
 8007a02:	2500      	movs	r5, #0
 8007a04:	9312      	str	r3, [sp, #72]	; 0x48
 8007a06:	9413      	str	r4, [sp, #76]	; 0x4c
 8007a08:	4c84      	ldr	r4, [pc, #528]	; (8007c1c <_strtod_l+0xc10>)
 8007a0a:	4a85      	ldr	r2, [pc, #532]	; (8007c20 <_strtod_l+0xc14>)
 8007a0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a0e:	4013      	ands	r3, r2
 8007a10:	9314      	str	r3, [sp, #80]	; 0x50
 8007a12:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007a14:	4b83      	ldr	r3, [pc, #524]	; (8007c24 <_strtod_l+0xc18>)
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d000      	beq.n	8007a1c <_strtod_l+0xa10>
 8007a1a:	e0b0      	b.n	8007b7e <_strtod_l+0xb72>
 8007a1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a20:	921a      	str	r2, [sp, #104]	; 0x68
 8007a22:	931b      	str	r3, [sp, #108]	; 0x6c
 8007a24:	4a80      	ldr	r2, [pc, #512]	; (8007c28 <_strtod_l+0xc1c>)
 8007a26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a28:	4694      	mov	ip, r2
 8007a2a:	4463      	add	r3, ip
 8007a2c:	001f      	movs	r7, r3
 8007a2e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007a30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007a32:	0030      	movs	r0, r6
 8007a34:	0039      	movs	r1, r7
 8007a36:	920c      	str	r2, [sp, #48]	; 0x30
 8007a38:	930d      	str	r3, [sp, #52]	; 0x34
 8007a3a:	f001 ff89 	bl	8009950 <__ulp>
 8007a3e:	0002      	movs	r2, r0
 8007a40:	000b      	movs	r3, r1
 8007a42:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007a44:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007a46:	f7f9 fdfb 	bl	8001640 <__aeabi_dmul>
 8007a4a:	0032      	movs	r2, r6
 8007a4c:	003b      	movs	r3, r7
 8007a4e:	f7f8 fe87 	bl	8000760 <__aeabi_dadd>
 8007a52:	4a73      	ldr	r2, [pc, #460]	; (8007c20 <_strtod_l+0xc14>)
 8007a54:	4b75      	ldr	r3, [pc, #468]	; (8007c2c <_strtod_l+0xc20>)
 8007a56:	0006      	movs	r6, r0
 8007a58:	400a      	ands	r2, r1
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d95e      	bls.n	8007b1c <_strtod_l+0xb10>
 8007a5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a60:	4a73      	ldr	r2, [pc, #460]	; (8007c30 <_strtod_l+0xc24>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d103      	bne.n	8007a6e <_strtod_l+0xa62>
 8007a66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a68:	3301      	adds	r3, #1
 8007a6a:	d100      	bne.n	8007a6e <_strtod_l+0xa62>
 8007a6c:	e53c      	b.n	80074e8 <_strtod_l+0x4dc>
 8007a6e:	2601      	movs	r6, #1
 8007a70:	4f6f      	ldr	r7, [pc, #444]	; (8007c30 <_strtod_l+0xc24>)
 8007a72:	4276      	negs	r6, r6
 8007a74:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007a76:	9805      	ldr	r0, [sp, #20]
 8007a78:	f001 fc28 	bl	80092cc <_Bfree>
 8007a7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a7e:	9805      	ldr	r0, [sp, #20]
 8007a80:	f001 fc24 	bl	80092cc <_Bfree>
 8007a84:	9907      	ldr	r1, [sp, #28]
 8007a86:	9805      	ldr	r0, [sp, #20]
 8007a88:	f001 fc20 	bl	80092cc <_Bfree>
 8007a8c:	9906      	ldr	r1, [sp, #24]
 8007a8e:	9805      	ldr	r0, [sp, #20]
 8007a90:	f001 fc1c 	bl	80092cc <_Bfree>
 8007a94:	e60f      	b.n	80076b6 <_strtod_l+0x6aa>
 8007a96:	2e00      	cmp	r6, #0
 8007a98:	d11c      	bne.n	8007ad4 <_strtod_l+0xac8>
 8007a9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a9c:	031b      	lsls	r3, r3, #12
 8007a9e:	d11f      	bne.n	8007ae0 <_strtod_l+0xad4>
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	0020      	movs	r0, r4
 8007aa4:	0029      	movs	r1, r5
 8007aa6:	4b5d      	ldr	r3, [pc, #372]	; (8007c1c <_strtod_l+0xc10>)
 8007aa8:	f7f8 fcd6 	bl	8000458 <__aeabi_dcmplt>
 8007aac:	2800      	cmp	r0, #0
 8007aae:	d11a      	bne.n	8007ae6 <_strtod_l+0xada>
 8007ab0:	0020      	movs	r0, r4
 8007ab2:	0029      	movs	r1, r5
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	4b5f      	ldr	r3, [pc, #380]	; (8007c34 <_strtod_l+0xc28>)
 8007ab8:	f7f9 fdc2 	bl	8001640 <__aeabi_dmul>
 8007abc:	0005      	movs	r5, r0
 8007abe:	000c      	movs	r4, r1
 8007ac0:	2380      	movs	r3, #128	; 0x80
 8007ac2:	061b      	lsls	r3, r3, #24
 8007ac4:	18e3      	adds	r3, r4, r3
 8007ac6:	951e      	str	r5, [sp, #120]	; 0x78
 8007ac8:	931f      	str	r3, [sp, #124]	; 0x7c
 8007aca:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007acc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007ace:	9212      	str	r2, [sp, #72]	; 0x48
 8007ad0:	9313      	str	r3, [sp, #76]	; 0x4c
 8007ad2:	e79a      	b.n	8007a0a <_strtod_l+0x9fe>
 8007ad4:	2e01      	cmp	r6, #1
 8007ad6:	d103      	bne.n	8007ae0 <_strtod_l+0xad4>
 8007ad8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d100      	bne.n	8007ae0 <_strtod_l+0xad4>
 8007ade:	e574      	b.n	80075ca <_strtod_l+0x5be>
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	4c55      	ldr	r4, [pc, #340]	; (8007c38 <_strtod_l+0xc2c>)
 8007ae4:	e78d      	b.n	8007a02 <_strtod_l+0x9f6>
 8007ae6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8007ae8:	4c52      	ldr	r4, [pc, #328]	; (8007c34 <_strtod_l+0xc28>)
 8007aea:	e7e9      	b.n	8007ac0 <_strtod_l+0xab4>
 8007aec:	2200      	movs	r2, #0
 8007aee:	0020      	movs	r0, r4
 8007af0:	0029      	movs	r1, r5
 8007af2:	4b50      	ldr	r3, [pc, #320]	; (8007c34 <_strtod_l+0xc28>)
 8007af4:	f7f9 fda4 	bl	8001640 <__aeabi_dmul>
 8007af8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007afa:	0005      	movs	r5, r0
 8007afc:	000b      	movs	r3, r1
 8007afe:	000c      	movs	r4, r1
 8007b00:	2a00      	cmp	r2, #0
 8007b02:	d107      	bne.n	8007b14 <_strtod_l+0xb08>
 8007b04:	2280      	movs	r2, #128	; 0x80
 8007b06:	0612      	lsls	r2, r2, #24
 8007b08:	188b      	adds	r3, r1, r2
 8007b0a:	9016      	str	r0, [sp, #88]	; 0x58
 8007b0c:	9317      	str	r3, [sp, #92]	; 0x5c
 8007b0e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007b10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b12:	e7dc      	b.n	8007ace <_strtod_l+0xac2>
 8007b14:	0002      	movs	r2, r0
 8007b16:	9216      	str	r2, [sp, #88]	; 0x58
 8007b18:	9317      	str	r3, [sp, #92]	; 0x5c
 8007b1a:	e7f8      	b.n	8007b0e <_strtod_l+0xb02>
 8007b1c:	23d4      	movs	r3, #212	; 0xd4
 8007b1e:	049b      	lsls	r3, r3, #18
 8007b20:	18cf      	adds	r7, r1, r3
 8007b22:	9b08      	ldr	r3, [sp, #32]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d1a5      	bne.n	8007a74 <_strtod_l+0xa68>
 8007b28:	4b3d      	ldr	r3, [pc, #244]	; (8007c20 <_strtod_l+0xc14>)
 8007b2a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007b2c:	403b      	ands	r3, r7
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d1a0      	bne.n	8007a74 <_strtod_l+0xa68>
 8007b32:	0028      	movs	r0, r5
 8007b34:	0021      	movs	r1, r4
 8007b36:	f7f8 fcf5 	bl	8000524 <__aeabi_d2lz>
 8007b3a:	f7f8 fd2f 	bl	800059c <__aeabi_l2d>
 8007b3e:	0002      	movs	r2, r0
 8007b40:	000b      	movs	r3, r1
 8007b42:	0028      	movs	r0, r5
 8007b44:	0021      	movs	r1, r4
 8007b46:	f7f9 ffe7 	bl	8001b18 <__aeabi_dsub>
 8007b4a:	033b      	lsls	r3, r7, #12
 8007b4c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007b4e:	0b1b      	lsrs	r3, r3, #12
 8007b50:	4333      	orrs	r3, r6
 8007b52:	4313      	orrs	r3, r2
 8007b54:	0004      	movs	r4, r0
 8007b56:	000d      	movs	r5, r1
 8007b58:	4a38      	ldr	r2, [pc, #224]	; (8007c3c <_strtod_l+0xc30>)
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d055      	beq.n	8007c0a <_strtod_l+0xbfe>
 8007b5e:	4b38      	ldr	r3, [pc, #224]	; (8007c40 <_strtod_l+0xc34>)
 8007b60:	f7f8 fc7a 	bl	8000458 <__aeabi_dcmplt>
 8007b64:	2800      	cmp	r0, #0
 8007b66:	d000      	beq.n	8007b6a <_strtod_l+0xb5e>
 8007b68:	e4c7      	b.n	80074fa <_strtod_l+0x4ee>
 8007b6a:	0020      	movs	r0, r4
 8007b6c:	0029      	movs	r1, r5
 8007b6e:	4a35      	ldr	r2, [pc, #212]	; (8007c44 <_strtod_l+0xc38>)
 8007b70:	4b30      	ldr	r3, [pc, #192]	; (8007c34 <_strtod_l+0xc28>)
 8007b72:	f7f8 fc85 	bl	8000480 <__aeabi_dcmpgt>
 8007b76:	2800      	cmp	r0, #0
 8007b78:	d100      	bne.n	8007b7c <_strtod_l+0xb70>
 8007b7a:	e77b      	b.n	8007a74 <_strtod_l+0xa68>
 8007b7c:	e4bd      	b.n	80074fa <_strtod_l+0x4ee>
 8007b7e:	9b08      	ldr	r3, [sp, #32]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d02b      	beq.n	8007bdc <_strtod_l+0xbd0>
 8007b84:	23d4      	movs	r3, #212	; 0xd4
 8007b86:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007b88:	04db      	lsls	r3, r3, #19
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d826      	bhi.n	8007bdc <_strtod_l+0xbd0>
 8007b8e:	0028      	movs	r0, r5
 8007b90:	0021      	movs	r1, r4
 8007b92:	4a2d      	ldr	r2, [pc, #180]	; (8007c48 <_strtod_l+0xc3c>)
 8007b94:	4b2d      	ldr	r3, [pc, #180]	; (8007c4c <_strtod_l+0xc40>)
 8007b96:	f7f8 fc69 	bl	800046c <__aeabi_dcmple>
 8007b9a:	2800      	cmp	r0, #0
 8007b9c:	d017      	beq.n	8007bce <_strtod_l+0xbc2>
 8007b9e:	0028      	movs	r0, r5
 8007ba0:	0021      	movs	r1, r4
 8007ba2:	f7f8 fca1 	bl	80004e8 <__aeabi_d2uiz>
 8007ba6:	2800      	cmp	r0, #0
 8007ba8:	d100      	bne.n	8007bac <_strtod_l+0xba0>
 8007baa:	3001      	adds	r0, #1
 8007bac:	f7fa fbca 	bl	8002344 <__aeabi_ui2d>
 8007bb0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007bb2:	0005      	movs	r5, r0
 8007bb4:	000b      	movs	r3, r1
 8007bb6:	000c      	movs	r4, r1
 8007bb8:	2a00      	cmp	r2, #0
 8007bba:	d122      	bne.n	8007c02 <_strtod_l+0xbf6>
 8007bbc:	2280      	movs	r2, #128	; 0x80
 8007bbe:	0612      	lsls	r2, r2, #24
 8007bc0:	188b      	adds	r3, r1, r2
 8007bc2:	9018      	str	r0, [sp, #96]	; 0x60
 8007bc4:	9319      	str	r3, [sp, #100]	; 0x64
 8007bc6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007bc8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007bca:	9212      	str	r2, [sp, #72]	; 0x48
 8007bcc:	9313      	str	r3, [sp, #76]	; 0x4c
 8007bce:	22d6      	movs	r2, #214	; 0xd6
 8007bd0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007bd2:	04d2      	lsls	r2, r2, #19
 8007bd4:	189b      	adds	r3, r3, r2
 8007bd6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007bd8:	1a9b      	subs	r3, r3, r2
 8007bda:	9313      	str	r3, [sp, #76]	; 0x4c
 8007bdc:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007bde:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007be0:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8007be2:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8007be4:	f001 feb4 	bl	8009950 <__ulp>
 8007be8:	0002      	movs	r2, r0
 8007bea:	000b      	movs	r3, r1
 8007bec:	0030      	movs	r0, r6
 8007bee:	0039      	movs	r1, r7
 8007bf0:	f7f9 fd26 	bl	8001640 <__aeabi_dmul>
 8007bf4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007bf6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007bf8:	f7f8 fdb2 	bl	8000760 <__aeabi_dadd>
 8007bfc:	0006      	movs	r6, r0
 8007bfe:	000f      	movs	r7, r1
 8007c00:	e78f      	b.n	8007b22 <_strtod_l+0xb16>
 8007c02:	0002      	movs	r2, r0
 8007c04:	9218      	str	r2, [sp, #96]	; 0x60
 8007c06:	9319      	str	r3, [sp, #100]	; 0x64
 8007c08:	e7dd      	b.n	8007bc6 <_strtod_l+0xbba>
 8007c0a:	4b11      	ldr	r3, [pc, #68]	; (8007c50 <_strtod_l+0xc44>)
 8007c0c:	f7f8 fc24 	bl	8000458 <__aeabi_dcmplt>
 8007c10:	e7b1      	b.n	8007b76 <_strtod_l+0xb6a>
 8007c12:	46c0      	nop			; (mov r8, r8)
 8007c14:	fff00000 	.word	0xfff00000
 8007c18:	000fffff 	.word	0x000fffff
 8007c1c:	3ff00000 	.word	0x3ff00000
 8007c20:	7ff00000 	.word	0x7ff00000
 8007c24:	7fe00000 	.word	0x7fe00000
 8007c28:	fcb00000 	.word	0xfcb00000
 8007c2c:	7c9fffff 	.word	0x7c9fffff
 8007c30:	7fefffff 	.word	0x7fefffff
 8007c34:	3fe00000 	.word	0x3fe00000
 8007c38:	bff00000 	.word	0xbff00000
 8007c3c:	94a03595 	.word	0x94a03595
 8007c40:	3fdfffff 	.word	0x3fdfffff
 8007c44:	35afe535 	.word	0x35afe535
 8007c48:	ffc00000 	.word	0xffc00000
 8007c4c:	41dfffff 	.word	0x41dfffff
 8007c50:	3fcfffff 	.word	0x3fcfffff

08007c54 <_strtod_r>:
 8007c54:	b510      	push	{r4, lr}
 8007c56:	4b02      	ldr	r3, [pc, #8]	; (8007c60 <_strtod_r+0xc>)
 8007c58:	f7ff f9d8 	bl	800700c <_strtod_l>
 8007c5c:	bd10      	pop	{r4, pc}
 8007c5e:	46c0      	nop			; (mov r8, r8)
 8007c60:	2000007c 	.word	0x2000007c

08007c64 <strtod>:
 8007c64:	b510      	push	{r4, lr}
 8007c66:	000a      	movs	r2, r1
 8007c68:	0001      	movs	r1, r0
 8007c6a:	4803      	ldr	r0, [pc, #12]	; (8007c78 <strtod+0x14>)
 8007c6c:	4b03      	ldr	r3, [pc, #12]	; (8007c7c <strtod+0x18>)
 8007c6e:	6800      	ldr	r0, [r0, #0]
 8007c70:	f7ff f9cc 	bl	800700c <_strtod_l>
 8007c74:	bd10      	pop	{r4, pc}
 8007c76:	46c0      	nop			; (mov r8, r8)
 8007c78:	20000014 	.word	0x20000014
 8007c7c:	2000007c 	.word	0x2000007c

08007c80 <_strtol_l.isra.0>:
 8007c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c82:	b087      	sub	sp, #28
 8007c84:	001e      	movs	r6, r3
 8007c86:	9005      	str	r0, [sp, #20]
 8007c88:	9101      	str	r1, [sp, #4]
 8007c8a:	9202      	str	r2, [sp, #8]
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d045      	beq.n	8007d1c <_strtol_l.isra.0+0x9c>
 8007c90:	0008      	movs	r0, r1
 8007c92:	2b24      	cmp	r3, #36	; 0x24
 8007c94:	d842      	bhi.n	8007d1c <_strtol_l.isra.0+0x9c>
 8007c96:	4b3f      	ldr	r3, [pc, #252]	; (8007d94 <_strtol_l.isra.0+0x114>)
 8007c98:	2208      	movs	r2, #8
 8007c9a:	469c      	mov	ip, r3
 8007c9c:	0003      	movs	r3, r0
 8007c9e:	4661      	mov	r1, ip
 8007ca0:	781c      	ldrb	r4, [r3, #0]
 8007ca2:	1c45      	adds	r5, r0, #1
 8007ca4:	5d09      	ldrb	r1, [r1, r4]
 8007ca6:	0028      	movs	r0, r5
 8007ca8:	000f      	movs	r7, r1
 8007caa:	4017      	ands	r7, r2
 8007cac:	4211      	tst	r1, r2
 8007cae:	d1f5      	bne.n	8007c9c <_strtol_l.isra.0+0x1c>
 8007cb0:	2c2d      	cmp	r4, #45	; 0x2d
 8007cb2:	d13a      	bne.n	8007d2a <_strtol_l.isra.0+0xaa>
 8007cb4:	2701      	movs	r7, #1
 8007cb6:	782c      	ldrb	r4, [r5, #0]
 8007cb8:	1c9d      	adds	r5, r3, #2
 8007cba:	2e00      	cmp	r6, #0
 8007cbc:	d065      	beq.n	8007d8a <_strtol_l.isra.0+0x10a>
 8007cbe:	2e10      	cmp	r6, #16
 8007cc0:	d109      	bne.n	8007cd6 <_strtol_l.isra.0+0x56>
 8007cc2:	2c30      	cmp	r4, #48	; 0x30
 8007cc4:	d107      	bne.n	8007cd6 <_strtol_l.isra.0+0x56>
 8007cc6:	2220      	movs	r2, #32
 8007cc8:	782b      	ldrb	r3, [r5, #0]
 8007cca:	4393      	bics	r3, r2
 8007ccc:	2b58      	cmp	r3, #88	; 0x58
 8007cce:	d157      	bne.n	8007d80 <_strtol_l.isra.0+0x100>
 8007cd0:	2610      	movs	r6, #16
 8007cd2:	786c      	ldrb	r4, [r5, #1]
 8007cd4:	3502      	adds	r5, #2
 8007cd6:	4b30      	ldr	r3, [pc, #192]	; (8007d98 <_strtol_l.isra.0+0x118>)
 8007cd8:	0031      	movs	r1, r6
 8007cda:	18fb      	adds	r3, r7, r3
 8007cdc:	0018      	movs	r0, r3
 8007cde:	9303      	str	r3, [sp, #12]
 8007ce0:	f7f8 fab4 	bl	800024c <__aeabi_uidivmod>
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	4684      	mov	ip, r0
 8007cea:	0018      	movs	r0, r3
 8007cec:	9104      	str	r1, [sp, #16]
 8007cee:	4252      	negs	r2, r2
 8007cf0:	0021      	movs	r1, r4
 8007cf2:	3930      	subs	r1, #48	; 0x30
 8007cf4:	2909      	cmp	r1, #9
 8007cf6:	d81d      	bhi.n	8007d34 <_strtol_l.isra.0+0xb4>
 8007cf8:	000c      	movs	r4, r1
 8007cfa:	42a6      	cmp	r6, r4
 8007cfc:	dd28      	ble.n	8007d50 <_strtol_l.isra.0+0xd0>
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	db24      	blt.n	8007d4c <_strtol_l.isra.0+0xcc>
 8007d02:	0013      	movs	r3, r2
 8007d04:	4584      	cmp	ip, r0
 8007d06:	d306      	bcc.n	8007d16 <_strtol_l.isra.0+0x96>
 8007d08:	d102      	bne.n	8007d10 <_strtol_l.isra.0+0x90>
 8007d0a:	9904      	ldr	r1, [sp, #16]
 8007d0c:	42a1      	cmp	r1, r4
 8007d0e:	db02      	blt.n	8007d16 <_strtol_l.isra.0+0x96>
 8007d10:	2301      	movs	r3, #1
 8007d12:	4370      	muls	r0, r6
 8007d14:	1820      	adds	r0, r4, r0
 8007d16:	782c      	ldrb	r4, [r5, #0]
 8007d18:	3501      	adds	r5, #1
 8007d1a:	e7e9      	b.n	8007cf0 <_strtol_l.isra.0+0x70>
 8007d1c:	f7fe fa62 	bl	80061e4 <__errno>
 8007d20:	2316      	movs	r3, #22
 8007d22:	6003      	str	r3, [r0, #0]
 8007d24:	2000      	movs	r0, #0
 8007d26:	b007      	add	sp, #28
 8007d28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d2a:	2c2b      	cmp	r4, #43	; 0x2b
 8007d2c:	d1c5      	bne.n	8007cba <_strtol_l.isra.0+0x3a>
 8007d2e:	782c      	ldrb	r4, [r5, #0]
 8007d30:	1c9d      	adds	r5, r3, #2
 8007d32:	e7c2      	b.n	8007cba <_strtol_l.isra.0+0x3a>
 8007d34:	0021      	movs	r1, r4
 8007d36:	3941      	subs	r1, #65	; 0x41
 8007d38:	2919      	cmp	r1, #25
 8007d3a:	d801      	bhi.n	8007d40 <_strtol_l.isra.0+0xc0>
 8007d3c:	3c37      	subs	r4, #55	; 0x37
 8007d3e:	e7dc      	b.n	8007cfa <_strtol_l.isra.0+0x7a>
 8007d40:	0021      	movs	r1, r4
 8007d42:	3961      	subs	r1, #97	; 0x61
 8007d44:	2919      	cmp	r1, #25
 8007d46:	d803      	bhi.n	8007d50 <_strtol_l.isra.0+0xd0>
 8007d48:	3c57      	subs	r4, #87	; 0x57
 8007d4a:	e7d6      	b.n	8007cfa <_strtol_l.isra.0+0x7a>
 8007d4c:	0013      	movs	r3, r2
 8007d4e:	e7e2      	b.n	8007d16 <_strtol_l.isra.0+0x96>
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	da09      	bge.n	8007d68 <_strtol_l.isra.0+0xe8>
 8007d54:	2322      	movs	r3, #34	; 0x22
 8007d56:	9a05      	ldr	r2, [sp, #20]
 8007d58:	9803      	ldr	r0, [sp, #12]
 8007d5a:	6013      	str	r3, [r2, #0]
 8007d5c:	9b02      	ldr	r3, [sp, #8]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d0e1      	beq.n	8007d26 <_strtol_l.isra.0+0xa6>
 8007d62:	1e6b      	subs	r3, r5, #1
 8007d64:	9301      	str	r3, [sp, #4]
 8007d66:	e007      	b.n	8007d78 <_strtol_l.isra.0+0xf8>
 8007d68:	2f00      	cmp	r7, #0
 8007d6a:	d000      	beq.n	8007d6e <_strtol_l.isra.0+0xee>
 8007d6c:	4240      	negs	r0, r0
 8007d6e:	9a02      	ldr	r2, [sp, #8]
 8007d70:	2a00      	cmp	r2, #0
 8007d72:	d0d8      	beq.n	8007d26 <_strtol_l.isra.0+0xa6>
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d1f4      	bne.n	8007d62 <_strtol_l.isra.0+0xe2>
 8007d78:	9b02      	ldr	r3, [sp, #8]
 8007d7a:	9a01      	ldr	r2, [sp, #4]
 8007d7c:	601a      	str	r2, [r3, #0]
 8007d7e:	e7d2      	b.n	8007d26 <_strtol_l.isra.0+0xa6>
 8007d80:	2430      	movs	r4, #48	; 0x30
 8007d82:	2e00      	cmp	r6, #0
 8007d84:	d1a7      	bne.n	8007cd6 <_strtol_l.isra.0+0x56>
 8007d86:	3608      	adds	r6, #8
 8007d88:	e7a5      	b.n	8007cd6 <_strtol_l.isra.0+0x56>
 8007d8a:	2c30      	cmp	r4, #48	; 0x30
 8007d8c:	d09b      	beq.n	8007cc6 <_strtol_l.isra.0+0x46>
 8007d8e:	260a      	movs	r6, #10
 8007d90:	e7a1      	b.n	8007cd6 <_strtol_l.isra.0+0x56>
 8007d92:	46c0      	nop			; (mov r8, r8)
 8007d94:	0800af79 	.word	0x0800af79
 8007d98:	7fffffff 	.word	0x7fffffff

08007d9c <_strtol_r>:
 8007d9c:	b510      	push	{r4, lr}
 8007d9e:	f7ff ff6f 	bl	8007c80 <_strtol_l.isra.0>
 8007da2:	bd10      	pop	{r4, pc}

08007da4 <quorem>:
 8007da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007da6:	0006      	movs	r6, r0
 8007da8:	690d      	ldr	r5, [r1, #16]
 8007daa:	6933      	ldr	r3, [r6, #16]
 8007dac:	b087      	sub	sp, #28
 8007dae:	2000      	movs	r0, #0
 8007db0:	9102      	str	r1, [sp, #8]
 8007db2:	42ab      	cmp	r3, r5
 8007db4:	db6b      	blt.n	8007e8e <quorem+0xea>
 8007db6:	000b      	movs	r3, r1
 8007db8:	3d01      	subs	r5, #1
 8007dba:	00ac      	lsls	r4, r5, #2
 8007dbc:	3314      	adds	r3, #20
 8007dbe:	9305      	str	r3, [sp, #20]
 8007dc0:	191b      	adds	r3, r3, r4
 8007dc2:	9303      	str	r3, [sp, #12]
 8007dc4:	0033      	movs	r3, r6
 8007dc6:	3314      	adds	r3, #20
 8007dc8:	9301      	str	r3, [sp, #4]
 8007dca:	191c      	adds	r4, r3, r4
 8007dcc:	9b03      	ldr	r3, [sp, #12]
 8007dce:	6827      	ldr	r7, [r4, #0]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	0038      	movs	r0, r7
 8007dd4:	9300      	str	r3, [sp, #0]
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	0019      	movs	r1, r3
 8007dda:	9304      	str	r3, [sp, #16]
 8007ddc:	f7f8 f9b0 	bl	8000140 <__udivsi3>
 8007de0:	9b04      	ldr	r3, [sp, #16]
 8007de2:	9000      	str	r0, [sp, #0]
 8007de4:	429f      	cmp	r7, r3
 8007de6:	d329      	bcc.n	8007e3c <quorem+0x98>
 8007de8:	2300      	movs	r3, #0
 8007dea:	469c      	mov	ip, r3
 8007dec:	9801      	ldr	r0, [sp, #4]
 8007dee:	9f05      	ldr	r7, [sp, #20]
 8007df0:	9304      	str	r3, [sp, #16]
 8007df2:	cf08      	ldmia	r7!, {r3}
 8007df4:	9a00      	ldr	r2, [sp, #0]
 8007df6:	b299      	uxth	r1, r3
 8007df8:	4351      	muls	r1, r2
 8007dfa:	0c1b      	lsrs	r3, r3, #16
 8007dfc:	4353      	muls	r3, r2
 8007dfe:	4461      	add	r1, ip
 8007e00:	0c0a      	lsrs	r2, r1, #16
 8007e02:	189b      	adds	r3, r3, r2
 8007e04:	0c1a      	lsrs	r2, r3, #16
 8007e06:	9305      	str	r3, [sp, #20]
 8007e08:	6803      	ldr	r3, [r0, #0]
 8007e0a:	4694      	mov	ip, r2
 8007e0c:	b29a      	uxth	r2, r3
 8007e0e:	9b04      	ldr	r3, [sp, #16]
 8007e10:	b289      	uxth	r1, r1
 8007e12:	18d2      	adds	r2, r2, r3
 8007e14:	6803      	ldr	r3, [r0, #0]
 8007e16:	1a52      	subs	r2, r2, r1
 8007e18:	0c19      	lsrs	r1, r3, #16
 8007e1a:	466b      	mov	r3, sp
 8007e1c:	8a9b      	ldrh	r3, [r3, #20]
 8007e1e:	1acb      	subs	r3, r1, r3
 8007e20:	1411      	asrs	r1, r2, #16
 8007e22:	185b      	adds	r3, r3, r1
 8007e24:	1419      	asrs	r1, r3, #16
 8007e26:	b292      	uxth	r2, r2
 8007e28:	041b      	lsls	r3, r3, #16
 8007e2a:	431a      	orrs	r2, r3
 8007e2c:	9b03      	ldr	r3, [sp, #12]
 8007e2e:	9104      	str	r1, [sp, #16]
 8007e30:	c004      	stmia	r0!, {r2}
 8007e32:	42bb      	cmp	r3, r7
 8007e34:	d2dd      	bcs.n	8007df2 <quorem+0x4e>
 8007e36:	6823      	ldr	r3, [r4, #0]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d02e      	beq.n	8007e9a <quorem+0xf6>
 8007e3c:	0030      	movs	r0, r6
 8007e3e:	9902      	ldr	r1, [sp, #8]
 8007e40:	f001 fcd2 	bl	80097e8 <__mcmp>
 8007e44:	2800      	cmp	r0, #0
 8007e46:	db21      	blt.n	8007e8c <quorem+0xe8>
 8007e48:	0030      	movs	r0, r6
 8007e4a:	2400      	movs	r4, #0
 8007e4c:	9b00      	ldr	r3, [sp, #0]
 8007e4e:	9902      	ldr	r1, [sp, #8]
 8007e50:	3301      	adds	r3, #1
 8007e52:	9300      	str	r3, [sp, #0]
 8007e54:	3014      	adds	r0, #20
 8007e56:	3114      	adds	r1, #20
 8007e58:	6802      	ldr	r2, [r0, #0]
 8007e5a:	c908      	ldmia	r1!, {r3}
 8007e5c:	b292      	uxth	r2, r2
 8007e5e:	1914      	adds	r4, r2, r4
 8007e60:	b29a      	uxth	r2, r3
 8007e62:	1aa2      	subs	r2, r4, r2
 8007e64:	6804      	ldr	r4, [r0, #0]
 8007e66:	0c1b      	lsrs	r3, r3, #16
 8007e68:	0c24      	lsrs	r4, r4, #16
 8007e6a:	1ae3      	subs	r3, r4, r3
 8007e6c:	1414      	asrs	r4, r2, #16
 8007e6e:	191b      	adds	r3, r3, r4
 8007e70:	141c      	asrs	r4, r3, #16
 8007e72:	b292      	uxth	r2, r2
 8007e74:	041b      	lsls	r3, r3, #16
 8007e76:	4313      	orrs	r3, r2
 8007e78:	c008      	stmia	r0!, {r3}
 8007e7a:	9b03      	ldr	r3, [sp, #12]
 8007e7c:	428b      	cmp	r3, r1
 8007e7e:	d2eb      	bcs.n	8007e58 <quorem+0xb4>
 8007e80:	9a01      	ldr	r2, [sp, #4]
 8007e82:	00ab      	lsls	r3, r5, #2
 8007e84:	18d3      	adds	r3, r2, r3
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	2a00      	cmp	r2, #0
 8007e8a:	d010      	beq.n	8007eae <quorem+0x10a>
 8007e8c:	9800      	ldr	r0, [sp, #0]
 8007e8e:	b007      	add	sp, #28
 8007e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e92:	6823      	ldr	r3, [r4, #0]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d104      	bne.n	8007ea2 <quorem+0xfe>
 8007e98:	3d01      	subs	r5, #1
 8007e9a:	9b01      	ldr	r3, [sp, #4]
 8007e9c:	3c04      	subs	r4, #4
 8007e9e:	42a3      	cmp	r3, r4
 8007ea0:	d3f7      	bcc.n	8007e92 <quorem+0xee>
 8007ea2:	6135      	str	r5, [r6, #16]
 8007ea4:	e7ca      	b.n	8007e3c <quorem+0x98>
 8007ea6:	681a      	ldr	r2, [r3, #0]
 8007ea8:	2a00      	cmp	r2, #0
 8007eaa:	d104      	bne.n	8007eb6 <quorem+0x112>
 8007eac:	3d01      	subs	r5, #1
 8007eae:	9a01      	ldr	r2, [sp, #4]
 8007eb0:	3b04      	subs	r3, #4
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d3f7      	bcc.n	8007ea6 <quorem+0x102>
 8007eb6:	6135      	str	r5, [r6, #16]
 8007eb8:	e7e8      	b.n	8007e8c <quorem+0xe8>
	...

08007ebc <_dtoa_r>:
 8007ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ebe:	b09d      	sub	sp, #116	; 0x74
 8007ec0:	9202      	str	r2, [sp, #8]
 8007ec2:	9303      	str	r3, [sp, #12]
 8007ec4:	9b02      	ldr	r3, [sp, #8]
 8007ec6:	9c03      	ldr	r4, [sp, #12]
 8007ec8:	930a      	str	r3, [sp, #40]	; 0x28
 8007eca:	940b      	str	r4, [sp, #44]	; 0x2c
 8007ecc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007ece:	0007      	movs	r7, r0
 8007ed0:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8007ed2:	2c00      	cmp	r4, #0
 8007ed4:	d10e      	bne.n	8007ef4 <_dtoa_r+0x38>
 8007ed6:	2010      	movs	r0, #16
 8007ed8:	f001 f984 	bl	80091e4 <malloc>
 8007edc:	1e02      	subs	r2, r0, #0
 8007ede:	6278      	str	r0, [r7, #36]	; 0x24
 8007ee0:	d104      	bne.n	8007eec <_dtoa_r+0x30>
 8007ee2:	21ea      	movs	r1, #234	; 0xea
 8007ee4:	4bc0      	ldr	r3, [pc, #768]	; (80081e8 <_dtoa_r+0x32c>)
 8007ee6:	48c1      	ldr	r0, [pc, #772]	; (80081ec <_dtoa_r+0x330>)
 8007ee8:	f002 f8c4 	bl	800a074 <__assert_func>
 8007eec:	6044      	str	r4, [r0, #4]
 8007eee:	6084      	str	r4, [r0, #8]
 8007ef0:	6004      	str	r4, [r0, #0]
 8007ef2:	60c4      	str	r4, [r0, #12]
 8007ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef6:	6819      	ldr	r1, [r3, #0]
 8007ef8:	2900      	cmp	r1, #0
 8007efa:	d00a      	beq.n	8007f12 <_dtoa_r+0x56>
 8007efc:	685a      	ldr	r2, [r3, #4]
 8007efe:	2301      	movs	r3, #1
 8007f00:	4093      	lsls	r3, r2
 8007f02:	604a      	str	r2, [r1, #4]
 8007f04:	608b      	str	r3, [r1, #8]
 8007f06:	0038      	movs	r0, r7
 8007f08:	f001 f9e0 	bl	80092cc <_Bfree>
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f10:	601a      	str	r2, [r3, #0]
 8007f12:	9b03      	ldr	r3, [sp, #12]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	da21      	bge.n	8007f5c <_dtoa_r+0xa0>
 8007f18:	2301      	movs	r3, #1
 8007f1a:	602b      	str	r3, [r5, #0]
 8007f1c:	9b03      	ldr	r3, [sp, #12]
 8007f1e:	005b      	lsls	r3, r3, #1
 8007f20:	085b      	lsrs	r3, r3, #1
 8007f22:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f24:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8007f26:	4bb2      	ldr	r3, [pc, #712]	; (80081f0 <_dtoa_r+0x334>)
 8007f28:	002a      	movs	r2, r5
 8007f2a:	9318      	str	r3, [sp, #96]	; 0x60
 8007f2c:	401a      	ands	r2, r3
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	d117      	bne.n	8007f62 <_dtoa_r+0xa6>
 8007f32:	4bb0      	ldr	r3, [pc, #704]	; (80081f4 <_dtoa_r+0x338>)
 8007f34:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007f36:	0328      	lsls	r0, r5, #12
 8007f38:	6013      	str	r3, [r2, #0]
 8007f3a:	9b02      	ldr	r3, [sp, #8]
 8007f3c:	0b00      	lsrs	r0, r0, #12
 8007f3e:	4318      	orrs	r0, r3
 8007f40:	d101      	bne.n	8007f46 <_dtoa_r+0x8a>
 8007f42:	f000 fdc3 	bl	8008acc <_dtoa_r+0xc10>
 8007f46:	48ac      	ldr	r0, [pc, #688]	; (80081f8 <_dtoa_r+0x33c>)
 8007f48:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007f4a:	9005      	str	r0, [sp, #20]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d002      	beq.n	8007f56 <_dtoa_r+0x9a>
 8007f50:	4baa      	ldr	r3, [pc, #680]	; (80081fc <_dtoa_r+0x340>)
 8007f52:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007f54:	6013      	str	r3, [r2, #0]
 8007f56:	9805      	ldr	r0, [sp, #20]
 8007f58:	b01d      	add	sp, #116	; 0x74
 8007f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	602b      	str	r3, [r5, #0]
 8007f60:	e7e0      	b.n	8007f24 <_dtoa_r+0x68>
 8007f62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f64:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007f66:	9312      	str	r3, [sp, #72]	; 0x48
 8007f68:	9413      	str	r4, [sp, #76]	; 0x4c
 8007f6a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007f6c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007f6e:	2200      	movs	r2, #0
 8007f70:	2300      	movs	r3, #0
 8007f72:	f7f8 fa6b 	bl	800044c <__aeabi_dcmpeq>
 8007f76:	1e04      	subs	r4, r0, #0
 8007f78:	d00b      	beq.n	8007f92 <_dtoa_r+0xd6>
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007f7e:	6013      	str	r3, [r2, #0]
 8007f80:	4b9f      	ldr	r3, [pc, #636]	; (8008200 <_dtoa_r+0x344>)
 8007f82:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007f84:	9305      	str	r3, [sp, #20]
 8007f86:	2a00      	cmp	r2, #0
 8007f88:	d0e5      	beq.n	8007f56 <_dtoa_r+0x9a>
 8007f8a:	4a9e      	ldr	r2, [pc, #632]	; (8008204 <_dtoa_r+0x348>)
 8007f8c:	9926      	ldr	r1, [sp, #152]	; 0x98
 8007f8e:	600a      	str	r2, [r1, #0]
 8007f90:	e7e1      	b.n	8007f56 <_dtoa_r+0x9a>
 8007f92:	ab1a      	add	r3, sp, #104	; 0x68
 8007f94:	9301      	str	r3, [sp, #4]
 8007f96:	ab1b      	add	r3, sp, #108	; 0x6c
 8007f98:	9300      	str	r3, [sp, #0]
 8007f9a:	0038      	movs	r0, r7
 8007f9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007f9e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007fa0:	f001 fd4a 	bl	8009a38 <__d2b>
 8007fa4:	006e      	lsls	r6, r5, #1
 8007fa6:	9004      	str	r0, [sp, #16]
 8007fa8:	0d76      	lsrs	r6, r6, #21
 8007faa:	d100      	bne.n	8007fae <_dtoa_r+0xf2>
 8007fac:	e07c      	b.n	80080a8 <_dtoa_r+0x1ec>
 8007fae:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007fb0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007fb2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007fb4:	4a94      	ldr	r2, [pc, #592]	; (8008208 <_dtoa_r+0x34c>)
 8007fb6:	031b      	lsls	r3, r3, #12
 8007fb8:	0b1b      	lsrs	r3, r3, #12
 8007fba:	431a      	orrs	r2, r3
 8007fbc:	0011      	movs	r1, r2
 8007fbe:	4b93      	ldr	r3, [pc, #588]	; (800820c <_dtoa_r+0x350>)
 8007fc0:	9416      	str	r4, [sp, #88]	; 0x58
 8007fc2:	18f6      	adds	r6, r6, r3
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	4b92      	ldr	r3, [pc, #584]	; (8008210 <_dtoa_r+0x354>)
 8007fc8:	f7f9 fda6 	bl	8001b18 <__aeabi_dsub>
 8007fcc:	4a91      	ldr	r2, [pc, #580]	; (8008214 <_dtoa_r+0x358>)
 8007fce:	4b92      	ldr	r3, [pc, #584]	; (8008218 <_dtoa_r+0x35c>)
 8007fd0:	f7f9 fb36 	bl	8001640 <__aeabi_dmul>
 8007fd4:	4a91      	ldr	r2, [pc, #580]	; (800821c <_dtoa_r+0x360>)
 8007fd6:	4b92      	ldr	r3, [pc, #584]	; (8008220 <_dtoa_r+0x364>)
 8007fd8:	f7f8 fbc2 	bl	8000760 <__aeabi_dadd>
 8007fdc:	0004      	movs	r4, r0
 8007fde:	0030      	movs	r0, r6
 8007fe0:	000d      	movs	r5, r1
 8007fe2:	f7fa f97f 	bl	80022e4 <__aeabi_i2d>
 8007fe6:	4a8f      	ldr	r2, [pc, #572]	; (8008224 <_dtoa_r+0x368>)
 8007fe8:	4b8f      	ldr	r3, [pc, #572]	; (8008228 <_dtoa_r+0x36c>)
 8007fea:	f7f9 fb29 	bl	8001640 <__aeabi_dmul>
 8007fee:	0002      	movs	r2, r0
 8007ff0:	000b      	movs	r3, r1
 8007ff2:	0020      	movs	r0, r4
 8007ff4:	0029      	movs	r1, r5
 8007ff6:	f7f8 fbb3 	bl	8000760 <__aeabi_dadd>
 8007ffa:	0004      	movs	r4, r0
 8007ffc:	000d      	movs	r5, r1
 8007ffe:	f7fa f93b 	bl	8002278 <__aeabi_d2iz>
 8008002:	2200      	movs	r2, #0
 8008004:	9002      	str	r0, [sp, #8]
 8008006:	2300      	movs	r3, #0
 8008008:	0020      	movs	r0, r4
 800800a:	0029      	movs	r1, r5
 800800c:	f7f8 fa24 	bl	8000458 <__aeabi_dcmplt>
 8008010:	2800      	cmp	r0, #0
 8008012:	d00b      	beq.n	800802c <_dtoa_r+0x170>
 8008014:	9802      	ldr	r0, [sp, #8]
 8008016:	f7fa f965 	bl	80022e4 <__aeabi_i2d>
 800801a:	002b      	movs	r3, r5
 800801c:	0022      	movs	r2, r4
 800801e:	f7f8 fa15 	bl	800044c <__aeabi_dcmpeq>
 8008022:	4243      	negs	r3, r0
 8008024:	4158      	adcs	r0, r3
 8008026:	9b02      	ldr	r3, [sp, #8]
 8008028:	1a1b      	subs	r3, r3, r0
 800802a:	9302      	str	r3, [sp, #8]
 800802c:	2301      	movs	r3, #1
 800802e:	9315      	str	r3, [sp, #84]	; 0x54
 8008030:	9b02      	ldr	r3, [sp, #8]
 8008032:	2b16      	cmp	r3, #22
 8008034:	d80f      	bhi.n	8008056 <_dtoa_r+0x19a>
 8008036:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008038:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800803a:	00da      	lsls	r2, r3, #3
 800803c:	4b7b      	ldr	r3, [pc, #492]	; (800822c <_dtoa_r+0x370>)
 800803e:	189b      	adds	r3, r3, r2
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	f7f8 fa08 	bl	8000458 <__aeabi_dcmplt>
 8008048:	2800      	cmp	r0, #0
 800804a:	d049      	beq.n	80080e0 <_dtoa_r+0x224>
 800804c:	9b02      	ldr	r3, [sp, #8]
 800804e:	3b01      	subs	r3, #1
 8008050:	9302      	str	r3, [sp, #8]
 8008052:	2300      	movs	r3, #0
 8008054:	9315      	str	r3, [sp, #84]	; 0x54
 8008056:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008058:	1b9e      	subs	r6, r3, r6
 800805a:	2300      	movs	r3, #0
 800805c:	9308      	str	r3, [sp, #32]
 800805e:	0033      	movs	r3, r6
 8008060:	3b01      	subs	r3, #1
 8008062:	930d      	str	r3, [sp, #52]	; 0x34
 8008064:	d504      	bpl.n	8008070 <_dtoa_r+0x1b4>
 8008066:	2301      	movs	r3, #1
 8008068:	1b9b      	subs	r3, r3, r6
 800806a:	9308      	str	r3, [sp, #32]
 800806c:	2300      	movs	r3, #0
 800806e:	930d      	str	r3, [sp, #52]	; 0x34
 8008070:	9b02      	ldr	r3, [sp, #8]
 8008072:	2b00      	cmp	r3, #0
 8008074:	db36      	blt.n	80080e4 <_dtoa_r+0x228>
 8008076:	9a02      	ldr	r2, [sp, #8]
 8008078:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800807a:	4694      	mov	ip, r2
 800807c:	4463      	add	r3, ip
 800807e:	930d      	str	r3, [sp, #52]	; 0x34
 8008080:	2300      	movs	r3, #0
 8008082:	9214      	str	r2, [sp, #80]	; 0x50
 8008084:	930e      	str	r3, [sp, #56]	; 0x38
 8008086:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008088:	2401      	movs	r4, #1
 800808a:	2b09      	cmp	r3, #9
 800808c:	d862      	bhi.n	8008154 <_dtoa_r+0x298>
 800808e:	2b05      	cmp	r3, #5
 8008090:	dd02      	ble.n	8008098 <_dtoa_r+0x1dc>
 8008092:	2400      	movs	r4, #0
 8008094:	3b04      	subs	r3, #4
 8008096:	9322      	str	r3, [sp, #136]	; 0x88
 8008098:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800809a:	1e98      	subs	r0, r3, #2
 800809c:	2803      	cmp	r0, #3
 800809e:	d862      	bhi.n	8008166 <_dtoa_r+0x2aa>
 80080a0:	f7f8 f83a 	bl	8000118 <__gnu_thumb1_case_uqi>
 80080a4:	56343629 	.word	0x56343629
 80080a8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80080aa:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80080ac:	189e      	adds	r6, r3, r2
 80080ae:	4b60      	ldr	r3, [pc, #384]	; (8008230 <_dtoa_r+0x374>)
 80080b0:	18f2      	adds	r2, r6, r3
 80080b2:	2a20      	cmp	r2, #32
 80080b4:	dd0f      	ble.n	80080d6 <_dtoa_r+0x21a>
 80080b6:	2340      	movs	r3, #64	; 0x40
 80080b8:	1a9b      	subs	r3, r3, r2
 80080ba:	409d      	lsls	r5, r3
 80080bc:	4b5d      	ldr	r3, [pc, #372]	; (8008234 <_dtoa_r+0x378>)
 80080be:	9802      	ldr	r0, [sp, #8]
 80080c0:	18f3      	adds	r3, r6, r3
 80080c2:	40d8      	lsrs	r0, r3
 80080c4:	4328      	orrs	r0, r5
 80080c6:	f7fa f93d 	bl	8002344 <__aeabi_ui2d>
 80080ca:	2301      	movs	r3, #1
 80080cc:	4c5a      	ldr	r4, [pc, #360]	; (8008238 <_dtoa_r+0x37c>)
 80080ce:	3e01      	subs	r6, #1
 80080d0:	1909      	adds	r1, r1, r4
 80080d2:	9316      	str	r3, [sp, #88]	; 0x58
 80080d4:	e776      	b.n	8007fc4 <_dtoa_r+0x108>
 80080d6:	2320      	movs	r3, #32
 80080d8:	9802      	ldr	r0, [sp, #8]
 80080da:	1a9b      	subs	r3, r3, r2
 80080dc:	4098      	lsls	r0, r3
 80080de:	e7f2      	b.n	80080c6 <_dtoa_r+0x20a>
 80080e0:	9015      	str	r0, [sp, #84]	; 0x54
 80080e2:	e7b8      	b.n	8008056 <_dtoa_r+0x19a>
 80080e4:	9b08      	ldr	r3, [sp, #32]
 80080e6:	9a02      	ldr	r2, [sp, #8]
 80080e8:	1a9b      	subs	r3, r3, r2
 80080ea:	9308      	str	r3, [sp, #32]
 80080ec:	4253      	negs	r3, r2
 80080ee:	930e      	str	r3, [sp, #56]	; 0x38
 80080f0:	2300      	movs	r3, #0
 80080f2:	9314      	str	r3, [sp, #80]	; 0x50
 80080f4:	e7c7      	b.n	8008086 <_dtoa_r+0x1ca>
 80080f6:	2300      	movs	r3, #0
 80080f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80080fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	dc36      	bgt.n	800816e <_dtoa_r+0x2b2>
 8008100:	2301      	movs	r3, #1
 8008102:	001a      	movs	r2, r3
 8008104:	930c      	str	r3, [sp, #48]	; 0x30
 8008106:	9306      	str	r3, [sp, #24]
 8008108:	9223      	str	r2, [sp, #140]	; 0x8c
 800810a:	e00d      	b.n	8008128 <_dtoa_r+0x26c>
 800810c:	2301      	movs	r3, #1
 800810e:	e7f3      	b.n	80080f8 <_dtoa_r+0x23c>
 8008110:	2300      	movs	r3, #0
 8008112:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8008114:	930f      	str	r3, [sp, #60]	; 0x3c
 8008116:	4694      	mov	ip, r2
 8008118:	9b02      	ldr	r3, [sp, #8]
 800811a:	4463      	add	r3, ip
 800811c:	930c      	str	r3, [sp, #48]	; 0x30
 800811e:	3301      	adds	r3, #1
 8008120:	9306      	str	r3, [sp, #24]
 8008122:	2b00      	cmp	r3, #0
 8008124:	dc00      	bgt.n	8008128 <_dtoa_r+0x26c>
 8008126:	2301      	movs	r3, #1
 8008128:	2200      	movs	r2, #0
 800812a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800812c:	6042      	str	r2, [r0, #4]
 800812e:	3204      	adds	r2, #4
 8008130:	0015      	movs	r5, r2
 8008132:	3514      	adds	r5, #20
 8008134:	6841      	ldr	r1, [r0, #4]
 8008136:	429d      	cmp	r5, r3
 8008138:	d91d      	bls.n	8008176 <_dtoa_r+0x2ba>
 800813a:	0038      	movs	r0, r7
 800813c:	f001 f882 	bl	8009244 <_Balloc>
 8008140:	9005      	str	r0, [sp, #20]
 8008142:	2800      	cmp	r0, #0
 8008144:	d11b      	bne.n	800817e <_dtoa_r+0x2c2>
 8008146:	21d5      	movs	r1, #213	; 0xd5
 8008148:	0002      	movs	r2, r0
 800814a:	4b3c      	ldr	r3, [pc, #240]	; (800823c <_dtoa_r+0x380>)
 800814c:	0049      	lsls	r1, r1, #1
 800814e:	e6ca      	b.n	8007ee6 <_dtoa_r+0x2a>
 8008150:	2301      	movs	r3, #1
 8008152:	e7de      	b.n	8008112 <_dtoa_r+0x256>
 8008154:	2300      	movs	r3, #0
 8008156:	940f      	str	r4, [sp, #60]	; 0x3c
 8008158:	9322      	str	r3, [sp, #136]	; 0x88
 800815a:	3b01      	subs	r3, #1
 800815c:	930c      	str	r3, [sp, #48]	; 0x30
 800815e:	9306      	str	r3, [sp, #24]
 8008160:	2200      	movs	r2, #0
 8008162:	3313      	adds	r3, #19
 8008164:	e7d0      	b.n	8008108 <_dtoa_r+0x24c>
 8008166:	2301      	movs	r3, #1
 8008168:	930f      	str	r3, [sp, #60]	; 0x3c
 800816a:	3b02      	subs	r3, #2
 800816c:	e7f6      	b.n	800815c <_dtoa_r+0x2a0>
 800816e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008170:	930c      	str	r3, [sp, #48]	; 0x30
 8008172:	9306      	str	r3, [sp, #24]
 8008174:	e7d8      	b.n	8008128 <_dtoa_r+0x26c>
 8008176:	3101      	adds	r1, #1
 8008178:	6041      	str	r1, [r0, #4]
 800817a:	0052      	lsls	r2, r2, #1
 800817c:	e7d8      	b.n	8008130 <_dtoa_r+0x274>
 800817e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008180:	9a05      	ldr	r2, [sp, #20]
 8008182:	601a      	str	r2, [r3, #0]
 8008184:	9b06      	ldr	r3, [sp, #24]
 8008186:	2b0e      	cmp	r3, #14
 8008188:	d900      	bls.n	800818c <_dtoa_r+0x2d0>
 800818a:	e0eb      	b.n	8008364 <_dtoa_r+0x4a8>
 800818c:	2c00      	cmp	r4, #0
 800818e:	d100      	bne.n	8008192 <_dtoa_r+0x2d6>
 8008190:	e0e8      	b.n	8008364 <_dtoa_r+0x4a8>
 8008192:	9b02      	ldr	r3, [sp, #8]
 8008194:	2b00      	cmp	r3, #0
 8008196:	dd68      	ble.n	800826a <_dtoa_r+0x3ae>
 8008198:	001a      	movs	r2, r3
 800819a:	210f      	movs	r1, #15
 800819c:	4b23      	ldr	r3, [pc, #140]	; (800822c <_dtoa_r+0x370>)
 800819e:	400a      	ands	r2, r1
 80081a0:	00d2      	lsls	r2, r2, #3
 80081a2:	189b      	adds	r3, r3, r2
 80081a4:	681d      	ldr	r5, [r3, #0]
 80081a6:	685e      	ldr	r6, [r3, #4]
 80081a8:	9b02      	ldr	r3, [sp, #8]
 80081aa:	111c      	asrs	r4, r3, #4
 80081ac:	2302      	movs	r3, #2
 80081ae:	9310      	str	r3, [sp, #64]	; 0x40
 80081b0:	9b02      	ldr	r3, [sp, #8]
 80081b2:	05db      	lsls	r3, r3, #23
 80081b4:	d50b      	bpl.n	80081ce <_dtoa_r+0x312>
 80081b6:	4b22      	ldr	r3, [pc, #136]	; (8008240 <_dtoa_r+0x384>)
 80081b8:	400c      	ands	r4, r1
 80081ba:	6a1a      	ldr	r2, [r3, #32]
 80081bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081be:	9812      	ldr	r0, [sp, #72]	; 0x48
 80081c0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80081c2:	f7f8 fe37 	bl	8000e34 <__aeabi_ddiv>
 80081c6:	2303      	movs	r3, #3
 80081c8:	900a      	str	r0, [sp, #40]	; 0x28
 80081ca:	910b      	str	r1, [sp, #44]	; 0x2c
 80081cc:	9310      	str	r3, [sp, #64]	; 0x40
 80081ce:	4b1c      	ldr	r3, [pc, #112]	; (8008240 <_dtoa_r+0x384>)
 80081d0:	9307      	str	r3, [sp, #28]
 80081d2:	2c00      	cmp	r4, #0
 80081d4:	d136      	bne.n	8008244 <_dtoa_r+0x388>
 80081d6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80081d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80081da:	002a      	movs	r2, r5
 80081dc:	0033      	movs	r3, r6
 80081de:	f7f8 fe29 	bl	8000e34 <__aeabi_ddiv>
 80081e2:	900a      	str	r0, [sp, #40]	; 0x28
 80081e4:	910b      	str	r1, [sp, #44]	; 0x2c
 80081e6:	e05c      	b.n	80082a2 <_dtoa_r+0x3e6>
 80081e8:	0800b086 	.word	0x0800b086
 80081ec:	0800b09d 	.word	0x0800b09d
 80081f0:	7ff00000 	.word	0x7ff00000
 80081f4:	0000270f 	.word	0x0000270f
 80081f8:	0800b082 	.word	0x0800b082
 80081fc:	0800b085 	.word	0x0800b085
 8008200:	0800aefc 	.word	0x0800aefc
 8008204:	0800aefd 	.word	0x0800aefd
 8008208:	3ff00000 	.word	0x3ff00000
 800820c:	fffffc01 	.word	0xfffffc01
 8008210:	3ff80000 	.word	0x3ff80000
 8008214:	636f4361 	.word	0x636f4361
 8008218:	3fd287a7 	.word	0x3fd287a7
 800821c:	8b60c8b3 	.word	0x8b60c8b3
 8008220:	3fc68a28 	.word	0x3fc68a28
 8008224:	509f79fb 	.word	0x509f79fb
 8008228:	3fd34413 	.word	0x3fd34413
 800822c:	0800b218 	.word	0x0800b218
 8008230:	00000432 	.word	0x00000432
 8008234:	00000412 	.word	0x00000412
 8008238:	fe100000 	.word	0xfe100000
 800823c:	0800b0fc 	.word	0x0800b0fc
 8008240:	0800b1f0 	.word	0x0800b1f0
 8008244:	2301      	movs	r3, #1
 8008246:	421c      	tst	r4, r3
 8008248:	d00b      	beq.n	8008262 <_dtoa_r+0x3a6>
 800824a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800824c:	0028      	movs	r0, r5
 800824e:	3301      	adds	r3, #1
 8008250:	9310      	str	r3, [sp, #64]	; 0x40
 8008252:	9b07      	ldr	r3, [sp, #28]
 8008254:	0031      	movs	r1, r6
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	f7f9 f9f1 	bl	8001640 <__aeabi_dmul>
 800825e:	0005      	movs	r5, r0
 8008260:	000e      	movs	r6, r1
 8008262:	9b07      	ldr	r3, [sp, #28]
 8008264:	1064      	asrs	r4, r4, #1
 8008266:	3308      	adds	r3, #8
 8008268:	e7b2      	b.n	80081d0 <_dtoa_r+0x314>
 800826a:	2302      	movs	r3, #2
 800826c:	9310      	str	r3, [sp, #64]	; 0x40
 800826e:	9b02      	ldr	r3, [sp, #8]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d016      	beq.n	80082a2 <_dtoa_r+0x3e6>
 8008274:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008276:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008278:	425c      	negs	r4, r3
 800827a:	230f      	movs	r3, #15
 800827c:	4ab5      	ldr	r2, [pc, #724]	; (8008554 <_dtoa_r+0x698>)
 800827e:	4023      	ands	r3, r4
 8008280:	00db      	lsls	r3, r3, #3
 8008282:	18d3      	adds	r3, r2, r3
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	f7f9 f9da 	bl	8001640 <__aeabi_dmul>
 800828c:	2601      	movs	r6, #1
 800828e:	2300      	movs	r3, #0
 8008290:	900a      	str	r0, [sp, #40]	; 0x28
 8008292:	910b      	str	r1, [sp, #44]	; 0x2c
 8008294:	4db0      	ldr	r5, [pc, #704]	; (8008558 <_dtoa_r+0x69c>)
 8008296:	1124      	asrs	r4, r4, #4
 8008298:	2c00      	cmp	r4, #0
 800829a:	d000      	beq.n	800829e <_dtoa_r+0x3e2>
 800829c:	e094      	b.n	80083c8 <_dtoa_r+0x50c>
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d19f      	bne.n	80081e2 <_dtoa_r+0x326>
 80082a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d100      	bne.n	80082aa <_dtoa_r+0x3ee>
 80082a8:	e09b      	b.n	80083e2 <_dtoa_r+0x526>
 80082aa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80082ac:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80082ae:	2200      	movs	r2, #0
 80082b0:	0020      	movs	r0, r4
 80082b2:	0029      	movs	r1, r5
 80082b4:	4ba9      	ldr	r3, [pc, #676]	; (800855c <_dtoa_r+0x6a0>)
 80082b6:	f7f8 f8cf 	bl	8000458 <__aeabi_dcmplt>
 80082ba:	2800      	cmp	r0, #0
 80082bc:	d100      	bne.n	80082c0 <_dtoa_r+0x404>
 80082be:	e090      	b.n	80083e2 <_dtoa_r+0x526>
 80082c0:	9b06      	ldr	r3, [sp, #24]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d100      	bne.n	80082c8 <_dtoa_r+0x40c>
 80082c6:	e08c      	b.n	80083e2 <_dtoa_r+0x526>
 80082c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	dd46      	ble.n	800835c <_dtoa_r+0x4a0>
 80082ce:	9b02      	ldr	r3, [sp, #8]
 80082d0:	2200      	movs	r2, #0
 80082d2:	0020      	movs	r0, r4
 80082d4:	0029      	movs	r1, r5
 80082d6:	1e5e      	subs	r6, r3, #1
 80082d8:	4ba1      	ldr	r3, [pc, #644]	; (8008560 <_dtoa_r+0x6a4>)
 80082da:	f7f9 f9b1 	bl	8001640 <__aeabi_dmul>
 80082de:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80082e0:	900a      	str	r0, [sp, #40]	; 0x28
 80082e2:	910b      	str	r1, [sp, #44]	; 0x2c
 80082e4:	3301      	adds	r3, #1
 80082e6:	9310      	str	r3, [sp, #64]	; 0x40
 80082e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082ea:	9810      	ldr	r0, [sp, #64]	; 0x40
 80082ec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80082ee:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80082f0:	9307      	str	r3, [sp, #28]
 80082f2:	f7f9 fff7 	bl	80022e4 <__aeabi_i2d>
 80082f6:	0022      	movs	r2, r4
 80082f8:	002b      	movs	r3, r5
 80082fa:	f7f9 f9a1 	bl	8001640 <__aeabi_dmul>
 80082fe:	2200      	movs	r2, #0
 8008300:	4b98      	ldr	r3, [pc, #608]	; (8008564 <_dtoa_r+0x6a8>)
 8008302:	f7f8 fa2d 	bl	8000760 <__aeabi_dadd>
 8008306:	9010      	str	r0, [sp, #64]	; 0x40
 8008308:	9111      	str	r1, [sp, #68]	; 0x44
 800830a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800830c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800830e:	920a      	str	r2, [sp, #40]	; 0x28
 8008310:	930b      	str	r3, [sp, #44]	; 0x2c
 8008312:	4a95      	ldr	r2, [pc, #596]	; (8008568 <_dtoa_r+0x6ac>)
 8008314:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008316:	4694      	mov	ip, r2
 8008318:	4463      	add	r3, ip
 800831a:	9317      	str	r3, [sp, #92]	; 0x5c
 800831c:	930b      	str	r3, [sp, #44]	; 0x2c
 800831e:	9b07      	ldr	r3, [sp, #28]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d161      	bne.n	80083e8 <_dtoa_r+0x52c>
 8008324:	2200      	movs	r2, #0
 8008326:	0020      	movs	r0, r4
 8008328:	0029      	movs	r1, r5
 800832a:	4b90      	ldr	r3, [pc, #576]	; (800856c <_dtoa_r+0x6b0>)
 800832c:	f7f9 fbf4 	bl	8001b18 <__aeabi_dsub>
 8008330:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008332:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008334:	0004      	movs	r4, r0
 8008336:	000d      	movs	r5, r1
 8008338:	f7f8 f8a2 	bl	8000480 <__aeabi_dcmpgt>
 800833c:	2800      	cmp	r0, #0
 800833e:	d000      	beq.n	8008342 <_dtoa_r+0x486>
 8008340:	e2b5      	b.n	80088ae <_dtoa_r+0x9f2>
 8008342:	488b      	ldr	r0, [pc, #556]	; (8008570 <_dtoa_r+0x6b4>)
 8008344:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008346:	4684      	mov	ip, r0
 8008348:	4461      	add	r1, ip
 800834a:	000b      	movs	r3, r1
 800834c:	0020      	movs	r0, r4
 800834e:	0029      	movs	r1, r5
 8008350:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008352:	f7f8 f881 	bl	8000458 <__aeabi_dcmplt>
 8008356:	2800      	cmp	r0, #0
 8008358:	d000      	beq.n	800835c <_dtoa_r+0x4a0>
 800835a:	e2a5      	b.n	80088a8 <_dtoa_r+0x9ec>
 800835c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800835e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8008360:	930a      	str	r3, [sp, #40]	; 0x28
 8008362:	940b      	str	r4, [sp, #44]	; 0x2c
 8008364:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008366:	2b00      	cmp	r3, #0
 8008368:	da00      	bge.n	800836c <_dtoa_r+0x4b0>
 800836a:	e171      	b.n	8008650 <_dtoa_r+0x794>
 800836c:	9a02      	ldr	r2, [sp, #8]
 800836e:	2a0e      	cmp	r2, #14
 8008370:	dd00      	ble.n	8008374 <_dtoa_r+0x4b8>
 8008372:	e16d      	b.n	8008650 <_dtoa_r+0x794>
 8008374:	4b77      	ldr	r3, [pc, #476]	; (8008554 <_dtoa_r+0x698>)
 8008376:	00d2      	lsls	r2, r2, #3
 8008378:	189b      	adds	r3, r3, r2
 800837a:	685c      	ldr	r4, [r3, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	9308      	str	r3, [sp, #32]
 8008380:	9409      	str	r4, [sp, #36]	; 0x24
 8008382:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008384:	2b00      	cmp	r3, #0
 8008386:	db00      	blt.n	800838a <_dtoa_r+0x4ce>
 8008388:	e0f6      	b.n	8008578 <_dtoa_r+0x6bc>
 800838a:	9b06      	ldr	r3, [sp, #24]
 800838c:	2b00      	cmp	r3, #0
 800838e:	dd00      	ble.n	8008392 <_dtoa_r+0x4d6>
 8008390:	e0f2      	b.n	8008578 <_dtoa_r+0x6bc>
 8008392:	d000      	beq.n	8008396 <_dtoa_r+0x4da>
 8008394:	e288      	b.n	80088a8 <_dtoa_r+0x9ec>
 8008396:	9808      	ldr	r0, [sp, #32]
 8008398:	9909      	ldr	r1, [sp, #36]	; 0x24
 800839a:	2200      	movs	r2, #0
 800839c:	4b73      	ldr	r3, [pc, #460]	; (800856c <_dtoa_r+0x6b0>)
 800839e:	f7f9 f94f 	bl	8001640 <__aeabi_dmul>
 80083a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80083a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083a6:	f7f8 f875 	bl	8000494 <__aeabi_dcmpge>
 80083aa:	9e06      	ldr	r6, [sp, #24]
 80083ac:	0035      	movs	r5, r6
 80083ae:	2800      	cmp	r0, #0
 80083b0:	d000      	beq.n	80083b4 <_dtoa_r+0x4f8>
 80083b2:	e25f      	b.n	8008874 <_dtoa_r+0x9b8>
 80083b4:	9b05      	ldr	r3, [sp, #20]
 80083b6:	9a05      	ldr	r2, [sp, #20]
 80083b8:	3301      	adds	r3, #1
 80083ba:	9307      	str	r3, [sp, #28]
 80083bc:	2331      	movs	r3, #49	; 0x31
 80083be:	7013      	strb	r3, [r2, #0]
 80083c0:	9b02      	ldr	r3, [sp, #8]
 80083c2:	3301      	adds	r3, #1
 80083c4:	9302      	str	r3, [sp, #8]
 80083c6:	e25a      	b.n	800887e <_dtoa_r+0x9c2>
 80083c8:	4234      	tst	r4, r6
 80083ca:	d007      	beq.n	80083dc <_dtoa_r+0x520>
 80083cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80083ce:	3301      	adds	r3, #1
 80083d0:	9310      	str	r3, [sp, #64]	; 0x40
 80083d2:	682a      	ldr	r2, [r5, #0]
 80083d4:	686b      	ldr	r3, [r5, #4]
 80083d6:	f7f9 f933 	bl	8001640 <__aeabi_dmul>
 80083da:	0033      	movs	r3, r6
 80083dc:	1064      	asrs	r4, r4, #1
 80083de:	3508      	adds	r5, #8
 80083e0:	e75a      	b.n	8008298 <_dtoa_r+0x3dc>
 80083e2:	9e02      	ldr	r6, [sp, #8]
 80083e4:	9b06      	ldr	r3, [sp, #24]
 80083e6:	e780      	b.n	80082ea <_dtoa_r+0x42e>
 80083e8:	9b07      	ldr	r3, [sp, #28]
 80083ea:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80083ec:	1e5a      	subs	r2, r3, #1
 80083ee:	4b59      	ldr	r3, [pc, #356]	; (8008554 <_dtoa_r+0x698>)
 80083f0:	00d2      	lsls	r2, r2, #3
 80083f2:	189b      	adds	r3, r3, r2
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	2900      	cmp	r1, #0
 80083fa:	d051      	beq.n	80084a0 <_dtoa_r+0x5e4>
 80083fc:	2000      	movs	r0, #0
 80083fe:	495d      	ldr	r1, [pc, #372]	; (8008574 <_dtoa_r+0x6b8>)
 8008400:	f7f8 fd18 	bl	8000e34 <__aeabi_ddiv>
 8008404:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008406:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008408:	f7f9 fb86 	bl	8001b18 <__aeabi_dsub>
 800840c:	9a05      	ldr	r2, [sp, #20]
 800840e:	9b05      	ldr	r3, [sp, #20]
 8008410:	4694      	mov	ip, r2
 8008412:	9310      	str	r3, [sp, #64]	; 0x40
 8008414:	9b07      	ldr	r3, [sp, #28]
 8008416:	900a      	str	r0, [sp, #40]	; 0x28
 8008418:	910b      	str	r1, [sp, #44]	; 0x2c
 800841a:	4463      	add	r3, ip
 800841c:	9319      	str	r3, [sp, #100]	; 0x64
 800841e:	0029      	movs	r1, r5
 8008420:	0020      	movs	r0, r4
 8008422:	f7f9 ff29 	bl	8002278 <__aeabi_d2iz>
 8008426:	9017      	str	r0, [sp, #92]	; 0x5c
 8008428:	f7f9 ff5c 	bl	80022e4 <__aeabi_i2d>
 800842c:	0002      	movs	r2, r0
 800842e:	000b      	movs	r3, r1
 8008430:	0020      	movs	r0, r4
 8008432:	0029      	movs	r1, r5
 8008434:	f7f9 fb70 	bl	8001b18 <__aeabi_dsub>
 8008438:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800843a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800843c:	3301      	adds	r3, #1
 800843e:	9307      	str	r3, [sp, #28]
 8008440:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008442:	0004      	movs	r4, r0
 8008444:	3330      	adds	r3, #48	; 0x30
 8008446:	7013      	strb	r3, [r2, #0]
 8008448:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800844a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800844c:	000d      	movs	r5, r1
 800844e:	f7f8 f803 	bl	8000458 <__aeabi_dcmplt>
 8008452:	2800      	cmp	r0, #0
 8008454:	d175      	bne.n	8008542 <_dtoa_r+0x686>
 8008456:	0022      	movs	r2, r4
 8008458:	002b      	movs	r3, r5
 800845a:	2000      	movs	r0, #0
 800845c:	493f      	ldr	r1, [pc, #252]	; (800855c <_dtoa_r+0x6a0>)
 800845e:	f7f9 fb5b 	bl	8001b18 <__aeabi_dsub>
 8008462:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008464:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008466:	f7f7 fff7 	bl	8000458 <__aeabi_dcmplt>
 800846a:	2800      	cmp	r0, #0
 800846c:	d000      	beq.n	8008470 <_dtoa_r+0x5b4>
 800846e:	e0d1      	b.n	8008614 <_dtoa_r+0x758>
 8008470:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008472:	9a07      	ldr	r2, [sp, #28]
 8008474:	4293      	cmp	r3, r2
 8008476:	d100      	bne.n	800847a <_dtoa_r+0x5be>
 8008478:	e770      	b.n	800835c <_dtoa_r+0x4a0>
 800847a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800847c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800847e:	2200      	movs	r2, #0
 8008480:	4b37      	ldr	r3, [pc, #220]	; (8008560 <_dtoa_r+0x6a4>)
 8008482:	f7f9 f8dd 	bl	8001640 <__aeabi_dmul>
 8008486:	4b36      	ldr	r3, [pc, #216]	; (8008560 <_dtoa_r+0x6a4>)
 8008488:	900a      	str	r0, [sp, #40]	; 0x28
 800848a:	910b      	str	r1, [sp, #44]	; 0x2c
 800848c:	2200      	movs	r2, #0
 800848e:	0020      	movs	r0, r4
 8008490:	0029      	movs	r1, r5
 8008492:	f7f9 f8d5 	bl	8001640 <__aeabi_dmul>
 8008496:	9b07      	ldr	r3, [sp, #28]
 8008498:	0004      	movs	r4, r0
 800849a:	000d      	movs	r5, r1
 800849c:	9310      	str	r3, [sp, #64]	; 0x40
 800849e:	e7be      	b.n	800841e <_dtoa_r+0x562>
 80084a0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80084a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80084a4:	f7f9 f8cc 	bl	8001640 <__aeabi_dmul>
 80084a8:	9a05      	ldr	r2, [sp, #20]
 80084aa:	9b05      	ldr	r3, [sp, #20]
 80084ac:	4694      	mov	ip, r2
 80084ae:	930a      	str	r3, [sp, #40]	; 0x28
 80084b0:	9b07      	ldr	r3, [sp, #28]
 80084b2:	9010      	str	r0, [sp, #64]	; 0x40
 80084b4:	9111      	str	r1, [sp, #68]	; 0x44
 80084b6:	4463      	add	r3, ip
 80084b8:	9319      	str	r3, [sp, #100]	; 0x64
 80084ba:	0029      	movs	r1, r5
 80084bc:	0020      	movs	r0, r4
 80084be:	f7f9 fedb 	bl	8002278 <__aeabi_d2iz>
 80084c2:	9017      	str	r0, [sp, #92]	; 0x5c
 80084c4:	f7f9 ff0e 	bl	80022e4 <__aeabi_i2d>
 80084c8:	0002      	movs	r2, r0
 80084ca:	000b      	movs	r3, r1
 80084cc:	0020      	movs	r0, r4
 80084ce:	0029      	movs	r1, r5
 80084d0:	f7f9 fb22 	bl	8001b18 <__aeabi_dsub>
 80084d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80084d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084d8:	3330      	adds	r3, #48	; 0x30
 80084da:	7013      	strb	r3, [r2, #0]
 80084dc:	0013      	movs	r3, r2
 80084de:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80084e0:	3301      	adds	r3, #1
 80084e2:	0004      	movs	r4, r0
 80084e4:	000d      	movs	r5, r1
 80084e6:	930a      	str	r3, [sp, #40]	; 0x28
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d12c      	bne.n	8008546 <_dtoa_r+0x68a>
 80084ec:	9810      	ldr	r0, [sp, #64]	; 0x40
 80084ee:	9911      	ldr	r1, [sp, #68]	; 0x44
 80084f0:	9a05      	ldr	r2, [sp, #20]
 80084f2:	9b07      	ldr	r3, [sp, #28]
 80084f4:	4694      	mov	ip, r2
 80084f6:	4463      	add	r3, ip
 80084f8:	2200      	movs	r2, #0
 80084fa:	9307      	str	r3, [sp, #28]
 80084fc:	4b1d      	ldr	r3, [pc, #116]	; (8008574 <_dtoa_r+0x6b8>)
 80084fe:	f7f8 f92f 	bl	8000760 <__aeabi_dadd>
 8008502:	0002      	movs	r2, r0
 8008504:	000b      	movs	r3, r1
 8008506:	0020      	movs	r0, r4
 8008508:	0029      	movs	r1, r5
 800850a:	f7f7 ffb9 	bl	8000480 <__aeabi_dcmpgt>
 800850e:	2800      	cmp	r0, #0
 8008510:	d000      	beq.n	8008514 <_dtoa_r+0x658>
 8008512:	e07f      	b.n	8008614 <_dtoa_r+0x758>
 8008514:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008516:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008518:	2000      	movs	r0, #0
 800851a:	4916      	ldr	r1, [pc, #88]	; (8008574 <_dtoa_r+0x6b8>)
 800851c:	f7f9 fafc 	bl	8001b18 <__aeabi_dsub>
 8008520:	0002      	movs	r2, r0
 8008522:	000b      	movs	r3, r1
 8008524:	0020      	movs	r0, r4
 8008526:	0029      	movs	r1, r5
 8008528:	f7f7 ff96 	bl	8000458 <__aeabi_dcmplt>
 800852c:	2800      	cmp	r0, #0
 800852e:	d100      	bne.n	8008532 <_dtoa_r+0x676>
 8008530:	e714      	b.n	800835c <_dtoa_r+0x4a0>
 8008532:	9b07      	ldr	r3, [sp, #28]
 8008534:	001a      	movs	r2, r3
 8008536:	3a01      	subs	r2, #1
 8008538:	9207      	str	r2, [sp, #28]
 800853a:	7812      	ldrb	r2, [r2, #0]
 800853c:	2a30      	cmp	r2, #48	; 0x30
 800853e:	d0f8      	beq.n	8008532 <_dtoa_r+0x676>
 8008540:	9307      	str	r3, [sp, #28]
 8008542:	9602      	str	r6, [sp, #8]
 8008544:	e054      	b.n	80085f0 <_dtoa_r+0x734>
 8008546:	2200      	movs	r2, #0
 8008548:	4b05      	ldr	r3, [pc, #20]	; (8008560 <_dtoa_r+0x6a4>)
 800854a:	f7f9 f879 	bl	8001640 <__aeabi_dmul>
 800854e:	0004      	movs	r4, r0
 8008550:	000d      	movs	r5, r1
 8008552:	e7b2      	b.n	80084ba <_dtoa_r+0x5fe>
 8008554:	0800b218 	.word	0x0800b218
 8008558:	0800b1f0 	.word	0x0800b1f0
 800855c:	3ff00000 	.word	0x3ff00000
 8008560:	40240000 	.word	0x40240000
 8008564:	401c0000 	.word	0x401c0000
 8008568:	fcc00000 	.word	0xfcc00000
 800856c:	40140000 	.word	0x40140000
 8008570:	7cc00000 	.word	0x7cc00000
 8008574:	3fe00000 	.word	0x3fe00000
 8008578:	9b06      	ldr	r3, [sp, #24]
 800857a:	9e05      	ldr	r6, [sp, #20]
 800857c:	3b01      	subs	r3, #1
 800857e:	199b      	adds	r3, r3, r6
 8008580:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008582:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008584:	930a      	str	r3, [sp, #40]	; 0x28
 8008586:	9a08      	ldr	r2, [sp, #32]
 8008588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800858a:	0020      	movs	r0, r4
 800858c:	0029      	movs	r1, r5
 800858e:	f7f8 fc51 	bl	8000e34 <__aeabi_ddiv>
 8008592:	f7f9 fe71 	bl	8002278 <__aeabi_d2iz>
 8008596:	9006      	str	r0, [sp, #24]
 8008598:	f7f9 fea4 	bl	80022e4 <__aeabi_i2d>
 800859c:	9a08      	ldr	r2, [sp, #32]
 800859e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085a0:	f7f9 f84e 	bl	8001640 <__aeabi_dmul>
 80085a4:	0002      	movs	r2, r0
 80085a6:	000b      	movs	r3, r1
 80085a8:	0020      	movs	r0, r4
 80085aa:	0029      	movs	r1, r5
 80085ac:	f7f9 fab4 	bl	8001b18 <__aeabi_dsub>
 80085b0:	0033      	movs	r3, r6
 80085b2:	9a06      	ldr	r2, [sp, #24]
 80085b4:	3601      	adds	r6, #1
 80085b6:	3230      	adds	r2, #48	; 0x30
 80085b8:	701a      	strb	r2, [r3, #0]
 80085ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085bc:	9607      	str	r6, [sp, #28]
 80085be:	429a      	cmp	r2, r3
 80085c0:	d139      	bne.n	8008636 <_dtoa_r+0x77a>
 80085c2:	0002      	movs	r2, r0
 80085c4:	000b      	movs	r3, r1
 80085c6:	f7f8 f8cb 	bl	8000760 <__aeabi_dadd>
 80085ca:	9a08      	ldr	r2, [sp, #32]
 80085cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085ce:	0004      	movs	r4, r0
 80085d0:	000d      	movs	r5, r1
 80085d2:	f7f7 ff55 	bl	8000480 <__aeabi_dcmpgt>
 80085d6:	2800      	cmp	r0, #0
 80085d8:	d11b      	bne.n	8008612 <_dtoa_r+0x756>
 80085da:	9a08      	ldr	r2, [sp, #32]
 80085dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085de:	0020      	movs	r0, r4
 80085e0:	0029      	movs	r1, r5
 80085e2:	f7f7 ff33 	bl	800044c <__aeabi_dcmpeq>
 80085e6:	2800      	cmp	r0, #0
 80085e8:	d002      	beq.n	80085f0 <_dtoa_r+0x734>
 80085ea:	9b06      	ldr	r3, [sp, #24]
 80085ec:	07db      	lsls	r3, r3, #31
 80085ee:	d410      	bmi.n	8008612 <_dtoa_r+0x756>
 80085f0:	0038      	movs	r0, r7
 80085f2:	9904      	ldr	r1, [sp, #16]
 80085f4:	f000 fe6a 	bl	80092cc <_Bfree>
 80085f8:	2300      	movs	r3, #0
 80085fa:	9a07      	ldr	r2, [sp, #28]
 80085fc:	9802      	ldr	r0, [sp, #8]
 80085fe:	7013      	strb	r3, [r2, #0]
 8008600:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008602:	3001      	adds	r0, #1
 8008604:	6018      	str	r0, [r3, #0]
 8008606:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008608:	2b00      	cmp	r3, #0
 800860a:	d100      	bne.n	800860e <_dtoa_r+0x752>
 800860c:	e4a3      	b.n	8007f56 <_dtoa_r+0x9a>
 800860e:	601a      	str	r2, [r3, #0]
 8008610:	e4a1      	b.n	8007f56 <_dtoa_r+0x9a>
 8008612:	9e02      	ldr	r6, [sp, #8]
 8008614:	9b07      	ldr	r3, [sp, #28]
 8008616:	9307      	str	r3, [sp, #28]
 8008618:	3b01      	subs	r3, #1
 800861a:	781a      	ldrb	r2, [r3, #0]
 800861c:	2a39      	cmp	r2, #57	; 0x39
 800861e:	d106      	bne.n	800862e <_dtoa_r+0x772>
 8008620:	9a05      	ldr	r2, [sp, #20]
 8008622:	429a      	cmp	r2, r3
 8008624:	d1f7      	bne.n	8008616 <_dtoa_r+0x75a>
 8008626:	2230      	movs	r2, #48	; 0x30
 8008628:	9905      	ldr	r1, [sp, #20]
 800862a:	3601      	adds	r6, #1
 800862c:	700a      	strb	r2, [r1, #0]
 800862e:	781a      	ldrb	r2, [r3, #0]
 8008630:	3201      	adds	r2, #1
 8008632:	701a      	strb	r2, [r3, #0]
 8008634:	e785      	b.n	8008542 <_dtoa_r+0x686>
 8008636:	2200      	movs	r2, #0
 8008638:	4bad      	ldr	r3, [pc, #692]	; (80088f0 <_dtoa_r+0xa34>)
 800863a:	f7f9 f801 	bl	8001640 <__aeabi_dmul>
 800863e:	2200      	movs	r2, #0
 8008640:	2300      	movs	r3, #0
 8008642:	0004      	movs	r4, r0
 8008644:	000d      	movs	r5, r1
 8008646:	f7f7 ff01 	bl	800044c <__aeabi_dcmpeq>
 800864a:	2800      	cmp	r0, #0
 800864c:	d09b      	beq.n	8008586 <_dtoa_r+0x6ca>
 800864e:	e7cf      	b.n	80085f0 <_dtoa_r+0x734>
 8008650:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008652:	2a00      	cmp	r2, #0
 8008654:	d100      	bne.n	8008658 <_dtoa_r+0x79c>
 8008656:	e082      	b.n	800875e <_dtoa_r+0x8a2>
 8008658:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800865a:	2a01      	cmp	r2, #1
 800865c:	dc66      	bgt.n	800872c <_dtoa_r+0x870>
 800865e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008660:	2a00      	cmp	r2, #0
 8008662:	d05f      	beq.n	8008724 <_dtoa_r+0x868>
 8008664:	4aa3      	ldr	r2, [pc, #652]	; (80088f4 <_dtoa_r+0xa38>)
 8008666:	189b      	adds	r3, r3, r2
 8008668:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800866a:	9c08      	ldr	r4, [sp, #32]
 800866c:	9a08      	ldr	r2, [sp, #32]
 800866e:	2101      	movs	r1, #1
 8008670:	18d2      	adds	r2, r2, r3
 8008672:	9208      	str	r2, [sp, #32]
 8008674:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008676:	0038      	movs	r0, r7
 8008678:	18d3      	adds	r3, r2, r3
 800867a:	930d      	str	r3, [sp, #52]	; 0x34
 800867c:	f000 ff22 	bl	80094c4 <__i2b>
 8008680:	0005      	movs	r5, r0
 8008682:	2c00      	cmp	r4, #0
 8008684:	dd0e      	ble.n	80086a4 <_dtoa_r+0x7e8>
 8008686:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008688:	2b00      	cmp	r3, #0
 800868a:	dd0b      	ble.n	80086a4 <_dtoa_r+0x7e8>
 800868c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800868e:	0023      	movs	r3, r4
 8008690:	4294      	cmp	r4, r2
 8008692:	dd00      	ble.n	8008696 <_dtoa_r+0x7da>
 8008694:	0013      	movs	r3, r2
 8008696:	9a08      	ldr	r2, [sp, #32]
 8008698:	1ae4      	subs	r4, r4, r3
 800869a:	1ad2      	subs	r2, r2, r3
 800869c:	9208      	str	r2, [sp, #32]
 800869e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80086a0:	1ad3      	subs	r3, r2, r3
 80086a2:	930d      	str	r3, [sp, #52]	; 0x34
 80086a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d01f      	beq.n	80086ea <_dtoa_r+0x82e>
 80086aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d05a      	beq.n	8008766 <_dtoa_r+0x8aa>
 80086b0:	2e00      	cmp	r6, #0
 80086b2:	dd11      	ble.n	80086d8 <_dtoa_r+0x81c>
 80086b4:	0029      	movs	r1, r5
 80086b6:	0032      	movs	r2, r6
 80086b8:	0038      	movs	r0, r7
 80086ba:	f000 ffc9 	bl	8009650 <__pow5mult>
 80086be:	9a04      	ldr	r2, [sp, #16]
 80086c0:	0001      	movs	r1, r0
 80086c2:	0005      	movs	r5, r0
 80086c4:	0038      	movs	r0, r7
 80086c6:	f000 ff13 	bl	80094f0 <__multiply>
 80086ca:	9904      	ldr	r1, [sp, #16]
 80086cc:	9007      	str	r0, [sp, #28]
 80086ce:	0038      	movs	r0, r7
 80086d0:	f000 fdfc 	bl	80092cc <_Bfree>
 80086d4:	9b07      	ldr	r3, [sp, #28]
 80086d6:	9304      	str	r3, [sp, #16]
 80086d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086da:	1b9a      	subs	r2, r3, r6
 80086dc:	42b3      	cmp	r3, r6
 80086de:	d004      	beq.n	80086ea <_dtoa_r+0x82e>
 80086e0:	0038      	movs	r0, r7
 80086e2:	9904      	ldr	r1, [sp, #16]
 80086e4:	f000 ffb4 	bl	8009650 <__pow5mult>
 80086e8:	9004      	str	r0, [sp, #16]
 80086ea:	2101      	movs	r1, #1
 80086ec:	0038      	movs	r0, r7
 80086ee:	f000 fee9 	bl	80094c4 <__i2b>
 80086f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80086f4:	0006      	movs	r6, r0
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	dd37      	ble.n	800876a <_dtoa_r+0x8ae>
 80086fa:	001a      	movs	r2, r3
 80086fc:	0001      	movs	r1, r0
 80086fe:	0038      	movs	r0, r7
 8008700:	f000 ffa6 	bl	8009650 <__pow5mult>
 8008704:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008706:	0006      	movs	r6, r0
 8008708:	2b01      	cmp	r3, #1
 800870a:	dd33      	ble.n	8008774 <_dtoa_r+0x8b8>
 800870c:	2300      	movs	r3, #0
 800870e:	9307      	str	r3, [sp, #28]
 8008710:	6933      	ldr	r3, [r6, #16]
 8008712:	3303      	adds	r3, #3
 8008714:	009b      	lsls	r3, r3, #2
 8008716:	18f3      	adds	r3, r6, r3
 8008718:	6858      	ldr	r0, [r3, #4]
 800871a:	f000 fe8b 	bl	8009434 <__hi0bits>
 800871e:	2320      	movs	r3, #32
 8008720:	1a18      	subs	r0, r3, r0
 8008722:	e03f      	b.n	80087a4 <_dtoa_r+0x8e8>
 8008724:	2336      	movs	r3, #54	; 0x36
 8008726:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008728:	1a9b      	subs	r3, r3, r2
 800872a:	e79d      	b.n	8008668 <_dtoa_r+0x7ac>
 800872c:	9b06      	ldr	r3, [sp, #24]
 800872e:	1e5e      	subs	r6, r3, #1
 8008730:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008732:	42b3      	cmp	r3, r6
 8008734:	db08      	blt.n	8008748 <_dtoa_r+0x88c>
 8008736:	1b9e      	subs	r6, r3, r6
 8008738:	9b06      	ldr	r3, [sp, #24]
 800873a:	2b00      	cmp	r3, #0
 800873c:	da0c      	bge.n	8008758 <_dtoa_r+0x89c>
 800873e:	9b08      	ldr	r3, [sp, #32]
 8008740:	9a06      	ldr	r2, [sp, #24]
 8008742:	1a9c      	subs	r4, r3, r2
 8008744:	2300      	movs	r3, #0
 8008746:	e791      	b.n	800866c <_dtoa_r+0x7b0>
 8008748:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800874a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800874c:	1af3      	subs	r3, r6, r3
 800874e:	18d3      	adds	r3, r2, r3
 8008750:	960e      	str	r6, [sp, #56]	; 0x38
 8008752:	9314      	str	r3, [sp, #80]	; 0x50
 8008754:	2600      	movs	r6, #0
 8008756:	e7ef      	b.n	8008738 <_dtoa_r+0x87c>
 8008758:	9c08      	ldr	r4, [sp, #32]
 800875a:	9b06      	ldr	r3, [sp, #24]
 800875c:	e786      	b.n	800866c <_dtoa_r+0x7b0>
 800875e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8008760:	9c08      	ldr	r4, [sp, #32]
 8008762:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008764:	e78d      	b.n	8008682 <_dtoa_r+0x7c6>
 8008766:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008768:	e7ba      	b.n	80086e0 <_dtoa_r+0x824>
 800876a:	2300      	movs	r3, #0
 800876c:	9307      	str	r3, [sp, #28]
 800876e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008770:	2b01      	cmp	r3, #1
 8008772:	dc13      	bgt.n	800879c <_dtoa_r+0x8e0>
 8008774:	2300      	movs	r3, #0
 8008776:	9307      	str	r3, [sp, #28]
 8008778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800877a:	2b00      	cmp	r3, #0
 800877c:	d10e      	bne.n	800879c <_dtoa_r+0x8e0>
 800877e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008780:	031b      	lsls	r3, r3, #12
 8008782:	d10b      	bne.n	800879c <_dtoa_r+0x8e0>
 8008784:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008786:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008788:	4213      	tst	r3, r2
 800878a:	d007      	beq.n	800879c <_dtoa_r+0x8e0>
 800878c:	9b08      	ldr	r3, [sp, #32]
 800878e:	3301      	adds	r3, #1
 8008790:	9308      	str	r3, [sp, #32]
 8008792:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008794:	3301      	adds	r3, #1
 8008796:	930d      	str	r3, [sp, #52]	; 0x34
 8008798:	2301      	movs	r3, #1
 800879a:	9307      	str	r3, [sp, #28]
 800879c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800879e:	2001      	movs	r0, #1
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d1b5      	bne.n	8008710 <_dtoa_r+0x854>
 80087a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087a6:	221f      	movs	r2, #31
 80087a8:	1818      	adds	r0, r3, r0
 80087aa:	0003      	movs	r3, r0
 80087ac:	4013      	ands	r3, r2
 80087ae:	4210      	tst	r0, r2
 80087b0:	d046      	beq.n	8008840 <_dtoa_r+0x984>
 80087b2:	3201      	adds	r2, #1
 80087b4:	1ad2      	subs	r2, r2, r3
 80087b6:	2a04      	cmp	r2, #4
 80087b8:	dd3f      	ble.n	800883a <_dtoa_r+0x97e>
 80087ba:	221c      	movs	r2, #28
 80087bc:	1ad3      	subs	r3, r2, r3
 80087be:	9a08      	ldr	r2, [sp, #32]
 80087c0:	18e4      	adds	r4, r4, r3
 80087c2:	18d2      	adds	r2, r2, r3
 80087c4:	9208      	str	r2, [sp, #32]
 80087c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80087c8:	18d3      	adds	r3, r2, r3
 80087ca:	930d      	str	r3, [sp, #52]	; 0x34
 80087cc:	9b08      	ldr	r3, [sp, #32]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	dd05      	ble.n	80087de <_dtoa_r+0x922>
 80087d2:	001a      	movs	r2, r3
 80087d4:	0038      	movs	r0, r7
 80087d6:	9904      	ldr	r1, [sp, #16]
 80087d8:	f000 ff96 	bl	8009708 <__lshift>
 80087dc:	9004      	str	r0, [sp, #16]
 80087de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	dd05      	ble.n	80087f0 <_dtoa_r+0x934>
 80087e4:	0031      	movs	r1, r6
 80087e6:	001a      	movs	r2, r3
 80087e8:	0038      	movs	r0, r7
 80087ea:	f000 ff8d 	bl	8009708 <__lshift>
 80087ee:	0006      	movs	r6, r0
 80087f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d026      	beq.n	8008844 <_dtoa_r+0x988>
 80087f6:	0031      	movs	r1, r6
 80087f8:	9804      	ldr	r0, [sp, #16]
 80087fa:	f000 fff5 	bl	80097e8 <__mcmp>
 80087fe:	2800      	cmp	r0, #0
 8008800:	da20      	bge.n	8008844 <_dtoa_r+0x988>
 8008802:	9b02      	ldr	r3, [sp, #8]
 8008804:	220a      	movs	r2, #10
 8008806:	3b01      	subs	r3, #1
 8008808:	9302      	str	r3, [sp, #8]
 800880a:	0038      	movs	r0, r7
 800880c:	2300      	movs	r3, #0
 800880e:	9904      	ldr	r1, [sp, #16]
 8008810:	f000 fd80 	bl	8009314 <__multadd>
 8008814:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008816:	9004      	str	r0, [sp, #16]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d100      	bne.n	800881e <_dtoa_r+0x962>
 800881c:	e160      	b.n	8008ae0 <_dtoa_r+0xc24>
 800881e:	2300      	movs	r3, #0
 8008820:	0029      	movs	r1, r5
 8008822:	220a      	movs	r2, #10
 8008824:	0038      	movs	r0, r7
 8008826:	f000 fd75 	bl	8009314 <__multadd>
 800882a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800882c:	0005      	movs	r5, r0
 800882e:	2b00      	cmp	r3, #0
 8008830:	dc47      	bgt.n	80088c2 <_dtoa_r+0xa06>
 8008832:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008834:	2b02      	cmp	r3, #2
 8008836:	dc0d      	bgt.n	8008854 <_dtoa_r+0x998>
 8008838:	e043      	b.n	80088c2 <_dtoa_r+0xa06>
 800883a:	2a04      	cmp	r2, #4
 800883c:	d0c6      	beq.n	80087cc <_dtoa_r+0x910>
 800883e:	0013      	movs	r3, r2
 8008840:	331c      	adds	r3, #28
 8008842:	e7bc      	b.n	80087be <_dtoa_r+0x902>
 8008844:	9b06      	ldr	r3, [sp, #24]
 8008846:	2b00      	cmp	r3, #0
 8008848:	dc35      	bgt.n	80088b6 <_dtoa_r+0x9fa>
 800884a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800884c:	2b02      	cmp	r3, #2
 800884e:	dd32      	ble.n	80088b6 <_dtoa_r+0x9fa>
 8008850:	9b06      	ldr	r3, [sp, #24]
 8008852:	930c      	str	r3, [sp, #48]	; 0x30
 8008854:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008856:	2b00      	cmp	r3, #0
 8008858:	d10c      	bne.n	8008874 <_dtoa_r+0x9b8>
 800885a:	0031      	movs	r1, r6
 800885c:	2205      	movs	r2, #5
 800885e:	0038      	movs	r0, r7
 8008860:	f000 fd58 	bl	8009314 <__multadd>
 8008864:	0006      	movs	r6, r0
 8008866:	0001      	movs	r1, r0
 8008868:	9804      	ldr	r0, [sp, #16]
 800886a:	f000 ffbd 	bl	80097e8 <__mcmp>
 800886e:	2800      	cmp	r0, #0
 8008870:	dd00      	ble.n	8008874 <_dtoa_r+0x9b8>
 8008872:	e59f      	b.n	80083b4 <_dtoa_r+0x4f8>
 8008874:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008876:	43db      	mvns	r3, r3
 8008878:	9302      	str	r3, [sp, #8]
 800887a:	9b05      	ldr	r3, [sp, #20]
 800887c:	9307      	str	r3, [sp, #28]
 800887e:	2400      	movs	r4, #0
 8008880:	0031      	movs	r1, r6
 8008882:	0038      	movs	r0, r7
 8008884:	f000 fd22 	bl	80092cc <_Bfree>
 8008888:	2d00      	cmp	r5, #0
 800888a:	d100      	bne.n	800888e <_dtoa_r+0x9d2>
 800888c:	e6b0      	b.n	80085f0 <_dtoa_r+0x734>
 800888e:	2c00      	cmp	r4, #0
 8008890:	d005      	beq.n	800889e <_dtoa_r+0x9e2>
 8008892:	42ac      	cmp	r4, r5
 8008894:	d003      	beq.n	800889e <_dtoa_r+0x9e2>
 8008896:	0021      	movs	r1, r4
 8008898:	0038      	movs	r0, r7
 800889a:	f000 fd17 	bl	80092cc <_Bfree>
 800889e:	0029      	movs	r1, r5
 80088a0:	0038      	movs	r0, r7
 80088a2:	f000 fd13 	bl	80092cc <_Bfree>
 80088a6:	e6a3      	b.n	80085f0 <_dtoa_r+0x734>
 80088a8:	2600      	movs	r6, #0
 80088aa:	0035      	movs	r5, r6
 80088ac:	e7e2      	b.n	8008874 <_dtoa_r+0x9b8>
 80088ae:	9602      	str	r6, [sp, #8]
 80088b0:	9e07      	ldr	r6, [sp, #28]
 80088b2:	0035      	movs	r5, r6
 80088b4:	e57e      	b.n	80083b4 <_dtoa_r+0x4f8>
 80088b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d100      	bne.n	80088be <_dtoa_r+0xa02>
 80088bc:	e0c8      	b.n	8008a50 <_dtoa_r+0xb94>
 80088be:	9b06      	ldr	r3, [sp, #24]
 80088c0:	930c      	str	r3, [sp, #48]	; 0x30
 80088c2:	2c00      	cmp	r4, #0
 80088c4:	dd05      	ble.n	80088d2 <_dtoa_r+0xa16>
 80088c6:	0029      	movs	r1, r5
 80088c8:	0022      	movs	r2, r4
 80088ca:	0038      	movs	r0, r7
 80088cc:	f000 ff1c 	bl	8009708 <__lshift>
 80088d0:	0005      	movs	r5, r0
 80088d2:	9b07      	ldr	r3, [sp, #28]
 80088d4:	0028      	movs	r0, r5
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d01f      	beq.n	800891a <_dtoa_r+0xa5e>
 80088da:	0038      	movs	r0, r7
 80088dc:	6869      	ldr	r1, [r5, #4]
 80088de:	f000 fcb1 	bl	8009244 <_Balloc>
 80088e2:	1e04      	subs	r4, r0, #0
 80088e4:	d10c      	bne.n	8008900 <_dtoa_r+0xa44>
 80088e6:	0002      	movs	r2, r0
 80088e8:	4b03      	ldr	r3, [pc, #12]	; (80088f8 <_dtoa_r+0xa3c>)
 80088ea:	4904      	ldr	r1, [pc, #16]	; (80088fc <_dtoa_r+0xa40>)
 80088ec:	f7ff fafb 	bl	8007ee6 <_dtoa_r+0x2a>
 80088f0:	40240000 	.word	0x40240000
 80088f4:	00000433 	.word	0x00000433
 80088f8:	0800b0fc 	.word	0x0800b0fc
 80088fc:	000002ea 	.word	0x000002ea
 8008900:	0029      	movs	r1, r5
 8008902:	692b      	ldr	r3, [r5, #16]
 8008904:	310c      	adds	r1, #12
 8008906:	1c9a      	adds	r2, r3, #2
 8008908:	0092      	lsls	r2, r2, #2
 800890a:	300c      	adds	r0, #12
 800890c:	f000 fc91 	bl	8009232 <memcpy>
 8008910:	2201      	movs	r2, #1
 8008912:	0021      	movs	r1, r4
 8008914:	0038      	movs	r0, r7
 8008916:	f000 fef7 	bl	8009708 <__lshift>
 800891a:	002c      	movs	r4, r5
 800891c:	0005      	movs	r5, r0
 800891e:	9b05      	ldr	r3, [sp, #20]
 8008920:	9308      	str	r3, [sp, #32]
 8008922:	0031      	movs	r1, r6
 8008924:	9804      	ldr	r0, [sp, #16]
 8008926:	f7ff fa3d 	bl	8007da4 <quorem>
 800892a:	0003      	movs	r3, r0
 800892c:	0021      	movs	r1, r4
 800892e:	3330      	adds	r3, #48	; 0x30
 8008930:	900e      	str	r0, [sp, #56]	; 0x38
 8008932:	9804      	ldr	r0, [sp, #16]
 8008934:	9306      	str	r3, [sp, #24]
 8008936:	f000 ff57 	bl	80097e8 <__mcmp>
 800893a:	002a      	movs	r2, r5
 800893c:	900f      	str	r0, [sp, #60]	; 0x3c
 800893e:	0031      	movs	r1, r6
 8008940:	0038      	movs	r0, r7
 8008942:	f000 ff6d 	bl	8009820 <__mdiff>
 8008946:	68c3      	ldr	r3, [r0, #12]
 8008948:	9007      	str	r0, [sp, #28]
 800894a:	9310      	str	r3, [sp, #64]	; 0x40
 800894c:	2301      	movs	r3, #1
 800894e:	930d      	str	r3, [sp, #52]	; 0x34
 8008950:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008952:	2b00      	cmp	r3, #0
 8008954:	d104      	bne.n	8008960 <_dtoa_r+0xaa4>
 8008956:	0001      	movs	r1, r0
 8008958:	9804      	ldr	r0, [sp, #16]
 800895a:	f000 ff45 	bl	80097e8 <__mcmp>
 800895e:	900d      	str	r0, [sp, #52]	; 0x34
 8008960:	0038      	movs	r0, r7
 8008962:	9907      	ldr	r1, [sp, #28]
 8008964:	f000 fcb2 	bl	80092cc <_Bfree>
 8008968:	2301      	movs	r3, #1
 800896a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800896c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800896e:	4018      	ands	r0, r3
 8008970:	9b08      	ldr	r3, [sp, #32]
 8008972:	3301      	adds	r3, #1
 8008974:	9307      	str	r3, [sp, #28]
 8008976:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008978:	4313      	orrs	r3, r2
 800897a:	4303      	orrs	r3, r0
 800897c:	d10c      	bne.n	8008998 <_dtoa_r+0xadc>
 800897e:	9b06      	ldr	r3, [sp, #24]
 8008980:	2b39      	cmp	r3, #57	; 0x39
 8008982:	d025      	beq.n	80089d0 <_dtoa_r+0xb14>
 8008984:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008986:	2b00      	cmp	r3, #0
 8008988:	dd02      	ble.n	8008990 <_dtoa_r+0xad4>
 800898a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800898c:	3331      	adds	r3, #49	; 0x31
 800898e:	9306      	str	r3, [sp, #24]
 8008990:	9b08      	ldr	r3, [sp, #32]
 8008992:	9a06      	ldr	r2, [sp, #24]
 8008994:	701a      	strb	r2, [r3, #0]
 8008996:	e773      	b.n	8008880 <_dtoa_r+0x9c4>
 8008998:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800899a:	2b00      	cmp	r3, #0
 800899c:	db03      	blt.n	80089a6 <_dtoa_r+0xaea>
 800899e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80089a0:	4313      	orrs	r3, r2
 80089a2:	4303      	orrs	r3, r0
 80089a4:	d11f      	bne.n	80089e6 <_dtoa_r+0xb2a>
 80089a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	ddf1      	ble.n	8008990 <_dtoa_r+0xad4>
 80089ac:	9904      	ldr	r1, [sp, #16]
 80089ae:	2201      	movs	r2, #1
 80089b0:	0038      	movs	r0, r7
 80089b2:	f000 fea9 	bl	8009708 <__lshift>
 80089b6:	0031      	movs	r1, r6
 80089b8:	9004      	str	r0, [sp, #16]
 80089ba:	f000 ff15 	bl	80097e8 <__mcmp>
 80089be:	2800      	cmp	r0, #0
 80089c0:	dc03      	bgt.n	80089ca <_dtoa_r+0xb0e>
 80089c2:	d1e5      	bne.n	8008990 <_dtoa_r+0xad4>
 80089c4:	9b06      	ldr	r3, [sp, #24]
 80089c6:	07db      	lsls	r3, r3, #31
 80089c8:	d5e2      	bpl.n	8008990 <_dtoa_r+0xad4>
 80089ca:	9b06      	ldr	r3, [sp, #24]
 80089cc:	2b39      	cmp	r3, #57	; 0x39
 80089ce:	d1dc      	bne.n	800898a <_dtoa_r+0xace>
 80089d0:	2339      	movs	r3, #57	; 0x39
 80089d2:	9a08      	ldr	r2, [sp, #32]
 80089d4:	7013      	strb	r3, [r2, #0]
 80089d6:	9b07      	ldr	r3, [sp, #28]
 80089d8:	9307      	str	r3, [sp, #28]
 80089da:	3b01      	subs	r3, #1
 80089dc:	781a      	ldrb	r2, [r3, #0]
 80089de:	2a39      	cmp	r2, #57	; 0x39
 80089e0:	d06c      	beq.n	8008abc <_dtoa_r+0xc00>
 80089e2:	3201      	adds	r2, #1
 80089e4:	e7d6      	b.n	8008994 <_dtoa_r+0xad8>
 80089e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	dd07      	ble.n	80089fc <_dtoa_r+0xb40>
 80089ec:	9b06      	ldr	r3, [sp, #24]
 80089ee:	2b39      	cmp	r3, #57	; 0x39
 80089f0:	d0ee      	beq.n	80089d0 <_dtoa_r+0xb14>
 80089f2:	9b06      	ldr	r3, [sp, #24]
 80089f4:	9a08      	ldr	r2, [sp, #32]
 80089f6:	3301      	adds	r3, #1
 80089f8:	7013      	strb	r3, [r2, #0]
 80089fa:	e741      	b.n	8008880 <_dtoa_r+0x9c4>
 80089fc:	9b08      	ldr	r3, [sp, #32]
 80089fe:	9a06      	ldr	r2, [sp, #24]
 8008a00:	701a      	strb	r2, [r3, #0]
 8008a02:	2301      	movs	r3, #1
 8008a04:	9a05      	ldr	r2, [sp, #20]
 8008a06:	1a9b      	subs	r3, r3, r2
 8008a08:	9a08      	ldr	r2, [sp, #32]
 8008a0a:	189b      	adds	r3, r3, r2
 8008a0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	d03e      	beq.n	8008a90 <_dtoa_r+0xbd4>
 8008a12:	2300      	movs	r3, #0
 8008a14:	220a      	movs	r2, #10
 8008a16:	9904      	ldr	r1, [sp, #16]
 8008a18:	0038      	movs	r0, r7
 8008a1a:	f000 fc7b 	bl	8009314 <__multadd>
 8008a1e:	2300      	movs	r3, #0
 8008a20:	9004      	str	r0, [sp, #16]
 8008a22:	220a      	movs	r2, #10
 8008a24:	0021      	movs	r1, r4
 8008a26:	0038      	movs	r0, r7
 8008a28:	42ac      	cmp	r4, r5
 8008a2a:	d106      	bne.n	8008a3a <_dtoa_r+0xb7e>
 8008a2c:	f000 fc72 	bl	8009314 <__multadd>
 8008a30:	0004      	movs	r4, r0
 8008a32:	0005      	movs	r5, r0
 8008a34:	9b07      	ldr	r3, [sp, #28]
 8008a36:	9308      	str	r3, [sp, #32]
 8008a38:	e773      	b.n	8008922 <_dtoa_r+0xa66>
 8008a3a:	f000 fc6b 	bl	8009314 <__multadd>
 8008a3e:	0029      	movs	r1, r5
 8008a40:	0004      	movs	r4, r0
 8008a42:	2300      	movs	r3, #0
 8008a44:	220a      	movs	r2, #10
 8008a46:	0038      	movs	r0, r7
 8008a48:	f000 fc64 	bl	8009314 <__multadd>
 8008a4c:	0005      	movs	r5, r0
 8008a4e:	e7f1      	b.n	8008a34 <_dtoa_r+0xb78>
 8008a50:	9b06      	ldr	r3, [sp, #24]
 8008a52:	930c      	str	r3, [sp, #48]	; 0x30
 8008a54:	2400      	movs	r4, #0
 8008a56:	0031      	movs	r1, r6
 8008a58:	9804      	ldr	r0, [sp, #16]
 8008a5a:	f7ff f9a3 	bl	8007da4 <quorem>
 8008a5e:	9b05      	ldr	r3, [sp, #20]
 8008a60:	3030      	adds	r0, #48	; 0x30
 8008a62:	5518      	strb	r0, [r3, r4]
 8008a64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a66:	3401      	adds	r4, #1
 8008a68:	9006      	str	r0, [sp, #24]
 8008a6a:	42a3      	cmp	r3, r4
 8008a6c:	dd07      	ble.n	8008a7e <_dtoa_r+0xbc2>
 8008a6e:	2300      	movs	r3, #0
 8008a70:	220a      	movs	r2, #10
 8008a72:	0038      	movs	r0, r7
 8008a74:	9904      	ldr	r1, [sp, #16]
 8008a76:	f000 fc4d 	bl	8009314 <__multadd>
 8008a7a:	9004      	str	r0, [sp, #16]
 8008a7c:	e7eb      	b.n	8008a56 <_dtoa_r+0xb9a>
 8008a7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a80:	2001      	movs	r0, #1
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	dd00      	ble.n	8008a88 <_dtoa_r+0xbcc>
 8008a86:	0018      	movs	r0, r3
 8008a88:	2400      	movs	r4, #0
 8008a8a:	9b05      	ldr	r3, [sp, #20]
 8008a8c:	181b      	adds	r3, r3, r0
 8008a8e:	9307      	str	r3, [sp, #28]
 8008a90:	9904      	ldr	r1, [sp, #16]
 8008a92:	2201      	movs	r2, #1
 8008a94:	0038      	movs	r0, r7
 8008a96:	f000 fe37 	bl	8009708 <__lshift>
 8008a9a:	0031      	movs	r1, r6
 8008a9c:	9004      	str	r0, [sp, #16]
 8008a9e:	f000 fea3 	bl	80097e8 <__mcmp>
 8008aa2:	2800      	cmp	r0, #0
 8008aa4:	dc97      	bgt.n	80089d6 <_dtoa_r+0xb1a>
 8008aa6:	d102      	bne.n	8008aae <_dtoa_r+0xbf2>
 8008aa8:	9b06      	ldr	r3, [sp, #24]
 8008aaa:	07db      	lsls	r3, r3, #31
 8008aac:	d493      	bmi.n	80089d6 <_dtoa_r+0xb1a>
 8008aae:	9b07      	ldr	r3, [sp, #28]
 8008ab0:	9307      	str	r3, [sp, #28]
 8008ab2:	3b01      	subs	r3, #1
 8008ab4:	781a      	ldrb	r2, [r3, #0]
 8008ab6:	2a30      	cmp	r2, #48	; 0x30
 8008ab8:	d0fa      	beq.n	8008ab0 <_dtoa_r+0xbf4>
 8008aba:	e6e1      	b.n	8008880 <_dtoa_r+0x9c4>
 8008abc:	9a05      	ldr	r2, [sp, #20]
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d18a      	bne.n	80089d8 <_dtoa_r+0xb1c>
 8008ac2:	9b02      	ldr	r3, [sp, #8]
 8008ac4:	3301      	adds	r3, #1
 8008ac6:	9302      	str	r3, [sp, #8]
 8008ac8:	2331      	movs	r3, #49	; 0x31
 8008aca:	e795      	b.n	80089f8 <_dtoa_r+0xb3c>
 8008acc:	4b08      	ldr	r3, [pc, #32]	; (8008af0 <_dtoa_r+0xc34>)
 8008ace:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008ad0:	9305      	str	r3, [sp, #20]
 8008ad2:	4b08      	ldr	r3, [pc, #32]	; (8008af4 <_dtoa_r+0xc38>)
 8008ad4:	2a00      	cmp	r2, #0
 8008ad6:	d001      	beq.n	8008adc <_dtoa_r+0xc20>
 8008ad8:	f7ff fa3b 	bl	8007f52 <_dtoa_r+0x96>
 8008adc:	f7ff fa3b 	bl	8007f56 <_dtoa_r+0x9a>
 8008ae0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	dcb6      	bgt.n	8008a54 <_dtoa_r+0xb98>
 8008ae6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008ae8:	2b02      	cmp	r3, #2
 8008aea:	dd00      	ble.n	8008aee <_dtoa_r+0xc32>
 8008aec:	e6b2      	b.n	8008854 <_dtoa_r+0x998>
 8008aee:	e7b1      	b.n	8008a54 <_dtoa_r+0xb98>
 8008af0:	0800b079 	.word	0x0800b079
 8008af4:	0800b081 	.word	0x0800b081

08008af8 <rshift>:
 8008af8:	0002      	movs	r2, r0
 8008afa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008afc:	6907      	ldr	r7, [r0, #16]
 8008afe:	3214      	adds	r2, #20
 8008b00:	0013      	movs	r3, r2
 8008b02:	b085      	sub	sp, #20
 8008b04:	114e      	asrs	r6, r1, #5
 8008b06:	42b7      	cmp	r7, r6
 8008b08:	dd31      	ble.n	8008b6e <rshift+0x76>
 8008b0a:	00b3      	lsls	r3, r6, #2
 8008b0c:	18d3      	adds	r3, r2, r3
 8008b0e:	251f      	movs	r5, #31
 8008b10:	9301      	str	r3, [sp, #4]
 8008b12:	000b      	movs	r3, r1
 8008b14:	00bc      	lsls	r4, r7, #2
 8008b16:	402b      	ands	r3, r5
 8008b18:	1914      	adds	r4, r2, r4
 8008b1a:	9302      	str	r3, [sp, #8]
 8008b1c:	4229      	tst	r1, r5
 8008b1e:	d10c      	bne.n	8008b3a <rshift+0x42>
 8008b20:	0015      	movs	r5, r2
 8008b22:	9901      	ldr	r1, [sp, #4]
 8008b24:	428c      	cmp	r4, r1
 8008b26:	d838      	bhi.n	8008b9a <rshift+0xa2>
 8008b28:	9901      	ldr	r1, [sp, #4]
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	3903      	subs	r1, #3
 8008b2e:	428c      	cmp	r4, r1
 8008b30:	d301      	bcc.n	8008b36 <rshift+0x3e>
 8008b32:	1bbb      	subs	r3, r7, r6
 8008b34:	009b      	lsls	r3, r3, #2
 8008b36:	18d3      	adds	r3, r2, r3
 8008b38:	e019      	b.n	8008b6e <rshift+0x76>
 8008b3a:	2120      	movs	r1, #32
 8008b3c:	9b02      	ldr	r3, [sp, #8]
 8008b3e:	9d01      	ldr	r5, [sp, #4]
 8008b40:	1acb      	subs	r3, r1, r3
 8008b42:	9303      	str	r3, [sp, #12]
 8008b44:	cd02      	ldmia	r5!, {r1}
 8008b46:	9b02      	ldr	r3, [sp, #8]
 8008b48:	4694      	mov	ip, r2
 8008b4a:	40d9      	lsrs	r1, r3
 8008b4c:	9100      	str	r1, [sp, #0]
 8008b4e:	42ac      	cmp	r4, r5
 8008b50:	d816      	bhi.n	8008b80 <rshift+0x88>
 8008b52:	9d01      	ldr	r5, [sp, #4]
 8008b54:	2300      	movs	r3, #0
 8008b56:	3501      	adds	r5, #1
 8008b58:	42ac      	cmp	r4, r5
 8008b5a:	d302      	bcc.n	8008b62 <rshift+0x6a>
 8008b5c:	1bbb      	subs	r3, r7, r6
 8008b5e:	009b      	lsls	r3, r3, #2
 8008b60:	3b04      	subs	r3, #4
 8008b62:	9900      	ldr	r1, [sp, #0]
 8008b64:	18d3      	adds	r3, r2, r3
 8008b66:	6019      	str	r1, [r3, #0]
 8008b68:	2900      	cmp	r1, #0
 8008b6a:	d000      	beq.n	8008b6e <rshift+0x76>
 8008b6c:	3304      	adds	r3, #4
 8008b6e:	1a99      	subs	r1, r3, r2
 8008b70:	1089      	asrs	r1, r1, #2
 8008b72:	6101      	str	r1, [r0, #16]
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d101      	bne.n	8008b7c <rshift+0x84>
 8008b78:	2300      	movs	r3, #0
 8008b7a:	6143      	str	r3, [r0, #20]
 8008b7c:	b005      	add	sp, #20
 8008b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b80:	682b      	ldr	r3, [r5, #0]
 8008b82:	9903      	ldr	r1, [sp, #12]
 8008b84:	408b      	lsls	r3, r1
 8008b86:	9900      	ldr	r1, [sp, #0]
 8008b88:	4319      	orrs	r1, r3
 8008b8a:	4663      	mov	r3, ip
 8008b8c:	c302      	stmia	r3!, {r1}
 8008b8e:	469c      	mov	ip, r3
 8008b90:	cd02      	ldmia	r5!, {r1}
 8008b92:	9b02      	ldr	r3, [sp, #8]
 8008b94:	40d9      	lsrs	r1, r3
 8008b96:	9100      	str	r1, [sp, #0]
 8008b98:	e7d9      	b.n	8008b4e <rshift+0x56>
 8008b9a:	c908      	ldmia	r1!, {r3}
 8008b9c:	c508      	stmia	r5!, {r3}
 8008b9e:	e7c1      	b.n	8008b24 <rshift+0x2c>

08008ba0 <__hexdig_fun>:
 8008ba0:	0002      	movs	r2, r0
 8008ba2:	3a30      	subs	r2, #48	; 0x30
 8008ba4:	0003      	movs	r3, r0
 8008ba6:	2a09      	cmp	r2, #9
 8008ba8:	d802      	bhi.n	8008bb0 <__hexdig_fun+0x10>
 8008baa:	3b20      	subs	r3, #32
 8008bac:	b2d8      	uxtb	r0, r3
 8008bae:	4770      	bx	lr
 8008bb0:	0002      	movs	r2, r0
 8008bb2:	3a61      	subs	r2, #97	; 0x61
 8008bb4:	2a05      	cmp	r2, #5
 8008bb6:	d801      	bhi.n	8008bbc <__hexdig_fun+0x1c>
 8008bb8:	3b47      	subs	r3, #71	; 0x47
 8008bba:	e7f7      	b.n	8008bac <__hexdig_fun+0xc>
 8008bbc:	001a      	movs	r2, r3
 8008bbe:	3a41      	subs	r2, #65	; 0x41
 8008bc0:	2000      	movs	r0, #0
 8008bc2:	2a05      	cmp	r2, #5
 8008bc4:	d8f3      	bhi.n	8008bae <__hexdig_fun+0xe>
 8008bc6:	3b27      	subs	r3, #39	; 0x27
 8008bc8:	e7f0      	b.n	8008bac <__hexdig_fun+0xc>
	...

08008bcc <__gethex>:
 8008bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bce:	b08d      	sub	sp, #52	; 0x34
 8008bd0:	930a      	str	r3, [sp, #40]	; 0x28
 8008bd2:	4bbd      	ldr	r3, [pc, #756]	; (8008ec8 <__gethex+0x2fc>)
 8008bd4:	9005      	str	r0, [sp, #20]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	9109      	str	r1, [sp, #36]	; 0x24
 8008bda:	0018      	movs	r0, r3
 8008bdc:	9202      	str	r2, [sp, #8]
 8008bde:	9307      	str	r3, [sp, #28]
 8008be0:	f7f7 fa92 	bl	8000108 <strlen>
 8008be4:	2202      	movs	r2, #2
 8008be6:	9b07      	ldr	r3, [sp, #28]
 8008be8:	4252      	negs	r2, r2
 8008bea:	181b      	adds	r3, r3, r0
 8008bec:	3b01      	subs	r3, #1
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	9003      	str	r0, [sp, #12]
 8008bf2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008bf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bf6:	6819      	ldr	r1, [r3, #0]
 8008bf8:	1c8b      	adds	r3, r1, #2
 8008bfa:	1a52      	subs	r2, r2, r1
 8008bfc:	18d1      	adds	r1, r2, r3
 8008bfe:	9301      	str	r3, [sp, #4]
 8008c00:	9108      	str	r1, [sp, #32]
 8008c02:	9901      	ldr	r1, [sp, #4]
 8008c04:	3301      	adds	r3, #1
 8008c06:	7808      	ldrb	r0, [r1, #0]
 8008c08:	2830      	cmp	r0, #48	; 0x30
 8008c0a:	d0f7      	beq.n	8008bfc <__gethex+0x30>
 8008c0c:	f7ff ffc8 	bl	8008ba0 <__hexdig_fun>
 8008c10:	1e04      	subs	r4, r0, #0
 8008c12:	d13e      	bne.n	8008c92 <__gethex+0xc6>
 8008c14:	9a03      	ldr	r2, [sp, #12]
 8008c16:	9907      	ldr	r1, [sp, #28]
 8008c18:	9801      	ldr	r0, [sp, #4]
 8008c1a:	f001 fa0d 	bl	800a038 <strncmp>
 8008c1e:	1e07      	subs	r7, r0, #0
 8008c20:	d000      	beq.n	8008c24 <__gethex+0x58>
 8008c22:	e06f      	b.n	8008d04 <__gethex+0x138>
 8008c24:	9b01      	ldr	r3, [sp, #4]
 8008c26:	9a03      	ldr	r2, [sp, #12]
 8008c28:	5c98      	ldrb	r0, [r3, r2]
 8008c2a:	189d      	adds	r5, r3, r2
 8008c2c:	f7ff ffb8 	bl	8008ba0 <__hexdig_fun>
 8008c30:	2301      	movs	r3, #1
 8008c32:	9304      	str	r3, [sp, #16]
 8008c34:	2800      	cmp	r0, #0
 8008c36:	d034      	beq.n	8008ca2 <__gethex+0xd6>
 8008c38:	9501      	str	r5, [sp, #4]
 8008c3a:	9b01      	ldr	r3, [sp, #4]
 8008c3c:	7818      	ldrb	r0, [r3, #0]
 8008c3e:	2830      	cmp	r0, #48	; 0x30
 8008c40:	d009      	beq.n	8008c56 <__gethex+0x8a>
 8008c42:	f7ff ffad 	bl	8008ba0 <__hexdig_fun>
 8008c46:	4243      	negs	r3, r0
 8008c48:	4143      	adcs	r3, r0
 8008c4a:	9304      	str	r3, [sp, #16]
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	002c      	movs	r4, r5
 8008c50:	9308      	str	r3, [sp, #32]
 8008c52:	9d01      	ldr	r5, [sp, #4]
 8008c54:	e004      	b.n	8008c60 <__gethex+0x94>
 8008c56:	9b01      	ldr	r3, [sp, #4]
 8008c58:	3301      	adds	r3, #1
 8008c5a:	9301      	str	r3, [sp, #4]
 8008c5c:	e7ed      	b.n	8008c3a <__gethex+0x6e>
 8008c5e:	3501      	adds	r5, #1
 8008c60:	7828      	ldrb	r0, [r5, #0]
 8008c62:	f7ff ff9d 	bl	8008ba0 <__hexdig_fun>
 8008c66:	1e07      	subs	r7, r0, #0
 8008c68:	d1f9      	bne.n	8008c5e <__gethex+0x92>
 8008c6a:	0028      	movs	r0, r5
 8008c6c:	9a03      	ldr	r2, [sp, #12]
 8008c6e:	9907      	ldr	r1, [sp, #28]
 8008c70:	f001 f9e2 	bl	800a038 <strncmp>
 8008c74:	2800      	cmp	r0, #0
 8008c76:	d112      	bne.n	8008c9e <__gethex+0xd2>
 8008c78:	2c00      	cmp	r4, #0
 8008c7a:	d107      	bne.n	8008c8c <__gethex+0xc0>
 8008c7c:	9b03      	ldr	r3, [sp, #12]
 8008c7e:	18ed      	adds	r5, r5, r3
 8008c80:	002c      	movs	r4, r5
 8008c82:	7828      	ldrb	r0, [r5, #0]
 8008c84:	f7ff ff8c 	bl	8008ba0 <__hexdig_fun>
 8008c88:	2800      	cmp	r0, #0
 8008c8a:	d106      	bne.n	8008c9a <__gethex+0xce>
 8008c8c:	1b67      	subs	r7, r4, r5
 8008c8e:	00bf      	lsls	r7, r7, #2
 8008c90:	e007      	b.n	8008ca2 <__gethex+0xd6>
 8008c92:	2300      	movs	r3, #0
 8008c94:	001c      	movs	r4, r3
 8008c96:	9304      	str	r3, [sp, #16]
 8008c98:	e7db      	b.n	8008c52 <__gethex+0x86>
 8008c9a:	3501      	adds	r5, #1
 8008c9c:	e7f1      	b.n	8008c82 <__gethex+0xb6>
 8008c9e:	2c00      	cmp	r4, #0
 8008ca0:	d1f4      	bne.n	8008c8c <__gethex+0xc0>
 8008ca2:	2220      	movs	r2, #32
 8008ca4:	782b      	ldrb	r3, [r5, #0]
 8008ca6:	002e      	movs	r6, r5
 8008ca8:	4393      	bics	r3, r2
 8008caa:	2b50      	cmp	r3, #80	; 0x50
 8008cac:	d11d      	bne.n	8008cea <__gethex+0x11e>
 8008cae:	786b      	ldrb	r3, [r5, #1]
 8008cb0:	2b2b      	cmp	r3, #43	; 0x2b
 8008cb2:	d02c      	beq.n	8008d0e <__gethex+0x142>
 8008cb4:	2b2d      	cmp	r3, #45	; 0x2d
 8008cb6:	d02e      	beq.n	8008d16 <__gethex+0x14a>
 8008cb8:	2300      	movs	r3, #0
 8008cba:	1c6e      	adds	r6, r5, #1
 8008cbc:	9306      	str	r3, [sp, #24]
 8008cbe:	7830      	ldrb	r0, [r6, #0]
 8008cc0:	f7ff ff6e 	bl	8008ba0 <__hexdig_fun>
 8008cc4:	1e43      	subs	r3, r0, #1
 8008cc6:	b2db      	uxtb	r3, r3
 8008cc8:	2b18      	cmp	r3, #24
 8008cca:	d82b      	bhi.n	8008d24 <__gethex+0x158>
 8008ccc:	3810      	subs	r0, #16
 8008cce:	0004      	movs	r4, r0
 8008cd0:	7870      	ldrb	r0, [r6, #1]
 8008cd2:	f7ff ff65 	bl	8008ba0 <__hexdig_fun>
 8008cd6:	1e43      	subs	r3, r0, #1
 8008cd8:	b2db      	uxtb	r3, r3
 8008cda:	3601      	adds	r6, #1
 8008cdc:	2b18      	cmp	r3, #24
 8008cde:	d91c      	bls.n	8008d1a <__gethex+0x14e>
 8008ce0:	9b06      	ldr	r3, [sp, #24]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d000      	beq.n	8008ce8 <__gethex+0x11c>
 8008ce6:	4264      	negs	r4, r4
 8008ce8:	193f      	adds	r7, r7, r4
 8008cea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cec:	601e      	str	r6, [r3, #0]
 8008cee:	9b04      	ldr	r3, [sp, #16]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d019      	beq.n	8008d28 <__gethex+0x15c>
 8008cf4:	2600      	movs	r6, #0
 8008cf6:	9b08      	ldr	r3, [sp, #32]
 8008cf8:	42b3      	cmp	r3, r6
 8008cfa:	d100      	bne.n	8008cfe <__gethex+0x132>
 8008cfc:	3606      	adds	r6, #6
 8008cfe:	0030      	movs	r0, r6
 8008d00:	b00d      	add	sp, #52	; 0x34
 8008d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d04:	2301      	movs	r3, #1
 8008d06:	0027      	movs	r7, r4
 8008d08:	9d01      	ldr	r5, [sp, #4]
 8008d0a:	9304      	str	r3, [sp, #16]
 8008d0c:	e7c9      	b.n	8008ca2 <__gethex+0xd6>
 8008d0e:	2300      	movs	r3, #0
 8008d10:	9306      	str	r3, [sp, #24]
 8008d12:	1cae      	adds	r6, r5, #2
 8008d14:	e7d3      	b.n	8008cbe <__gethex+0xf2>
 8008d16:	2301      	movs	r3, #1
 8008d18:	e7fa      	b.n	8008d10 <__gethex+0x144>
 8008d1a:	230a      	movs	r3, #10
 8008d1c:	435c      	muls	r4, r3
 8008d1e:	1824      	adds	r4, r4, r0
 8008d20:	3c10      	subs	r4, #16
 8008d22:	e7d5      	b.n	8008cd0 <__gethex+0x104>
 8008d24:	002e      	movs	r6, r5
 8008d26:	e7e0      	b.n	8008cea <__gethex+0x11e>
 8008d28:	9b01      	ldr	r3, [sp, #4]
 8008d2a:	9904      	ldr	r1, [sp, #16]
 8008d2c:	1aeb      	subs	r3, r5, r3
 8008d2e:	3b01      	subs	r3, #1
 8008d30:	2b07      	cmp	r3, #7
 8008d32:	dc0a      	bgt.n	8008d4a <__gethex+0x17e>
 8008d34:	9805      	ldr	r0, [sp, #20]
 8008d36:	f000 fa85 	bl	8009244 <_Balloc>
 8008d3a:	1e04      	subs	r4, r0, #0
 8008d3c:	d108      	bne.n	8008d50 <__gethex+0x184>
 8008d3e:	0002      	movs	r2, r0
 8008d40:	21de      	movs	r1, #222	; 0xde
 8008d42:	4b62      	ldr	r3, [pc, #392]	; (8008ecc <__gethex+0x300>)
 8008d44:	4862      	ldr	r0, [pc, #392]	; (8008ed0 <__gethex+0x304>)
 8008d46:	f001 f995 	bl	800a074 <__assert_func>
 8008d4a:	3101      	adds	r1, #1
 8008d4c:	105b      	asrs	r3, r3, #1
 8008d4e:	e7ef      	b.n	8008d30 <__gethex+0x164>
 8008d50:	0003      	movs	r3, r0
 8008d52:	3314      	adds	r3, #20
 8008d54:	9304      	str	r3, [sp, #16]
 8008d56:	9309      	str	r3, [sp, #36]	; 0x24
 8008d58:	2300      	movs	r3, #0
 8008d5a:	001e      	movs	r6, r3
 8008d5c:	9306      	str	r3, [sp, #24]
 8008d5e:	9b01      	ldr	r3, [sp, #4]
 8008d60:	42ab      	cmp	r3, r5
 8008d62:	d340      	bcc.n	8008de6 <__gethex+0x21a>
 8008d64:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008d66:	9b04      	ldr	r3, [sp, #16]
 8008d68:	c540      	stmia	r5!, {r6}
 8008d6a:	1aed      	subs	r5, r5, r3
 8008d6c:	10ad      	asrs	r5, r5, #2
 8008d6e:	0030      	movs	r0, r6
 8008d70:	6125      	str	r5, [r4, #16]
 8008d72:	f000 fb5f 	bl	8009434 <__hi0bits>
 8008d76:	9b02      	ldr	r3, [sp, #8]
 8008d78:	016d      	lsls	r5, r5, #5
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	1a2e      	subs	r6, r5, r0
 8008d7e:	9301      	str	r3, [sp, #4]
 8008d80:	429e      	cmp	r6, r3
 8008d82:	dd5a      	ble.n	8008e3a <__gethex+0x26e>
 8008d84:	1af6      	subs	r6, r6, r3
 8008d86:	0031      	movs	r1, r6
 8008d88:	0020      	movs	r0, r4
 8008d8a:	f000 ff02 	bl	8009b92 <__any_on>
 8008d8e:	1e05      	subs	r5, r0, #0
 8008d90:	d016      	beq.n	8008dc0 <__gethex+0x1f4>
 8008d92:	2501      	movs	r5, #1
 8008d94:	211f      	movs	r1, #31
 8008d96:	0028      	movs	r0, r5
 8008d98:	1e73      	subs	r3, r6, #1
 8008d9a:	4019      	ands	r1, r3
 8008d9c:	4088      	lsls	r0, r1
 8008d9e:	0001      	movs	r1, r0
 8008da0:	115a      	asrs	r2, r3, #5
 8008da2:	9804      	ldr	r0, [sp, #16]
 8008da4:	0092      	lsls	r2, r2, #2
 8008da6:	5812      	ldr	r2, [r2, r0]
 8008da8:	420a      	tst	r2, r1
 8008daa:	d009      	beq.n	8008dc0 <__gethex+0x1f4>
 8008dac:	42ab      	cmp	r3, r5
 8008dae:	dd06      	ble.n	8008dbe <__gethex+0x1f2>
 8008db0:	0020      	movs	r0, r4
 8008db2:	1eb1      	subs	r1, r6, #2
 8008db4:	f000 feed 	bl	8009b92 <__any_on>
 8008db8:	3502      	adds	r5, #2
 8008dba:	2800      	cmp	r0, #0
 8008dbc:	d100      	bne.n	8008dc0 <__gethex+0x1f4>
 8008dbe:	2502      	movs	r5, #2
 8008dc0:	0031      	movs	r1, r6
 8008dc2:	0020      	movs	r0, r4
 8008dc4:	f7ff fe98 	bl	8008af8 <rshift>
 8008dc8:	19bf      	adds	r7, r7, r6
 8008dca:	9b02      	ldr	r3, [sp, #8]
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	9303      	str	r3, [sp, #12]
 8008dd0:	42bb      	cmp	r3, r7
 8008dd2:	da42      	bge.n	8008e5a <__gethex+0x28e>
 8008dd4:	0021      	movs	r1, r4
 8008dd6:	9805      	ldr	r0, [sp, #20]
 8008dd8:	f000 fa78 	bl	80092cc <_Bfree>
 8008ddc:	2300      	movs	r3, #0
 8008dde:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008de0:	26a3      	movs	r6, #163	; 0xa3
 8008de2:	6013      	str	r3, [r2, #0]
 8008de4:	e78b      	b.n	8008cfe <__gethex+0x132>
 8008de6:	1e6b      	subs	r3, r5, #1
 8008de8:	9308      	str	r3, [sp, #32]
 8008dea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d014      	beq.n	8008e1c <__gethex+0x250>
 8008df2:	9b06      	ldr	r3, [sp, #24]
 8008df4:	2b20      	cmp	r3, #32
 8008df6:	d104      	bne.n	8008e02 <__gethex+0x236>
 8008df8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dfa:	c340      	stmia	r3!, {r6}
 8008dfc:	2600      	movs	r6, #0
 8008dfe:	9309      	str	r3, [sp, #36]	; 0x24
 8008e00:	9606      	str	r6, [sp, #24]
 8008e02:	9b08      	ldr	r3, [sp, #32]
 8008e04:	7818      	ldrb	r0, [r3, #0]
 8008e06:	f7ff fecb 	bl	8008ba0 <__hexdig_fun>
 8008e0a:	230f      	movs	r3, #15
 8008e0c:	4018      	ands	r0, r3
 8008e0e:	9b06      	ldr	r3, [sp, #24]
 8008e10:	9d08      	ldr	r5, [sp, #32]
 8008e12:	4098      	lsls	r0, r3
 8008e14:	3304      	adds	r3, #4
 8008e16:	4306      	orrs	r6, r0
 8008e18:	9306      	str	r3, [sp, #24]
 8008e1a:	e7a0      	b.n	8008d5e <__gethex+0x192>
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	9a03      	ldr	r2, [sp, #12]
 8008e20:	1a9d      	subs	r5, r3, r2
 8008e22:	9b08      	ldr	r3, [sp, #32]
 8008e24:	195d      	adds	r5, r3, r5
 8008e26:	9b01      	ldr	r3, [sp, #4]
 8008e28:	429d      	cmp	r5, r3
 8008e2a:	d3e2      	bcc.n	8008df2 <__gethex+0x226>
 8008e2c:	0028      	movs	r0, r5
 8008e2e:	9907      	ldr	r1, [sp, #28]
 8008e30:	f001 f902 	bl	800a038 <strncmp>
 8008e34:	2800      	cmp	r0, #0
 8008e36:	d1dc      	bne.n	8008df2 <__gethex+0x226>
 8008e38:	e791      	b.n	8008d5e <__gethex+0x192>
 8008e3a:	9b01      	ldr	r3, [sp, #4]
 8008e3c:	2500      	movs	r5, #0
 8008e3e:	429e      	cmp	r6, r3
 8008e40:	dac3      	bge.n	8008dca <__gethex+0x1fe>
 8008e42:	1b9e      	subs	r6, r3, r6
 8008e44:	0021      	movs	r1, r4
 8008e46:	0032      	movs	r2, r6
 8008e48:	9805      	ldr	r0, [sp, #20]
 8008e4a:	f000 fc5d 	bl	8009708 <__lshift>
 8008e4e:	0003      	movs	r3, r0
 8008e50:	3314      	adds	r3, #20
 8008e52:	0004      	movs	r4, r0
 8008e54:	1bbf      	subs	r7, r7, r6
 8008e56:	9304      	str	r3, [sp, #16]
 8008e58:	e7b7      	b.n	8008dca <__gethex+0x1fe>
 8008e5a:	9b02      	ldr	r3, [sp, #8]
 8008e5c:	685e      	ldr	r6, [r3, #4]
 8008e5e:	42be      	cmp	r6, r7
 8008e60:	dd71      	ble.n	8008f46 <__gethex+0x37a>
 8008e62:	9b01      	ldr	r3, [sp, #4]
 8008e64:	1bf6      	subs	r6, r6, r7
 8008e66:	42b3      	cmp	r3, r6
 8008e68:	dc38      	bgt.n	8008edc <__gethex+0x310>
 8008e6a:	9b02      	ldr	r3, [sp, #8]
 8008e6c:	68db      	ldr	r3, [r3, #12]
 8008e6e:	2b02      	cmp	r3, #2
 8008e70:	d026      	beq.n	8008ec0 <__gethex+0x2f4>
 8008e72:	2b03      	cmp	r3, #3
 8008e74:	d02e      	beq.n	8008ed4 <__gethex+0x308>
 8008e76:	2b01      	cmp	r3, #1
 8008e78:	d119      	bne.n	8008eae <__gethex+0x2e2>
 8008e7a:	9b01      	ldr	r3, [sp, #4]
 8008e7c:	42b3      	cmp	r3, r6
 8008e7e:	d116      	bne.n	8008eae <__gethex+0x2e2>
 8008e80:	2b01      	cmp	r3, #1
 8008e82:	d10d      	bne.n	8008ea0 <__gethex+0x2d4>
 8008e84:	9b02      	ldr	r3, [sp, #8]
 8008e86:	2662      	movs	r6, #98	; 0x62
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	9301      	str	r3, [sp, #4]
 8008e8c:	9a01      	ldr	r2, [sp, #4]
 8008e8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e90:	601a      	str	r2, [r3, #0]
 8008e92:	2301      	movs	r3, #1
 8008e94:	9a04      	ldr	r2, [sp, #16]
 8008e96:	6123      	str	r3, [r4, #16]
 8008e98:	6013      	str	r3, [r2, #0]
 8008e9a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008e9c:	601c      	str	r4, [r3, #0]
 8008e9e:	e72e      	b.n	8008cfe <__gethex+0x132>
 8008ea0:	9901      	ldr	r1, [sp, #4]
 8008ea2:	0020      	movs	r0, r4
 8008ea4:	3901      	subs	r1, #1
 8008ea6:	f000 fe74 	bl	8009b92 <__any_on>
 8008eaa:	2800      	cmp	r0, #0
 8008eac:	d1ea      	bne.n	8008e84 <__gethex+0x2b8>
 8008eae:	0021      	movs	r1, r4
 8008eb0:	9805      	ldr	r0, [sp, #20]
 8008eb2:	f000 fa0b 	bl	80092cc <_Bfree>
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008eba:	2650      	movs	r6, #80	; 0x50
 8008ebc:	6013      	str	r3, [r2, #0]
 8008ebe:	e71e      	b.n	8008cfe <__gethex+0x132>
 8008ec0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d1f3      	bne.n	8008eae <__gethex+0x2e2>
 8008ec6:	e7dd      	b.n	8008e84 <__gethex+0x2b8>
 8008ec8:	0800b178 	.word	0x0800b178
 8008ecc:	0800b0fc 	.word	0x0800b0fc
 8008ed0:	0800b10d 	.word	0x0800b10d
 8008ed4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d1d4      	bne.n	8008e84 <__gethex+0x2b8>
 8008eda:	e7e8      	b.n	8008eae <__gethex+0x2e2>
 8008edc:	1e77      	subs	r7, r6, #1
 8008ede:	2d00      	cmp	r5, #0
 8008ee0:	d12f      	bne.n	8008f42 <__gethex+0x376>
 8008ee2:	2f00      	cmp	r7, #0
 8008ee4:	d004      	beq.n	8008ef0 <__gethex+0x324>
 8008ee6:	0039      	movs	r1, r7
 8008ee8:	0020      	movs	r0, r4
 8008eea:	f000 fe52 	bl	8009b92 <__any_on>
 8008eee:	0005      	movs	r5, r0
 8008ef0:	231f      	movs	r3, #31
 8008ef2:	117a      	asrs	r2, r7, #5
 8008ef4:	401f      	ands	r7, r3
 8008ef6:	3b1e      	subs	r3, #30
 8008ef8:	40bb      	lsls	r3, r7
 8008efa:	9904      	ldr	r1, [sp, #16]
 8008efc:	0092      	lsls	r2, r2, #2
 8008efe:	5852      	ldr	r2, [r2, r1]
 8008f00:	421a      	tst	r2, r3
 8008f02:	d001      	beq.n	8008f08 <__gethex+0x33c>
 8008f04:	2302      	movs	r3, #2
 8008f06:	431d      	orrs	r5, r3
 8008f08:	9b01      	ldr	r3, [sp, #4]
 8008f0a:	0031      	movs	r1, r6
 8008f0c:	1b9b      	subs	r3, r3, r6
 8008f0e:	2602      	movs	r6, #2
 8008f10:	0020      	movs	r0, r4
 8008f12:	9301      	str	r3, [sp, #4]
 8008f14:	f7ff fdf0 	bl	8008af8 <rshift>
 8008f18:	9b02      	ldr	r3, [sp, #8]
 8008f1a:	685f      	ldr	r7, [r3, #4]
 8008f1c:	2d00      	cmp	r5, #0
 8008f1e:	d041      	beq.n	8008fa4 <__gethex+0x3d8>
 8008f20:	9b02      	ldr	r3, [sp, #8]
 8008f22:	68db      	ldr	r3, [r3, #12]
 8008f24:	2b02      	cmp	r3, #2
 8008f26:	d010      	beq.n	8008f4a <__gethex+0x37e>
 8008f28:	2b03      	cmp	r3, #3
 8008f2a:	d012      	beq.n	8008f52 <__gethex+0x386>
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d106      	bne.n	8008f3e <__gethex+0x372>
 8008f30:	07aa      	lsls	r2, r5, #30
 8008f32:	d504      	bpl.n	8008f3e <__gethex+0x372>
 8008f34:	9a04      	ldr	r2, [sp, #16]
 8008f36:	6810      	ldr	r0, [r2, #0]
 8008f38:	4305      	orrs	r5, r0
 8008f3a:	421d      	tst	r5, r3
 8008f3c:	d10c      	bne.n	8008f58 <__gethex+0x38c>
 8008f3e:	2310      	movs	r3, #16
 8008f40:	e02f      	b.n	8008fa2 <__gethex+0x3d6>
 8008f42:	2501      	movs	r5, #1
 8008f44:	e7d4      	b.n	8008ef0 <__gethex+0x324>
 8008f46:	2601      	movs	r6, #1
 8008f48:	e7e8      	b.n	8008f1c <__gethex+0x350>
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008f4e:	1a9b      	subs	r3, r3, r2
 8008f50:	9313      	str	r3, [sp, #76]	; 0x4c
 8008f52:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d0f2      	beq.n	8008f3e <__gethex+0x372>
 8008f58:	6923      	ldr	r3, [r4, #16]
 8008f5a:	2000      	movs	r0, #0
 8008f5c:	9303      	str	r3, [sp, #12]
 8008f5e:	009b      	lsls	r3, r3, #2
 8008f60:	9304      	str	r3, [sp, #16]
 8008f62:	0023      	movs	r3, r4
 8008f64:	9a04      	ldr	r2, [sp, #16]
 8008f66:	3314      	adds	r3, #20
 8008f68:	1899      	adds	r1, r3, r2
 8008f6a:	681a      	ldr	r2, [r3, #0]
 8008f6c:	1c55      	adds	r5, r2, #1
 8008f6e:	d01e      	beq.n	8008fae <__gethex+0x3e2>
 8008f70:	3201      	adds	r2, #1
 8008f72:	601a      	str	r2, [r3, #0]
 8008f74:	0023      	movs	r3, r4
 8008f76:	3314      	adds	r3, #20
 8008f78:	2e02      	cmp	r6, #2
 8008f7a:	d140      	bne.n	8008ffe <__gethex+0x432>
 8008f7c:	9a02      	ldr	r2, [sp, #8]
 8008f7e:	9901      	ldr	r1, [sp, #4]
 8008f80:	6812      	ldr	r2, [r2, #0]
 8008f82:	3a01      	subs	r2, #1
 8008f84:	428a      	cmp	r2, r1
 8008f86:	d10b      	bne.n	8008fa0 <__gethex+0x3d4>
 8008f88:	114a      	asrs	r2, r1, #5
 8008f8a:	211f      	movs	r1, #31
 8008f8c:	9801      	ldr	r0, [sp, #4]
 8008f8e:	0092      	lsls	r2, r2, #2
 8008f90:	4001      	ands	r1, r0
 8008f92:	2001      	movs	r0, #1
 8008f94:	0005      	movs	r5, r0
 8008f96:	408d      	lsls	r5, r1
 8008f98:	58d3      	ldr	r3, [r2, r3]
 8008f9a:	422b      	tst	r3, r5
 8008f9c:	d000      	beq.n	8008fa0 <__gethex+0x3d4>
 8008f9e:	2601      	movs	r6, #1
 8008fa0:	2320      	movs	r3, #32
 8008fa2:	431e      	orrs	r6, r3
 8008fa4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008fa6:	601c      	str	r4, [r3, #0]
 8008fa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008faa:	601f      	str	r7, [r3, #0]
 8008fac:	e6a7      	b.n	8008cfe <__gethex+0x132>
 8008fae:	c301      	stmia	r3!, {r0}
 8008fb0:	4299      	cmp	r1, r3
 8008fb2:	d8da      	bhi.n	8008f6a <__gethex+0x39e>
 8008fb4:	9b03      	ldr	r3, [sp, #12]
 8008fb6:	68a2      	ldr	r2, [r4, #8]
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	db17      	blt.n	8008fec <__gethex+0x420>
 8008fbc:	6863      	ldr	r3, [r4, #4]
 8008fbe:	9805      	ldr	r0, [sp, #20]
 8008fc0:	1c59      	adds	r1, r3, #1
 8008fc2:	f000 f93f 	bl	8009244 <_Balloc>
 8008fc6:	1e05      	subs	r5, r0, #0
 8008fc8:	d103      	bne.n	8008fd2 <__gethex+0x406>
 8008fca:	0002      	movs	r2, r0
 8008fcc:	2184      	movs	r1, #132	; 0x84
 8008fce:	4b1c      	ldr	r3, [pc, #112]	; (8009040 <__gethex+0x474>)
 8008fd0:	e6b8      	b.n	8008d44 <__gethex+0x178>
 8008fd2:	0021      	movs	r1, r4
 8008fd4:	6923      	ldr	r3, [r4, #16]
 8008fd6:	310c      	adds	r1, #12
 8008fd8:	1c9a      	adds	r2, r3, #2
 8008fda:	0092      	lsls	r2, r2, #2
 8008fdc:	300c      	adds	r0, #12
 8008fde:	f000 f928 	bl	8009232 <memcpy>
 8008fe2:	0021      	movs	r1, r4
 8008fe4:	9805      	ldr	r0, [sp, #20]
 8008fe6:	f000 f971 	bl	80092cc <_Bfree>
 8008fea:	002c      	movs	r4, r5
 8008fec:	6923      	ldr	r3, [r4, #16]
 8008fee:	1c5a      	adds	r2, r3, #1
 8008ff0:	6122      	str	r2, [r4, #16]
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	3304      	adds	r3, #4
 8008ff6:	009b      	lsls	r3, r3, #2
 8008ff8:	18e3      	adds	r3, r4, r3
 8008ffa:	605a      	str	r2, [r3, #4]
 8008ffc:	e7ba      	b.n	8008f74 <__gethex+0x3a8>
 8008ffe:	6922      	ldr	r2, [r4, #16]
 8009000:	9903      	ldr	r1, [sp, #12]
 8009002:	428a      	cmp	r2, r1
 8009004:	dd09      	ble.n	800901a <__gethex+0x44e>
 8009006:	2101      	movs	r1, #1
 8009008:	0020      	movs	r0, r4
 800900a:	f7ff fd75 	bl	8008af8 <rshift>
 800900e:	9b02      	ldr	r3, [sp, #8]
 8009010:	3701      	adds	r7, #1
 8009012:	689b      	ldr	r3, [r3, #8]
 8009014:	42bb      	cmp	r3, r7
 8009016:	dac2      	bge.n	8008f9e <__gethex+0x3d2>
 8009018:	e6dc      	b.n	8008dd4 <__gethex+0x208>
 800901a:	221f      	movs	r2, #31
 800901c:	9d01      	ldr	r5, [sp, #4]
 800901e:	9901      	ldr	r1, [sp, #4]
 8009020:	2601      	movs	r6, #1
 8009022:	4015      	ands	r5, r2
 8009024:	4211      	tst	r1, r2
 8009026:	d0bb      	beq.n	8008fa0 <__gethex+0x3d4>
 8009028:	9a04      	ldr	r2, [sp, #16]
 800902a:	189b      	adds	r3, r3, r2
 800902c:	3b04      	subs	r3, #4
 800902e:	6818      	ldr	r0, [r3, #0]
 8009030:	f000 fa00 	bl	8009434 <__hi0bits>
 8009034:	2320      	movs	r3, #32
 8009036:	1b5d      	subs	r5, r3, r5
 8009038:	42a8      	cmp	r0, r5
 800903a:	dbe4      	blt.n	8009006 <__gethex+0x43a>
 800903c:	e7b0      	b.n	8008fa0 <__gethex+0x3d4>
 800903e:	46c0      	nop			; (mov r8, r8)
 8009040:	0800b0fc 	.word	0x0800b0fc

08009044 <L_shift>:
 8009044:	2308      	movs	r3, #8
 8009046:	b570      	push	{r4, r5, r6, lr}
 8009048:	2520      	movs	r5, #32
 800904a:	1a9a      	subs	r2, r3, r2
 800904c:	0092      	lsls	r2, r2, #2
 800904e:	1aad      	subs	r5, r5, r2
 8009050:	6843      	ldr	r3, [r0, #4]
 8009052:	6806      	ldr	r6, [r0, #0]
 8009054:	001c      	movs	r4, r3
 8009056:	40ac      	lsls	r4, r5
 8009058:	40d3      	lsrs	r3, r2
 800905a:	4334      	orrs	r4, r6
 800905c:	6004      	str	r4, [r0, #0]
 800905e:	6043      	str	r3, [r0, #4]
 8009060:	3004      	adds	r0, #4
 8009062:	4288      	cmp	r0, r1
 8009064:	d3f4      	bcc.n	8009050 <L_shift+0xc>
 8009066:	bd70      	pop	{r4, r5, r6, pc}

08009068 <__match>:
 8009068:	b530      	push	{r4, r5, lr}
 800906a:	6803      	ldr	r3, [r0, #0]
 800906c:	780c      	ldrb	r4, [r1, #0]
 800906e:	3301      	adds	r3, #1
 8009070:	2c00      	cmp	r4, #0
 8009072:	d102      	bne.n	800907a <__match+0x12>
 8009074:	6003      	str	r3, [r0, #0]
 8009076:	2001      	movs	r0, #1
 8009078:	bd30      	pop	{r4, r5, pc}
 800907a:	781a      	ldrb	r2, [r3, #0]
 800907c:	0015      	movs	r5, r2
 800907e:	3d41      	subs	r5, #65	; 0x41
 8009080:	2d19      	cmp	r5, #25
 8009082:	d800      	bhi.n	8009086 <__match+0x1e>
 8009084:	3220      	adds	r2, #32
 8009086:	3101      	adds	r1, #1
 8009088:	42a2      	cmp	r2, r4
 800908a:	d0ef      	beq.n	800906c <__match+0x4>
 800908c:	2000      	movs	r0, #0
 800908e:	e7f3      	b.n	8009078 <__match+0x10>

08009090 <__hexnan>:
 8009090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009092:	680b      	ldr	r3, [r1, #0]
 8009094:	b08b      	sub	sp, #44	; 0x2c
 8009096:	115c      	asrs	r4, r3, #5
 8009098:	00a4      	lsls	r4, r4, #2
 800909a:	9201      	str	r2, [sp, #4]
 800909c:	1912      	adds	r2, r2, r4
 800909e:	0019      	movs	r1, r3
 80090a0:	9202      	str	r2, [sp, #8]
 80090a2:	221f      	movs	r2, #31
 80090a4:	4011      	ands	r1, r2
 80090a6:	9008      	str	r0, [sp, #32]
 80090a8:	9106      	str	r1, [sp, #24]
 80090aa:	4213      	tst	r3, r2
 80090ac:	d002      	beq.n	80090b4 <__hexnan+0x24>
 80090ae:	9b02      	ldr	r3, [sp, #8]
 80090b0:	3304      	adds	r3, #4
 80090b2:	9302      	str	r3, [sp, #8]
 80090b4:	9b02      	ldr	r3, [sp, #8]
 80090b6:	2500      	movs	r5, #0
 80090b8:	1f1e      	subs	r6, r3, #4
 80090ba:	0037      	movs	r7, r6
 80090bc:	0034      	movs	r4, r6
 80090be:	9b08      	ldr	r3, [sp, #32]
 80090c0:	6035      	str	r5, [r6, #0]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	9507      	str	r5, [sp, #28]
 80090c6:	9305      	str	r3, [sp, #20]
 80090c8:	9503      	str	r5, [sp, #12]
 80090ca:	9b05      	ldr	r3, [sp, #20]
 80090cc:	3301      	adds	r3, #1
 80090ce:	9309      	str	r3, [sp, #36]	; 0x24
 80090d0:	9b05      	ldr	r3, [sp, #20]
 80090d2:	785b      	ldrb	r3, [r3, #1]
 80090d4:	9304      	str	r3, [sp, #16]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d028      	beq.n	800912c <__hexnan+0x9c>
 80090da:	9804      	ldr	r0, [sp, #16]
 80090dc:	f7ff fd60 	bl	8008ba0 <__hexdig_fun>
 80090e0:	2800      	cmp	r0, #0
 80090e2:	d154      	bne.n	800918e <__hexnan+0xfe>
 80090e4:	9b04      	ldr	r3, [sp, #16]
 80090e6:	2b20      	cmp	r3, #32
 80090e8:	d819      	bhi.n	800911e <__hexnan+0x8e>
 80090ea:	9b03      	ldr	r3, [sp, #12]
 80090ec:	9a07      	ldr	r2, [sp, #28]
 80090ee:	4293      	cmp	r3, r2
 80090f0:	dd12      	ble.n	8009118 <__hexnan+0x88>
 80090f2:	42bc      	cmp	r4, r7
 80090f4:	d206      	bcs.n	8009104 <__hexnan+0x74>
 80090f6:	2d07      	cmp	r5, #7
 80090f8:	dc04      	bgt.n	8009104 <__hexnan+0x74>
 80090fa:	002a      	movs	r2, r5
 80090fc:	0039      	movs	r1, r7
 80090fe:	0020      	movs	r0, r4
 8009100:	f7ff ffa0 	bl	8009044 <L_shift>
 8009104:	9b01      	ldr	r3, [sp, #4]
 8009106:	2508      	movs	r5, #8
 8009108:	429c      	cmp	r4, r3
 800910a:	d905      	bls.n	8009118 <__hexnan+0x88>
 800910c:	1f27      	subs	r7, r4, #4
 800910e:	2500      	movs	r5, #0
 8009110:	003c      	movs	r4, r7
 8009112:	9b03      	ldr	r3, [sp, #12]
 8009114:	603d      	str	r5, [r7, #0]
 8009116:	9307      	str	r3, [sp, #28]
 8009118:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800911a:	9305      	str	r3, [sp, #20]
 800911c:	e7d5      	b.n	80090ca <__hexnan+0x3a>
 800911e:	9b04      	ldr	r3, [sp, #16]
 8009120:	2b29      	cmp	r3, #41	; 0x29
 8009122:	d158      	bne.n	80091d6 <__hexnan+0x146>
 8009124:	9b05      	ldr	r3, [sp, #20]
 8009126:	9a08      	ldr	r2, [sp, #32]
 8009128:	3302      	adds	r3, #2
 800912a:	6013      	str	r3, [r2, #0]
 800912c:	9b03      	ldr	r3, [sp, #12]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d051      	beq.n	80091d6 <__hexnan+0x146>
 8009132:	42bc      	cmp	r4, r7
 8009134:	d206      	bcs.n	8009144 <__hexnan+0xb4>
 8009136:	2d07      	cmp	r5, #7
 8009138:	dc04      	bgt.n	8009144 <__hexnan+0xb4>
 800913a:	002a      	movs	r2, r5
 800913c:	0039      	movs	r1, r7
 800913e:	0020      	movs	r0, r4
 8009140:	f7ff ff80 	bl	8009044 <L_shift>
 8009144:	9b01      	ldr	r3, [sp, #4]
 8009146:	429c      	cmp	r4, r3
 8009148:	d935      	bls.n	80091b6 <__hexnan+0x126>
 800914a:	001a      	movs	r2, r3
 800914c:	0023      	movs	r3, r4
 800914e:	cb02      	ldmia	r3!, {r1}
 8009150:	c202      	stmia	r2!, {r1}
 8009152:	429e      	cmp	r6, r3
 8009154:	d2fb      	bcs.n	800914e <__hexnan+0xbe>
 8009156:	9b02      	ldr	r3, [sp, #8]
 8009158:	1c61      	adds	r1, r4, #1
 800915a:	1eda      	subs	r2, r3, #3
 800915c:	2304      	movs	r3, #4
 800915e:	4291      	cmp	r1, r2
 8009160:	d805      	bhi.n	800916e <__hexnan+0xde>
 8009162:	9b02      	ldr	r3, [sp, #8]
 8009164:	3b04      	subs	r3, #4
 8009166:	1b1c      	subs	r4, r3, r4
 8009168:	08a4      	lsrs	r4, r4, #2
 800916a:	3401      	adds	r4, #1
 800916c:	00a3      	lsls	r3, r4, #2
 800916e:	9a01      	ldr	r2, [sp, #4]
 8009170:	18d4      	adds	r4, r2, r3
 8009172:	2300      	movs	r3, #0
 8009174:	c408      	stmia	r4!, {r3}
 8009176:	42a6      	cmp	r6, r4
 8009178:	d2fc      	bcs.n	8009174 <__hexnan+0xe4>
 800917a:	6833      	ldr	r3, [r6, #0]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d104      	bne.n	800918a <__hexnan+0xfa>
 8009180:	9b01      	ldr	r3, [sp, #4]
 8009182:	429e      	cmp	r6, r3
 8009184:	d125      	bne.n	80091d2 <__hexnan+0x142>
 8009186:	2301      	movs	r3, #1
 8009188:	6033      	str	r3, [r6, #0]
 800918a:	2005      	movs	r0, #5
 800918c:	e024      	b.n	80091d8 <__hexnan+0x148>
 800918e:	9b03      	ldr	r3, [sp, #12]
 8009190:	3501      	adds	r5, #1
 8009192:	3301      	adds	r3, #1
 8009194:	9303      	str	r3, [sp, #12]
 8009196:	2d08      	cmp	r5, #8
 8009198:	dd06      	ble.n	80091a8 <__hexnan+0x118>
 800919a:	9b01      	ldr	r3, [sp, #4]
 800919c:	429c      	cmp	r4, r3
 800919e:	d9bb      	bls.n	8009118 <__hexnan+0x88>
 80091a0:	2300      	movs	r3, #0
 80091a2:	2501      	movs	r5, #1
 80091a4:	3c04      	subs	r4, #4
 80091a6:	6023      	str	r3, [r4, #0]
 80091a8:	220f      	movs	r2, #15
 80091aa:	6823      	ldr	r3, [r4, #0]
 80091ac:	4010      	ands	r0, r2
 80091ae:	011b      	lsls	r3, r3, #4
 80091b0:	4318      	orrs	r0, r3
 80091b2:	6020      	str	r0, [r4, #0]
 80091b4:	e7b0      	b.n	8009118 <__hexnan+0x88>
 80091b6:	9b06      	ldr	r3, [sp, #24]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d0de      	beq.n	800917a <__hexnan+0xea>
 80091bc:	2220      	movs	r2, #32
 80091be:	1ad2      	subs	r2, r2, r3
 80091c0:	2301      	movs	r3, #1
 80091c2:	425b      	negs	r3, r3
 80091c4:	40d3      	lsrs	r3, r2
 80091c6:	9c02      	ldr	r4, [sp, #8]
 80091c8:	3c04      	subs	r4, #4
 80091ca:	6822      	ldr	r2, [r4, #0]
 80091cc:	4013      	ands	r3, r2
 80091ce:	6023      	str	r3, [r4, #0]
 80091d0:	e7d3      	b.n	800917a <__hexnan+0xea>
 80091d2:	3e04      	subs	r6, #4
 80091d4:	e7d1      	b.n	800917a <__hexnan+0xea>
 80091d6:	2004      	movs	r0, #4
 80091d8:	b00b      	add	sp, #44	; 0x2c
 80091da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080091dc <_localeconv_r>:
 80091dc:	4800      	ldr	r0, [pc, #0]	; (80091e0 <_localeconv_r+0x4>)
 80091de:	4770      	bx	lr
 80091e0:	2000016c 	.word	0x2000016c

080091e4 <malloc>:
 80091e4:	b510      	push	{r4, lr}
 80091e6:	4b03      	ldr	r3, [pc, #12]	; (80091f4 <malloc+0x10>)
 80091e8:	0001      	movs	r1, r0
 80091ea:	6818      	ldr	r0, [r3, #0]
 80091ec:	f000 fd4c 	bl	8009c88 <_malloc_r>
 80091f0:	bd10      	pop	{r4, pc}
 80091f2:	46c0      	nop			; (mov r8, r8)
 80091f4:	20000014 	.word	0x20000014

080091f8 <__ascii_mbtowc>:
 80091f8:	b082      	sub	sp, #8
 80091fa:	2900      	cmp	r1, #0
 80091fc:	d100      	bne.n	8009200 <__ascii_mbtowc+0x8>
 80091fe:	a901      	add	r1, sp, #4
 8009200:	1e10      	subs	r0, r2, #0
 8009202:	d006      	beq.n	8009212 <__ascii_mbtowc+0x1a>
 8009204:	2b00      	cmp	r3, #0
 8009206:	d006      	beq.n	8009216 <__ascii_mbtowc+0x1e>
 8009208:	7813      	ldrb	r3, [r2, #0]
 800920a:	600b      	str	r3, [r1, #0]
 800920c:	7810      	ldrb	r0, [r2, #0]
 800920e:	1e43      	subs	r3, r0, #1
 8009210:	4198      	sbcs	r0, r3
 8009212:	b002      	add	sp, #8
 8009214:	4770      	bx	lr
 8009216:	2002      	movs	r0, #2
 8009218:	4240      	negs	r0, r0
 800921a:	e7fa      	b.n	8009212 <__ascii_mbtowc+0x1a>

0800921c <memchr>:
 800921c:	b2c9      	uxtb	r1, r1
 800921e:	1882      	adds	r2, r0, r2
 8009220:	4290      	cmp	r0, r2
 8009222:	d101      	bne.n	8009228 <memchr+0xc>
 8009224:	2000      	movs	r0, #0
 8009226:	4770      	bx	lr
 8009228:	7803      	ldrb	r3, [r0, #0]
 800922a:	428b      	cmp	r3, r1
 800922c:	d0fb      	beq.n	8009226 <memchr+0xa>
 800922e:	3001      	adds	r0, #1
 8009230:	e7f6      	b.n	8009220 <memchr+0x4>

08009232 <memcpy>:
 8009232:	2300      	movs	r3, #0
 8009234:	b510      	push	{r4, lr}
 8009236:	429a      	cmp	r2, r3
 8009238:	d100      	bne.n	800923c <memcpy+0xa>
 800923a:	bd10      	pop	{r4, pc}
 800923c:	5ccc      	ldrb	r4, [r1, r3]
 800923e:	54c4      	strb	r4, [r0, r3]
 8009240:	3301      	adds	r3, #1
 8009242:	e7f8      	b.n	8009236 <memcpy+0x4>

08009244 <_Balloc>:
 8009244:	b570      	push	{r4, r5, r6, lr}
 8009246:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009248:	0006      	movs	r6, r0
 800924a:	000c      	movs	r4, r1
 800924c:	2d00      	cmp	r5, #0
 800924e:	d10e      	bne.n	800926e <_Balloc+0x2a>
 8009250:	2010      	movs	r0, #16
 8009252:	f7ff ffc7 	bl	80091e4 <malloc>
 8009256:	1e02      	subs	r2, r0, #0
 8009258:	6270      	str	r0, [r6, #36]	; 0x24
 800925a:	d104      	bne.n	8009266 <_Balloc+0x22>
 800925c:	2166      	movs	r1, #102	; 0x66
 800925e:	4b19      	ldr	r3, [pc, #100]	; (80092c4 <_Balloc+0x80>)
 8009260:	4819      	ldr	r0, [pc, #100]	; (80092c8 <_Balloc+0x84>)
 8009262:	f000 ff07 	bl	800a074 <__assert_func>
 8009266:	6045      	str	r5, [r0, #4]
 8009268:	6085      	str	r5, [r0, #8]
 800926a:	6005      	str	r5, [r0, #0]
 800926c:	60c5      	str	r5, [r0, #12]
 800926e:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8009270:	68eb      	ldr	r3, [r5, #12]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d013      	beq.n	800929e <_Balloc+0x5a>
 8009276:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009278:	00a2      	lsls	r2, r4, #2
 800927a:	68db      	ldr	r3, [r3, #12]
 800927c:	189b      	adds	r3, r3, r2
 800927e:	6818      	ldr	r0, [r3, #0]
 8009280:	2800      	cmp	r0, #0
 8009282:	d118      	bne.n	80092b6 <_Balloc+0x72>
 8009284:	2101      	movs	r1, #1
 8009286:	000d      	movs	r5, r1
 8009288:	40a5      	lsls	r5, r4
 800928a:	1d6a      	adds	r2, r5, #5
 800928c:	0030      	movs	r0, r6
 800928e:	0092      	lsls	r2, r2, #2
 8009290:	f000 fca2 	bl	8009bd8 <_calloc_r>
 8009294:	2800      	cmp	r0, #0
 8009296:	d00c      	beq.n	80092b2 <_Balloc+0x6e>
 8009298:	6044      	str	r4, [r0, #4]
 800929a:	6085      	str	r5, [r0, #8]
 800929c:	e00d      	b.n	80092ba <_Balloc+0x76>
 800929e:	2221      	movs	r2, #33	; 0x21
 80092a0:	2104      	movs	r1, #4
 80092a2:	0030      	movs	r0, r6
 80092a4:	f000 fc98 	bl	8009bd8 <_calloc_r>
 80092a8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80092aa:	60e8      	str	r0, [r5, #12]
 80092ac:	68db      	ldr	r3, [r3, #12]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d1e1      	bne.n	8009276 <_Balloc+0x32>
 80092b2:	2000      	movs	r0, #0
 80092b4:	bd70      	pop	{r4, r5, r6, pc}
 80092b6:	6802      	ldr	r2, [r0, #0]
 80092b8:	601a      	str	r2, [r3, #0]
 80092ba:	2300      	movs	r3, #0
 80092bc:	6103      	str	r3, [r0, #16]
 80092be:	60c3      	str	r3, [r0, #12]
 80092c0:	e7f8      	b.n	80092b4 <_Balloc+0x70>
 80092c2:	46c0      	nop			; (mov r8, r8)
 80092c4:	0800b086 	.word	0x0800b086
 80092c8:	0800b18c 	.word	0x0800b18c

080092cc <_Bfree>:
 80092cc:	b570      	push	{r4, r5, r6, lr}
 80092ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80092d0:	0005      	movs	r5, r0
 80092d2:	000c      	movs	r4, r1
 80092d4:	2e00      	cmp	r6, #0
 80092d6:	d10e      	bne.n	80092f6 <_Bfree+0x2a>
 80092d8:	2010      	movs	r0, #16
 80092da:	f7ff ff83 	bl	80091e4 <malloc>
 80092de:	1e02      	subs	r2, r0, #0
 80092e0:	6268      	str	r0, [r5, #36]	; 0x24
 80092e2:	d104      	bne.n	80092ee <_Bfree+0x22>
 80092e4:	218a      	movs	r1, #138	; 0x8a
 80092e6:	4b09      	ldr	r3, [pc, #36]	; (800930c <_Bfree+0x40>)
 80092e8:	4809      	ldr	r0, [pc, #36]	; (8009310 <_Bfree+0x44>)
 80092ea:	f000 fec3 	bl	800a074 <__assert_func>
 80092ee:	6046      	str	r6, [r0, #4]
 80092f0:	6086      	str	r6, [r0, #8]
 80092f2:	6006      	str	r6, [r0, #0]
 80092f4:	60c6      	str	r6, [r0, #12]
 80092f6:	2c00      	cmp	r4, #0
 80092f8:	d007      	beq.n	800930a <_Bfree+0x3e>
 80092fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80092fc:	6862      	ldr	r2, [r4, #4]
 80092fe:	68db      	ldr	r3, [r3, #12]
 8009300:	0092      	lsls	r2, r2, #2
 8009302:	189b      	adds	r3, r3, r2
 8009304:	681a      	ldr	r2, [r3, #0]
 8009306:	6022      	str	r2, [r4, #0]
 8009308:	601c      	str	r4, [r3, #0]
 800930a:	bd70      	pop	{r4, r5, r6, pc}
 800930c:	0800b086 	.word	0x0800b086
 8009310:	0800b18c 	.word	0x0800b18c

08009314 <__multadd>:
 8009314:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009316:	000e      	movs	r6, r1
 8009318:	9001      	str	r0, [sp, #4]
 800931a:	000c      	movs	r4, r1
 800931c:	001d      	movs	r5, r3
 800931e:	2000      	movs	r0, #0
 8009320:	690f      	ldr	r7, [r1, #16]
 8009322:	3614      	adds	r6, #20
 8009324:	6833      	ldr	r3, [r6, #0]
 8009326:	3001      	adds	r0, #1
 8009328:	b299      	uxth	r1, r3
 800932a:	4351      	muls	r1, r2
 800932c:	0c1b      	lsrs	r3, r3, #16
 800932e:	4353      	muls	r3, r2
 8009330:	1949      	adds	r1, r1, r5
 8009332:	0c0d      	lsrs	r5, r1, #16
 8009334:	195b      	adds	r3, r3, r5
 8009336:	0c1d      	lsrs	r5, r3, #16
 8009338:	b289      	uxth	r1, r1
 800933a:	041b      	lsls	r3, r3, #16
 800933c:	185b      	adds	r3, r3, r1
 800933e:	c608      	stmia	r6!, {r3}
 8009340:	4287      	cmp	r7, r0
 8009342:	dcef      	bgt.n	8009324 <__multadd+0x10>
 8009344:	2d00      	cmp	r5, #0
 8009346:	d022      	beq.n	800938e <__multadd+0x7a>
 8009348:	68a3      	ldr	r3, [r4, #8]
 800934a:	42bb      	cmp	r3, r7
 800934c:	dc19      	bgt.n	8009382 <__multadd+0x6e>
 800934e:	6863      	ldr	r3, [r4, #4]
 8009350:	9801      	ldr	r0, [sp, #4]
 8009352:	1c59      	adds	r1, r3, #1
 8009354:	f7ff ff76 	bl	8009244 <_Balloc>
 8009358:	1e06      	subs	r6, r0, #0
 800935a:	d105      	bne.n	8009368 <__multadd+0x54>
 800935c:	0002      	movs	r2, r0
 800935e:	21b5      	movs	r1, #181	; 0xb5
 8009360:	4b0c      	ldr	r3, [pc, #48]	; (8009394 <__multadd+0x80>)
 8009362:	480d      	ldr	r0, [pc, #52]	; (8009398 <__multadd+0x84>)
 8009364:	f000 fe86 	bl	800a074 <__assert_func>
 8009368:	0021      	movs	r1, r4
 800936a:	6923      	ldr	r3, [r4, #16]
 800936c:	310c      	adds	r1, #12
 800936e:	1c9a      	adds	r2, r3, #2
 8009370:	0092      	lsls	r2, r2, #2
 8009372:	300c      	adds	r0, #12
 8009374:	f7ff ff5d 	bl	8009232 <memcpy>
 8009378:	0021      	movs	r1, r4
 800937a:	9801      	ldr	r0, [sp, #4]
 800937c:	f7ff ffa6 	bl	80092cc <_Bfree>
 8009380:	0034      	movs	r4, r6
 8009382:	1d3b      	adds	r3, r7, #4
 8009384:	009b      	lsls	r3, r3, #2
 8009386:	18e3      	adds	r3, r4, r3
 8009388:	605d      	str	r5, [r3, #4]
 800938a:	1c7b      	adds	r3, r7, #1
 800938c:	6123      	str	r3, [r4, #16]
 800938e:	0020      	movs	r0, r4
 8009390:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009392:	46c0      	nop			; (mov r8, r8)
 8009394:	0800b0fc 	.word	0x0800b0fc
 8009398:	0800b18c 	.word	0x0800b18c

0800939c <__s2b>:
 800939c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800939e:	0006      	movs	r6, r0
 80093a0:	0018      	movs	r0, r3
 80093a2:	000c      	movs	r4, r1
 80093a4:	3008      	adds	r0, #8
 80093a6:	2109      	movs	r1, #9
 80093a8:	9301      	str	r3, [sp, #4]
 80093aa:	0015      	movs	r5, r2
 80093ac:	f7f6 ff52 	bl	8000254 <__divsi3>
 80093b0:	2301      	movs	r3, #1
 80093b2:	2100      	movs	r1, #0
 80093b4:	4283      	cmp	r3, r0
 80093b6:	db0a      	blt.n	80093ce <__s2b+0x32>
 80093b8:	0030      	movs	r0, r6
 80093ba:	f7ff ff43 	bl	8009244 <_Balloc>
 80093be:	1e01      	subs	r1, r0, #0
 80093c0:	d108      	bne.n	80093d4 <__s2b+0x38>
 80093c2:	0002      	movs	r2, r0
 80093c4:	4b19      	ldr	r3, [pc, #100]	; (800942c <__s2b+0x90>)
 80093c6:	481a      	ldr	r0, [pc, #104]	; (8009430 <__s2b+0x94>)
 80093c8:	31ce      	adds	r1, #206	; 0xce
 80093ca:	f000 fe53 	bl	800a074 <__assert_func>
 80093ce:	005b      	lsls	r3, r3, #1
 80093d0:	3101      	adds	r1, #1
 80093d2:	e7ef      	b.n	80093b4 <__s2b+0x18>
 80093d4:	9b08      	ldr	r3, [sp, #32]
 80093d6:	6143      	str	r3, [r0, #20]
 80093d8:	2301      	movs	r3, #1
 80093da:	6103      	str	r3, [r0, #16]
 80093dc:	2d09      	cmp	r5, #9
 80093de:	dd18      	ble.n	8009412 <__s2b+0x76>
 80093e0:	0023      	movs	r3, r4
 80093e2:	3309      	adds	r3, #9
 80093e4:	001f      	movs	r7, r3
 80093e6:	9300      	str	r3, [sp, #0]
 80093e8:	1964      	adds	r4, r4, r5
 80093ea:	783b      	ldrb	r3, [r7, #0]
 80093ec:	220a      	movs	r2, #10
 80093ee:	0030      	movs	r0, r6
 80093f0:	3b30      	subs	r3, #48	; 0x30
 80093f2:	f7ff ff8f 	bl	8009314 <__multadd>
 80093f6:	3701      	adds	r7, #1
 80093f8:	0001      	movs	r1, r0
 80093fa:	42a7      	cmp	r7, r4
 80093fc:	d1f5      	bne.n	80093ea <__s2b+0x4e>
 80093fe:	002c      	movs	r4, r5
 8009400:	9b00      	ldr	r3, [sp, #0]
 8009402:	3c08      	subs	r4, #8
 8009404:	191c      	adds	r4, r3, r4
 8009406:	002f      	movs	r7, r5
 8009408:	9b01      	ldr	r3, [sp, #4]
 800940a:	429f      	cmp	r7, r3
 800940c:	db04      	blt.n	8009418 <__s2b+0x7c>
 800940e:	0008      	movs	r0, r1
 8009410:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009412:	2509      	movs	r5, #9
 8009414:	340a      	adds	r4, #10
 8009416:	e7f6      	b.n	8009406 <__s2b+0x6a>
 8009418:	1b63      	subs	r3, r4, r5
 800941a:	5ddb      	ldrb	r3, [r3, r7]
 800941c:	220a      	movs	r2, #10
 800941e:	0030      	movs	r0, r6
 8009420:	3b30      	subs	r3, #48	; 0x30
 8009422:	f7ff ff77 	bl	8009314 <__multadd>
 8009426:	3701      	adds	r7, #1
 8009428:	0001      	movs	r1, r0
 800942a:	e7ed      	b.n	8009408 <__s2b+0x6c>
 800942c:	0800b0fc 	.word	0x0800b0fc
 8009430:	0800b18c 	.word	0x0800b18c

08009434 <__hi0bits>:
 8009434:	0003      	movs	r3, r0
 8009436:	0c02      	lsrs	r2, r0, #16
 8009438:	2000      	movs	r0, #0
 800943a:	4282      	cmp	r2, r0
 800943c:	d101      	bne.n	8009442 <__hi0bits+0xe>
 800943e:	041b      	lsls	r3, r3, #16
 8009440:	3010      	adds	r0, #16
 8009442:	0e1a      	lsrs	r2, r3, #24
 8009444:	d101      	bne.n	800944a <__hi0bits+0x16>
 8009446:	3008      	adds	r0, #8
 8009448:	021b      	lsls	r3, r3, #8
 800944a:	0f1a      	lsrs	r2, r3, #28
 800944c:	d101      	bne.n	8009452 <__hi0bits+0x1e>
 800944e:	3004      	adds	r0, #4
 8009450:	011b      	lsls	r3, r3, #4
 8009452:	0f9a      	lsrs	r2, r3, #30
 8009454:	d101      	bne.n	800945a <__hi0bits+0x26>
 8009456:	3002      	adds	r0, #2
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	2b00      	cmp	r3, #0
 800945c:	db03      	blt.n	8009466 <__hi0bits+0x32>
 800945e:	3001      	adds	r0, #1
 8009460:	005b      	lsls	r3, r3, #1
 8009462:	d400      	bmi.n	8009466 <__hi0bits+0x32>
 8009464:	2020      	movs	r0, #32
 8009466:	4770      	bx	lr

08009468 <__lo0bits>:
 8009468:	6803      	ldr	r3, [r0, #0]
 800946a:	0002      	movs	r2, r0
 800946c:	2107      	movs	r1, #7
 800946e:	0018      	movs	r0, r3
 8009470:	4008      	ands	r0, r1
 8009472:	420b      	tst	r3, r1
 8009474:	d00d      	beq.n	8009492 <__lo0bits+0x2a>
 8009476:	3906      	subs	r1, #6
 8009478:	2000      	movs	r0, #0
 800947a:	420b      	tst	r3, r1
 800947c:	d105      	bne.n	800948a <__lo0bits+0x22>
 800947e:	3002      	adds	r0, #2
 8009480:	4203      	tst	r3, r0
 8009482:	d003      	beq.n	800948c <__lo0bits+0x24>
 8009484:	40cb      	lsrs	r3, r1
 8009486:	0008      	movs	r0, r1
 8009488:	6013      	str	r3, [r2, #0]
 800948a:	4770      	bx	lr
 800948c:	089b      	lsrs	r3, r3, #2
 800948e:	6013      	str	r3, [r2, #0]
 8009490:	e7fb      	b.n	800948a <__lo0bits+0x22>
 8009492:	b299      	uxth	r1, r3
 8009494:	2900      	cmp	r1, #0
 8009496:	d101      	bne.n	800949c <__lo0bits+0x34>
 8009498:	2010      	movs	r0, #16
 800949a:	0c1b      	lsrs	r3, r3, #16
 800949c:	b2d9      	uxtb	r1, r3
 800949e:	2900      	cmp	r1, #0
 80094a0:	d101      	bne.n	80094a6 <__lo0bits+0x3e>
 80094a2:	3008      	adds	r0, #8
 80094a4:	0a1b      	lsrs	r3, r3, #8
 80094a6:	0719      	lsls	r1, r3, #28
 80094a8:	d101      	bne.n	80094ae <__lo0bits+0x46>
 80094aa:	3004      	adds	r0, #4
 80094ac:	091b      	lsrs	r3, r3, #4
 80094ae:	0799      	lsls	r1, r3, #30
 80094b0:	d101      	bne.n	80094b6 <__lo0bits+0x4e>
 80094b2:	3002      	adds	r0, #2
 80094b4:	089b      	lsrs	r3, r3, #2
 80094b6:	07d9      	lsls	r1, r3, #31
 80094b8:	d4e9      	bmi.n	800948e <__lo0bits+0x26>
 80094ba:	3001      	adds	r0, #1
 80094bc:	085b      	lsrs	r3, r3, #1
 80094be:	d1e6      	bne.n	800948e <__lo0bits+0x26>
 80094c0:	2020      	movs	r0, #32
 80094c2:	e7e2      	b.n	800948a <__lo0bits+0x22>

080094c4 <__i2b>:
 80094c4:	b510      	push	{r4, lr}
 80094c6:	000c      	movs	r4, r1
 80094c8:	2101      	movs	r1, #1
 80094ca:	f7ff febb 	bl	8009244 <_Balloc>
 80094ce:	2800      	cmp	r0, #0
 80094d0:	d106      	bne.n	80094e0 <__i2b+0x1c>
 80094d2:	21a0      	movs	r1, #160	; 0xa0
 80094d4:	0002      	movs	r2, r0
 80094d6:	4b04      	ldr	r3, [pc, #16]	; (80094e8 <__i2b+0x24>)
 80094d8:	4804      	ldr	r0, [pc, #16]	; (80094ec <__i2b+0x28>)
 80094da:	0049      	lsls	r1, r1, #1
 80094dc:	f000 fdca 	bl	800a074 <__assert_func>
 80094e0:	2301      	movs	r3, #1
 80094e2:	6144      	str	r4, [r0, #20]
 80094e4:	6103      	str	r3, [r0, #16]
 80094e6:	bd10      	pop	{r4, pc}
 80094e8:	0800b0fc 	.word	0x0800b0fc
 80094ec:	0800b18c 	.word	0x0800b18c

080094f0 <__multiply>:
 80094f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094f2:	690b      	ldr	r3, [r1, #16]
 80094f4:	0014      	movs	r4, r2
 80094f6:	6912      	ldr	r2, [r2, #16]
 80094f8:	000d      	movs	r5, r1
 80094fa:	b089      	sub	sp, #36	; 0x24
 80094fc:	4293      	cmp	r3, r2
 80094fe:	da01      	bge.n	8009504 <__multiply+0x14>
 8009500:	0025      	movs	r5, r4
 8009502:	000c      	movs	r4, r1
 8009504:	692f      	ldr	r7, [r5, #16]
 8009506:	6926      	ldr	r6, [r4, #16]
 8009508:	6869      	ldr	r1, [r5, #4]
 800950a:	19bb      	adds	r3, r7, r6
 800950c:	9302      	str	r3, [sp, #8]
 800950e:	68ab      	ldr	r3, [r5, #8]
 8009510:	19ba      	adds	r2, r7, r6
 8009512:	4293      	cmp	r3, r2
 8009514:	da00      	bge.n	8009518 <__multiply+0x28>
 8009516:	3101      	adds	r1, #1
 8009518:	f7ff fe94 	bl	8009244 <_Balloc>
 800951c:	9001      	str	r0, [sp, #4]
 800951e:	2800      	cmp	r0, #0
 8009520:	d106      	bne.n	8009530 <__multiply+0x40>
 8009522:	215e      	movs	r1, #94	; 0x5e
 8009524:	0002      	movs	r2, r0
 8009526:	4b48      	ldr	r3, [pc, #288]	; (8009648 <__multiply+0x158>)
 8009528:	4848      	ldr	r0, [pc, #288]	; (800964c <__multiply+0x15c>)
 800952a:	31ff      	adds	r1, #255	; 0xff
 800952c:	f000 fda2 	bl	800a074 <__assert_func>
 8009530:	9b01      	ldr	r3, [sp, #4]
 8009532:	2200      	movs	r2, #0
 8009534:	3314      	adds	r3, #20
 8009536:	469c      	mov	ip, r3
 8009538:	19bb      	adds	r3, r7, r6
 800953a:	009b      	lsls	r3, r3, #2
 800953c:	4463      	add	r3, ip
 800953e:	9303      	str	r3, [sp, #12]
 8009540:	4663      	mov	r3, ip
 8009542:	9903      	ldr	r1, [sp, #12]
 8009544:	428b      	cmp	r3, r1
 8009546:	d32c      	bcc.n	80095a2 <__multiply+0xb2>
 8009548:	002b      	movs	r3, r5
 800954a:	0022      	movs	r2, r4
 800954c:	3314      	adds	r3, #20
 800954e:	00bf      	lsls	r7, r7, #2
 8009550:	3214      	adds	r2, #20
 8009552:	9306      	str	r3, [sp, #24]
 8009554:	00b6      	lsls	r6, r6, #2
 8009556:	19db      	adds	r3, r3, r7
 8009558:	9304      	str	r3, [sp, #16]
 800955a:	1993      	adds	r3, r2, r6
 800955c:	9307      	str	r3, [sp, #28]
 800955e:	2304      	movs	r3, #4
 8009560:	9305      	str	r3, [sp, #20]
 8009562:	002b      	movs	r3, r5
 8009564:	9904      	ldr	r1, [sp, #16]
 8009566:	3315      	adds	r3, #21
 8009568:	9200      	str	r2, [sp, #0]
 800956a:	4299      	cmp	r1, r3
 800956c:	d305      	bcc.n	800957a <__multiply+0x8a>
 800956e:	1b4b      	subs	r3, r1, r5
 8009570:	3b15      	subs	r3, #21
 8009572:	089b      	lsrs	r3, r3, #2
 8009574:	3301      	adds	r3, #1
 8009576:	009b      	lsls	r3, r3, #2
 8009578:	9305      	str	r3, [sp, #20]
 800957a:	9b07      	ldr	r3, [sp, #28]
 800957c:	9a00      	ldr	r2, [sp, #0]
 800957e:	429a      	cmp	r2, r3
 8009580:	d311      	bcc.n	80095a6 <__multiply+0xb6>
 8009582:	9b02      	ldr	r3, [sp, #8]
 8009584:	2b00      	cmp	r3, #0
 8009586:	dd06      	ble.n	8009596 <__multiply+0xa6>
 8009588:	9b03      	ldr	r3, [sp, #12]
 800958a:	3b04      	subs	r3, #4
 800958c:	9303      	str	r3, [sp, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	9300      	str	r3, [sp, #0]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d054      	beq.n	8009640 <__multiply+0x150>
 8009596:	9b01      	ldr	r3, [sp, #4]
 8009598:	9a02      	ldr	r2, [sp, #8]
 800959a:	0018      	movs	r0, r3
 800959c:	611a      	str	r2, [r3, #16]
 800959e:	b009      	add	sp, #36	; 0x24
 80095a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095a2:	c304      	stmia	r3!, {r2}
 80095a4:	e7cd      	b.n	8009542 <__multiply+0x52>
 80095a6:	9b00      	ldr	r3, [sp, #0]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	b298      	uxth	r0, r3
 80095ac:	2800      	cmp	r0, #0
 80095ae:	d01c      	beq.n	80095ea <__multiply+0xfa>
 80095b0:	4667      	mov	r7, ip
 80095b2:	2400      	movs	r4, #0
 80095b4:	9e06      	ldr	r6, [sp, #24]
 80095b6:	ce02      	ldmia	r6!, {r1}
 80095b8:	683a      	ldr	r2, [r7, #0]
 80095ba:	b28b      	uxth	r3, r1
 80095bc:	4343      	muls	r3, r0
 80095be:	0c09      	lsrs	r1, r1, #16
 80095c0:	4341      	muls	r1, r0
 80095c2:	b292      	uxth	r2, r2
 80095c4:	189b      	adds	r3, r3, r2
 80095c6:	191b      	adds	r3, r3, r4
 80095c8:	000c      	movs	r4, r1
 80095ca:	683a      	ldr	r2, [r7, #0]
 80095cc:	0c11      	lsrs	r1, r2, #16
 80095ce:	1861      	adds	r1, r4, r1
 80095d0:	0c1c      	lsrs	r4, r3, #16
 80095d2:	1909      	adds	r1, r1, r4
 80095d4:	0c0c      	lsrs	r4, r1, #16
 80095d6:	b29b      	uxth	r3, r3
 80095d8:	0409      	lsls	r1, r1, #16
 80095da:	430b      	orrs	r3, r1
 80095dc:	c708      	stmia	r7!, {r3}
 80095de:	9b04      	ldr	r3, [sp, #16]
 80095e0:	42b3      	cmp	r3, r6
 80095e2:	d8e8      	bhi.n	80095b6 <__multiply+0xc6>
 80095e4:	4663      	mov	r3, ip
 80095e6:	9a05      	ldr	r2, [sp, #20]
 80095e8:	509c      	str	r4, [r3, r2]
 80095ea:	9b00      	ldr	r3, [sp, #0]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	0c1e      	lsrs	r6, r3, #16
 80095f0:	d020      	beq.n	8009634 <__multiply+0x144>
 80095f2:	4663      	mov	r3, ip
 80095f4:	002c      	movs	r4, r5
 80095f6:	4660      	mov	r0, ip
 80095f8:	2700      	movs	r7, #0
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	3414      	adds	r4, #20
 80095fe:	6822      	ldr	r2, [r4, #0]
 8009600:	b29b      	uxth	r3, r3
 8009602:	b291      	uxth	r1, r2
 8009604:	4371      	muls	r1, r6
 8009606:	6802      	ldr	r2, [r0, #0]
 8009608:	0c12      	lsrs	r2, r2, #16
 800960a:	1889      	adds	r1, r1, r2
 800960c:	19cf      	adds	r7, r1, r7
 800960e:	0439      	lsls	r1, r7, #16
 8009610:	430b      	orrs	r3, r1
 8009612:	6003      	str	r3, [r0, #0]
 8009614:	cc02      	ldmia	r4!, {r1}
 8009616:	6843      	ldr	r3, [r0, #4]
 8009618:	0c09      	lsrs	r1, r1, #16
 800961a:	4371      	muls	r1, r6
 800961c:	b29b      	uxth	r3, r3
 800961e:	0c3f      	lsrs	r7, r7, #16
 8009620:	18cb      	adds	r3, r1, r3
 8009622:	9a04      	ldr	r2, [sp, #16]
 8009624:	19db      	adds	r3, r3, r7
 8009626:	0c1f      	lsrs	r7, r3, #16
 8009628:	3004      	adds	r0, #4
 800962a:	42a2      	cmp	r2, r4
 800962c:	d8e7      	bhi.n	80095fe <__multiply+0x10e>
 800962e:	4662      	mov	r2, ip
 8009630:	9905      	ldr	r1, [sp, #20]
 8009632:	5053      	str	r3, [r2, r1]
 8009634:	9b00      	ldr	r3, [sp, #0]
 8009636:	3304      	adds	r3, #4
 8009638:	9300      	str	r3, [sp, #0]
 800963a:	2304      	movs	r3, #4
 800963c:	449c      	add	ip, r3
 800963e:	e79c      	b.n	800957a <__multiply+0x8a>
 8009640:	9b02      	ldr	r3, [sp, #8]
 8009642:	3b01      	subs	r3, #1
 8009644:	9302      	str	r3, [sp, #8]
 8009646:	e79c      	b.n	8009582 <__multiply+0x92>
 8009648:	0800b0fc 	.word	0x0800b0fc
 800964c:	0800b18c 	.word	0x0800b18c

08009650 <__pow5mult>:
 8009650:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009652:	2303      	movs	r3, #3
 8009654:	0015      	movs	r5, r2
 8009656:	0007      	movs	r7, r0
 8009658:	000e      	movs	r6, r1
 800965a:	401a      	ands	r2, r3
 800965c:	421d      	tst	r5, r3
 800965e:	d008      	beq.n	8009672 <__pow5mult+0x22>
 8009660:	4925      	ldr	r1, [pc, #148]	; (80096f8 <__pow5mult+0xa8>)
 8009662:	3a01      	subs	r2, #1
 8009664:	0092      	lsls	r2, r2, #2
 8009666:	5852      	ldr	r2, [r2, r1]
 8009668:	2300      	movs	r3, #0
 800966a:	0031      	movs	r1, r6
 800966c:	f7ff fe52 	bl	8009314 <__multadd>
 8009670:	0006      	movs	r6, r0
 8009672:	10ad      	asrs	r5, r5, #2
 8009674:	d03d      	beq.n	80096f2 <__pow5mult+0xa2>
 8009676:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8009678:	2c00      	cmp	r4, #0
 800967a:	d10f      	bne.n	800969c <__pow5mult+0x4c>
 800967c:	2010      	movs	r0, #16
 800967e:	f7ff fdb1 	bl	80091e4 <malloc>
 8009682:	1e02      	subs	r2, r0, #0
 8009684:	6278      	str	r0, [r7, #36]	; 0x24
 8009686:	d105      	bne.n	8009694 <__pow5mult+0x44>
 8009688:	21d7      	movs	r1, #215	; 0xd7
 800968a:	4b1c      	ldr	r3, [pc, #112]	; (80096fc <__pow5mult+0xac>)
 800968c:	481c      	ldr	r0, [pc, #112]	; (8009700 <__pow5mult+0xb0>)
 800968e:	0049      	lsls	r1, r1, #1
 8009690:	f000 fcf0 	bl	800a074 <__assert_func>
 8009694:	6044      	str	r4, [r0, #4]
 8009696:	6084      	str	r4, [r0, #8]
 8009698:	6004      	str	r4, [r0, #0]
 800969a:	60c4      	str	r4, [r0, #12]
 800969c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800969e:	689c      	ldr	r4, [r3, #8]
 80096a0:	9301      	str	r3, [sp, #4]
 80096a2:	2c00      	cmp	r4, #0
 80096a4:	d108      	bne.n	80096b8 <__pow5mult+0x68>
 80096a6:	0038      	movs	r0, r7
 80096a8:	4916      	ldr	r1, [pc, #88]	; (8009704 <__pow5mult+0xb4>)
 80096aa:	f7ff ff0b 	bl	80094c4 <__i2b>
 80096ae:	9b01      	ldr	r3, [sp, #4]
 80096b0:	0004      	movs	r4, r0
 80096b2:	6098      	str	r0, [r3, #8]
 80096b4:	2300      	movs	r3, #0
 80096b6:	6003      	str	r3, [r0, #0]
 80096b8:	2301      	movs	r3, #1
 80096ba:	421d      	tst	r5, r3
 80096bc:	d00a      	beq.n	80096d4 <__pow5mult+0x84>
 80096be:	0031      	movs	r1, r6
 80096c0:	0022      	movs	r2, r4
 80096c2:	0038      	movs	r0, r7
 80096c4:	f7ff ff14 	bl	80094f0 <__multiply>
 80096c8:	0031      	movs	r1, r6
 80096ca:	9001      	str	r0, [sp, #4]
 80096cc:	0038      	movs	r0, r7
 80096ce:	f7ff fdfd 	bl	80092cc <_Bfree>
 80096d2:	9e01      	ldr	r6, [sp, #4]
 80096d4:	106d      	asrs	r5, r5, #1
 80096d6:	d00c      	beq.n	80096f2 <__pow5mult+0xa2>
 80096d8:	6820      	ldr	r0, [r4, #0]
 80096da:	2800      	cmp	r0, #0
 80096dc:	d107      	bne.n	80096ee <__pow5mult+0x9e>
 80096de:	0022      	movs	r2, r4
 80096e0:	0021      	movs	r1, r4
 80096e2:	0038      	movs	r0, r7
 80096e4:	f7ff ff04 	bl	80094f0 <__multiply>
 80096e8:	2300      	movs	r3, #0
 80096ea:	6020      	str	r0, [r4, #0]
 80096ec:	6003      	str	r3, [r0, #0]
 80096ee:	0004      	movs	r4, r0
 80096f0:	e7e2      	b.n	80096b8 <__pow5mult+0x68>
 80096f2:	0030      	movs	r0, r6
 80096f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80096f6:	46c0      	nop			; (mov r8, r8)
 80096f8:	0800b2e0 	.word	0x0800b2e0
 80096fc:	0800b086 	.word	0x0800b086
 8009700:	0800b18c 	.word	0x0800b18c
 8009704:	00000271 	.word	0x00000271

08009708 <__lshift>:
 8009708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800970a:	000c      	movs	r4, r1
 800970c:	0017      	movs	r7, r2
 800970e:	6923      	ldr	r3, [r4, #16]
 8009710:	1155      	asrs	r5, r2, #5
 8009712:	b087      	sub	sp, #28
 8009714:	18eb      	adds	r3, r5, r3
 8009716:	9302      	str	r3, [sp, #8]
 8009718:	3301      	adds	r3, #1
 800971a:	9301      	str	r3, [sp, #4]
 800971c:	6849      	ldr	r1, [r1, #4]
 800971e:	68a3      	ldr	r3, [r4, #8]
 8009720:	9004      	str	r0, [sp, #16]
 8009722:	9a01      	ldr	r2, [sp, #4]
 8009724:	4293      	cmp	r3, r2
 8009726:	db11      	blt.n	800974c <__lshift+0x44>
 8009728:	9804      	ldr	r0, [sp, #16]
 800972a:	f7ff fd8b 	bl	8009244 <_Balloc>
 800972e:	0002      	movs	r2, r0
 8009730:	2300      	movs	r3, #0
 8009732:	3214      	adds	r2, #20
 8009734:	0006      	movs	r6, r0
 8009736:	0011      	movs	r1, r2
 8009738:	9203      	str	r2, [sp, #12]
 800973a:	4298      	cmp	r0, r3
 800973c:	d10d      	bne.n	800975a <__lshift+0x52>
 800973e:	21da      	movs	r1, #218	; 0xda
 8009740:	0002      	movs	r2, r0
 8009742:	4b27      	ldr	r3, [pc, #156]	; (80097e0 <__lshift+0xd8>)
 8009744:	4827      	ldr	r0, [pc, #156]	; (80097e4 <__lshift+0xdc>)
 8009746:	31ff      	adds	r1, #255	; 0xff
 8009748:	f000 fc94 	bl	800a074 <__assert_func>
 800974c:	3101      	adds	r1, #1
 800974e:	005b      	lsls	r3, r3, #1
 8009750:	e7e7      	b.n	8009722 <__lshift+0x1a>
 8009752:	2200      	movs	r2, #0
 8009754:	0098      	lsls	r0, r3, #2
 8009756:	500a      	str	r2, [r1, r0]
 8009758:	3301      	adds	r3, #1
 800975a:	42ab      	cmp	r3, r5
 800975c:	dbf9      	blt.n	8009752 <__lshift+0x4a>
 800975e:	43eb      	mvns	r3, r5
 8009760:	17db      	asrs	r3, r3, #31
 8009762:	401d      	ands	r5, r3
 8009764:	9b03      	ldr	r3, [sp, #12]
 8009766:	00ad      	lsls	r5, r5, #2
 8009768:	211f      	movs	r1, #31
 800976a:	0038      	movs	r0, r7
 800976c:	195d      	adds	r5, r3, r5
 800976e:	0023      	movs	r3, r4
 8009770:	6922      	ldr	r2, [r4, #16]
 8009772:	3314      	adds	r3, #20
 8009774:	0092      	lsls	r2, r2, #2
 8009776:	4008      	ands	r0, r1
 8009778:	4684      	mov	ip, r0
 800977a:	189a      	adds	r2, r3, r2
 800977c:	420f      	tst	r7, r1
 800977e:	d02a      	beq.n	80097d6 <__lshift+0xce>
 8009780:	3101      	adds	r1, #1
 8009782:	1a09      	subs	r1, r1, r0
 8009784:	9105      	str	r1, [sp, #20]
 8009786:	2100      	movs	r1, #0
 8009788:	9503      	str	r5, [sp, #12]
 800978a:	4667      	mov	r7, ip
 800978c:	6818      	ldr	r0, [r3, #0]
 800978e:	40b8      	lsls	r0, r7
 8009790:	4301      	orrs	r1, r0
 8009792:	9803      	ldr	r0, [sp, #12]
 8009794:	c002      	stmia	r0!, {r1}
 8009796:	cb02      	ldmia	r3!, {r1}
 8009798:	9003      	str	r0, [sp, #12]
 800979a:	9805      	ldr	r0, [sp, #20]
 800979c:	40c1      	lsrs	r1, r0
 800979e:	429a      	cmp	r2, r3
 80097a0:	d8f3      	bhi.n	800978a <__lshift+0x82>
 80097a2:	0020      	movs	r0, r4
 80097a4:	3015      	adds	r0, #21
 80097a6:	2304      	movs	r3, #4
 80097a8:	4282      	cmp	r2, r0
 80097aa:	d304      	bcc.n	80097b6 <__lshift+0xae>
 80097ac:	1b13      	subs	r3, r2, r4
 80097ae:	3b15      	subs	r3, #21
 80097b0:	089b      	lsrs	r3, r3, #2
 80097b2:	3301      	adds	r3, #1
 80097b4:	009b      	lsls	r3, r3, #2
 80097b6:	50e9      	str	r1, [r5, r3]
 80097b8:	2900      	cmp	r1, #0
 80097ba:	d002      	beq.n	80097c2 <__lshift+0xba>
 80097bc:	9b02      	ldr	r3, [sp, #8]
 80097be:	3302      	adds	r3, #2
 80097c0:	9301      	str	r3, [sp, #4]
 80097c2:	9b01      	ldr	r3, [sp, #4]
 80097c4:	9804      	ldr	r0, [sp, #16]
 80097c6:	3b01      	subs	r3, #1
 80097c8:	0021      	movs	r1, r4
 80097ca:	6133      	str	r3, [r6, #16]
 80097cc:	f7ff fd7e 	bl	80092cc <_Bfree>
 80097d0:	0030      	movs	r0, r6
 80097d2:	b007      	add	sp, #28
 80097d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097d6:	cb02      	ldmia	r3!, {r1}
 80097d8:	c502      	stmia	r5!, {r1}
 80097da:	429a      	cmp	r2, r3
 80097dc:	d8fb      	bhi.n	80097d6 <__lshift+0xce>
 80097de:	e7f0      	b.n	80097c2 <__lshift+0xba>
 80097e0:	0800b0fc 	.word	0x0800b0fc
 80097e4:	0800b18c 	.word	0x0800b18c

080097e8 <__mcmp>:
 80097e8:	6902      	ldr	r2, [r0, #16]
 80097ea:	690b      	ldr	r3, [r1, #16]
 80097ec:	b530      	push	{r4, r5, lr}
 80097ee:	0004      	movs	r4, r0
 80097f0:	1ad0      	subs	r0, r2, r3
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d10d      	bne.n	8009812 <__mcmp+0x2a>
 80097f6:	009b      	lsls	r3, r3, #2
 80097f8:	3414      	adds	r4, #20
 80097fa:	3114      	adds	r1, #20
 80097fc:	18e2      	adds	r2, r4, r3
 80097fe:	18c9      	adds	r1, r1, r3
 8009800:	3a04      	subs	r2, #4
 8009802:	3904      	subs	r1, #4
 8009804:	6815      	ldr	r5, [r2, #0]
 8009806:	680b      	ldr	r3, [r1, #0]
 8009808:	429d      	cmp	r5, r3
 800980a:	d003      	beq.n	8009814 <__mcmp+0x2c>
 800980c:	2001      	movs	r0, #1
 800980e:	429d      	cmp	r5, r3
 8009810:	d303      	bcc.n	800981a <__mcmp+0x32>
 8009812:	bd30      	pop	{r4, r5, pc}
 8009814:	4294      	cmp	r4, r2
 8009816:	d3f3      	bcc.n	8009800 <__mcmp+0x18>
 8009818:	e7fb      	b.n	8009812 <__mcmp+0x2a>
 800981a:	4240      	negs	r0, r0
 800981c:	e7f9      	b.n	8009812 <__mcmp+0x2a>
	...

08009820 <__mdiff>:
 8009820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009822:	000e      	movs	r6, r1
 8009824:	0007      	movs	r7, r0
 8009826:	0011      	movs	r1, r2
 8009828:	0030      	movs	r0, r6
 800982a:	b087      	sub	sp, #28
 800982c:	0014      	movs	r4, r2
 800982e:	f7ff ffdb 	bl	80097e8 <__mcmp>
 8009832:	1e05      	subs	r5, r0, #0
 8009834:	d110      	bne.n	8009858 <__mdiff+0x38>
 8009836:	0001      	movs	r1, r0
 8009838:	0038      	movs	r0, r7
 800983a:	f7ff fd03 	bl	8009244 <_Balloc>
 800983e:	1e02      	subs	r2, r0, #0
 8009840:	d104      	bne.n	800984c <__mdiff+0x2c>
 8009842:	4b40      	ldr	r3, [pc, #256]	; (8009944 <__mdiff+0x124>)
 8009844:	4940      	ldr	r1, [pc, #256]	; (8009948 <__mdiff+0x128>)
 8009846:	4841      	ldr	r0, [pc, #260]	; (800994c <__mdiff+0x12c>)
 8009848:	f000 fc14 	bl	800a074 <__assert_func>
 800984c:	2301      	movs	r3, #1
 800984e:	6145      	str	r5, [r0, #20]
 8009850:	6103      	str	r3, [r0, #16]
 8009852:	0010      	movs	r0, r2
 8009854:	b007      	add	sp, #28
 8009856:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009858:	2301      	movs	r3, #1
 800985a:	9301      	str	r3, [sp, #4]
 800985c:	2800      	cmp	r0, #0
 800985e:	db04      	blt.n	800986a <__mdiff+0x4a>
 8009860:	0023      	movs	r3, r4
 8009862:	0034      	movs	r4, r6
 8009864:	001e      	movs	r6, r3
 8009866:	2300      	movs	r3, #0
 8009868:	9301      	str	r3, [sp, #4]
 800986a:	0038      	movs	r0, r7
 800986c:	6861      	ldr	r1, [r4, #4]
 800986e:	f7ff fce9 	bl	8009244 <_Balloc>
 8009872:	1e02      	subs	r2, r0, #0
 8009874:	d103      	bne.n	800987e <__mdiff+0x5e>
 8009876:	2190      	movs	r1, #144	; 0x90
 8009878:	4b32      	ldr	r3, [pc, #200]	; (8009944 <__mdiff+0x124>)
 800987a:	0089      	lsls	r1, r1, #2
 800987c:	e7e3      	b.n	8009846 <__mdiff+0x26>
 800987e:	9b01      	ldr	r3, [sp, #4]
 8009880:	2700      	movs	r7, #0
 8009882:	60c3      	str	r3, [r0, #12]
 8009884:	6920      	ldr	r0, [r4, #16]
 8009886:	3414      	adds	r4, #20
 8009888:	9401      	str	r4, [sp, #4]
 800988a:	9b01      	ldr	r3, [sp, #4]
 800988c:	0084      	lsls	r4, r0, #2
 800988e:	191b      	adds	r3, r3, r4
 8009890:	0034      	movs	r4, r6
 8009892:	9302      	str	r3, [sp, #8]
 8009894:	6933      	ldr	r3, [r6, #16]
 8009896:	3414      	adds	r4, #20
 8009898:	0099      	lsls	r1, r3, #2
 800989a:	1863      	adds	r3, r4, r1
 800989c:	9303      	str	r3, [sp, #12]
 800989e:	0013      	movs	r3, r2
 80098a0:	3314      	adds	r3, #20
 80098a2:	469c      	mov	ip, r3
 80098a4:	9305      	str	r3, [sp, #20]
 80098a6:	9b01      	ldr	r3, [sp, #4]
 80098a8:	9304      	str	r3, [sp, #16]
 80098aa:	9b04      	ldr	r3, [sp, #16]
 80098ac:	cc02      	ldmia	r4!, {r1}
 80098ae:	cb20      	ldmia	r3!, {r5}
 80098b0:	9304      	str	r3, [sp, #16]
 80098b2:	b2ab      	uxth	r3, r5
 80098b4:	19df      	adds	r7, r3, r7
 80098b6:	b28b      	uxth	r3, r1
 80098b8:	1afb      	subs	r3, r7, r3
 80098ba:	0c2d      	lsrs	r5, r5, #16
 80098bc:	0c09      	lsrs	r1, r1, #16
 80098be:	1a69      	subs	r1, r5, r1
 80098c0:	141d      	asrs	r5, r3, #16
 80098c2:	1949      	adds	r1, r1, r5
 80098c4:	140f      	asrs	r7, r1, #16
 80098c6:	b29b      	uxth	r3, r3
 80098c8:	0409      	lsls	r1, r1, #16
 80098ca:	430b      	orrs	r3, r1
 80098cc:	4661      	mov	r1, ip
 80098ce:	c108      	stmia	r1!, {r3}
 80098d0:	9b03      	ldr	r3, [sp, #12]
 80098d2:	468c      	mov	ip, r1
 80098d4:	42a3      	cmp	r3, r4
 80098d6:	d8e8      	bhi.n	80098aa <__mdiff+0x8a>
 80098d8:	0031      	movs	r1, r6
 80098da:	9c03      	ldr	r4, [sp, #12]
 80098dc:	3115      	adds	r1, #21
 80098de:	2304      	movs	r3, #4
 80098e0:	428c      	cmp	r4, r1
 80098e2:	d304      	bcc.n	80098ee <__mdiff+0xce>
 80098e4:	1ba3      	subs	r3, r4, r6
 80098e6:	3b15      	subs	r3, #21
 80098e8:	089b      	lsrs	r3, r3, #2
 80098ea:	3301      	adds	r3, #1
 80098ec:	009b      	lsls	r3, r3, #2
 80098ee:	9901      	ldr	r1, [sp, #4]
 80098f0:	18cc      	adds	r4, r1, r3
 80098f2:	9905      	ldr	r1, [sp, #20]
 80098f4:	0026      	movs	r6, r4
 80098f6:	18cb      	adds	r3, r1, r3
 80098f8:	469c      	mov	ip, r3
 80098fa:	9902      	ldr	r1, [sp, #8]
 80098fc:	428e      	cmp	r6, r1
 80098fe:	d310      	bcc.n	8009922 <__mdiff+0x102>
 8009900:	9e02      	ldr	r6, [sp, #8]
 8009902:	1ee5      	subs	r5, r4, #3
 8009904:	2100      	movs	r1, #0
 8009906:	42ae      	cmp	r6, r5
 8009908:	d304      	bcc.n	8009914 <__mdiff+0xf4>
 800990a:	0031      	movs	r1, r6
 800990c:	3103      	adds	r1, #3
 800990e:	1b09      	subs	r1, r1, r4
 8009910:	0889      	lsrs	r1, r1, #2
 8009912:	0089      	lsls	r1, r1, #2
 8009914:	185b      	adds	r3, r3, r1
 8009916:	3b04      	subs	r3, #4
 8009918:	6819      	ldr	r1, [r3, #0]
 800991a:	2900      	cmp	r1, #0
 800991c:	d00f      	beq.n	800993e <__mdiff+0x11e>
 800991e:	6110      	str	r0, [r2, #16]
 8009920:	e797      	b.n	8009852 <__mdiff+0x32>
 8009922:	ce02      	ldmia	r6!, {r1}
 8009924:	b28d      	uxth	r5, r1
 8009926:	19ed      	adds	r5, r5, r7
 8009928:	0c0f      	lsrs	r7, r1, #16
 800992a:	1429      	asrs	r1, r5, #16
 800992c:	1879      	adds	r1, r7, r1
 800992e:	140f      	asrs	r7, r1, #16
 8009930:	b2ad      	uxth	r5, r5
 8009932:	0409      	lsls	r1, r1, #16
 8009934:	430d      	orrs	r5, r1
 8009936:	4661      	mov	r1, ip
 8009938:	c120      	stmia	r1!, {r5}
 800993a:	468c      	mov	ip, r1
 800993c:	e7dd      	b.n	80098fa <__mdiff+0xda>
 800993e:	3801      	subs	r0, #1
 8009940:	e7e9      	b.n	8009916 <__mdiff+0xf6>
 8009942:	46c0      	nop			; (mov r8, r8)
 8009944:	0800b0fc 	.word	0x0800b0fc
 8009948:	00000232 	.word	0x00000232
 800994c:	0800b18c 	.word	0x0800b18c

08009950 <__ulp>:
 8009950:	4b0f      	ldr	r3, [pc, #60]	; (8009990 <__ulp+0x40>)
 8009952:	4019      	ands	r1, r3
 8009954:	4b0f      	ldr	r3, [pc, #60]	; (8009994 <__ulp+0x44>)
 8009956:	18c9      	adds	r1, r1, r3
 8009958:	2900      	cmp	r1, #0
 800995a:	dd04      	ble.n	8009966 <__ulp+0x16>
 800995c:	2200      	movs	r2, #0
 800995e:	000b      	movs	r3, r1
 8009960:	0010      	movs	r0, r2
 8009962:	0019      	movs	r1, r3
 8009964:	4770      	bx	lr
 8009966:	4249      	negs	r1, r1
 8009968:	2200      	movs	r2, #0
 800996a:	2300      	movs	r3, #0
 800996c:	1509      	asrs	r1, r1, #20
 800996e:	2913      	cmp	r1, #19
 8009970:	dc04      	bgt.n	800997c <__ulp+0x2c>
 8009972:	2080      	movs	r0, #128	; 0x80
 8009974:	0300      	lsls	r0, r0, #12
 8009976:	4108      	asrs	r0, r1
 8009978:	0003      	movs	r3, r0
 800997a:	e7f1      	b.n	8009960 <__ulp+0x10>
 800997c:	3914      	subs	r1, #20
 800997e:	2001      	movs	r0, #1
 8009980:	291e      	cmp	r1, #30
 8009982:	dc02      	bgt.n	800998a <__ulp+0x3a>
 8009984:	2080      	movs	r0, #128	; 0x80
 8009986:	0600      	lsls	r0, r0, #24
 8009988:	40c8      	lsrs	r0, r1
 800998a:	0002      	movs	r2, r0
 800998c:	e7e8      	b.n	8009960 <__ulp+0x10>
 800998e:	46c0      	nop			; (mov r8, r8)
 8009990:	7ff00000 	.word	0x7ff00000
 8009994:	fcc00000 	.word	0xfcc00000

08009998 <__b2d>:
 8009998:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800999a:	0006      	movs	r6, r0
 800999c:	6903      	ldr	r3, [r0, #16]
 800999e:	3614      	adds	r6, #20
 80099a0:	009b      	lsls	r3, r3, #2
 80099a2:	18f3      	adds	r3, r6, r3
 80099a4:	1f1d      	subs	r5, r3, #4
 80099a6:	682c      	ldr	r4, [r5, #0]
 80099a8:	000f      	movs	r7, r1
 80099aa:	0020      	movs	r0, r4
 80099ac:	9301      	str	r3, [sp, #4]
 80099ae:	f7ff fd41 	bl	8009434 <__hi0bits>
 80099b2:	2320      	movs	r3, #32
 80099b4:	1a1b      	subs	r3, r3, r0
 80099b6:	491f      	ldr	r1, [pc, #124]	; (8009a34 <__b2d+0x9c>)
 80099b8:	603b      	str	r3, [r7, #0]
 80099ba:	280a      	cmp	r0, #10
 80099bc:	dc16      	bgt.n	80099ec <__b2d+0x54>
 80099be:	230b      	movs	r3, #11
 80099c0:	0027      	movs	r7, r4
 80099c2:	1a1b      	subs	r3, r3, r0
 80099c4:	40df      	lsrs	r7, r3
 80099c6:	4339      	orrs	r1, r7
 80099c8:	469c      	mov	ip, r3
 80099ca:	000b      	movs	r3, r1
 80099cc:	2100      	movs	r1, #0
 80099ce:	42ae      	cmp	r6, r5
 80099d0:	d202      	bcs.n	80099d8 <__b2d+0x40>
 80099d2:	9901      	ldr	r1, [sp, #4]
 80099d4:	3908      	subs	r1, #8
 80099d6:	6809      	ldr	r1, [r1, #0]
 80099d8:	3015      	adds	r0, #21
 80099da:	4084      	lsls	r4, r0
 80099dc:	4660      	mov	r0, ip
 80099de:	40c1      	lsrs	r1, r0
 80099e0:	430c      	orrs	r4, r1
 80099e2:	0022      	movs	r2, r4
 80099e4:	0010      	movs	r0, r2
 80099e6:	0019      	movs	r1, r3
 80099e8:	b003      	add	sp, #12
 80099ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099ec:	2700      	movs	r7, #0
 80099ee:	42ae      	cmp	r6, r5
 80099f0:	d202      	bcs.n	80099f8 <__b2d+0x60>
 80099f2:	9d01      	ldr	r5, [sp, #4]
 80099f4:	3d08      	subs	r5, #8
 80099f6:	682f      	ldr	r7, [r5, #0]
 80099f8:	230b      	movs	r3, #11
 80099fa:	425b      	negs	r3, r3
 80099fc:	469c      	mov	ip, r3
 80099fe:	4484      	add	ip, r0
 8009a00:	280b      	cmp	r0, #11
 8009a02:	d013      	beq.n	8009a2c <__b2d+0x94>
 8009a04:	4663      	mov	r3, ip
 8009a06:	2020      	movs	r0, #32
 8009a08:	409c      	lsls	r4, r3
 8009a0a:	1ac0      	subs	r0, r0, r3
 8009a0c:	003b      	movs	r3, r7
 8009a0e:	40c3      	lsrs	r3, r0
 8009a10:	431c      	orrs	r4, r3
 8009a12:	4321      	orrs	r1, r4
 8009a14:	000b      	movs	r3, r1
 8009a16:	2100      	movs	r1, #0
 8009a18:	42b5      	cmp	r5, r6
 8009a1a:	d901      	bls.n	8009a20 <__b2d+0x88>
 8009a1c:	3d04      	subs	r5, #4
 8009a1e:	6829      	ldr	r1, [r5, #0]
 8009a20:	4664      	mov	r4, ip
 8009a22:	40c1      	lsrs	r1, r0
 8009a24:	40a7      	lsls	r7, r4
 8009a26:	430f      	orrs	r7, r1
 8009a28:	003a      	movs	r2, r7
 8009a2a:	e7db      	b.n	80099e4 <__b2d+0x4c>
 8009a2c:	4321      	orrs	r1, r4
 8009a2e:	000b      	movs	r3, r1
 8009a30:	e7fa      	b.n	8009a28 <__b2d+0x90>
 8009a32:	46c0      	nop			; (mov r8, r8)
 8009a34:	3ff00000 	.word	0x3ff00000

08009a38 <__d2b>:
 8009a38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a3a:	2101      	movs	r1, #1
 8009a3c:	0014      	movs	r4, r2
 8009a3e:	001e      	movs	r6, r3
 8009a40:	9f08      	ldr	r7, [sp, #32]
 8009a42:	f7ff fbff 	bl	8009244 <_Balloc>
 8009a46:	1e05      	subs	r5, r0, #0
 8009a48:	d105      	bne.n	8009a56 <__d2b+0x1e>
 8009a4a:	0002      	movs	r2, r0
 8009a4c:	4b26      	ldr	r3, [pc, #152]	; (8009ae8 <__d2b+0xb0>)
 8009a4e:	4927      	ldr	r1, [pc, #156]	; (8009aec <__d2b+0xb4>)
 8009a50:	4827      	ldr	r0, [pc, #156]	; (8009af0 <__d2b+0xb8>)
 8009a52:	f000 fb0f 	bl	800a074 <__assert_func>
 8009a56:	0333      	lsls	r3, r6, #12
 8009a58:	0076      	lsls	r6, r6, #1
 8009a5a:	0b1b      	lsrs	r3, r3, #12
 8009a5c:	0d76      	lsrs	r6, r6, #21
 8009a5e:	d124      	bne.n	8009aaa <__d2b+0x72>
 8009a60:	9301      	str	r3, [sp, #4]
 8009a62:	2c00      	cmp	r4, #0
 8009a64:	d027      	beq.n	8009ab6 <__d2b+0x7e>
 8009a66:	4668      	mov	r0, sp
 8009a68:	9400      	str	r4, [sp, #0]
 8009a6a:	f7ff fcfd 	bl	8009468 <__lo0bits>
 8009a6e:	9c00      	ldr	r4, [sp, #0]
 8009a70:	2800      	cmp	r0, #0
 8009a72:	d01e      	beq.n	8009ab2 <__d2b+0x7a>
 8009a74:	9b01      	ldr	r3, [sp, #4]
 8009a76:	2120      	movs	r1, #32
 8009a78:	001a      	movs	r2, r3
 8009a7a:	1a09      	subs	r1, r1, r0
 8009a7c:	408a      	lsls	r2, r1
 8009a7e:	40c3      	lsrs	r3, r0
 8009a80:	4322      	orrs	r2, r4
 8009a82:	616a      	str	r2, [r5, #20]
 8009a84:	9301      	str	r3, [sp, #4]
 8009a86:	9c01      	ldr	r4, [sp, #4]
 8009a88:	61ac      	str	r4, [r5, #24]
 8009a8a:	1e63      	subs	r3, r4, #1
 8009a8c:	419c      	sbcs	r4, r3
 8009a8e:	3401      	adds	r4, #1
 8009a90:	612c      	str	r4, [r5, #16]
 8009a92:	2e00      	cmp	r6, #0
 8009a94:	d018      	beq.n	8009ac8 <__d2b+0x90>
 8009a96:	4b17      	ldr	r3, [pc, #92]	; (8009af4 <__d2b+0xbc>)
 8009a98:	18f6      	adds	r6, r6, r3
 8009a9a:	2335      	movs	r3, #53	; 0x35
 8009a9c:	1836      	adds	r6, r6, r0
 8009a9e:	1a18      	subs	r0, r3, r0
 8009aa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009aa2:	603e      	str	r6, [r7, #0]
 8009aa4:	6018      	str	r0, [r3, #0]
 8009aa6:	0028      	movs	r0, r5
 8009aa8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009aaa:	2280      	movs	r2, #128	; 0x80
 8009aac:	0352      	lsls	r2, r2, #13
 8009aae:	4313      	orrs	r3, r2
 8009ab0:	e7d6      	b.n	8009a60 <__d2b+0x28>
 8009ab2:	616c      	str	r4, [r5, #20]
 8009ab4:	e7e7      	b.n	8009a86 <__d2b+0x4e>
 8009ab6:	a801      	add	r0, sp, #4
 8009ab8:	f7ff fcd6 	bl	8009468 <__lo0bits>
 8009abc:	2401      	movs	r4, #1
 8009abe:	9b01      	ldr	r3, [sp, #4]
 8009ac0:	612c      	str	r4, [r5, #16]
 8009ac2:	616b      	str	r3, [r5, #20]
 8009ac4:	3020      	adds	r0, #32
 8009ac6:	e7e4      	b.n	8009a92 <__d2b+0x5a>
 8009ac8:	4b0b      	ldr	r3, [pc, #44]	; (8009af8 <__d2b+0xc0>)
 8009aca:	18c0      	adds	r0, r0, r3
 8009acc:	4b0b      	ldr	r3, [pc, #44]	; (8009afc <__d2b+0xc4>)
 8009ace:	6038      	str	r0, [r7, #0]
 8009ad0:	18e3      	adds	r3, r4, r3
 8009ad2:	009b      	lsls	r3, r3, #2
 8009ad4:	18eb      	adds	r3, r5, r3
 8009ad6:	6958      	ldr	r0, [r3, #20]
 8009ad8:	f7ff fcac 	bl	8009434 <__hi0bits>
 8009adc:	0164      	lsls	r4, r4, #5
 8009ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ae0:	1a24      	subs	r4, r4, r0
 8009ae2:	601c      	str	r4, [r3, #0]
 8009ae4:	e7df      	b.n	8009aa6 <__d2b+0x6e>
 8009ae6:	46c0      	nop			; (mov r8, r8)
 8009ae8:	0800b0fc 	.word	0x0800b0fc
 8009aec:	0000030a 	.word	0x0000030a
 8009af0:	0800b18c 	.word	0x0800b18c
 8009af4:	fffffbcd 	.word	0xfffffbcd
 8009af8:	fffffbce 	.word	0xfffffbce
 8009afc:	3fffffff 	.word	0x3fffffff

08009b00 <__ratio>:
 8009b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b02:	b085      	sub	sp, #20
 8009b04:	000d      	movs	r5, r1
 8009b06:	a902      	add	r1, sp, #8
 8009b08:	0004      	movs	r4, r0
 8009b0a:	f7ff ff45 	bl	8009998 <__b2d>
 8009b0e:	9000      	str	r0, [sp, #0]
 8009b10:	9101      	str	r1, [sp, #4]
 8009b12:	9e00      	ldr	r6, [sp, #0]
 8009b14:	9f01      	ldr	r7, [sp, #4]
 8009b16:	0028      	movs	r0, r5
 8009b18:	a903      	add	r1, sp, #12
 8009b1a:	f7ff ff3d 	bl	8009998 <__b2d>
 8009b1e:	6924      	ldr	r4, [r4, #16]
 8009b20:	692d      	ldr	r5, [r5, #16]
 8009b22:	0002      	movs	r2, r0
 8009b24:	1b65      	subs	r5, r4, r5
 8009b26:	016c      	lsls	r4, r5, #5
 8009b28:	46a4      	mov	ip, r4
 8009b2a:	9d03      	ldr	r5, [sp, #12]
 8009b2c:	9c02      	ldr	r4, [sp, #8]
 8009b2e:	000b      	movs	r3, r1
 8009b30:	1b64      	subs	r4, r4, r5
 8009b32:	4464      	add	r4, ip
 8009b34:	0525      	lsls	r5, r4, #20
 8009b36:	2c00      	cmp	r4, #0
 8009b38:	dd07      	ble.n	8009b4a <__ratio+0x4a>
 8009b3a:	9901      	ldr	r1, [sp, #4]
 8009b3c:	186f      	adds	r7, r5, r1
 8009b3e:	0030      	movs	r0, r6
 8009b40:	0039      	movs	r1, r7
 8009b42:	f7f7 f977 	bl	8000e34 <__aeabi_ddiv>
 8009b46:	b005      	add	sp, #20
 8009b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b4a:	1b4b      	subs	r3, r1, r5
 8009b4c:	e7f7      	b.n	8009b3e <__ratio+0x3e>

08009b4e <__copybits>:
 8009b4e:	b570      	push	{r4, r5, r6, lr}
 8009b50:	0015      	movs	r5, r2
 8009b52:	6913      	ldr	r3, [r2, #16]
 8009b54:	3514      	adds	r5, #20
 8009b56:	009c      	lsls	r4, r3, #2
 8009b58:	0006      	movs	r6, r0
 8009b5a:	002b      	movs	r3, r5
 8009b5c:	3901      	subs	r1, #1
 8009b5e:	1149      	asrs	r1, r1, #5
 8009b60:	3101      	adds	r1, #1
 8009b62:	0089      	lsls	r1, r1, #2
 8009b64:	1841      	adds	r1, r0, r1
 8009b66:	192c      	adds	r4, r5, r4
 8009b68:	429c      	cmp	r4, r3
 8009b6a:	d80d      	bhi.n	8009b88 <__copybits+0x3a>
 8009b6c:	0015      	movs	r5, r2
 8009b6e:	3511      	adds	r5, #17
 8009b70:	2300      	movs	r3, #0
 8009b72:	42a5      	cmp	r5, r4
 8009b74:	d803      	bhi.n	8009b7e <__copybits+0x30>
 8009b76:	1aa3      	subs	r3, r4, r2
 8009b78:	3b11      	subs	r3, #17
 8009b7a:	089b      	lsrs	r3, r3, #2
 8009b7c:	009b      	lsls	r3, r3, #2
 8009b7e:	18c0      	adds	r0, r0, r3
 8009b80:	2300      	movs	r3, #0
 8009b82:	4281      	cmp	r1, r0
 8009b84:	d803      	bhi.n	8009b8e <__copybits+0x40>
 8009b86:	bd70      	pop	{r4, r5, r6, pc}
 8009b88:	cb20      	ldmia	r3!, {r5}
 8009b8a:	c620      	stmia	r6!, {r5}
 8009b8c:	e7ec      	b.n	8009b68 <__copybits+0x1a>
 8009b8e:	c008      	stmia	r0!, {r3}
 8009b90:	e7f7      	b.n	8009b82 <__copybits+0x34>

08009b92 <__any_on>:
 8009b92:	0002      	movs	r2, r0
 8009b94:	6900      	ldr	r0, [r0, #16]
 8009b96:	b510      	push	{r4, lr}
 8009b98:	3214      	adds	r2, #20
 8009b9a:	114b      	asrs	r3, r1, #5
 8009b9c:	4298      	cmp	r0, r3
 8009b9e:	db13      	blt.n	8009bc8 <__any_on+0x36>
 8009ba0:	dd0c      	ble.n	8009bbc <__any_on+0x2a>
 8009ba2:	241f      	movs	r4, #31
 8009ba4:	0008      	movs	r0, r1
 8009ba6:	4020      	ands	r0, r4
 8009ba8:	4221      	tst	r1, r4
 8009baa:	d007      	beq.n	8009bbc <__any_on+0x2a>
 8009bac:	0099      	lsls	r1, r3, #2
 8009bae:	588c      	ldr	r4, [r1, r2]
 8009bb0:	0021      	movs	r1, r4
 8009bb2:	40c1      	lsrs	r1, r0
 8009bb4:	4081      	lsls	r1, r0
 8009bb6:	2001      	movs	r0, #1
 8009bb8:	428c      	cmp	r4, r1
 8009bba:	d104      	bne.n	8009bc6 <__any_on+0x34>
 8009bbc:	009b      	lsls	r3, r3, #2
 8009bbe:	18d3      	adds	r3, r2, r3
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d803      	bhi.n	8009bcc <__any_on+0x3a>
 8009bc4:	2000      	movs	r0, #0
 8009bc6:	bd10      	pop	{r4, pc}
 8009bc8:	0003      	movs	r3, r0
 8009bca:	e7f7      	b.n	8009bbc <__any_on+0x2a>
 8009bcc:	3b04      	subs	r3, #4
 8009bce:	6819      	ldr	r1, [r3, #0]
 8009bd0:	2900      	cmp	r1, #0
 8009bd2:	d0f5      	beq.n	8009bc0 <__any_on+0x2e>
 8009bd4:	2001      	movs	r0, #1
 8009bd6:	e7f6      	b.n	8009bc6 <__any_on+0x34>

08009bd8 <_calloc_r>:
 8009bd8:	434a      	muls	r2, r1
 8009bda:	b570      	push	{r4, r5, r6, lr}
 8009bdc:	0011      	movs	r1, r2
 8009bde:	0015      	movs	r5, r2
 8009be0:	f000 f852 	bl	8009c88 <_malloc_r>
 8009be4:	1e04      	subs	r4, r0, #0
 8009be6:	d003      	beq.n	8009bf0 <_calloc_r+0x18>
 8009be8:	002a      	movs	r2, r5
 8009bea:	2100      	movs	r1, #0
 8009bec:	f7fc fb24 	bl	8006238 <memset>
 8009bf0:	0020      	movs	r0, r4
 8009bf2:	bd70      	pop	{r4, r5, r6, pc}

08009bf4 <_free_r>:
 8009bf4:	b570      	push	{r4, r5, r6, lr}
 8009bf6:	0005      	movs	r5, r0
 8009bf8:	2900      	cmp	r1, #0
 8009bfa:	d010      	beq.n	8009c1e <_free_r+0x2a>
 8009bfc:	1f0c      	subs	r4, r1, #4
 8009bfe:	6823      	ldr	r3, [r4, #0]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	da00      	bge.n	8009c06 <_free_r+0x12>
 8009c04:	18e4      	adds	r4, r4, r3
 8009c06:	0028      	movs	r0, r5
 8009c08:	f000 fa76 	bl	800a0f8 <__malloc_lock>
 8009c0c:	4a1d      	ldr	r2, [pc, #116]	; (8009c84 <_free_r+0x90>)
 8009c0e:	6813      	ldr	r3, [r2, #0]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d105      	bne.n	8009c20 <_free_r+0x2c>
 8009c14:	6063      	str	r3, [r4, #4]
 8009c16:	6014      	str	r4, [r2, #0]
 8009c18:	0028      	movs	r0, r5
 8009c1a:	f000 fa75 	bl	800a108 <__malloc_unlock>
 8009c1e:	bd70      	pop	{r4, r5, r6, pc}
 8009c20:	42a3      	cmp	r3, r4
 8009c22:	d908      	bls.n	8009c36 <_free_r+0x42>
 8009c24:	6821      	ldr	r1, [r4, #0]
 8009c26:	1860      	adds	r0, r4, r1
 8009c28:	4283      	cmp	r3, r0
 8009c2a:	d1f3      	bne.n	8009c14 <_free_r+0x20>
 8009c2c:	6818      	ldr	r0, [r3, #0]
 8009c2e:	685b      	ldr	r3, [r3, #4]
 8009c30:	1841      	adds	r1, r0, r1
 8009c32:	6021      	str	r1, [r4, #0]
 8009c34:	e7ee      	b.n	8009c14 <_free_r+0x20>
 8009c36:	001a      	movs	r2, r3
 8009c38:	685b      	ldr	r3, [r3, #4]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d001      	beq.n	8009c42 <_free_r+0x4e>
 8009c3e:	42a3      	cmp	r3, r4
 8009c40:	d9f9      	bls.n	8009c36 <_free_r+0x42>
 8009c42:	6811      	ldr	r1, [r2, #0]
 8009c44:	1850      	adds	r0, r2, r1
 8009c46:	42a0      	cmp	r0, r4
 8009c48:	d10b      	bne.n	8009c62 <_free_r+0x6e>
 8009c4a:	6820      	ldr	r0, [r4, #0]
 8009c4c:	1809      	adds	r1, r1, r0
 8009c4e:	1850      	adds	r0, r2, r1
 8009c50:	6011      	str	r1, [r2, #0]
 8009c52:	4283      	cmp	r3, r0
 8009c54:	d1e0      	bne.n	8009c18 <_free_r+0x24>
 8009c56:	6818      	ldr	r0, [r3, #0]
 8009c58:	685b      	ldr	r3, [r3, #4]
 8009c5a:	1841      	adds	r1, r0, r1
 8009c5c:	6011      	str	r1, [r2, #0]
 8009c5e:	6053      	str	r3, [r2, #4]
 8009c60:	e7da      	b.n	8009c18 <_free_r+0x24>
 8009c62:	42a0      	cmp	r0, r4
 8009c64:	d902      	bls.n	8009c6c <_free_r+0x78>
 8009c66:	230c      	movs	r3, #12
 8009c68:	602b      	str	r3, [r5, #0]
 8009c6a:	e7d5      	b.n	8009c18 <_free_r+0x24>
 8009c6c:	6821      	ldr	r1, [r4, #0]
 8009c6e:	1860      	adds	r0, r4, r1
 8009c70:	4283      	cmp	r3, r0
 8009c72:	d103      	bne.n	8009c7c <_free_r+0x88>
 8009c74:	6818      	ldr	r0, [r3, #0]
 8009c76:	685b      	ldr	r3, [r3, #4]
 8009c78:	1841      	adds	r1, r0, r1
 8009c7a:	6021      	str	r1, [r4, #0]
 8009c7c:	6063      	str	r3, [r4, #4]
 8009c7e:	6054      	str	r4, [r2, #4]
 8009c80:	e7ca      	b.n	8009c18 <_free_r+0x24>
 8009c82:	46c0      	nop			; (mov r8, r8)
 8009c84:	20000208 	.word	0x20000208

08009c88 <_malloc_r>:
 8009c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c8a:	2303      	movs	r3, #3
 8009c8c:	1ccd      	adds	r5, r1, #3
 8009c8e:	439d      	bics	r5, r3
 8009c90:	3508      	adds	r5, #8
 8009c92:	0006      	movs	r6, r0
 8009c94:	2d0c      	cmp	r5, #12
 8009c96:	d21f      	bcs.n	8009cd8 <_malloc_r+0x50>
 8009c98:	250c      	movs	r5, #12
 8009c9a:	42a9      	cmp	r1, r5
 8009c9c:	d81e      	bhi.n	8009cdc <_malloc_r+0x54>
 8009c9e:	0030      	movs	r0, r6
 8009ca0:	f000 fa2a 	bl	800a0f8 <__malloc_lock>
 8009ca4:	4925      	ldr	r1, [pc, #148]	; (8009d3c <_malloc_r+0xb4>)
 8009ca6:	680a      	ldr	r2, [r1, #0]
 8009ca8:	0014      	movs	r4, r2
 8009caa:	2c00      	cmp	r4, #0
 8009cac:	d11a      	bne.n	8009ce4 <_malloc_r+0x5c>
 8009cae:	4f24      	ldr	r7, [pc, #144]	; (8009d40 <_malloc_r+0xb8>)
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d104      	bne.n	8009cc0 <_malloc_r+0x38>
 8009cb6:	0021      	movs	r1, r4
 8009cb8:	0030      	movs	r0, r6
 8009cba:	f000 f9ab 	bl	800a014 <_sbrk_r>
 8009cbe:	6038      	str	r0, [r7, #0]
 8009cc0:	0029      	movs	r1, r5
 8009cc2:	0030      	movs	r0, r6
 8009cc4:	f000 f9a6 	bl	800a014 <_sbrk_r>
 8009cc8:	1c43      	adds	r3, r0, #1
 8009cca:	d12b      	bne.n	8009d24 <_malloc_r+0x9c>
 8009ccc:	230c      	movs	r3, #12
 8009cce:	0030      	movs	r0, r6
 8009cd0:	6033      	str	r3, [r6, #0]
 8009cd2:	f000 fa19 	bl	800a108 <__malloc_unlock>
 8009cd6:	e003      	b.n	8009ce0 <_malloc_r+0x58>
 8009cd8:	2d00      	cmp	r5, #0
 8009cda:	dade      	bge.n	8009c9a <_malloc_r+0x12>
 8009cdc:	230c      	movs	r3, #12
 8009cde:	6033      	str	r3, [r6, #0]
 8009ce0:	2000      	movs	r0, #0
 8009ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ce4:	6823      	ldr	r3, [r4, #0]
 8009ce6:	1b5b      	subs	r3, r3, r5
 8009ce8:	d419      	bmi.n	8009d1e <_malloc_r+0x96>
 8009cea:	2b0b      	cmp	r3, #11
 8009cec:	d903      	bls.n	8009cf6 <_malloc_r+0x6e>
 8009cee:	6023      	str	r3, [r4, #0]
 8009cf0:	18e4      	adds	r4, r4, r3
 8009cf2:	6025      	str	r5, [r4, #0]
 8009cf4:	e003      	b.n	8009cfe <_malloc_r+0x76>
 8009cf6:	6863      	ldr	r3, [r4, #4]
 8009cf8:	42a2      	cmp	r2, r4
 8009cfa:	d10e      	bne.n	8009d1a <_malloc_r+0x92>
 8009cfc:	600b      	str	r3, [r1, #0]
 8009cfe:	0030      	movs	r0, r6
 8009d00:	f000 fa02 	bl	800a108 <__malloc_unlock>
 8009d04:	0020      	movs	r0, r4
 8009d06:	2207      	movs	r2, #7
 8009d08:	300b      	adds	r0, #11
 8009d0a:	1d23      	adds	r3, r4, #4
 8009d0c:	4390      	bics	r0, r2
 8009d0e:	1ac2      	subs	r2, r0, r3
 8009d10:	4298      	cmp	r0, r3
 8009d12:	d0e6      	beq.n	8009ce2 <_malloc_r+0x5a>
 8009d14:	1a1b      	subs	r3, r3, r0
 8009d16:	50a3      	str	r3, [r4, r2]
 8009d18:	e7e3      	b.n	8009ce2 <_malloc_r+0x5a>
 8009d1a:	6053      	str	r3, [r2, #4]
 8009d1c:	e7ef      	b.n	8009cfe <_malloc_r+0x76>
 8009d1e:	0022      	movs	r2, r4
 8009d20:	6864      	ldr	r4, [r4, #4]
 8009d22:	e7c2      	b.n	8009caa <_malloc_r+0x22>
 8009d24:	2303      	movs	r3, #3
 8009d26:	1cc4      	adds	r4, r0, #3
 8009d28:	439c      	bics	r4, r3
 8009d2a:	42a0      	cmp	r0, r4
 8009d2c:	d0e1      	beq.n	8009cf2 <_malloc_r+0x6a>
 8009d2e:	1a21      	subs	r1, r4, r0
 8009d30:	0030      	movs	r0, r6
 8009d32:	f000 f96f 	bl	800a014 <_sbrk_r>
 8009d36:	1c43      	adds	r3, r0, #1
 8009d38:	d1db      	bne.n	8009cf2 <_malloc_r+0x6a>
 8009d3a:	e7c7      	b.n	8009ccc <_malloc_r+0x44>
 8009d3c:	20000208 	.word	0x20000208
 8009d40:	2000020c 	.word	0x2000020c

08009d44 <__ssputs_r>:
 8009d44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d46:	688e      	ldr	r6, [r1, #8]
 8009d48:	b085      	sub	sp, #20
 8009d4a:	0007      	movs	r7, r0
 8009d4c:	000c      	movs	r4, r1
 8009d4e:	9203      	str	r2, [sp, #12]
 8009d50:	9301      	str	r3, [sp, #4]
 8009d52:	429e      	cmp	r6, r3
 8009d54:	d83c      	bhi.n	8009dd0 <__ssputs_r+0x8c>
 8009d56:	2390      	movs	r3, #144	; 0x90
 8009d58:	898a      	ldrh	r2, [r1, #12]
 8009d5a:	00db      	lsls	r3, r3, #3
 8009d5c:	421a      	tst	r2, r3
 8009d5e:	d034      	beq.n	8009dca <__ssputs_r+0x86>
 8009d60:	2503      	movs	r5, #3
 8009d62:	6909      	ldr	r1, [r1, #16]
 8009d64:	6823      	ldr	r3, [r4, #0]
 8009d66:	1a5b      	subs	r3, r3, r1
 8009d68:	9302      	str	r3, [sp, #8]
 8009d6a:	6963      	ldr	r3, [r4, #20]
 8009d6c:	9802      	ldr	r0, [sp, #8]
 8009d6e:	435d      	muls	r5, r3
 8009d70:	0feb      	lsrs	r3, r5, #31
 8009d72:	195d      	adds	r5, r3, r5
 8009d74:	9b01      	ldr	r3, [sp, #4]
 8009d76:	106d      	asrs	r5, r5, #1
 8009d78:	3301      	adds	r3, #1
 8009d7a:	181b      	adds	r3, r3, r0
 8009d7c:	42ab      	cmp	r3, r5
 8009d7e:	d900      	bls.n	8009d82 <__ssputs_r+0x3e>
 8009d80:	001d      	movs	r5, r3
 8009d82:	0553      	lsls	r3, r2, #21
 8009d84:	d532      	bpl.n	8009dec <__ssputs_r+0xa8>
 8009d86:	0029      	movs	r1, r5
 8009d88:	0038      	movs	r0, r7
 8009d8a:	f7ff ff7d 	bl	8009c88 <_malloc_r>
 8009d8e:	1e06      	subs	r6, r0, #0
 8009d90:	d109      	bne.n	8009da6 <__ssputs_r+0x62>
 8009d92:	230c      	movs	r3, #12
 8009d94:	603b      	str	r3, [r7, #0]
 8009d96:	2340      	movs	r3, #64	; 0x40
 8009d98:	2001      	movs	r0, #1
 8009d9a:	89a2      	ldrh	r2, [r4, #12]
 8009d9c:	4240      	negs	r0, r0
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	81a3      	strh	r3, [r4, #12]
 8009da2:	b005      	add	sp, #20
 8009da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009da6:	9a02      	ldr	r2, [sp, #8]
 8009da8:	6921      	ldr	r1, [r4, #16]
 8009daa:	f7ff fa42 	bl	8009232 <memcpy>
 8009dae:	89a3      	ldrh	r3, [r4, #12]
 8009db0:	4a14      	ldr	r2, [pc, #80]	; (8009e04 <__ssputs_r+0xc0>)
 8009db2:	401a      	ands	r2, r3
 8009db4:	2380      	movs	r3, #128	; 0x80
 8009db6:	4313      	orrs	r3, r2
 8009db8:	81a3      	strh	r3, [r4, #12]
 8009dba:	9b02      	ldr	r3, [sp, #8]
 8009dbc:	6126      	str	r6, [r4, #16]
 8009dbe:	18f6      	adds	r6, r6, r3
 8009dc0:	6026      	str	r6, [r4, #0]
 8009dc2:	6165      	str	r5, [r4, #20]
 8009dc4:	9e01      	ldr	r6, [sp, #4]
 8009dc6:	1aed      	subs	r5, r5, r3
 8009dc8:	60a5      	str	r5, [r4, #8]
 8009dca:	9b01      	ldr	r3, [sp, #4]
 8009dcc:	429e      	cmp	r6, r3
 8009dce:	d900      	bls.n	8009dd2 <__ssputs_r+0x8e>
 8009dd0:	9e01      	ldr	r6, [sp, #4]
 8009dd2:	0032      	movs	r2, r6
 8009dd4:	9903      	ldr	r1, [sp, #12]
 8009dd6:	6820      	ldr	r0, [r4, #0]
 8009dd8:	f000 f97a 	bl	800a0d0 <memmove>
 8009ddc:	68a3      	ldr	r3, [r4, #8]
 8009dde:	2000      	movs	r0, #0
 8009de0:	1b9b      	subs	r3, r3, r6
 8009de2:	60a3      	str	r3, [r4, #8]
 8009de4:	6823      	ldr	r3, [r4, #0]
 8009de6:	199e      	adds	r6, r3, r6
 8009de8:	6026      	str	r6, [r4, #0]
 8009dea:	e7da      	b.n	8009da2 <__ssputs_r+0x5e>
 8009dec:	002a      	movs	r2, r5
 8009dee:	0038      	movs	r0, r7
 8009df0:	f000 f992 	bl	800a118 <_realloc_r>
 8009df4:	1e06      	subs	r6, r0, #0
 8009df6:	d1e0      	bne.n	8009dba <__ssputs_r+0x76>
 8009df8:	0038      	movs	r0, r7
 8009dfa:	6921      	ldr	r1, [r4, #16]
 8009dfc:	f7ff fefa 	bl	8009bf4 <_free_r>
 8009e00:	e7c7      	b.n	8009d92 <__ssputs_r+0x4e>
 8009e02:	46c0      	nop			; (mov r8, r8)
 8009e04:	fffffb7f 	.word	0xfffffb7f

08009e08 <_svfiprintf_r>:
 8009e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e0a:	b0a1      	sub	sp, #132	; 0x84
 8009e0c:	9003      	str	r0, [sp, #12]
 8009e0e:	001d      	movs	r5, r3
 8009e10:	898b      	ldrh	r3, [r1, #12]
 8009e12:	000f      	movs	r7, r1
 8009e14:	0016      	movs	r6, r2
 8009e16:	061b      	lsls	r3, r3, #24
 8009e18:	d511      	bpl.n	8009e3e <_svfiprintf_r+0x36>
 8009e1a:	690b      	ldr	r3, [r1, #16]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d10e      	bne.n	8009e3e <_svfiprintf_r+0x36>
 8009e20:	2140      	movs	r1, #64	; 0x40
 8009e22:	f7ff ff31 	bl	8009c88 <_malloc_r>
 8009e26:	6038      	str	r0, [r7, #0]
 8009e28:	6138      	str	r0, [r7, #16]
 8009e2a:	2800      	cmp	r0, #0
 8009e2c:	d105      	bne.n	8009e3a <_svfiprintf_r+0x32>
 8009e2e:	230c      	movs	r3, #12
 8009e30:	9a03      	ldr	r2, [sp, #12]
 8009e32:	3801      	subs	r0, #1
 8009e34:	6013      	str	r3, [r2, #0]
 8009e36:	b021      	add	sp, #132	; 0x84
 8009e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e3a:	2340      	movs	r3, #64	; 0x40
 8009e3c:	617b      	str	r3, [r7, #20]
 8009e3e:	2300      	movs	r3, #0
 8009e40:	ac08      	add	r4, sp, #32
 8009e42:	6163      	str	r3, [r4, #20]
 8009e44:	3320      	adds	r3, #32
 8009e46:	7663      	strb	r3, [r4, #25]
 8009e48:	3310      	adds	r3, #16
 8009e4a:	76a3      	strb	r3, [r4, #26]
 8009e4c:	9507      	str	r5, [sp, #28]
 8009e4e:	0035      	movs	r5, r6
 8009e50:	782b      	ldrb	r3, [r5, #0]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d001      	beq.n	8009e5a <_svfiprintf_r+0x52>
 8009e56:	2b25      	cmp	r3, #37	; 0x25
 8009e58:	d147      	bne.n	8009eea <_svfiprintf_r+0xe2>
 8009e5a:	1bab      	subs	r3, r5, r6
 8009e5c:	9305      	str	r3, [sp, #20]
 8009e5e:	42b5      	cmp	r5, r6
 8009e60:	d00c      	beq.n	8009e7c <_svfiprintf_r+0x74>
 8009e62:	0032      	movs	r2, r6
 8009e64:	0039      	movs	r1, r7
 8009e66:	9803      	ldr	r0, [sp, #12]
 8009e68:	f7ff ff6c 	bl	8009d44 <__ssputs_r>
 8009e6c:	1c43      	adds	r3, r0, #1
 8009e6e:	d100      	bne.n	8009e72 <_svfiprintf_r+0x6a>
 8009e70:	e0ae      	b.n	8009fd0 <_svfiprintf_r+0x1c8>
 8009e72:	6962      	ldr	r2, [r4, #20]
 8009e74:	9b05      	ldr	r3, [sp, #20]
 8009e76:	4694      	mov	ip, r2
 8009e78:	4463      	add	r3, ip
 8009e7a:	6163      	str	r3, [r4, #20]
 8009e7c:	782b      	ldrb	r3, [r5, #0]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d100      	bne.n	8009e84 <_svfiprintf_r+0x7c>
 8009e82:	e0a5      	b.n	8009fd0 <_svfiprintf_r+0x1c8>
 8009e84:	2201      	movs	r2, #1
 8009e86:	2300      	movs	r3, #0
 8009e88:	4252      	negs	r2, r2
 8009e8a:	6062      	str	r2, [r4, #4]
 8009e8c:	a904      	add	r1, sp, #16
 8009e8e:	3254      	adds	r2, #84	; 0x54
 8009e90:	1852      	adds	r2, r2, r1
 8009e92:	1c6e      	adds	r6, r5, #1
 8009e94:	6023      	str	r3, [r4, #0]
 8009e96:	60e3      	str	r3, [r4, #12]
 8009e98:	60a3      	str	r3, [r4, #8]
 8009e9a:	7013      	strb	r3, [r2, #0]
 8009e9c:	65a3      	str	r3, [r4, #88]	; 0x58
 8009e9e:	2205      	movs	r2, #5
 8009ea0:	7831      	ldrb	r1, [r6, #0]
 8009ea2:	4854      	ldr	r0, [pc, #336]	; (8009ff4 <_svfiprintf_r+0x1ec>)
 8009ea4:	f7ff f9ba 	bl	800921c <memchr>
 8009ea8:	1c75      	adds	r5, r6, #1
 8009eaa:	2800      	cmp	r0, #0
 8009eac:	d11f      	bne.n	8009eee <_svfiprintf_r+0xe6>
 8009eae:	6822      	ldr	r2, [r4, #0]
 8009eb0:	06d3      	lsls	r3, r2, #27
 8009eb2:	d504      	bpl.n	8009ebe <_svfiprintf_r+0xb6>
 8009eb4:	2353      	movs	r3, #83	; 0x53
 8009eb6:	a904      	add	r1, sp, #16
 8009eb8:	185b      	adds	r3, r3, r1
 8009eba:	2120      	movs	r1, #32
 8009ebc:	7019      	strb	r1, [r3, #0]
 8009ebe:	0713      	lsls	r3, r2, #28
 8009ec0:	d504      	bpl.n	8009ecc <_svfiprintf_r+0xc4>
 8009ec2:	2353      	movs	r3, #83	; 0x53
 8009ec4:	a904      	add	r1, sp, #16
 8009ec6:	185b      	adds	r3, r3, r1
 8009ec8:	212b      	movs	r1, #43	; 0x2b
 8009eca:	7019      	strb	r1, [r3, #0]
 8009ecc:	7833      	ldrb	r3, [r6, #0]
 8009ece:	2b2a      	cmp	r3, #42	; 0x2a
 8009ed0:	d016      	beq.n	8009f00 <_svfiprintf_r+0xf8>
 8009ed2:	0035      	movs	r5, r6
 8009ed4:	2100      	movs	r1, #0
 8009ed6:	200a      	movs	r0, #10
 8009ed8:	68e3      	ldr	r3, [r4, #12]
 8009eda:	782a      	ldrb	r2, [r5, #0]
 8009edc:	1c6e      	adds	r6, r5, #1
 8009ede:	3a30      	subs	r2, #48	; 0x30
 8009ee0:	2a09      	cmp	r2, #9
 8009ee2:	d94e      	bls.n	8009f82 <_svfiprintf_r+0x17a>
 8009ee4:	2900      	cmp	r1, #0
 8009ee6:	d111      	bne.n	8009f0c <_svfiprintf_r+0x104>
 8009ee8:	e017      	b.n	8009f1a <_svfiprintf_r+0x112>
 8009eea:	3501      	adds	r5, #1
 8009eec:	e7b0      	b.n	8009e50 <_svfiprintf_r+0x48>
 8009eee:	4b41      	ldr	r3, [pc, #260]	; (8009ff4 <_svfiprintf_r+0x1ec>)
 8009ef0:	6822      	ldr	r2, [r4, #0]
 8009ef2:	1ac0      	subs	r0, r0, r3
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	4083      	lsls	r3, r0
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	002e      	movs	r6, r5
 8009efc:	6023      	str	r3, [r4, #0]
 8009efe:	e7ce      	b.n	8009e9e <_svfiprintf_r+0x96>
 8009f00:	9b07      	ldr	r3, [sp, #28]
 8009f02:	1d19      	adds	r1, r3, #4
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	9107      	str	r1, [sp, #28]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	db01      	blt.n	8009f10 <_svfiprintf_r+0x108>
 8009f0c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f0e:	e004      	b.n	8009f1a <_svfiprintf_r+0x112>
 8009f10:	425b      	negs	r3, r3
 8009f12:	60e3      	str	r3, [r4, #12]
 8009f14:	2302      	movs	r3, #2
 8009f16:	4313      	orrs	r3, r2
 8009f18:	6023      	str	r3, [r4, #0]
 8009f1a:	782b      	ldrb	r3, [r5, #0]
 8009f1c:	2b2e      	cmp	r3, #46	; 0x2e
 8009f1e:	d10a      	bne.n	8009f36 <_svfiprintf_r+0x12e>
 8009f20:	786b      	ldrb	r3, [r5, #1]
 8009f22:	2b2a      	cmp	r3, #42	; 0x2a
 8009f24:	d135      	bne.n	8009f92 <_svfiprintf_r+0x18a>
 8009f26:	9b07      	ldr	r3, [sp, #28]
 8009f28:	3502      	adds	r5, #2
 8009f2a:	1d1a      	adds	r2, r3, #4
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	9207      	str	r2, [sp, #28]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	db2b      	blt.n	8009f8c <_svfiprintf_r+0x184>
 8009f34:	9309      	str	r3, [sp, #36]	; 0x24
 8009f36:	4e30      	ldr	r6, [pc, #192]	; (8009ff8 <_svfiprintf_r+0x1f0>)
 8009f38:	2203      	movs	r2, #3
 8009f3a:	0030      	movs	r0, r6
 8009f3c:	7829      	ldrb	r1, [r5, #0]
 8009f3e:	f7ff f96d 	bl	800921c <memchr>
 8009f42:	2800      	cmp	r0, #0
 8009f44:	d006      	beq.n	8009f54 <_svfiprintf_r+0x14c>
 8009f46:	2340      	movs	r3, #64	; 0x40
 8009f48:	1b80      	subs	r0, r0, r6
 8009f4a:	4083      	lsls	r3, r0
 8009f4c:	6822      	ldr	r2, [r4, #0]
 8009f4e:	3501      	adds	r5, #1
 8009f50:	4313      	orrs	r3, r2
 8009f52:	6023      	str	r3, [r4, #0]
 8009f54:	7829      	ldrb	r1, [r5, #0]
 8009f56:	2206      	movs	r2, #6
 8009f58:	4828      	ldr	r0, [pc, #160]	; (8009ffc <_svfiprintf_r+0x1f4>)
 8009f5a:	1c6e      	adds	r6, r5, #1
 8009f5c:	7621      	strb	r1, [r4, #24]
 8009f5e:	f7ff f95d 	bl	800921c <memchr>
 8009f62:	2800      	cmp	r0, #0
 8009f64:	d03c      	beq.n	8009fe0 <_svfiprintf_r+0x1d8>
 8009f66:	4b26      	ldr	r3, [pc, #152]	; (800a000 <_svfiprintf_r+0x1f8>)
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d125      	bne.n	8009fb8 <_svfiprintf_r+0x1b0>
 8009f6c:	2207      	movs	r2, #7
 8009f6e:	9b07      	ldr	r3, [sp, #28]
 8009f70:	3307      	adds	r3, #7
 8009f72:	4393      	bics	r3, r2
 8009f74:	3308      	adds	r3, #8
 8009f76:	9307      	str	r3, [sp, #28]
 8009f78:	6963      	ldr	r3, [r4, #20]
 8009f7a:	9a04      	ldr	r2, [sp, #16]
 8009f7c:	189b      	adds	r3, r3, r2
 8009f7e:	6163      	str	r3, [r4, #20]
 8009f80:	e765      	b.n	8009e4e <_svfiprintf_r+0x46>
 8009f82:	4343      	muls	r3, r0
 8009f84:	0035      	movs	r5, r6
 8009f86:	2101      	movs	r1, #1
 8009f88:	189b      	adds	r3, r3, r2
 8009f8a:	e7a6      	b.n	8009eda <_svfiprintf_r+0xd2>
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	425b      	negs	r3, r3
 8009f90:	e7d0      	b.n	8009f34 <_svfiprintf_r+0x12c>
 8009f92:	2300      	movs	r3, #0
 8009f94:	200a      	movs	r0, #10
 8009f96:	001a      	movs	r2, r3
 8009f98:	3501      	adds	r5, #1
 8009f9a:	6063      	str	r3, [r4, #4]
 8009f9c:	7829      	ldrb	r1, [r5, #0]
 8009f9e:	1c6e      	adds	r6, r5, #1
 8009fa0:	3930      	subs	r1, #48	; 0x30
 8009fa2:	2909      	cmp	r1, #9
 8009fa4:	d903      	bls.n	8009fae <_svfiprintf_r+0x1a6>
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d0c5      	beq.n	8009f36 <_svfiprintf_r+0x12e>
 8009faa:	9209      	str	r2, [sp, #36]	; 0x24
 8009fac:	e7c3      	b.n	8009f36 <_svfiprintf_r+0x12e>
 8009fae:	4342      	muls	r2, r0
 8009fb0:	0035      	movs	r5, r6
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	1852      	adds	r2, r2, r1
 8009fb6:	e7f1      	b.n	8009f9c <_svfiprintf_r+0x194>
 8009fb8:	ab07      	add	r3, sp, #28
 8009fba:	9300      	str	r3, [sp, #0]
 8009fbc:	003a      	movs	r2, r7
 8009fbe:	0021      	movs	r1, r4
 8009fc0:	4b10      	ldr	r3, [pc, #64]	; (800a004 <_svfiprintf_r+0x1fc>)
 8009fc2:	9803      	ldr	r0, [sp, #12]
 8009fc4:	f7fc f9ea 	bl	800639c <_printf_float>
 8009fc8:	9004      	str	r0, [sp, #16]
 8009fca:	9b04      	ldr	r3, [sp, #16]
 8009fcc:	3301      	adds	r3, #1
 8009fce:	d1d3      	bne.n	8009f78 <_svfiprintf_r+0x170>
 8009fd0:	89bb      	ldrh	r3, [r7, #12]
 8009fd2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009fd4:	065b      	lsls	r3, r3, #25
 8009fd6:	d400      	bmi.n	8009fda <_svfiprintf_r+0x1d2>
 8009fd8:	e72d      	b.n	8009e36 <_svfiprintf_r+0x2e>
 8009fda:	2001      	movs	r0, #1
 8009fdc:	4240      	negs	r0, r0
 8009fde:	e72a      	b.n	8009e36 <_svfiprintf_r+0x2e>
 8009fe0:	ab07      	add	r3, sp, #28
 8009fe2:	9300      	str	r3, [sp, #0]
 8009fe4:	003a      	movs	r2, r7
 8009fe6:	0021      	movs	r1, r4
 8009fe8:	4b06      	ldr	r3, [pc, #24]	; (800a004 <_svfiprintf_r+0x1fc>)
 8009fea:	9803      	ldr	r0, [sp, #12]
 8009fec:	f7fc fc94 	bl	8006918 <_printf_i>
 8009ff0:	e7ea      	b.n	8009fc8 <_svfiprintf_r+0x1c0>
 8009ff2:	46c0      	nop			; (mov r8, r8)
 8009ff4:	0800b2ec 	.word	0x0800b2ec
 8009ff8:	0800b2f2 	.word	0x0800b2f2
 8009ffc:	0800b2f6 	.word	0x0800b2f6
 800a000:	0800639d 	.word	0x0800639d
 800a004:	08009d45 	.word	0x08009d45

0800a008 <nan>:
 800a008:	2000      	movs	r0, #0
 800a00a:	4901      	ldr	r1, [pc, #4]	; (800a010 <nan+0x8>)
 800a00c:	4770      	bx	lr
 800a00e:	46c0      	nop			; (mov r8, r8)
 800a010:	7ff80000 	.word	0x7ff80000

0800a014 <_sbrk_r>:
 800a014:	2300      	movs	r3, #0
 800a016:	b570      	push	{r4, r5, r6, lr}
 800a018:	4d06      	ldr	r5, [pc, #24]	; (800a034 <_sbrk_r+0x20>)
 800a01a:	0004      	movs	r4, r0
 800a01c:	0008      	movs	r0, r1
 800a01e:	602b      	str	r3, [r5, #0]
 800a020:	f7fb feda 	bl	8005dd8 <_sbrk>
 800a024:	1c43      	adds	r3, r0, #1
 800a026:	d103      	bne.n	800a030 <_sbrk_r+0x1c>
 800a028:	682b      	ldr	r3, [r5, #0]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d000      	beq.n	800a030 <_sbrk_r+0x1c>
 800a02e:	6023      	str	r3, [r4, #0]
 800a030:	bd70      	pop	{r4, r5, r6, pc}
 800a032:	46c0      	nop			; (mov r8, r8)
 800a034:	20000888 	.word	0x20000888

0800a038 <strncmp>:
 800a038:	b530      	push	{r4, r5, lr}
 800a03a:	0005      	movs	r5, r0
 800a03c:	1e10      	subs	r0, r2, #0
 800a03e:	d00b      	beq.n	800a058 <strncmp+0x20>
 800a040:	2400      	movs	r4, #0
 800a042:	3a01      	subs	r2, #1
 800a044:	5d2b      	ldrb	r3, [r5, r4]
 800a046:	5d08      	ldrb	r0, [r1, r4]
 800a048:	4283      	cmp	r3, r0
 800a04a:	d104      	bne.n	800a056 <strncmp+0x1e>
 800a04c:	4294      	cmp	r4, r2
 800a04e:	d002      	beq.n	800a056 <strncmp+0x1e>
 800a050:	3401      	adds	r4, #1
 800a052:	2b00      	cmp	r3, #0
 800a054:	d1f6      	bne.n	800a044 <strncmp+0xc>
 800a056:	1a18      	subs	r0, r3, r0
 800a058:	bd30      	pop	{r4, r5, pc}

0800a05a <__ascii_wctomb>:
 800a05a:	0003      	movs	r3, r0
 800a05c:	1e08      	subs	r0, r1, #0
 800a05e:	d005      	beq.n	800a06c <__ascii_wctomb+0x12>
 800a060:	2aff      	cmp	r2, #255	; 0xff
 800a062:	d904      	bls.n	800a06e <__ascii_wctomb+0x14>
 800a064:	228a      	movs	r2, #138	; 0x8a
 800a066:	2001      	movs	r0, #1
 800a068:	601a      	str	r2, [r3, #0]
 800a06a:	4240      	negs	r0, r0
 800a06c:	4770      	bx	lr
 800a06e:	2001      	movs	r0, #1
 800a070:	700a      	strb	r2, [r1, #0]
 800a072:	e7fb      	b.n	800a06c <__ascii_wctomb+0x12>

0800a074 <__assert_func>:
 800a074:	b530      	push	{r4, r5, lr}
 800a076:	0014      	movs	r4, r2
 800a078:	001a      	movs	r2, r3
 800a07a:	4b09      	ldr	r3, [pc, #36]	; (800a0a0 <__assert_func+0x2c>)
 800a07c:	0005      	movs	r5, r0
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	b085      	sub	sp, #20
 800a082:	68d8      	ldr	r0, [r3, #12]
 800a084:	4b07      	ldr	r3, [pc, #28]	; (800a0a4 <__assert_func+0x30>)
 800a086:	2c00      	cmp	r4, #0
 800a088:	d101      	bne.n	800a08e <__assert_func+0x1a>
 800a08a:	4b07      	ldr	r3, [pc, #28]	; (800a0a8 <__assert_func+0x34>)
 800a08c:	001c      	movs	r4, r3
 800a08e:	9301      	str	r3, [sp, #4]
 800a090:	9100      	str	r1, [sp, #0]
 800a092:	002b      	movs	r3, r5
 800a094:	4905      	ldr	r1, [pc, #20]	; (800a0ac <__assert_func+0x38>)
 800a096:	9402      	str	r4, [sp, #8]
 800a098:	f000 f80a 	bl	800a0b0 <fiprintf>
 800a09c:	f000 fa92 	bl	800a5c4 <abort>
 800a0a0:	20000014 	.word	0x20000014
 800a0a4:	0800b2fd 	.word	0x0800b2fd
 800a0a8:	0800b338 	.word	0x0800b338
 800a0ac:	0800b30a 	.word	0x0800b30a

0800a0b0 <fiprintf>:
 800a0b0:	b40e      	push	{r1, r2, r3}
 800a0b2:	b503      	push	{r0, r1, lr}
 800a0b4:	0001      	movs	r1, r0
 800a0b6:	ab03      	add	r3, sp, #12
 800a0b8:	4804      	ldr	r0, [pc, #16]	; (800a0cc <fiprintf+0x1c>)
 800a0ba:	cb04      	ldmia	r3!, {r2}
 800a0bc:	6800      	ldr	r0, [r0, #0]
 800a0be:	9301      	str	r3, [sp, #4]
 800a0c0:	f000 f878 	bl	800a1b4 <_vfiprintf_r>
 800a0c4:	b002      	add	sp, #8
 800a0c6:	bc08      	pop	{r3}
 800a0c8:	b003      	add	sp, #12
 800a0ca:	4718      	bx	r3
 800a0cc:	20000014 	.word	0x20000014

0800a0d0 <memmove>:
 800a0d0:	b510      	push	{r4, lr}
 800a0d2:	4288      	cmp	r0, r1
 800a0d4:	d902      	bls.n	800a0dc <memmove+0xc>
 800a0d6:	188b      	adds	r3, r1, r2
 800a0d8:	4298      	cmp	r0, r3
 800a0da:	d303      	bcc.n	800a0e4 <memmove+0x14>
 800a0dc:	2300      	movs	r3, #0
 800a0de:	e007      	b.n	800a0f0 <memmove+0x20>
 800a0e0:	5c8b      	ldrb	r3, [r1, r2]
 800a0e2:	5483      	strb	r3, [r0, r2]
 800a0e4:	3a01      	subs	r2, #1
 800a0e6:	d2fb      	bcs.n	800a0e0 <memmove+0x10>
 800a0e8:	bd10      	pop	{r4, pc}
 800a0ea:	5ccc      	ldrb	r4, [r1, r3]
 800a0ec:	54c4      	strb	r4, [r0, r3]
 800a0ee:	3301      	adds	r3, #1
 800a0f0:	429a      	cmp	r2, r3
 800a0f2:	d1fa      	bne.n	800a0ea <memmove+0x1a>
 800a0f4:	e7f8      	b.n	800a0e8 <memmove+0x18>
	...

0800a0f8 <__malloc_lock>:
 800a0f8:	b510      	push	{r4, lr}
 800a0fa:	4802      	ldr	r0, [pc, #8]	; (800a104 <__malloc_lock+0xc>)
 800a0fc:	f000 fc39 	bl	800a972 <__retarget_lock_acquire_recursive>
 800a100:	bd10      	pop	{r4, pc}
 800a102:	46c0      	nop			; (mov r8, r8)
 800a104:	20000890 	.word	0x20000890

0800a108 <__malloc_unlock>:
 800a108:	b510      	push	{r4, lr}
 800a10a:	4802      	ldr	r0, [pc, #8]	; (800a114 <__malloc_unlock+0xc>)
 800a10c:	f000 fc32 	bl	800a974 <__retarget_lock_release_recursive>
 800a110:	bd10      	pop	{r4, pc}
 800a112:	46c0      	nop			; (mov r8, r8)
 800a114:	20000890 	.word	0x20000890

0800a118 <_realloc_r>:
 800a118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a11a:	0007      	movs	r7, r0
 800a11c:	000d      	movs	r5, r1
 800a11e:	0016      	movs	r6, r2
 800a120:	2900      	cmp	r1, #0
 800a122:	d105      	bne.n	800a130 <_realloc_r+0x18>
 800a124:	0011      	movs	r1, r2
 800a126:	f7ff fdaf 	bl	8009c88 <_malloc_r>
 800a12a:	0004      	movs	r4, r0
 800a12c:	0020      	movs	r0, r4
 800a12e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a130:	2a00      	cmp	r2, #0
 800a132:	d103      	bne.n	800a13c <_realloc_r+0x24>
 800a134:	f7ff fd5e 	bl	8009bf4 <_free_r>
 800a138:	0034      	movs	r4, r6
 800a13a:	e7f7      	b.n	800a12c <_realloc_r+0x14>
 800a13c:	f000 fc88 	bl	800aa50 <_malloc_usable_size_r>
 800a140:	002c      	movs	r4, r5
 800a142:	42b0      	cmp	r0, r6
 800a144:	d2f2      	bcs.n	800a12c <_realloc_r+0x14>
 800a146:	0031      	movs	r1, r6
 800a148:	0038      	movs	r0, r7
 800a14a:	f7ff fd9d 	bl	8009c88 <_malloc_r>
 800a14e:	1e04      	subs	r4, r0, #0
 800a150:	d0ec      	beq.n	800a12c <_realloc_r+0x14>
 800a152:	0029      	movs	r1, r5
 800a154:	0032      	movs	r2, r6
 800a156:	f7ff f86c 	bl	8009232 <memcpy>
 800a15a:	0029      	movs	r1, r5
 800a15c:	0038      	movs	r0, r7
 800a15e:	f7ff fd49 	bl	8009bf4 <_free_r>
 800a162:	e7e3      	b.n	800a12c <_realloc_r+0x14>

0800a164 <__sfputc_r>:
 800a164:	6893      	ldr	r3, [r2, #8]
 800a166:	b510      	push	{r4, lr}
 800a168:	3b01      	subs	r3, #1
 800a16a:	6093      	str	r3, [r2, #8]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	da04      	bge.n	800a17a <__sfputc_r+0x16>
 800a170:	6994      	ldr	r4, [r2, #24]
 800a172:	42a3      	cmp	r3, r4
 800a174:	db07      	blt.n	800a186 <__sfputc_r+0x22>
 800a176:	290a      	cmp	r1, #10
 800a178:	d005      	beq.n	800a186 <__sfputc_r+0x22>
 800a17a:	6813      	ldr	r3, [r2, #0]
 800a17c:	1c58      	adds	r0, r3, #1
 800a17e:	6010      	str	r0, [r2, #0]
 800a180:	7019      	strb	r1, [r3, #0]
 800a182:	0008      	movs	r0, r1
 800a184:	bd10      	pop	{r4, pc}
 800a186:	f000 f94f 	bl	800a428 <__swbuf_r>
 800a18a:	0001      	movs	r1, r0
 800a18c:	e7f9      	b.n	800a182 <__sfputc_r+0x1e>

0800a18e <__sfputs_r>:
 800a18e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a190:	0006      	movs	r6, r0
 800a192:	000f      	movs	r7, r1
 800a194:	0014      	movs	r4, r2
 800a196:	18d5      	adds	r5, r2, r3
 800a198:	42ac      	cmp	r4, r5
 800a19a:	d101      	bne.n	800a1a0 <__sfputs_r+0x12>
 800a19c:	2000      	movs	r0, #0
 800a19e:	e007      	b.n	800a1b0 <__sfputs_r+0x22>
 800a1a0:	7821      	ldrb	r1, [r4, #0]
 800a1a2:	003a      	movs	r2, r7
 800a1a4:	0030      	movs	r0, r6
 800a1a6:	f7ff ffdd 	bl	800a164 <__sfputc_r>
 800a1aa:	3401      	adds	r4, #1
 800a1ac:	1c43      	adds	r3, r0, #1
 800a1ae:	d1f3      	bne.n	800a198 <__sfputs_r+0xa>
 800a1b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a1b4 <_vfiprintf_r>:
 800a1b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1b6:	b0a1      	sub	sp, #132	; 0x84
 800a1b8:	0006      	movs	r6, r0
 800a1ba:	000c      	movs	r4, r1
 800a1bc:	001f      	movs	r7, r3
 800a1be:	9203      	str	r2, [sp, #12]
 800a1c0:	2800      	cmp	r0, #0
 800a1c2:	d004      	beq.n	800a1ce <_vfiprintf_r+0x1a>
 800a1c4:	6983      	ldr	r3, [r0, #24]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d101      	bne.n	800a1ce <_vfiprintf_r+0x1a>
 800a1ca:	f000 fb31 	bl	800a830 <__sinit>
 800a1ce:	4b8e      	ldr	r3, [pc, #568]	; (800a408 <_vfiprintf_r+0x254>)
 800a1d0:	429c      	cmp	r4, r3
 800a1d2:	d11c      	bne.n	800a20e <_vfiprintf_r+0x5a>
 800a1d4:	6874      	ldr	r4, [r6, #4]
 800a1d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1d8:	07db      	lsls	r3, r3, #31
 800a1da:	d405      	bmi.n	800a1e8 <_vfiprintf_r+0x34>
 800a1dc:	89a3      	ldrh	r3, [r4, #12]
 800a1de:	059b      	lsls	r3, r3, #22
 800a1e0:	d402      	bmi.n	800a1e8 <_vfiprintf_r+0x34>
 800a1e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1e4:	f000 fbc5 	bl	800a972 <__retarget_lock_acquire_recursive>
 800a1e8:	89a3      	ldrh	r3, [r4, #12]
 800a1ea:	071b      	lsls	r3, r3, #28
 800a1ec:	d502      	bpl.n	800a1f4 <_vfiprintf_r+0x40>
 800a1ee:	6923      	ldr	r3, [r4, #16]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d11d      	bne.n	800a230 <_vfiprintf_r+0x7c>
 800a1f4:	0021      	movs	r1, r4
 800a1f6:	0030      	movs	r0, r6
 800a1f8:	f000 f96c 	bl	800a4d4 <__swsetup_r>
 800a1fc:	2800      	cmp	r0, #0
 800a1fe:	d017      	beq.n	800a230 <_vfiprintf_r+0x7c>
 800a200:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a202:	07db      	lsls	r3, r3, #31
 800a204:	d50d      	bpl.n	800a222 <_vfiprintf_r+0x6e>
 800a206:	2001      	movs	r0, #1
 800a208:	4240      	negs	r0, r0
 800a20a:	b021      	add	sp, #132	; 0x84
 800a20c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a20e:	4b7f      	ldr	r3, [pc, #508]	; (800a40c <_vfiprintf_r+0x258>)
 800a210:	429c      	cmp	r4, r3
 800a212:	d101      	bne.n	800a218 <_vfiprintf_r+0x64>
 800a214:	68b4      	ldr	r4, [r6, #8]
 800a216:	e7de      	b.n	800a1d6 <_vfiprintf_r+0x22>
 800a218:	4b7d      	ldr	r3, [pc, #500]	; (800a410 <_vfiprintf_r+0x25c>)
 800a21a:	429c      	cmp	r4, r3
 800a21c:	d1db      	bne.n	800a1d6 <_vfiprintf_r+0x22>
 800a21e:	68f4      	ldr	r4, [r6, #12]
 800a220:	e7d9      	b.n	800a1d6 <_vfiprintf_r+0x22>
 800a222:	89a3      	ldrh	r3, [r4, #12]
 800a224:	059b      	lsls	r3, r3, #22
 800a226:	d4ee      	bmi.n	800a206 <_vfiprintf_r+0x52>
 800a228:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a22a:	f000 fba3 	bl	800a974 <__retarget_lock_release_recursive>
 800a22e:	e7ea      	b.n	800a206 <_vfiprintf_r+0x52>
 800a230:	2300      	movs	r3, #0
 800a232:	ad08      	add	r5, sp, #32
 800a234:	616b      	str	r3, [r5, #20]
 800a236:	3320      	adds	r3, #32
 800a238:	766b      	strb	r3, [r5, #25]
 800a23a:	3310      	adds	r3, #16
 800a23c:	76ab      	strb	r3, [r5, #26]
 800a23e:	9707      	str	r7, [sp, #28]
 800a240:	9f03      	ldr	r7, [sp, #12]
 800a242:	783b      	ldrb	r3, [r7, #0]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d001      	beq.n	800a24c <_vfiprintf_r+0x98>
 800a248:	2b25      	cmp	r3, #37	; 0x25
 800a24a:	d14e      	bne.n	800a2ea <_vfiprintf_r+0x136>
 800a24c:	9b03      	ldr	r3, [sp, #12]
 800a24e:	1afb      	subs	r3, r7, r3
 800a250:	9305      	str	r3, [sp, #20]
 800a252:	9b03      	ldr	r3, [sp, #12]
 800a254:	429f      	cmp	r7, r3
 800a256:	d00d      	beq.n	800a274 <_vfiprintf_r+0xc0>
 800a258:	9b05      	ldr	r3, [sp, #20]
 800a25a:	0021      	movs	r1, r4
 800a25c:	0030      	movs	r0, r6
 800a25e:	9a03      	ldr	r2, [sp, #12]
 800a260:	f7ff ff95 	bl	800a18e <__sfputs_r>
 800a264:	1c43      	adds	r3, r0, #1
 800a266:	d100      	bne.n	800a26a <_vfiprintf_r+0xb6>
 800a268:	e0b5      	b.n	800a3d6 <_vfiprintf_r+0x222>
 800a26a:	696a      	ldr	r2, [r5, #20]
 800a26c:	9b05      	ldr	r3, [sp, #20]
 800a26e:	4694      	mov	ip, r2
 800a270:	4463      	add	r3, ip
 800a272:	616b      	str	r3, [r5, #20]
 800a274:	783b      	ldrb	r3, [r7, #0]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d100      	bne.n	800a27c <_vfiprintf_r+0xc8>
 800a27a:	e0ac      	b.n	800a3d6 <_vfiprintf_r+0x222>
 800a27c:	2201      	movs	r2, #1
 800a27e:	1c7b      	adds	r3, r7, #1
 800a280:	9303      	str	r3, [sp, #12]
 800a282:	2300      	movs	r3, #0
 800a284:	4252      	negs	r2, r2
 800a286:	606a      	str	r2, [r5, #4]
 800a288:	a904      	add	r1, sp, #16
 800a28a:	3254      	adds	r2, #84	; 0x54
 800a28c:	1852      	adds	r2, r2, r1
 800a28e:	602b      	str	r3, [r5, #0]
 800a290:	60eb      	str	r3, [r5, #12]
 800a292:	60ab      	str	r3, [r5, #8]
 800a294:	7013      	strb	r3, [r2, #0]
 800a296:	65ab      	str	r3, [r5, #88]	; 0x58
 800a298:	9b03      	ldr	r3, [sp, #12]
 800a29a:	2205      	movs	r2, #5
 800a29c:	7819      	ldrb	r1, [r3, #0]
 800a29e:	485d      	ldr	r0, [pc, #372]	; (800a414 <_vfiprintf_r+0x260>)
 800a2a0:	f7fe ffbc 	bl	800921c <memchr>
 800a2a4:	9b03      	ldr	r3, [sp, #12]
 800a2a6:	1c5f      	adds	r7, r3, #1
 800a2a8:	2800      	cmp	r0, #0
 800a2aa:	d120      	bne.n	800a2ee <_vfiprintf_r+0x13a>
 800a2ac:	682a      	ldr	r2, [r5, #0]
 800a2ae:	06d3      	lsls	r3, r2, #27
 800a2b0:	d504      	bpl.n	800a2bc <_vfiprintf_r+0x108>
 800a2b2:	2353      	movs	r3, #83	; 0x53
 800a2b4:	a904      	add	r1, sp, #16
 800a2b6:	185b      	adds	r3, r3, r1
 800a2b8:	2120      	movs	r1, #32
 800a2ba:	7019      	strb	r1, [r3, #0]
 800a2bc:	0713      	lsls	r3, r2, #28
 800a2be:	d504      	bpl.n	800a2ca <_vfiprintf_r+0x116>
 800a2c0:	2353      	movs	r3, #83	; 0x53
 800a2c2:	a904      	add	r1, sp, #16
 800a2c4:	185b      	adds	r3, r3, r1
 800a2c6:	212b      	movs	r1, #43	; 0x2b
 800a2c8:	7019      	strb	r1, [r3, #0]
 800a2ca:	9b03      	ldr	r3, [sp, #12]
 800a2cc:	781b      	ldrb	r3, [r3, #0]
 800a2ce:	2b2a      	cmp	r3, #42	; 0x2a
 800a2d0:	d016      	beq.n	800a300 <_vfiprintf_r+0x14c>
 800a2d2:	2100      	movs	r1, #0
 800a2d4:	68eb      	ldr	r3, [r5, #12]
 800a2d6:	9f03      	ldr	r7, [sp, #12]
 800a2d8:	783a      	ldrb	r2, [r7, #0]
 800a2da:	1c78      	adds	r0, r7, #1
 800a2dc:	3a30      	subs	r2, #48	; 0x30
 800a2de:	4684      	mov	ip, r0
 800a2e0:	2a09      	cmp	r2, #9
 800a2e2:	d94f      	bls.n	800a384 <_vfiprintf_r+0x1d0>
 800a2e4:	2900      	cmp	r1, #0
 800a2e6:	d111      	bne.n	800a30c <_vfiprintf_r+0x158>
 800a2e8:	e017      	b.n	800a31a <_vfiprintf_r+0x166>
 800a2ea:	3701      	adds	r7, #1
 800a2ec:	e7a9      	b.n	800a242 <_vfiprintf_r+0x8e>
 800a2ee:	4b49      	ldr	r3, [pc, #292]	; (800a414 <_vfiprintf_r+0x260>)
 800a2f0:	682a      	ldr	r2, [r5, #0]
 800a2f2:	1ac0      	subs	r0, r0, r3
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	4083      	lsls	r3, r0
 800a2f8:	4313      	orrs	r3, r2
 800a2fa:	602b      	str	r3, [r5, #0]
 800a2fc:	9703      	str	r7, [sp, #12]
 800a2fe:	e7cb      	b.n	800a298 <_vfiprintf_r+0xe4>
 800a300:	9b07      	ldr	r3, [sp, #28]
 800a302:	1d19      	adds	r1, r3, #4
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	9107      	str	r1, [sp, #28]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	db01      	blt.n	800a310 <_vfiprintf_r+0x15c>
 800a30c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a30e:	e004      	b.n	800a31a <_vfiprintf_r+0x166>
 800a310:	425b      	negs	r3, r3
 800a312:	60eb      	str	r3, [r5, #12]
 800a314:	2302      	movs	r3, #2
 800a316:	4313      	orrs	r3, r2
 800a318:	602b      	str	r3, [r5, #0]
 800a31a:	783b      	ldrb	r3, [r7, #0]
 800a31c:	2b2e      	cmp	r3, #46	; 0x2e
 800a31e:	d10a      	bne.n	800a336 <_vfiprintf_r+0x182>
 800a320:	787b      	ldrb	r3, [r7, #1]
 800a322:	2b2a      	cmp	r3, #42	; 0x2a
 800a324:	d137      	bne.n	800a396 <_vfiprintf_r+0x1e2>
 800a326:	9b07      	ldr	r3, [sp, #28]
 800a328:	3702      	adds	r7, #2
 800a32a:	1d1a      	adds	r2, r3, #4
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	9207      	str	r2, [sp, #28]
 800a330:	2b00      	cmp	r3, #0
 800a332:	db2d      	blt.n	800a390 <_vfiprintf_r+0x1dc>
 800a334:	9309      	str	r3, [sp, #36]	; 0x24
 800a336:	2203      	movs	r2, #3
 800a338:	7839      	ldrb	r1, [r7, #0]
 800a33a:	4837      	ldr	r0, [pc, #220]	; (800a418 <_vfiprintf_r+0x264>)
 800a33c:	f7fe ff6e 	bl	800921c <memchr>
 800a340:	2800      	cmp	r0, #0
 800a342:	d007      	beq.n	800a354 <_vfiprintf_r+0x1a0>
 800a344:	4b34      	ldr	r3, [pc, #208]	; (800a418 <_vfiprintf_r+0x264>)
 800a346:	682a      	ldr	r2, [r5, #0]
 800a348:	1ac0      	subs	r0, r0, r3
 800a34a:	2340      	movs	r3, #64	; 0x40
 800a34c:	4083      	lsls	r3, r0
 800a34e:	4313      	orrs	r3, r2
 800a350:	3701      	adds	r7, #1
 800a352:	602b      	str	r3, [r5, #0]
 800a354:	7839      	ldrb	r1, [r7, #0]
 800a356:	1c7b      	adds	r3, r7, #1
 800a358:	2206      	movs	r2, #6
 800a35a:	4830      	ldr	r0, [pc, #192]	; (800a41c <_vfiprintf_r+0x268>)
 800a35c:	9303      	str	r3, [sp, #12]
 800a35e:	7629      	strb	r1, [r5, #24]
 800a360:	f7fe ff5c 	bl	800921c <memchr>
 800a364:	2800      	cmp	r0, #0
 800a366:	d045      	beq.n	800a3f4 <_vfiprintf_r+0x240>
 800a368:	4b2d      	ldr	r3, [pc, #180]	; (800a420 <_vfiprintf_r+0x26c>)
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d127      	bne.n	800a3be <_vfiprintf_r+0x20a>
 800a36e:	2207      	movs	r2, #7
 800a370:	9b07      	ldr	r3, [sp, #28]
 800a372:	3307      	adds	r3, #7
 800a374:	4393      	bics	r3, r2
 800a376:	3308      	adds	r3, #8
 800a378:	9307      	str	r3, [sp, #28]
 800a37a:	696b      	ldr	r3, [r5, #20]
 800a37c:	9a04      	ldr	r2, [sp, #16]
 800a37e:	189b      	adds	r3, r3, r2
 800a380:	616b      	str	r3, [r5, #20]
 800a382:	e75d      	b.n	800a240 <_vfiprintf_r+0x8c>
 800a384:	210a      	movs	r1, #10
 800a386:	434b      	muls	r3, r1
 800a388:	4667      	mov	r7, ip
 800a38a:	189b      	adds	r3, r3, r2
 800a38c:	3909      	subs	r1, #9
 800a38e:	e7a3      	b.n	800a2d8 <_vfiprintf_r+0x124>
 800a390:	2301      	movs	r3, #1
 800a392:	425b      	negs	r3, r3
 800a394:	e7ce      	b.n	800a334 <_vfiprintf_r+0x180>
 800a396:	2300      	movs	r3, #0
 800a398:	001a      	movs	r2, r3
 800a39a:	3701      	adds	r7, #1
 800a39c:	606b      	str	r3, [r5, #4]
 800a39e:	7839      	ldrb	r1, [r7, #0]
 800a3a0:	1c78      	adds	r0, r7, #1
 800a3a2:	3930      	subs	r1, #48	; 0x30
 800a3a4:	4684      	mov	ip, r0
 800a3a6:	2909      	cmp	r1, #9
 800a3a8:	d903      	bls.n	800a3b2 <_vfiprintf_r+0x1fe>
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d0c3      	beq.n	800a336 <_vfiprintf_r+0x182>
 800a3ae:	9209      	str	r2, [sp, #36]	; 0x24
 800a3b0:	e7c1      	b.n	800a336 <_vfiprintf_r+0x182>
 800a3b2:	230a      	movs	r3, #10
 800a3b4:	435a      	muls	r2, r3
 800a3b6:	4667      	mov	r7, ip
 800a3b8:	1852      	adds	r2, r2, r1
 800a3ba:	3b09      	subs	r3, #9
 800a3bc:	e7ef      	b.n	800a39e <_vfiprintf_r+0x1ea>
 800a3be:	ab07      	add	r3, sp, #28
 800a3c0:	9300      	str	r3, [sp, #0]
 800a3c2:	0022      	movs	r2, r4
 800a3c4:	0029      	movs	r1, r5
 800a3c6:	0030      	movs	r0, r6
 800a3c8:	4b16      	ldr	r3, [pc, #88]	; (800a424 <_vfiprintf_r+0x270>)
 800a3ca:	f7fb ffe7 	bl	800639c <_printf_float>
 800a3ce:	9004      	str	r0, [sp, #16]
 800a3d0:	9b04      	ldr	r3, [sp, #16]
 800a3d2:	3301      	adds	r3, #1
 800a3d4:	d1d1      	bne.n	800a37a <_vfiprintf_r+0x1c6>
 800a3d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a3d8:	07db      	lsls	r3, r3, #31
 800a3da:	d405      	bmi.n	800a3e8 <_vfiprintf_r+0x234>
 800a3dc:	89a3      	ldrh	r3, [r4, #12]
 800a3de:	059b      	lsls	r3, r3, #22
 800a3e0:	d402      	bmi.n	800a3e8 <_vfiprintf_r+0x234>
 800a3e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3e4:	f000 fac6 	bl	800a974 <__retarget_lock_release_recursive>
 800a3e8:	89a3      	ldrh	r3, [r4, #12]
 800a3ea:	065b      	lsls	r3, r3, #25
 800a3ec:	d500      	bpl.n	800a3f0 <_vfiprintf_r+0x23c>
 800a3ee:	e70a      	b.n	800a206 <_vfiprintf_r+0x52>
 800a3f0:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a3f2:	e70a      	b.n	800a20a <_vfiprintf_r+0x56>
 800a3f4:	ab07      	add	r3, sp, #28
 800a3f6:	9300      	str	r3, [sp, #0]
 800a3f8:	0022      	movs	r2, r4
 800a3fa:	0029      	movs	r1, r5
 800a3fc:	0030      	movs	r0, r6
 800a3fe:	4b09      	ldr	r3, [pc, #36]	; (800a424 <_vfiprintf_r+0x270>)
 800a400:	f7fc fa8a 	bl	8006918 <_printf_i>
 800a404:	e7e3      	b.n	800a3ce <_vfiprintf_r+0x21a>
 800a406:	46c0      	nop			; (mov r8, r8)
 800a408:	0800b35c 	.word	0x0800b35c
 800a40c:	0800b37c 	.word	0x0800b37c
 800a410:	0800b33c 	.word	0x0800b33c
 800a414:	0800b2ec 	.word	0x0800b2ec
 800a418:	0800b2f2 	.word	0x0800b2f2
 800a41c:	0800b2f6 	.word	0x0800b2f6
 800a420:	0800639d 	.word	0x0800639d
 800a424:	0800a18f 	.word	0x0800a18f

0800a428 <__swbuf_r>:
 800a428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a42a:	0005      	movs	r5, r0
 800a42c:	000e      	movs	r6, r1
 800a42e:	0014      	movs	r4, r2
 800a430:	2800      	cmp	r0, #0
 800a432:	d004      	beq.n	800a43e <__swbuf_r+0x16>
 800a434:	6983      	ldr	r3, [r0, #24]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d101      	bne.n	800a43e <__swbuf_r+0x16>
 800a43a:	f000 f9f9 	bl	800a830 <__sinit>
 800a43e:	4b22      	ldr	r3, [pc, #136]	; (800a4c8 <__swbuf_r+0xa0>)
 800a440:	429c      	cmp	r4, r3
 800a442:	d12e      	bne.n	800a4a2 <__swbuf_r+0x7a>
 800a444:	686c      	ldr	r4, [r5, #4]
 800a446:	69a3      	ldr	r3, [r4, #24]
 800a448:	60a3      	str	r3, [r4, #8]
 800a44a:	89a3      	ldrh	r3, [r4, #12]
 800a44c:	071b      	lsls	r3, r3, #28
 800a44e:	d532      	bpl.n	800a4b6 <__swbuf_r+0x8e>
 800a450:	6923      	ldr	r3, [r4, #16]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d02f      	beq.n	800a4b6 <__swbuf_r+0x8e>
 800a456:	6823      	ldr	r3, [r4, #0]
 800a458:	6922      	ldr	r2, [r4, #16]
 800a45a:	b2f7      	uxtb	r7, r6
 800a45c:	1a98      	subs	r0, r3, r2
 800a45e:	6963      	ldr	r3, [r4, #20]
 800a460:	b2f6      	uxtb	r6, r6
 800a462:	4283      	cmp	r3, r0
 800a464:	dc05      	bgt.n	800a472 <__swbuf_r+0x4a>
 800a466:	0021      	movs	r1, r4
 800a468:	0028      	movs	r0, r5
 800a46a:	f000 f93f 	bl	800a6ec <_fflush_r>
 800a46e:	2800      	cmp	r0, #0
 800a470:	d127      	bne.n	800a4c2 <__swbuf_r+0x9a>
 800a472:	68a3      	ldr	r3, [r4, #8]
 800a474:	3001      	adds	r0, #1
 800a476:	3b01      	subs	r3, #1
 800a478:	60a3      	str	r3, [r4, #8]
 800a47a:	6823      	ldr	r3, [r4, #0]
 800a47c:	1c5a      	adds	r2, r3, #1
 800a47e:	6022      	str	r2, [r4, #0]
 800a480:	701f      	strb	r7, [r3, #0]
 800a482:	6963      	ldr	r3, [r4, #20]
 800a484:	4283      	cmp	r3, r0
 800a486:	d004      	beq.n	800a492 <__swbuf_r+0x6a>
 800a488:	89a3      	ldrh	r3, [r4, #12]
 800a48a:	07db      	lsls	r3, r3, #31
 800a48c:	d507      	bpl.n	800a49e <__swbuf_r+0x76>
 800a48e:	2e0a      	cmp	r6, #10
 800a490:	d105      	bne.n	800a49e <__swbuf_r+0x76>
 800a492:	0021      	movs	r1, r4
 800a494:	0028      	movs	r0, r5
 800a496:	f000 f929 	bl	800a6ec <_fflush_r>
 800a49a:	2800      	cmp	r0, #0
 800a49c:	d111      	bne.n	800a4c2 <__swbuf_r+0x9a>
 800a49e:	0030      	movs	r0, r6
 800a4a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4a2:	4b0a      	ldr	r3, [pc, #40]	; (800a4cc <__swbuf_r+0xa4>)
 800a4a4:	429c      	cmp	r4, r3
 800a4a6:	d101      	bne.n	800a4ac <__swbuf_r+0x84>
 800a4a8:	68ac      	ldr	r4, [r5, #8]
 800a4aa:	e7cc      	b.n	800a446 <__swbuf_r+0x1e>
 800a4ac:	4b08      	ldr	r3, [pc, #32]	; (800a4d0 <__swbuf_r+0xa8>)
 800a4ae:	429c      	cmp	r4, r3
 800a4b0:	d1c9      	bne.n	800a446 <__swbuf_r+0x1e>
 800a4b2:	68ec      	ldr	r4, [r5, #12]
 800a4b4:	e7c7      	b.n	800a446 <__swbuf_r+0x1e>
 800a4b6:	0021      	movs	r1, r4
 800a4b8:	0028      	movs	r0, r5
 800a4ba:	f000 f80b 	bl	800a4d4 <__swsetup_r>
 800a4be:	2800      	cmp	r0, #0
 800a4c0:	d0c9      	beq.n	800a456 <__swbuf_r+0x2e>
 800a4c2:	2601      	movs	r6, #1
 800a4c4:	4276      	negs	r6, r6
 800a4c6:	e7ea      	b.n	800a49e <__swbuf_r+0x76>
 800a4c8:	0800b35c 	.word	0x0800b35c
 800a4cc:	0800b37c 	.word	0x0800b37c
 800a4d0:	0800b33c 	.word	0x0800b33c

0800a4d4 <__swsetup_r>:
 800a4d4:	4b37      	ldr	r3, [pc, #220]	; (800a5b4 <__swsetup_r+0xe0>)
 800a4d6:	b570      	push	{r4, r5, r6, lr}
 800a4d8:	681d      	ldr	r5, [r3, #0]
 800a4da:	0006      	movs	r6, r0
 800a4dc:	000c      	movs	r4, r1
 800a4de:	2d00      	cmp	r5, #0
 800a4e0:	d005      	beq.n	800a4ee <__swsetup_r+0x1a>
 800a4e2:	69ab      	ldr	r3, [r5, #24]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d102      	bne.n	800a4ee <__swsetup_r+0x1a>
 800a4e8:	0028      	movs	r0, r5
 800a4ea:	f000 f9a1 	bl	800a830 <__sinit>
 800a4ee:	4b32      	ldr	r3, [pc, #200]	; (800a5b8 <__swsetup_r+0xe4>)
 800a4f0:	429c      	cmp	r4, r3
 800a4f2:	d10f      	bne.n	800a514 <__swsetup_r+0x40>
 800a4f4:	686c      	ldr	r4, [r5, #4]
 800a4f6:	230c      	movs	r3, #12
 800a4f8:	5ee2      	ldrsh	r2, [r4, r3]
 800a4fa:	b293      	uxth	r3, r2
 800a4fc:	0711      	lsls	r1, r2, #28
 800a4fe:	d42d      	bmi.n	800a55c <__swsetup_r+0x88>
 800a500:	06d9      	lsls	r1, r3, #27
 800a502:	d411      	bmi.n	800a528 <__swsetup_r+0x54>
 800a504:	2309      	movs	r3, #9
 800a506:	2001      	movs	r0, #1
 800a508:	6033      	str	r3, [r6, #0]
 800a50a:	3337      	adds	r3, #55	; 0x37
 800a50c:	4313      	orrs	r3, r2
 800a50e:	81a3      	strh	r3, [r4, #12]
 800a510:	4240      	negs	r0, r0
 800a512:	bd70      	pop	{r4, r5, r6, pc}
 800a514:	4b29      	ldr	r3, [pc, #164]	; (800a5bc <__swsetup_r+0xe8>)
 800a516:	429c      	cmp	r4, r3
 800a518:	d101      	bne.n	800a51e <__swsetup_r+0x4a>
 800a51a:	68ac      	ldr	r4, [r5, #8]
 800a51c:	e7eb      	b.n	800a4f6 <__swsetup_r+0x22>
 800a51e:	4b28      	ldr	r3, [pc, #160]	; (800a5c0 <__swsetup_r+0xec>)
 800a520:	429c      	cmp	r4, r3
 800a522:	d1e8      	bne.n	800a4f6 <__swsetup_r+0x22>
 800a524:	68ec      	ldr	r4, [r5, #12]
 800a526:	e7e6      	b.n	800a4f6 <__swsetup_r+0x22>
 800a528:	075b      	lsls	r3, r3, #29
 800a52a:	d513      	bpl.n	800a554 <__swsetup_r+0x80>
 800a52c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a52e:	2900      	cmp	r1, #0
 800a530:	d008      	beq.n	800a544 <__swsetup_r+0x70>
 800a532:	0023      	movs	r3, r4
 800a534:	3344      	adds	r3, #68	; 0x44
 800a536:	4299      	cmp	r1, r3
 800a538:	d002      	beq.n	800a540 <__swsetup_r+0x6c>
 800a53a:	0030      	movs	r0, r6
 800a53c:	f7ff fb5a 	bl	8009bf4 <_free_r>
 800a540:	2300      	movs	r3, #0
 800a542:	6363      	str	r3, [r4, #52]	; 0x34
 800a544:	2224      	movs	r2, #36	; 0x24
 800a546:	89a3      	ldrh	r3, [r4, #12]
 800a548:	4393      	bics	r3, r2
 800a54a:	81a3      	strh	r3, [r4, #12]
 800a54c:	2300      	movs	r3, #0
 800a54e:	6063      	str	r3, [r4, #4]
 800a550:	6923      	ldr	r3, [r4, #16]
 800a552:	6023      	str	r3, [r4, #0]
 800a554:	2308      	movs	r3, #8
 800a556:	89a2      	ldrh	r2, [r4, #12]
 800a558:	4313      	orrs	r3, r2
 800a55a:	81a3      	strh	r3, [r4, #12]
 800a55c:	6923      	ldr	r3, [r4, #16]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d10b      	bne.n	800a57a <__swsetup_r+0xa6>
 800a562:	21a0      	movs	r1, #160	; 0xa0
 800a564:	2280      	movs	r2, #128	; 0x80
 800a566:	89a3      	ldrh	r3, [r4, #12]
 800a568:	0089      	lsls	r1, r1, #2
 800a56a:	0092      	lsls	r2, r2, #2
 800a56c:	400b      	ands	r3, r1
 800a56e:	4293      	cmp	r3, r2
 800a570:	d003      	beq.n	800a57a <__swsetup_r+0xa6>
 800a572:	0021      	movs	r1, r4
 800a574:	0030      	movs	r0, r6
 800a576:	f000 fa27 	bl	800a9c8 <__smakebuf_r>
 800a57a:	220c      	movs	r2, #12
 800a57c:	5ea3      	ldrsh	r3, [r4, r2]
 800a57e:	2001      	movs	r0, #1
 800a580:	001a      	movs	r2, r3
 800a582:	b299      	uxth	r1, r3
 800a584:	4002      	ands	r2, r0
 800a586:	4203      	tst	r3, r0
 800a588:	d00f      	beq.n	800a5aa <__swsetup_r+0xd6>
 800a58a:	2200      	movs	r2, #0
 800a58c:	60a2      	str	r2, [r4, #8]
 800a58e:	6962      	ldr	r2, [r4, #20]
 800a590:	4252      	negs	r2, r2
 800a592:	61a2      	str	r2, [r4, #24]
 800a594:	2000      	movs	r0, #0
 800a596:	6922      	ldr	r2, [r4, #16]
 800a598:	4282      	cmp	r2, r0
 800a59a:	d1ba      	bne.n	800a512 <__swsetup_r+0x3e>
 800a59c:	060a      	lsls	r2, r1, #24
 800a59e:	d5b8      	bpl.n	800a512 <__swsetup_r+0x3e>
 800a5a0:	2240      	movs	r2, #64	; 0x40
 800a5a2:	4313      	orrs	r3, r2
 800a5a4:	81a3      	strh	r3, [r4, #12]
 800a5a6:	3801      	subs	r0, #1
 800a5a8:	e7b3      	b.n	800a512 <__swsetup_r+0x3e>
 800a5aa:	0788      	lsls	r0, r1, #30
 800a5ac:	d400      	bmi.n	800a5b0 <__swsetup_r+0xdc>
 800a5ae:	6962      	ldr	r2, [r4, #20]
 800a5b0:	60a2      	str	r2, [r4, #8]
 800a5b2:	e7ef      	b.n	800a594 <__swsetup_r+0xc0>
 800a5b4:	20000014 	.word	0x20000014
 800a5b8:	0800b35c 	.word	0x0800b35c
 800a5bc:	0800b37c 	.word	0x0800b37c
 800a5c0:	0800b33c 	.word	0x0800b33c

0800a5c4 <abort>:
 800a5c4:	2006      	movs	r0, #6
 800a5c6:	b510      	push	{r4, lr}
 800a5c8:	f000 fa74 	bl	800aab4 <raise>
 800a5cc:	2001      	movs	r0, #1
 800a5ce:	f7fb fbd3 	bl	8005d78 <_exit>
	...

0800a5d4 <__sflush_r>:
 800a5d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a5d6:	898b      	ldrh	r3, [r1, #12]
 800a5d8:	0005      	movs	r5, r0
 800a5da:	000c      	movs	r4, r1
 800a5dc:	071a      	lsls	r2, r3, #28
 800a5de:	d45f      	bmi.n	800a6a0 <__sflush_r+0xcc>
 800a5e0:	684a      	ldr	r2, [r1, #4]
 800a5e2:	2a00      	cmp	r2, #0
 800a5e4:	dc04      	bgt.n	800a5f0 <__sflush_r+0x1c>
 800a5e6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800a5e8:	2a00      	cmp	r2, #0
 800a5ea:	dc01      	bgt.n	800a5f0 <__sflush_r+0x1c>
 800a5ec:	2000      	movs	r0, #0
 800a5ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a5f0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a5f2:	2f00      	cmp	r7, #0
 800a5f4:	d0fa      	beq.n	800a5ec <__sflush_r+0x18>
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	2180      	movs	r1, #128	; 0x80
 800a5fa:	682e      	ldr	r6, [r5, #0]
 800a5fc:	602a      	str	r2, [r5, #0]
 800a5fe:	001a      	movs	r2, r3
 800a600:	0149      	lsls	r1, r1, #5
 800a602:	400a      	ands	r2, r1
 800a604:	420b      	tst	r3, r1
 800a606:	d034      	beq.n	800a672 <__sflush_r+0x9e>
 800a608:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a60a:	89a3      	ldrh	r3, [r4, #12]
 800a60c:	075b      	lsls	r3, r3, #29
 800a60e:	d506      	bpl.n	800a61e <__sflush_r+0x4a>
 800a610:	6863      	ldr	r3, [r4, #4]
 800a612:	1ac0      	subs	r0, r0, r3
 800a614:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a616:	2b00      	cmp	r3, #0
 800a618:	d001      	beq.n	800a61e <__sflush_r+0x4a>
 800a61a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a61c:	1ac0      	subs	r0, r0, r3
 800a61e:	0002      	movs	r2, r0
 800a620:	6a21      	ldr	r1, [r4, #32]
 800a622:	2300      	movs	r3, #0
 800a624:	0028      	movs	r0, r5
 800a626:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a628:	47b8      	blx	r7
 800a62a:	89a1      	ldrh	r1, [r4, #12]
 800a62c:	1c43      	adds	r3, r0, #1
 800a62e:	d106      	bne.n	800a63e <__sflush_r+0x6a>
 800a630:	682b      	ldr	r3, [r5, #0]
 800a632:	2b1d      	cmp	r3, #29
 800a634:	d831      	bhi.n	800a69a <__sflush_r+0xc6>
 800a636:	4a2c      	ldr	r2, [pc, #176]	; (800a6e8 <__sflush_r+0x114>)
 800a638:	40da      	lsrs	r2, r3
 800a63a:	07d3      	lsls	r3, r2, #31
 800a63c:	d52d      	bpl.n	800a69a <__sflush_r+0xc6>
 800a63e:	2300      	movs	r3, #0
 800a640:	6063      	str	r3, [r4, #4]
 800a642:	6923      	ldr	r3, [r4, #16]
 800a644:	6023      	str	r3, [r4, #0]
 800a646:	04cb      	lsls	r3, r1, #19
 800a648:	d505      	bpl.n	800a656 <__sflush_r+0x82>
 800a64a:	1c43      	adds	r3, r0, #1
 800a64c:	d102      	bne.n	800a654 <__sflush_r+0x80>
 800a64e:	682b      	ldr	r3, [r5, #0]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d100      	bne.n	800a656 <__sflush_r+0x82>
 800a654:	6560      	str	r0, [r4, #84]	; 0x54
 800a656:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a658:	602e      	str	r6, [r5, #0]
 800a65a:	2900      	cmp	r1, #0
 800a65c:	d0c6      	beq.n	800a5ec <__sflush_r+0x18>
 800a65e:	0023      	movs	r3, r4
 800a660:	3344      	adds	r3, #68	; 0x44
 800a662:	4299      	cmp	r1, r3
 800a664:	d002      	beq.n	800a66c <__sflush_r+0x98>
 800a666:	0028      	movs	r0, r5
 800a668:	f7ff fac4 	bl	8009bf4 <_free_r>
 800a66c:	2000      	movs	r0, #0
 800a66e:	6360      	str	r0, [r4, #52]	; 0x34
 800a670:	e7bd      	b.n	800a5ee <__sflush_r+0x1a>
 800a672:	2301      	movs	r3, #1
 800a674:	0028      	movs	r0, r5
 800a676:	6a21      	ldr	r1, [r4, #32]
 800a678:	47b8      	blx	r7
 800a67a:	1c43      	adds	r3, r0, #1
 800a67c:	d1c5      	bne.n	800a60a <__sflush_r+0x36>
 800a67e:	682b      	ldr	r3, [r5, #0]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d0c2      	beq.n	800a60a <__sflush_r+0x36>
 800a684:	2b1d      	cmp	r3, #29
 800a686:	d001      	beq.n	800a68c <__sflush_r+0xb8>
 800a688:	2b16      	cmp	r3, #22
 800a68a:	d101      	bne.n	800a690 <__sflush_r+0xbc>
 800a68c:	602e      	str	r6, [r5, #0]
 800a68e:	e7ad      	b.n	800a5ec <__sflush_r+0x18>
 800a690:	2340      	movs	r3, #64	; 0x40
 800a692:	89a2      	ldrh	r2, [r4, #12]
 800a694:	4313      	orrs	r3, r2
 800a696:	81a3      	strh	r3, [r4, #12]
 800a698:	e7a9      	b.n	800a5ee <__sflush_r+0x1a>
 800a69a:	2340      	movs	r3, #64	; 0x40
 800a69c:	430b      	orrs	r3, r1
 800a69e:	e7fa      	b.n	800a696 <__sflush_r+0xc2>
 800a6a0:	690f      	ldr	r7, [r1, #16]
 800a6a2:	2f00      	cmp	r7, #0
 800a6a4:	d0a2      	beq.n	800a5ec <__sflush_r+0x18>
 800a6a6:	680a      	ldr	r2, [r1, #0]
 800a6a8:	600f      	str	r7, [r1, #0]
 800a6aa:	1bd2      	subs	r2, r2, r7
 800a6ac:	9201      	str	r2, [sp, #4]
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	079b      	lsls	r3, r3, #30
 800a6b2:	d100      	bne.n	800a6b6 <__sflush_r+0xe2>
 800a6b4:	694a      	ldr	r2, [r1, #20]
 800a6b6:	60a2      	str	r2, [r4, #8]
 800a6b8:	9b01      	ldr	r3, [sp, #4]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	dc00      	bgt.n	800a6c0 <__sflush_r+0xec>
 800a6be:	e795      	b.n	800a5ec <__sflush_r+0x18>
 800a6c0:	003a      	movs	r2, r7
 800a6c2:	0028      	movs	r0, r5
 800a6c4:	9b01      	ldr	r3, [sp, #4]
 800a6c6:	6a21      	ldr	r1, [r4, #32]
 800a6c8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a6ca:	47b0      	blx	r6
 800a6cc:	2800      	cmp	r0, #0
 800a6ce:	dc06      	bgt.n	800a6de <__sflush_r+0x10a>
 800a6d0:	2340      	movs	r3, #64	; 0x40
 800a6d2:	2001      	movs	r0, #1
 800a6d4:	89a2      	ldrh	r2, [r4, #12]
 800a6d6:	4240      	negs	r0, r0
 800a6d8:	4313      	orrs	r3, r2
 800a6da:	81a3      	strh	r3, [r4, #12]
 800a6dc:	e787      	b.n	800a5ee <__sflush_r+0x1a>
 800a6de:	9b01      	ldr	r3, [sp, #4]
 800a6e0:	183f      	adds	r7, r7, r0
 800a6e2:	1a1b      	subs	r3, r3, r0
 800a6e4:	9301      	str	r3, [sp, #4]
 800a6e6:	e7e7      	b.n	800a6b8 <__sflush_r+0xe4>
 800a6e8:	20400001 	.word	0x20400001

0800a6ec <_fflush_r>:
 800a6ec:	690b      	ldr	r3, [r1, #16]
 800a6ee:	b570      	push	{r4, r5, r6, lr}
 800a6f0:	0005      	movs	r5, r0
 800a6f2:	000c      	movs	r4, r1
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d102      	bne.n	800a6fe <_fflush_r+0x12>
 800a6f8:	2500      	movs	r5, #0
 800a6fa:	0028      	movs	r0, r5
 800a6fc:	bd70      	pop	{r4, r5, r6, pc}
 800a6fe:	2800      	cmp	r0, #0
 800a700:	d004      	beq.n	800a70c <_fflush_r+0x20>
 800a702:	6983      	ldr	r3, [r0, #24]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d101      	bne.n	800a70c <_fflush_r+0x20>
 800a708:	f000 f892 	bl	800a830 <__sinit>
 800a70c:	4b14      	ldr	r3, [pc, #80]	; (800a760 <_fflush_r+0x74>)
 800a70e:	429c      	cmp	r4, r3
 800a710:	d11b      	bne.n	800a74a <_fflush_r+0x5e>
 800a712:	686c      	ldr	r4, [r5, #4]
 800a714:	220c      	movs	r2, #12
 800a716:	5ea3      	ldrsh	r3, [r4, r2]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d0ed      	beq.n	800a6f8 <_fflush_r+0xc>
 800a71c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a71e:	07d2      	lsls	r2, r2, #31
 800a720:	d404      	bmi.n	800a72c <_fflush_r+0x40>
 800a722:	059b      	lsls	r3, r3, #22
 800a724:	d402      	bmi.n	800a72c <_fflush_r+0x40>
 800a726:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a728:	f000 f923 	bl	800a972 <__retarget_lock_acquire_recursive>
 800a72c:	0028      	movs	r0, r5
 800a72e:	0021      	movs	r1, r4
 800a730:	f7ff ff50 	bl	800a5d4 <__sflush_r>
 800a734:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a736:	0005      	movs	r5, r0
 800a738:	07db      	lsls	r3, r3, #31
 800a73a:	d4de      	bmi.n	800a6fa <_fflush_r+0xe>
 800a73c:	89a3      	ldrh	r3, [r4, #12]
 800a73e:	059b      	lsls	r3, r3, #22
 800a740:	d4db      	bmi.n	800a6fa <_fflush_r+0xe>
 800a742:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a744:	f000 f916 	bl	800a974 <__retarget_lock_release_recursive>
 800a748:	e7d7      	b.n	800a6fa <_fflush_r+0xe>
 800a74a:	4b06      	ldr	r3, [pc, #24]	; (800a764 <_fflush_r+0x78>)
 800a74c:	429c      	cmp	r4, r3
 800a74e:	d101      	bne.n	800a754 <_fflush_r+0x68>
 800a750:	68ac      	ldr	r4, [r5, #8]
 800a752:	e7df      	b.n	800a714 <_fflush_r+0x28>
 800a754:	4b04      	ldr	r3, [pc, #16]	; (800a768 <_fflush_r+0x7c>)
 800a756:	429c      	cmp	r4, r3
 800a758:	d1dc      	bne.n	800a714 <_fflush_r+0x28>
 800a75a:	68ec      	ldr	r4, [r5, #12]
 800a75c:	e7da      	b.n	800a714 <_fflush_r+0x28>
 800a75e:	46c0      	nop			; (mov r8, r8)
 800a760:	0800b35c 	.word	0x0800b35c
 800a764:	0800b37c 	.word	0x0800b37c
 800a768:	0800b33c 	.word	0x0800b33c

0800a76c <std>:
 800a76c:	2300      	movs	r3, #0
 800a76e:	b510      	push	{r4, lr}
 800a770:	0004      	movs	r4, r0
 800a772:	6003      	str	r3, [r0, #0]
 800a774:	6043      	str	r3, [r0, #4]
 800a776:	6083      	str	r3, [r0, #8]
 800a778:	8181      	strh	r1, [r0, #12]
 800a77a:	6643      	str	r3, [r0, #100]	; 0x64
 800a77c:	0019      	movs	r1, r3
 800a77e:	81c2      	strh	r2, [r0, #14]
 800a780:	6103      	str	r3, [r0, #16]
 800a782:	6143      	str	r3, [r0, #20]
 800a784:	6183      	str	r3, [r0, #24]
 800a786:	2208      	movs	r2, #8
 800a788:	305c      	adds	r0, #92	; 0x5c
 800a78a:	f7fb fd55 	bl	8006238 <memset>
 800a78e:	4b05      	ldr	r3, [pc, #20]	; (800a7a4 <std+0x38>)
 800a790:	6263      	str	r3, [r4, #36]	; 0x24
 800a792:	4b05      	ldr	r3, [pc, #20]	; (800a7a8 <std+0x3c>)
 800a794:	6224      	str	r4, [r4, #32]
 800a796:	62a3      	str	r3, [r4, #40]	; 0x28
 800a798:	4b04      	ldr	r3, [pc, #16]	; (800a7ac <std+0x40>)
 800a79a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a79c:	4b04      	ldr	r3, [pc, #16]	; (800a7b0 <std+0x44>)
 800a79e:	6323      	str	r3, [r4, #48]	; 0x30
 800a7a0:	bd10      	pop	{r4, pc}
 800a7a2:	46c0      	nop			; (mov r8, r8)
 800a7a4:	0800aaf5 	.word	0x0800aaf5
 800a7a8:	0800ab1d 	.word	0x0800ab1d
 800a7ac:	0800ab55 	.word	0x0800ab55
 800a7b0:	0800ab81 	.word	0x0800ab81

0800a7b4 <_cleanup_r>:
 800a7b4:	b510      	push	{r4, lr}
 800a7b6:	4902      	ldr	r1, [pc, #8]	; (800a7c0 <_cleanup_r+0xc>)
 800a7b8:	f000 f8ba 	bl	800a930 <_fwalk_reent>
 800a7bc:	bd10      	pop	{r4, pc}
 800a7be:	46c0      	nop			; (mov r8, r8)
 800a7c0:	0800a6ed 	.word	0x0800a6ed

0800a7c4 <__sfmoreglue>:
 800a7c4:	b570      	push	{r4, r5, r6, lr}
 800a7c6:	2568      	movs	r5, #104	; 0x68
 800a7c8:	1e4a      	subs	r2, r1, #1
 800a7ca:	4355      	muls	r5, r2
 800a7cc:	000e      	movs	r6, r1
 800a7ce:	0029      	movs	r1, r5
 800a7d0:	3174      	adds	r1, #116	; 0x74
 800a7d2:	f7ff fa59 	bl	8009c88 <_malloc_r>
 800a7d6:	1e04      	subs	r4, r0, #0
 800a7d8:	d008      	beq.n	800a7ec <__sfmoreglue+0x28>
 800a7da:	2100      	movs	r1, #0
 800a7dc:	002a      	movs	r2, r5
 800a7de:	6001      	str	r1, [r0, #0]
 800a7e0:	6046      	str	r6, [r0, #4]
 800a7e2:	300c      	adds	r0, #12
 800a7e4:	60a0      	str	r0, [r4, #8]
 800a7e6:	3268      	adds	r2, #104	; 0x68
 800a7e8:	f7fb fd26 	bl	8006238 <memset>
 800a7ec:	0020      	movs	r0, r4
 800a7ee:	bd70      	pop	{r4, r5, r6, pc}

0800a7f0 <__sfp_lock_acquire>:
 800a7f0:	b510      	push	{r4, lr}
 800a7f2:	4802      	ldr	r0, [pc, #8]	; (800a7fc <__sfp_lock_acquire+0xc>)
 800a7f4:	f000 f8bd 	bl	800a972 <__retarget_lock_acquire_recursive>
 800a7f8:	bd10      	pop	{r4, pc}
 800a7fa:	46c0      	nop			; (mov r8, r8)
 800a7fc:	20000894 	.word	0x20000894

0800a800 <__sfp_lock_release>:
 800a800:	b510      	push	{r4, lr}
 800a802:	4802      	ldr	r0, [pc, #8]	; (800a80c <__sfp_lock_release+0xc>)
 800a804:	f000 f8b6 	bl	800a974 <__retarget_lock_release_recursive>
 800a808:	bd10      	pop	{r4, pc}
 800a80a:	46c0      	nop			; (mov r8, r8)
 800a80c:	20000894 	.word	0x20000894

0800a810 <__sinit_lock_acquire>:
 800a810:	b510      	push	{r4, lr}
 800a812:	4802      	ldr	r0, [pc, #8]	; (800a81c <__sinit_lock_acquire+0xc>)
 800a814:	f000 f8ad 	bl	800a972 <__retarget_lock_acquire_recursive>
 800a818:	bd10      	pop	{r4, pc}
 800a81a:	46c0      	nop			; (mov r8, r8)
 800a81c:	2000088f 	.word	0x2000088f

0800a820 <__sinit_lock_release>:
 800a820:	b510      	push	{r4, lr}
 800a822:	4802      	ldr	r0, [pc, #8]	; (800a82c <__sinit_lock_release+0xc>)
 800a824:	f000 f8a6 	bl	800a974 <__retarget_lock_release_recursive>
 800a828:	bd10      	pop	{r4, pc}
 800a82a:	46c0      	nop			; (mov r8, r8)
 800a82c:	2000088f 	.word	0x2000088f

0800a830 <__sinit>:
 800a830:	b513      	push	{r0, r1, r4, lr}
 800a832:	0004      	movs	r4, r0
 800a834:	f7ff ffec 	bl	800a810 <__sinit_lock_acquire>
 800a838:	69a3      	ldr	r3, [r4, #24]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d002      	beq.n	800a844 <__sinit+0x14>
 800a83e:	f7ff ffef 	bl	800a820 <__sinit_lock_release>
 800a842:	bd13      	pop	{r0, r1, r4, pc}
 800a844:	64a3      	str	r3, [r4, #72]	; 0x48
 800a846:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a848:	6523      	str	r3, [r4, #80]	; 0x50
 800a84a:	4b13      	ldr	r3, [pc, #76]	; (800a898 <__sinit+0x68>)
 800a84c:	4a13      	ldr	r2, [pc, #76]	; (800a89c <__sinit+0x6c>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	62a2      	str	r2, [r4, #40]	; 0x28
 800a852:	9301      	str	r3, [sp, #4]
 800a854:	42a3      	cmp	r3, r4
 800a856:	d101      	bne.n	800a85c <__sinit+0x2c>
 800a858:	2301      	movs	r3, #1
 800a85a:	61a3      	str	r3, [r4, #24]
 800a85c:	0020      	movs	r0, r4
 800a85e:	f000 f81f 	bl	800a8a0 <__sfp>
 800a862:	6060      	str	r0, [r4, #4]
 800a864:	0020      	movs	r0, r4
 800a866:	f000 f81b 	bl	800a8a0 <__sfp>
 800a86a:	60a0      	str	r0, [r4, #8]
 800a86c:	0020      	movs	r0, r4
 800a86e:	f000 f817 	bl	800a8a0 <__sfp>
 800a872:	2200      	movs	r2, #0
 800a874:	2104      	movs	r1, #4
 800a876:	60e0      	str	r0, [r4, #12]
 800a878:	6860      	ldr	r0, [r4, #4]
 800a87a:	f7ff ff77 	bl	800a76c <std>
 800a87e:	2201      	movs	r2, #1
 800a880:	2109      	movs	r1, #9
 800a882:	68a0      	ldr	r0, [r4, #8]
 800a884:	f7ff ff72 	bl	800a76c <std>
 800a888:	2202      	movs	r2, #2
 800a88a:	2112      	movs	r1, #18
 800a88c:	68e0      	ldr	r0, [r4, #12]
 800a88e:	f7ff ff6d 	bl	800a76c <std>
 800a892:	2301      	movs	r3, #1
 800a894:	61a3      	str	r3, [r4, #24]
 800a896:	e7d2      	b.n	800a83e <__sinit+0xe>
 800a898:	0800aee8 	.word	0x0800aee8
 800a89c:	0800a7b5 	.word	0x0800a7b5

0800a8a0 <__sfp>:
 800a8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8a2:	0007      	movs	r7, r0
 800a8a4:	f7ff ffa4 	bl	800a7f0 <__sfp_lock_acquire>
 800a8a8:	4b1f      	ldr	r3, [pc, #124]	; (800a928 <__sfp+0x88>)
 800a8aa:	681e      	ldr	r6, [r3, #0]
 800a8ac:	69b3      	ldr	r3, [r6, #24]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d102      	bne.n	800a8b8 <__sfp+0x18>
 800a8b2:	0030      	movs	r0, r6
 800a8b4:	f7ff ffbc 	bl	800a830 <__sinit>
 800a8b8:	3648      	adds	r6, #72	; 0x48
 800a8ba:	68b4      	ldr	r4, [r6, #8]
 800a8bc:	6873      	ldr	r3, [r6, #4]
 800a8be:	3b01      	subs	r3, #1
 800a8c0:	d504      	bpl.n	800a8cc <__sfp+0x2c>
 800a8c2:	6833      	ldr	r3, [r6, #0]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d022      	beq.n	800a90e <__sfp+0x6e>
 800a8c8:	6836      	ldr	r6, [r6, #0]
 800a8ca:	e7f6      	b.n	800a8ba <__sfp+0x1a>
 800a8cc:	220c      	movs	r2, #12
 800a8ce:	5ea5      	ldrsh	r5, [r4, r2]
 800a8d0:	2d00      	cmp	r5, #0
 800a8d2:	d11a      	bne.n	800a90a <__sfp+0x6a>
 800a8d4:	0020      	movs	r0, r4
 800a8d6:	4b15      	ldr	r3, [pc, #84]	; (800a92c <__sfp+0x8c>)
 800a8d8:	3058      	adds	r0, #88	; 0x58
 800a8da:	60e3      	str	r3, [r4, #12]
 800a8dc:	6665      	str	r5, [r4, #100]	; 0x64
 800a8de:	f000 f847 	bl	800a970 <__retarget_lock_init_recursive>
 800a8e2:	f7ff ff8d 	bl	800a800 <__sfp_lock_release>
 800a8e6:	0020      	movs	r0, r4
 800a8e8:	2208      	movs	r2, #8
 800a8ea:	0029      	movs	r1, r5
 800a8ec:	6025      	str	r5, [r4, #0]
 800a8ee:	60a5      	str	r5, [r4, #8]
 800a8f0:	6065      	str	r5, [r4, #4]
 800a8f2:	6125      	str	r5, [r4, #16]
 800a8f4:	6165      	str	r5, [r4, #20]
 800a8f6:	61a5      	str	r5, [r4, #24]
 800a8f8:	305c      	adds	r0, #92	; 0x5c
 800a8fa:	f7fb fc9d 	bl	8006238 <memset>
 800a8fe:	6365      	str	r5, [r4, #52]	; 0x34
 800a900:	63a5      	str	r5, [r4, #56]	; 0x38
 800a902:	64a5      	str	r5, [r4, #72]	; 0x48
 800a904:	64e5      	str	r5, [r4, #76]	; 0x4c
 800a906:	0020      	movs	r0, r4
 800a908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a90a:	3468      	adds	r4, #104	; 0x68
 800a90c:	e7d7      	b.n	800a8be <__sfp+0x1e>
 800a90e:	2104      	movs	r1, #4
 800a910:	0038      	movs	r0, r7
 800a912:	f7ff ff57 	bl	800a7c4 <__sfmoreglue>
 800a916:	1e04      	subs	r4, r0, #0
 800a918:	6030      	str	r0, [r6, #0]
 800a91a:	d1d5      	bne.n	800a8c8 <__sfp+0x28>
 800a91c:	f7ff ff70 	bl	800a800 <__sfp_lock_release>
 800a920:	230c      	movs	r3, #12
 800a922:	603b      	str	r3, [r7, #0]
 800a924:	e7ef      	b.n	800a906 <__sfp+0x66>
 800a926:	46c0      	nop			; (mov r8, r8)
 800a928:	0800aee8 	.word	0x0800aee8
 800a92c:	ffff0001 	.word	0xffff0001

0800a930 <_fwalk_reent>:
 800a930:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a932:	0004      	movs	r4, r0
 800a934:	0006      	movs	r6, r0
 800a936:	2700      	movs	r7, #0
 800a938:	9101      	str	r1, [sp, #4]
 800a93a:	3448      	adds	r4, #72	; 0x48
 800a93c:	6863      	ldr	r3, [r4, #4]
 800a93e:	68a5      	ldr	r5, [r4, #8]
 800a940:	9300      	str	r3, [sp, #0]
 800a942:	9b00      	ldr	r3, [sp, #0]
 800a944:	3b01      	subs	r3, #1
 800a946:	9300      	str	r3, [sp, #0]
 800a948:	d504      	bpl.n	800a954 <_fwalk_reent+0x24>
 800a94a:	6824      	ldr	r4, [r4, #0]
 800a94c:	2c00      	cmp	r4, #0
 800a94e:	d1f5      	bne.n	800a93c <_fwalk_reent+0xc>
 800a950:	0038      	movs	r0, r7
 800a952:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a954:	89ab      	ldrh	r3, [r5, #12]
 800a956:	2b01      	cmp	r3, #1
 800a958:	d908      	bls.n	800a96c <_fwalk_reent+0x3c>
 800a95a:	220e      	movs	r2, #14
 800a95c:	5eab      	ldrsh	r3, [r5, r2]
 800a95e:	3301      	adds	r3, #1
 800a960:	d004      	beq.n	800a96c <_fwalk_reent+0x3c>
 800a962:	0029      	movs	r1, r5
 800a964:	0030      	movs	r0, r6
 800a966:	9b01      	ldr	r3, [sp, #4]
 800a968:	4798      	blx	r3
 800a96a:	4307      	orrs	r7, r0
 800a96c:	3568      	adds	r5, #104	; 0x68
 800a96e:	e7e8      	b.n	800a942 <_fwalk_reent+0x12>

0800a970 <__retarget_lock_init_recursive>:
 800a970:	4770      	bx	lr

0800a972 <__retarget_lock_acquire_recursive>:
 800a972:	4770      	bx	lr

0800a974 <__retarget_lock_release_recursive>:
 800a974:	4770      	bx	lr
	...

0800a978 <__swhatbuf_r>:
 800a978:	b570      	push	{r4, r5, r6, lr}
 800a97a:	000e      	movs	r6, r1
 800a97c:	001d      	movs	r5, r3
 800a97e:	230e      	movs	r3, #14
 800a980:	5ec9      	ldrsh	r1, [r1, r3]
 800a982:	0014      	movs	r4, r2
 800a984:	b096      	sub	sp, #88	; 0x58
 800a986:	2900      	cmp	r1, #0
 800a988:	da07      	bge.n	800a99a <__swhatbuf_r+0x22>
 800a98a:	2300      	movs	r3, #0
 800a98c:	602b      	str	r3, [r5, #0]
 800a98e:	89b3      	ldrh	r3, [r6, #12]
 800a990:	061b      	lsls	r3, r3, #24
 800a992:	d411      	bmi.n	800a9b8 <__swhatbuf_r+0x40>
 800a994:	2380      	movs	r3, #128	; 0x80
 800a996:	00db      	lsls	r3, r3, #3
 800a998:	e00f      	b.n	800a9ba <__swhatbuf_r+0x42>
 800a99a:	466a      	mov	r2, sp
 800a99c:	f000 f91c 	bl	800abd8 <_fstat_r>
 800a9a0:	2800      	cmp	r0, #0
 800a9a2:	dbf2      	blt.n	800a98a <__swhatbuf_r+0x12>
 800a9a4:	23f0      	movs	r3, #240	; 0xf0
 800a9a6:	9901      	ldr	r1, [sp, #4]
 800a9a8:	021b      	lsls	r3, r3, #8
 800a9aa:	4019      	ands	r1, r3
 800a9ac:	4b05      	ldr	r3, [pc, #20]	; (800a9c4 <__swhatbuf_r+0x4c>)
 800a9ae:	18c9      	adds	r1, r1, r3
 800a9b0:	424b      	negs	r3, r1
 800a9b2:	4159      	adcs	r1, r3
 800a9b4:	6029      	str	r1, [r5, #0]
 800a9b6:	e7ed      	b.n	800a994 <__swhatbuf_r+0x1c>
 800a9b8:	2340      	movs	r3, #64	; 0x40
 800a9ba:	2000      	movs	r0, #0
 800a9bc:	6023      	str	r3, [r4, #0]
 800a9be:	b016      	add	sp, #88	; 0x58
 800a9c0:	bd70      	pop	{r4, r5, r6, pc}
 800a9c2:	46c0      	nop			; (mov r8, r8)
 800a9c4:	ffffe000 	.word	0xffffe000

0800a9c8 <__smakebuf_r>:
 800a9c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a9ca:	2602      	movs	r6, #2
 800a9cc:	898b      	ldrh	r3, [r1, #12]
 800a9ce:	0005      	movs	r5, r0
 800a9d0:	000c      	movs	r4, r1
 800a9d2:	4233      	tst	r3, r6
 800a9d4:	d006      	beq.n	800a9e4 <__smakebuf_r+0x1c>
 800a9d6:	0023      	movs	r3, r4
 800a9d8:	3347      	adds	r3, #71	; 0x47
 800a9da:	6023      	str	r3, [r4, #0]
 800a9dc:	6123      	str	r3, [r4, #16]
 800a9de:	2301      	movs	r3, #1
 800a9e0:	6163      	str	r3, [r4, #20]
 800a9e2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800a9e4:	466a      	mov	r2, sp
 800a9e6:	ab01      	add	r3, sp, #4
 800a9e8:	f7ff ffc6 	bl	800a978 <__swhatbuf_r>
 800a9ec:	9900      	ldr	r1, [sp, #0]
 800a9ee:	0007      	movs	r7, r0
 800a9f0:	0028      	movs	r0, r5
 800a9f2:	f7ff f949 	bl	8009c88 <_malloc_r>
 800a9f6:	2800      	cmp	r0, #0
 800a9f8:	d108      	bne.n	800aa0c <__smakebuf_r+0x44>
 800a9fa:	220c      	movs	r2, #12
 800a9fc:	5ea3      	ldrsh	r3, [r4, r2]
 800a9fe:	059a      	lsls	r2, r3, #22
 800aa00:	d4ef      	bmi.n	800a9e2 <__smakebuf_r+0x1a>
 800aa02:	2203      	movs	r2, #3
 800aa04:	4393      	bics	r3, r2
 800aa06:	431e      	orrs	r6, r3
 800aa08:	81a6      	strh	r6, [r4, #12]
 800aa0a:	e7e4      	b.n	800a9d6 <__smakebuf_r+0xe>
 800aa0c:	4b0f      	ldr	r3, [pc, #60]	; (800aa4c <__smakebuf_r+0x84>)
 800aa0e:	62ab      	str	r3, [r5, #40]	; 0x28
 800aa10:	2380      	movs	r3, #128	; 0x80
 800aa12:	89a2      	ldrh	r2, [r4, #12]
 800aa14:	6020      	str	r0, [r4, #0]
 800aa16:	4313      	orrs	r3, r2
 800aa18:	81a3      	strh	r3, [r4, #12]
 800aa1a:	9b00      	ldr	r3, [sp, #0]
 800aa1c:	6120      	str	r0, [r4, #16]
 800aa1e:	6163      	str	r3, [r4, #20]
 800aa20:	9b01      	ldr	r3, [sp, #4]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d00d      	beq.n	800aa42 <__smakebuf_r+0x7a>
 800aa26:	0028      	movs	r0, r5
 800aa28:	230e      	movs	r3, #14
 800aa2a:	5ee1      	ldrsh	r1, [r4, r3]
 800aa2c:	f000 f8e6 	bl	800abfc <_isatty_r>
 800aa30:	2800      	cmp	r0, #0
 800aa32:	d006      	beq.n	800aa42 <__smakebuf_r+0x7a>
 800aa34:	2203      	movs	r2, #3
 800aa36:	89a3      	ldrh	r3, [r4, #12]
 800aa38:	4393      	bics	r3, r2
 800aa3a:	001a      	movs	r2, r3
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	4313      	orrs	r3, r2
 800aa40:	81a3      	strh	r3, [r4, #12]
 800aa42:	89a0      	ldrh	r0, [r4, #12]
 800aa44:	4307      	orrs	r7, r0
 800aa46:	81a7      	strh	r7, [r4, #12]
 800aa48:	e7cb      	b.n	800a9e2 <__smakebuf_r+0x1a>
 800aa4a:	46c0      	nop			; (mov r8, r8)
 800aa4c:	0800a7b5 	.word	0x0800a7b5

0800aa50 <_malloc_usable_size_r>:
 800aa50:	1f0b      	subs	r3, r1, #4
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	1f18      	subs	r0, r3, #4
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	da01      	bge.n	800aa5e <_malloc_usable_size_r+0xe>
 800aa5a:	580b      	ldr	r3, [r1, r0]
 800aa5c:	18c0      	adds	r0, r0, r3
 800aa5e:	4770      	bx	lr

0800aa60 <_raise_r>:
 800aa60:	b570      	push	{r4, r5, r6, lr}
 800aa62:	0004      	movs	r4, r0
 800aa64:	000d      	movs	r5, r1
 800aa66:	291f      	cmp	r1, #31
 800aa68:	d904      	bls.n	800aa74 <_raise_r+0x14>
 800aa6a:	2316      	movs	r3, #22
 800aa6c:	6003      	str	r3, [r0, #0]
 800aa6e:	2001      	movs	r0, #1
 800aa70:	4240      	negs	r0, r0
 800aa72:	bd70      	pop	{r4, r5, r6, pc}
 800aa74:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d004      	beq.n	800aa84 <_raise_r+0x24>
 800aa7a:	008a      	lsls	r2, r1, #2
 800aa7c:	189b      	adds	r3, r3, r2
 800aa7e:	681a      	ldr	r2, [r3, #0]
 800aa80:	2a00      	cmp	r2, #0
 800aa82:	d108      	bne.n	800aa96 <_raise_r+0x36>
 800aa84:	0020      	movs	r0, r4
 800aa86:	f000 f831 	bl	800aaec <_getpid_r>
 800aa8a:	002a      	movs	r2, r5
 800aa8c:	0001      	movs	r1, r0
 800aa8e:	0020      	movs	r0, r4
 800aa90:	f000 f81a 	bl	800aac8 <_kill_r>
 800aa94:	e7ed      	b.n	800aa72 <_raise_r+0x12>
 800aa96:	2000      	movs	r0, #0
 800aa98:	2a01      	cmp	r2, #1
 800aa9a:	d0ea      	beq.n	800aa72 <_raise_r+0x12>
 800aa9c:	1c51      	adds	r1, r2, #1
 800aa9e:	d103      	bne.n	800aaa8 <_raise_r+0x48>
 800aaa0:	2316      	movs	r3, #22
 800aaa2:	3001      	adds	r0, #1
 800aaa4:	6023      	str	r3, [r4, #0]
 800aaa6:	e7e4      	b.n	800aa72 <_raise_r+0x12>
 800aaa8:	2400      	movs	r4, #0
 800aaaa:	0028      	movs	r0, r5
 800aaac:	601c      	str	r4, [r3, #0]
 800aaae:	4790      	blx	r2
 800aab0:	0020      	movs	r0, r4
 800aab2:	e7de      	b.n	800aa72 <_raise_r+0x12>

0800aab4 <raise>:
 800aab4:	b510      	push	{r4, lr}
 800aab6:	4b03      	ldr	r3, [pc, #12]	; (800aac4 <raise+0x10>)
 800aab8:	0001      	movs	r1, r0
 800aaba:	6818      	ldr	r0, [r3, #0]
 800aabc:	f7ff ffd0 	bl	800aa60 <_raise_r>
 800aac0:	bd10      	pop	{r4, pc}
 800aac2:	46c0      	nop			; (mov r8, r8)
 800aac4:	20000014 	.word	0x20000014

0800aac8 <_kill_r>:
 800aac8:	2300      	movs	r3, #0
 800aaca:	b570      	push	{r4, r5, r6, lr}
 800aacc:	4d06      	ldr	r5, [pc, #24]	; (800aae8 <_kill_r+0x20>)
 800aace:	0004      	movs	r4, r0
 800aad0:	0008      	movs	r0, r1
 800aad2:	0011      	movs	r1, r2
 800aad4:	602b      	str	r3, [r5, #0]
 800aad6:	f7fb f947 	bl	8005d68 <_kill>
 800aada:	1c43      	adds	r3, r0, #1
 800aadc:	d103      	bne.n	800aae6 <_kill_r+0x1e>
 800aade:	682b      	ldr	r3, [r5, #0]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d000      	beq.n	800aae6 <_kill_r+0x1e>
 800aae4:	6023      	str	r3, [r4, #0]
 800aae6:	bd70      	pop	{r4, r5, r6, pc}
 800aae8:	20000888 	.word	0x20000888

0800aaec <_getpid_r>:
 800aaec:	b510      	push	{r4, lr}
 800aaee:	f7fb f939 	bl	8005d64 <_getpid>
 800aaf2:	bd10      	pop	{r4, pc}

0800aaf4 <__sread>:
 800aaf4:	b570      	push	{r4, r5, r6, lr}
 800aaf6:	000c      	movs	r4, r1
 800aaf8:	250e      	movs	r5, #14
 800aafa:	5f49      	ldrsh	r1, [r1, r5]
 800aafc:	f000 f8a4 	bl	800ac48 <_read_r>
 800ab00:	2800      	cmp	r0, #0
 800ab02:	db03      	blt.n	800ab0c <__sread+0x18>
 800ab04:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ab06:	181b      	adds	r3, r3, r0
 800ab08:	6563      	str	r3, [r4, #84]	; 0x54
 800ab0a:	bd70      	pop	{r4, r5, r6, pc}
 800ab0c:	89a3      	ldrh	r3, [r4, #12]
 800ab0e:	4a02      	ldr	r2, [pc, #8]	; (800ab18 <__sread+0x24>)
 800ab10:	4013      	ands	r3, r2
 800ab12:	81a3      	strh	r3, [r4, #12]
 800ab14:	e7f9      	b.n	800ab0a <__sread+0x16>
 800ab16:	46c0      	nop			; (mov r8, r8)
 800ab18:	ffffefff 	.word	0xffffefff

0800ab1c <__swrite>:
 800ab1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab1e:	001f      	movs	r7, r3
 800ab20:	898b      	ldrh	r3, [r1, #12]
 800ab22:	0005      	movs	r5, r0
 800ab24:	000c      	movs	r4, r1
 800ab26:	0016      	movs	r6, r2
 800ab28:	05db      	lsls	r3, r3, #23
 800ab2a:	d505      	bpl.n	800ab38 <__swrite+0x1c>
 800ab2c:	230e      	movs	r3, #14
 800ab2e:	5ec9      	ldrsh	r1, [r1, r3]
 800ab30:	2200      	movs	r2, #0
 800ab32:	2302      	movs	r3, #2
 800ab34:	f000 f874 	bl	800ac20 <_lseek_r>
 800ab38:	89a3      	ldrh	r3, [r4, #12]
 800ab3a:	4a05      	ldr	r2, [pc, #20]	; (800ab50 <__swrite+0x34>)
 800ab3c:	0028      	movs	r0, r5
 800ab3e:	4013      	ands	r3, r2
 800ab40:	81a3      	strh	r3, [r4, #12]
 800ab42:	0032      	movs	r2, r6
 800ab44:	230e      	movs	r3, #14
 800ab46:	5ee1      	ldrsh	r1, [r4, r3]
 800ab48:	003b      	movs	r3, r7
 800ab4a:	f000 f81f 	bl	800ab8c <_write_r>
 800ab4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab50:	ffffefff 	.word	0xffffefff

0800ab54 <__sseek>:
 800ab54:	b570      	push	{r4, r5, r6, lr}
 800ab56:	000c      	movs	r4, r1
 800ab58:	250e      	movs	r5, #14
 800ab5a:	5f49      	ldrsh	r1, [r1, r5]
 800ab5c:	f000 f860 	bl	800ac20 <_lseek_r>
 800ab60:	89a3      	ldrh	r3, [r4, #12]
 800ab62:	1c42      	adds	r2, r0, #1
 800ab64:	d103      	bne.n	800ab6e <__sseek+0x1a>
 800ab66:	4a05      	ldr	r2, [pc, #20]	; (800ab7c <__sseek+0x28>)
 800ab68:	4013      	ands	r3, r2
 800ab6a:	81a3      	strh	r3, [r4, #12]
 800ab6c:	bd70      	pop	{r4, r5, r6, pc}
 800ab6e:	2280      	movs	r2, #128	; 0x80
 800ab70:	0152      	lsls	r2, r2, #5
 800ab72:	4313      	orrs	r3, r2
 800ab74:	81a3      	strh	r3, [r4, #12]
 800ab76:	6560      	str	r0, [r4, #84]	; 0x54
 800ab78:	e7f8      	b.n	800ab6c <__sseek+0x18>
 800ab7a:	46c0      	nop			; (mov r8, r8)
 800ab7c:	ffffefff 	.word	0xffffefff

0800ab80 <__sclose>:
 800ab80:	b510      	push	{r4, lr}
 800ab82:	230e      	movs	r3, #14
 800ab84:	5ec9      	ldrsh	r1, [r1, r3]
 800ab86:	f000 f815 	bl	800abb4 <_close_r>
 800ab8a:	bd10      	pop	{r4, pc}

0800ab8c <_write_r>:
 800ab8c:	b570      	push	{r4, r5, r6, lr}
 800ab8e:	0004      	movs	r4, r0
 800ab90:	0008      	movs	r0, r1
 800ab92:	0011      	movs	r1, r2
 800ab94:	001a      	movs	r2, r3
 800ab96:	2300      	movs	r3, #0
 800ab98:	4d05      	ldr	r5, [pc, #20]	; (800abb0 <_write_r+0x24>)
 800ab9a:	602b      	str	r3, [r5, #0]
 800ab9c:	f7fb f900 	bl	8005da0 <_write>
 800aba0:	1c43      	adds	r3, r0, #1
 800aba2:	d103      	bne.n	800abac <_write_r+0x20>
 800aba4:	682b      	ldr	r3, [r5, #0]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d000      	beq.n	800abac <_write_r+0x20>
 800abaa:	6023      	str	r3, [r4, #0]
 800abac:	bd70      	pop	{r4, r5, r6, pc}
 800abae:	46c0      	nop			; (mov r8, r8)
 800abb0:	20000888 	.word	0x20000888

0800abb4 <_close_r>:
 800abb4:	2300      	movs	r3, #0
 800abb6:	b570      	push	{r4, r5, r6, lr}
 800abb8:	4d06      	ldr	r5, [pc, #24]	; (800abd4 <_close_r+0x20>)
 800abba:	0004      	movs	r4, r0
 800abbc:	0008      	movs	r0, r1
 800abbe:	602b      	str	r3, [r5, #0]
 800abc0:	f7fb f8fc 	bl	8005dbc <_close>
 800abc4:	1c43      	adds	r3, r0, #1
 800abc6:	d103      	bne.n	800abd0 <_close_r+0x1c>
 800abc8:	682b      	ldr	r3, [r5, #0]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d000      	beq.n	800abd0 <_close_r+0x1c>
 800abce:	6023      	str	r3, [r4, #0]
 800abd0:	bd70      	pop	{r4, r5, r6, pc}
 800abd2:	46c0      	nop			; (mov r8, r8)
 800abd4:	20000888 	.word	0x20000888

0800abd8 <_fstat_r>:
 800abd8:	2300      	movs	r3, #0
 800abda:	b570      	push	{r4, r5, r6, lr}
 800abdc:	4d06      	ldr	r5, [pc, #24]	; (800abf8 <_fstat_r+0x20>)
 800abde:	0004      	movs	r4, r0
 800abe0:	0008      	movs	r0, r1
 800abe2:	0011      	movs	r1, r2
 800abe4:	602b      	str	r3, [r5, #0]
 800abe6:	f7fb f8ed 	bl	8005dc4 <_fstat>
 800abea:	1c43      	adds	r3, r0, #1
 800abec:	d103      	bne.n	800abf6 <_fstat_r+0x1e>
 800abee:	682b      	ldr	r3, [r5, #0]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d000      	beq.n	800abf6 <_fstat_r+0x1e>
 800abf4:	6023      	str	r3, [r4, #0]
 800abf6:	bd70      	pop	{r4, r5, r6, pc}
 800abf8:	20000888 	.word	0x20000888

0800abfc <_isatty_r>:
 800abfc:	2300      	movs	r3, #0
 800abfe:	b570      	push	{r4, r5, r6, lr}
 800ac00:	4d06      	ldr	r5, [pc, #24]	; (800ac1c <_isatty_r+0x20>)
 800ac02:	0004      	movs	r4, r0
 800ac04:	0008      	movs	r0, r1
 800ac06:	602b      	str	r3, [r5, #0]
 800ac08:	f7fb f8e2 	bl	8005dd0 <_isatty>
 800ac0c:	1c43      	adds	r3, r0, #1
 800ac0e:	d103      	bne.n	800ac18 <_isatty_r+0x1c>
 800ac10:	682b      	ldr	r3, [r5, #0]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d000      	beq.n	800ac18 <_isatty_r+0x1c>
 800ac16:	6023      	str	r3, [r4, #0]
 800ac18:	bd70      	pop	{r4, r5, r6, pc}
 800ac1a:	46c0      	nop			; (mov r8, r8)
 800ac1c:	20000888 	.word	0x20000888

0800ac20 <_lseek_r>:
 800ac20:	b570      	push	{r4, r5, r6, lr}
 800ac22:	0004      	movs	r4, r0
 800ac24:	0008      	movs	r0, r1
 800ac26:	0011      	movs	r1, r2
 800ac28:	001a      	movs	r2, r3
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	4d05      	ldr	r5, [pc, #20]	; (800ac44 <_lseek_r+0x24>)
 800ac2e:	602b      	str	r3, [r5, #0]
 800ac30:	f7fb f8d0 	bl	8005dd4 <_lseek>
 800ac34:	1c43      	adds	r3, r0, #1
 800ac36:	d103      	bne.n	800ac40 <_lseek_r+0x20>
 800ac38:	682b      	ldr	r3, [r5, #0]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d000      	beq.n	800ac40 <_lseek_r+0x20>
 800ac3e:	6023      	str	r3, [r4, #0]
 800ac40:	bd70      	pop	{r4, r5, r6, pc}
 800ac42:	46c0      	nop			; (mov r8, r8)
 800ac44:	20000888 	.word	0x20000888

0800ac48 <_read_r>:
 800ac48:	b570      	push	{r4, r5, r6, lr}
 800ac4a:	0004      	movs	r4, r0
 800ac4c:	0008      	movs	r0, r1
 800ac4e:	0011      	movs	r1, r2
 800ac50:	001a      	movs	r2, r3
 800ac52:	2300      	movs	r3, #0
 800ac54:	4d05      	ldr	r5, [pc, #20]	; (800ac6c <_read_r+0x24>)
 800ac56:	602b      	str	r3, [r5, #0]
 800ac58:	f7fb f894 	bl	8005d84 <_read>
 800ac5c:	1c43      	adds	r3, r0, #1
 800ac5e:	d103      	bne.n	800ac68 <_read_r+0x20>
 800ac60:	682b      	ldr	r3, [r5, #0]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d000      	beq.n	800ac68 <_read_r+0x20>
 800ac66:	6023      	str	r3, [r4, #0]
 800ac68:	bd70      	pop	{r4, r5, r6, pc}
 800ac6a:	46c0      	nop			; (mov r8, r8)
 800ac6c:	20000888 	.word	0x20000888

0800ac70 <_init>:
 800ac70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac72:	46c0      	nop			; (mov r8, r8)
 800ac74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac76:	bc08      	pop	{r3}
 800ac78:	469e      	mov	lr, r3
 800ac7a:	4770      	bx	lr

0800ac7c <_fini>:
 800ac7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac7e:	46c0      	nop			; (mov r8, r8)
 800ac80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac82:	bc08      	pop	{r3}
 800ac84:	469e      	mov	lr, r3
 800ac86:	4770      	bx	lr
